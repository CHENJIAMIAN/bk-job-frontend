{"version":3,"file":"static/css/1065.eb4165efe81afd7874d3.css","mappings":"AAoLA,kCAEA,UADA,oBAEA,sBA0DA,CAxDA,6CACA,SACA,CAEA,yCASA,mBADA,gCADA,WANA,aAGA,eACA,gBACA,iBAHA,mBADA,cAmCA,CA1BA,sJASA,kBAHA,eAFA,YAGA,iBAFA,gBAGA,kBALA,UAOA,CAEA,kDAEA,gCADA,aAEA,CAEA,kDAEA,sCADA,aAEA,CAEA,kDAEA,+BADA,aAEA,CAGA,0DACA,aACA,eAMA,CAJA,yEAEA,uBADA,kBAEA,CAGA,6CACA,gBACA,CC1EA,0BAEA,gBADA,YA0DA,CAvDA,uCAKA,mBAFA,eACA,2BAHA,kBACA,YA+CA,CA1CA,6CAMA,mBACA,WAFA,YAJA,kBAEA,QADA,MAEA,SAIA,CAEA,qDAMA,gCAFA,cACA,eAFA,eAFA,kBACA,SA6BA,CAvBA,oEAIA,mBAHA,aACA,YACA,qBAEA,CAEA,4DACA,eACA,CAEA,+DACA,iBACA,CAEA,gEAEA,cADA,cAEA,CAEA,iEACA,gBACA,CAIA,wCACA,OACA,0BACA,CC5IA,6DACA,SACA,CAEA,6FACA,QACA,CAEA,+DACA,YACA,CAGA,+CACA,gBACA,CAEA,+EAEA,YACA,CC4mBA,4BACA,GACA,mBACA,CAEA,GACA,uBACA,CACA,CAGA,0CASA,mBAHA,mBAEA,4CAHA,cAJA,aAGA,eAFA,YACA,cA6BA,CArBA,qDACA,eAKA,CAHA,4DACA,aACA,CAGA,uDACA,gBAWA,CATA,sIAGA,gBADA,iBAEA,CAEA,kEACA,aACA,CAKA,+CAEA,yBADA,yBAEA,CAIA,uFACA,SACA,CAIA,uDACA,kBACA,CAEA,sDACA,eACA,SACA,CAGA,2DACA,cACA,CAGA,0DAEA,mBADA,YA6BA,CA1BA,uEACA,gBAkBA,CAhBA,oFACA,aACA,CAEA,oFAEA,8CADA,aAEA,CAEA,oFACA,aACA,CAEA,mFACA,aACA,CAGA,2EAGA,iCADA,eADA,kBAGA,CAIA,sCAMA,mBACA,kBAFA,cAFA,eAFA,YAGA,iBAFA,aAWA,CAJA,gDAEA,mBADA,aAEA,CAGA,6CAEA,8CADA,aAEA,CAEA,wCAOA,mBAGA,gBAPA,SAQA,wCANA,aAGA,YAFA,yBAFA,OAKA,mBARA,eACA,OAUA","sources":["webpack://job/./src/views/task-manage/common/plan/confirm-cron/cron-detail.vue","webpack://job/./src/views/task-manage/common/plan/confirm-cron/index.vue","webpack://job/./src/views/task-manage/sync-plan-batch/components/confirm-cron.vue","webpack://job/./src/views/task-manage/sync-plan-batch/index.vue"],"sourcesContent":["\r\n\r\n<template>\r\n    <permission-section>\r\n        <smart-action offset-target=\"variable-value\">\r\n            <div\r\n                class=\"cron-job-detail\"\r\n                :class=\"{\r\n                    'is-loading': isLoading,\r\n                }\"\r\n                v-bkloading=\"{ isLoading }\">\r\n                <bk-alert :title=\"'同步执行方案需要重新确认定时任务的全局变量，不使用的定时任务可以直接停用。'\" />\r\n                <div class=\"title\">\r\n                    <span>「{{ info.name }}」{{ '的全局变量' }}</span>\r\n                    <span v-if=\"!data.enable\" class=\"disable\">{{ '已停用' }}</span>\r\n                    <span v-else-if=\"data.hasConfirm\" class=\"confirm\">{{ '已确认' }}</span>\r\n                    <span v-else class=\"waiting\">{{ '待确认' }}</span>\r\n                </div>\r\n                <div>\r\n                    <global-variable-layout v-if=\"!isLoading\">\r\n                        <global-variable\r\n                            v-for=\"variable in info.variableValue\"\r\n                            ref=\"variable\"\r\n                            :type=\"variable.type\"\r\n                            :key=\"variable.id\"\r\n                            :readonly=\"readonly\"\r\n                            :data=\"variable\" />\r\n                    </global-variable-layout>\r\n                    <empty v-if=\"isEmpty\">\r\n                        <p>{{ '无关联的全局变量' }}</p>\r\n                        <p style=\"margin-top: 8px;\">{{ '已直接确认' }}</p>\r\n                    </empty>\r\n                </div>\r\n            </div>\r\n            <template v-if=\"!isLoading && !isEmpty\" #action>\r\n                <bk-button\r\n                    v-if=\"isEditing\"\r\n                    theme=\"primary\"\r\n                    class=\"mr10\"\r\n                    \r\n                    @click=\"handleSubmit\">\r\n                    {{ '确认' }}\r\n                </bk-button>\r\n                <bk-button\r\n                    v-if=\"isEditing\"\r\n                    class=\"mr10\"\r\n                    \r\n                    @click=\"handleReset\">\r\n                    {{ '重置' }}\r\n                </bk-button>\r\n                <bk-button\r\n                    v-else\r\n                    theme=\"primary\"\r\n                    class=\"mr10\"\r\n                    \r\n                    @click=\"handleToggleEdit\">\r\n                    {{ '编辑' }}\r\n                </bk-button>\r\n            </template>\r\n        </smart-action>\r\n    </permission-section>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n       import TimeTaskService from '@service/time-task';\r\n    import PermissionSection from '@components/apply-permission/apply-section';\r\n    import GlobalVariableLayout from '@components/global-variable/layout';\r\n    import GlobalVariable from '@components/global-variable/edit';\r\n    import Empty from '@components/empty';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            PermissionSection,\r\n            GlobalVariableLayout,\r\n            GlobalVariable,\r\n            Empty,\r\n        },\r\n        props: {\r\n            data: {\r\n                type: Object,\r\n                default: () => ({}),\r\n            },\r\n            variableList: {\r\n                type: Array,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: false,\r\n                isEmpty: false,\r\n                isEditing: false,\r\n                isSubmiting: false,\r\n                info: {\r\n                    name: '',\r\n                    enable: true,\r\n                    hasConfirm: false,\r\n                    variableValue: [],\r\n                },\r\n            };\r\n        },\r\n        computed: {\r\n            readonly () {\r\n                if (!this.data.enable) {\r\n                    return true;\r\n                }\r\n                return this.isEditing ? false : this.info.hasConfirm;\r\n            },\r\n        },\r\n        created () {\r\n            if (!this.data.id) {\r\n                return;\r\n            }\r\n            this.info = { ...this.data };\r\n            this.isEditing = !this.info.hasConfirm;\r\n            // 没有确认的定时任务，通过接口获取定时任务的name和变量\r\n            // 默认展示模板的变量\r\n            if (!this.info.hasConfirm) {\r\n                this.info.variableValue = Object.freeze(_.cloneDeep(this.variableList));\r\n                this.fetchData();\r\n            }\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 获取定时任务详情\r\n             */\r\n            fetchData () {\r\n                this.isLoading = true;\r\n                TimeTaskService.getDetail({\r\n                    id: this.data.id,\r\n                }, {\r\n                    permission: 'catch',\r\n                }).then(({ name, variableValue }) => {\r\n                    this.info.name = name;\r\n                    // 作业模板中没有变量\r\n                    if (this.variableList.length < 1) {\r\n                        this.isEmpty = true;\r\n                        this.$emit('on-change', []);\r\n                    }\r\n                    // 同步作业模板中变量到定时任务\r\n                    // 作业模板和定时任务相同的变量——保留定时任务中的变量值\r\n                    const crontabVariableMap = variableValue.reduce((result, item) => {\r\n                        result[item.id] = item;\r\n                        return result;\r\n                    }, {});\r\n                    this.info.variableValue.forEach((variable) => {\r\n                        if (crontabVariableMap[variable.id]) {\r\n                            const { value, targetValue } = crontabVariableMap[variable.id];\r\n                            variable.defaultValue = value;\r\n                            variable.defaultTargetValue = targetValue;\r\n                        }\r\n                    });\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            handleToggleEdit () {\r\n                this.isEditing = true;\r\n                this.$emit('on-update-confirm', false);\r\n            },\r\n            handleSubmit () {\r\n                Promise.all(this.$refs.variable.map(item => item.validate()))\r\n                    .then((variableValue) => {\r\n                        window.changeAlert = false;\r\n                        this.isEditing = false;\r\n                        this.info.hasConfirm = true;\r\n                        this.info.variableValue = Object.freeze(variableValue);\r\n                        this.messageSuccess('定时任务确认成功');\r\n                        this.$emit('on-change', Object.freeze(variableValue));\r\n                    });\r\n            },\r\n            handleReset () {\r\n                this.$refs.variable.forEach(item => item.reset());\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    .cron-job-detail {\r\n        padding: 20px 40px 0;\r\n        opacity: 100%;\r\n        transition: opacity 0.1s;\r\n\r\n        &.is-loading {\r\n            opacity: 0%;\r\n        }\r\n\r\n        .title {\r\n            display: flex;\r\n            margin-top: 2px;\r\n            margin-bottom: 30px;\r\n            font-size: 18px;\r\n            font-weight: bold;\r\n            line-height: 54px;\r\n            color: #000;\r\n            border-bottom: 1px solid #f0f1f5;\r\n            align-items: center;\r\n\r\n            .disable,\r\n            .confirm,\r\n            .waiting {\r\n                width: 42px;\r\n                height: 17px;\r\n                margin-left: 8px;\r\n                font-size: 11px;\r\n                line-height: 17px;\r\n                text-align: center;\r\n                border-radius: 2px;\r\n            }\r\n\r\n            .disable {\r\n                color: #63656e;\r\n                background: rgb(99 101 110 / 14%);\r\n            }\r\n\r\n            .confirm {\r\n                color: rgb(45 203 157);\r\n                background-color: rgb(45 203 157 / 14%);\r\n            }\r\n\r\n            .waiting {\r\n                color: #ff9c01;\r\n                background: rgb(255 156 1 / 14%);\r\n            }\r\n        }\r\n\r\n        .global-variable-action {\r\n            display: flex;\r\n            margin-top: 10px;\r\n\r\n            .variable-name {\r\n                padding-right: 28px;\r\n                box-sizing: content-box;\r\n            }\r\n        }\r\n\r\n        .job-empty {\r\n            margin-top: 140px;\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <div class=\"plan-manage-confirm-cron\" :empty=\"isEmpty\" :loading=\"isLoading\">\r\n        <div class=\"layout-left\">\r\n            <scroll-faker>\r\n                <div\r\n                    class=\"cron-job-tab\"\r\n                    v-for=\"cronJobItem in timeTaskList\"\r\n                    :class=\"{ active: cronJobItem.id === currentTaskId }\"\r\n                    :key=\"cronJobItem.id\">\r\n                    <auth-component\r\n                        :permission=\"cronJobItem.canManage\"\r\n                        auth=\"cron/view\"\r\n                        :resource-id=\"cronJobItem.id\">\r\n                        <div class=\"tab-container\" @click=\"handleTabChange(cronJobItem.id)\">\r\n                            <span class=\"job-name\">{{ cronJobItem.name }}</span>\r\n                            <Icon v-if=\"cronJobItem.hasConfirm\" type=\"check\" class=\"job-check\" />\r\n                            <div @click.stop=\"\">\r\n                                <bk-switcher\r\n                                    :value=\"cronJobItem.enable\"\r\n                                    class=\"job-switch\"\r\n                                    size=\"small\"\r\n                                    theme=\"primary\"\r\n                                    @change=\"value => handleEnableChange(cronJobItem.id, value)\" />\r\n                            </div>\r\n                        </div>\r\n                        <div slot=\"forbid\" class=\"tab-container\">\r\n                            <span class=\"job-name\">{{ cronJobItem.name }}</span>\r\n                            <Icon v-if=\"cronJobItem.hasConfirm\" type=\"check\" class=\"job-check\" />\r\n                            <div @click.stop=\"\">\r\n                                <bk-switcher\r\n                                    :value=\"cronJobItem.enable\"\r\n                                    class=\"job-switch\"\r\n                                    size=\"small\"\r\n                                    disabled\r\n                                    theme=\"primary\"\r\n                                    @change=\"value => handleEnableChange(cronJobItem.id, value)\" />\r\n                            </div>\r\n                        </div>\r\n                    </auth-component>\r\n                </div>\r\n            </scroll-faker>\r\n        </div>\r\n        <div class=\"layout-right\">\r\n            <scroll-faker>\r\n                <cron-detail\r\n                    :data=\"detailInfo\"\r\n                    :variable-list=\"templateVariableList\"\r\n                    :key=\"detailInfo.id\"\r\n                    @on-change=\"handleVariableChange\"\r\n                    @on-update-confirm=\"handleUpdateConfirm\" />\r\n            </scroll-faker>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import TimeTaskService from '@service/time-task';\r\n    import ScrollFaker from '@components/scroll-faker';\r\n    import CronDetail from './cron-detail';\r\n\r\n    const generatorData = ({ id, name, enable }) => ({\r\n        id,\r\n        name,\r\n        enable,\r\n        hasConfirm: false,\r\n        variableValue: [],\r\n    });\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            ScrollFaker,\r\n            CronDetail,\r\n        },\r\n        props: {\r\n            templateInfo: {\r\n                type: Object,\r\n                required: true,\r\n            },\r\n            planId: {\r\n                type: Number,\r\n                required: true,\r\n            },\r\n            cronJobList: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: true,\r\n                isEmpty: false,\r\n                timeTaskList: [{},{},{}],\r\n                currentTaskId: 0,\r\n            };\r\n        },\r\n        computed: {\r\n            detailInfo () {\r\n                return this.timeTaskList.find(item => item.id === this.currentTaskId) || {};\r\n            },\r\n        },\r\n        created () {\r\n            this.templateId = this.templateInfo.id;\r\n            this.templateVariableList = this.templateInfo.variables;\r\n            this.fetchTimeTaskList();\r\n        },\r\n        methods: {\r\n            fetchTimeTaskList () {\r\n                if (this.cronJobList.length > 0) {\r\n                    this.timeTaskList = this.cronJobList;\r\n                    this.currentTaskId = this.cronJobList[0].id;\r\n                    return;\r\n                }\r\n                this.isLoading = true;\r\n                TimeTaskService.fetchTaskOfPlan({\r\n                    id: this.planId,\r\n                }).then((data) => {\r\n                    if (data.length < 1) {\r\n                        this.isEmpty = true;\r\n                        return;\r\n                    }\r\n                    this.timeTaskList = data.map(item => generatorData(item));\r\n                    if (data.length > 0) {\r\n                        this.currentTaskId = data[0].id;\r\n                    }\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            trigger () {\r\n                const cronJob = this.timeTaskList.reduce((result, item) => {\r\n                    // 关闭的定时任务传全局变量\r\n                    result.push({\r\n                        ...item,\r\n                        variableValue: item.enable ? item.variableValue : [],\r\n                    });\r\n                    return result;\r\n                }, []);\r\n                this.$emit('on-change', cronJob);\r\n            },\r\n            handleTabChange (id) {\r\n                this.currentTaskId = id;\r\n            },\r\n            handleEnableChange (id, enable) {\r\n                const timeTask = this.timeTaskList.find(item => item.id === id);\r\n                timeTask.enable = enable;\r\n                timeTask.hasConfirm = false;\r\n                this.trigger();\r\n            },\r\n            handleVariableChange (payload) {\r\n                const timeTask = this.timeTaskList.find(item => item.id === this.currentTaskId);\r\n                timeTask.variableValue = Object.freeze(payload);\r\n                timeTask.hasConfirm = true;\r\n                this.trigger();\r\n            },\r\n            handleUpdateConfirm (payload) {\r\n                const timeTask = this.timeTaskList.find(item => item.id === this.currentTaskId);\r\n                timeTask.hasConfirm = payload;\r\n                this.trigger();\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .plan-manage-confirm-cron {\r\n        display: flex;\r\n        background: #fff;\r\n\r\n        .layout-left {\r\n            position: relative;\r\n            z-index: 1000;\r\n            flex: 0 0 320px;\r\n            height: calc(100vh - 154px);\r\n            background: #fafbfd;\r\n\r\n            &::after {\r\n                position: absolute;\r\n                top: 0;\r\n                right: 0;\r\n                width: 1px;\r\n                height: 100%;\r\n                background: #ecedf3;\r\n                content: \"\";\r\n            }\r\n\r\n            .cron-job-tab {\r\n                position: relative;\r\n                z-index: 1;\r\n                font-size: 14px;\r\n                color: #63656e;\r\n                cursor: pointer;\r\n                border-bottom: 1px solid #ecedf3;\r\n\r\n                .tab-container {\r\n                    display: flex;\r\n                    height: 40px;\r\n                    padding: 0 13px 0 24px;\r\n                    align-items: center;\r\n                }\r\n\r\n                &.active {\r\n                    background: #fff;\r\n                }\r\n\r\n                .job-name {\r\n                    margin-right: auto;\r\n                }\r\n\r\n                .job-check {\r\n                    font-size: 24px;\r\n                    color: #2dcb56;\r\n                }\r\n\r\n                .job-switch {\r\n                    margin-left: 20px;\r\n                }\r\n            }\r\n        }\r\n\r\n        .layout-right {\r\n            flex: 1;\r\n            height: calc(100vh - 154px);\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <jb-dialog\r\n        :value=\"isShow\"\r\n        fullscreen\r\n        class=\"plan-confirm-cron-dialog\"\r\n        @cancel=\"handleClose\">\r\n        <div class=\"confirm-cron-wraper\" v-bkloading=\"{ isLoading }\" @keyup.esc=\"handleClose\">\r\n            <confirm-cron\r\n                v-if=\"!isLoading\"\r\n                :template-info=\"templateInfo\"\r\n                :plan-id=\"planId\"\r\n                :cron-job-list=\"cronJobInfoList\"\r\n                @on-change=\"handleConfirmCron\" />\r\n        </div>\r\n    </jb-dialog>\r\n</template>\r\n<script>\r\n    import TaskManageService from '@service/task-manage';\r\n    import ConfirmCron from '../../common/plan/confirm-cron';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            ConfirmCron,\r\n        },\r\n        props: {\r\n            isShow: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n            templateId: {\r\n                type: Number,\r\n                required: true,\r\n            },\r\n            planId: {\r\n                type: Number,\r\n                required: true,\r\n            },\r\n            cronJobInfoList: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isShowDialog: false,\r\n                isLoading: true,\r\n                templateInfo: {},\r\n            };\r\n        },\r\n        watch: {\r\n            templateId (templateId) {\r\n                if (templateId < 0) {\r\n                    return;\r\n                }\r\n                this.fetchData();\r\n            },\r\n        },\r\n        methods: {\r\n            fetchData () {\r\n                this.isLoading = true;\r\n                TaskManageService.taskDetail({\r\n                    id: this.templateId,\r\n                }).then((data) => {\r\n                    this.templateInfo = Object.freeze(data);\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            handleClose () {\r\n                this.$emit('on-close');\r\n            },\r\n            handleConfirmCron (cronJonList) {\r\n                this.$emit('on-change', cronJonList);\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .plan-confirm-cron-dialog {\r\n        .bk-dialog-wrapper {\r\n            .bk-dialog-body {\r\n                padding: 0;\r\n            }\r\n\r\n            .bk-dialog.bk-dialog-fullscreen .bk-dialog-body {\r\n                bottom: 0;\r\n            }\r\n\r\n            .bk-dialog-footer {\r\n                display: none;\r\n            }\r\n        }\r\n\r\n        .confirm-cron-wraper {\r\n            min-height: 100vh;\r\n        }\r\n\r\n        .layout-left,\r\n        .layout-right {\r\n            height: 100vh;\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <div class=\"sync-plan-batch-page\">\r\n        <list-action-layout>\r\n            <template #right>\r\n                <bk-button\r\n                    theme=\"primary\"\r\n                    :loading=\"isConfirmLoading || isCronJobLoading\"\r\n                    \r\n                    @click=\"handleConfirmAll\">\r\n                    {{ '全部确认' }}\r\n                </bk-button>\r\n            </template>\r\n        </list-action-layout>\r\n        <div class=\"render-list-header\">\r\n            <div class=\"list-name\">\r\n                <span>{{ '同步执行方案' }}</span>\r\n                <span class=\"total\">（{{ '共' }} {{ data.length }} {{ '个'}}）</span>\r\n            </div>\r\n            <div class=\"item-status\">\r\n                <template v-if=\"isCronJobLoading\">\r\n                    <Icon type=\"sync-pending\" svg class=\"plan-cron-job-loading\" />\r\n                </template>\r\n                <template v-else>\r\n                    <span class=\"confirmed\">{{ planConfirmInfo.confirmed }}</span>{{ '个已就绪' }} ，\r\n                    <span class=\"unconfirmed\">{{ planConfirmInfo.unconfirmed }}</span>{{ '个未就绪' }}\r\n                </template>\r\n            </div>\r\n        </div>\r\n        <div ref=\"list\">\r\n            <bk-table\r\n                v-if=\"tableHeight\"\r\n                class=\"sync-plan-list\"\r\n                :data=\"data\"\r\n                :max-height=\"tableHeight\"\r\n                :row-class-name=\"calcRowClass\"\r\n                selectable>\r\n                <bk-table-column\r\n                    :label=\"'执行方案'\"\r\n                    prop=\"name\"\r\n                    key=\"name\"\r\n                    align=\"left\">\r\n                    <template slot-scope=\"{ row }\">\r\n                        <auth-router-link\r\n                            :permission=\"row.canView\"\r\n                            auth=\"job_plan/view\"\r\n                            :resource-id=\"row.id\"\r\n                            target=\"_blank\"\r\n                            :to=\"{\r\n                                name: 'viewPlan',\r\n                                params: {\r\n                                    templateid: 4 || row.templateId,\r\n                                },\r\n                                query: {\r\n                                    viewPlanId: 4 || row.id,\r\n                                },\r\n                            }\">\r\n                            {{ row.name }}\r\n                            <Icon type=\"edit\" class=\"open-link-flag\" />\r\n                        </auth-router-link>\r\n                    </template>\r\n                </bk-table-column>\r\n                <bk-table-column\r\n                    :label=\"'所属作业模板'\"\r\n                    prop=\"templateName\"\r\n                    key=\"templateName\"\r\n                    align=\"left\">\r\n                    <template slot-scope=\"{ row }\">\r\n                        <router-link\r\n                            target=\"_blank\"\r\n                            :to=\"{\r\n                                name: 'templateDetail',\r\n                                params: {\r\n                                    id: 4 || row.templateId,\r\n                                },\r\n                            }\">\r\n                            {{ row.templateName }}\r\n                            <Icon type=\"edit\" class=\"open-link-flag\" />\r\n                        </router-link>\r\n                    </template>\r\n                </bk-table-column>\r\n                <bk-table-column\r\n                    :label=\"'状态'\"\r\n                    prop=\"statusText\"\r\n                    key=\"statusText2\"\r\n                    class-name=\"status-column\"\r\n                    align=\"left\">\r\n                    <template slot-scope=\"{ row }\">\r\n                        <div class=\"confirm-status-box\">\r\n                            <Icon :type=\"row.statusIcon\" svg class=\"status-flag\" :class=\"row.statusIcon\" />\r\n                            <span v-html=\"row.statusHtml\" />\r\n                            <bk-button\r\n                                v-if=\"row.isRetryEnable\"\r\n                                text\r\n                                class=\"ml10\"\r\n                                @click=\"handleSyncRetry(row)\">\r\n                                {{ '重试' }}\r\n                            </bk-button>\r\n                        </div>\r\n                    </template>\r\n                </bk-table-column>\r\n                <bk-table-column\r\n                    :resizable=\"false\"\r\n                    :label=\"'操作'\"\r\n                    width=\"280\"\r\n                    key=\"action\"\r\n                    align=\"left\">\r\n                    <template slot-scope=\"{ row }\">\r\n                        <span :tippy-tips=\"row.disableDiffTips\" class=\"mr10\">\r\n                            <bk-button\r\n                                \r\n                                text\r\n                                @click=\"handleGoDiff(row)\">\r\n                                {{ '查看差异' }}\r\n                            </bk-button>\r\n                        </span>\r\n                        <!-- 定时任务加载中 -->\r\n                        <template v-if=\"row.isCronJobLoading\">\r\n                            <Icon type=\"sync-pending\" svg class=\"plan-cron-job-loading\" />\r\n                        </template>\r\n                        <template v-else>\r\n                            <span :tippy-tips=\"row.disableConfirmTips\" class=\"mr10\">\r\n                                <bk-button\r\n                                    text\r\n                                    :loading=\"row.isCronJobLoading\"\r\n                                    \r\n                                    @click=\"handleConfirmCron(row)\">\r\n                                    {{ '确认定时任务' }}\r\n                                </bk-button>\r\n                            </span>\r\n                            <div\r\n                                class=\"confirm-status\"\r\n                                :class=\"{ confirmed: row.isConfirmed }\">\r\n                                {{ row.confirmProcessText }}\r\n                            </div>\r\n                        </template>\r\n                    </template>\r\n                </bk-table-column>\r\n            </bk-table>\r\n        </div>\r\n        <div class=\"sync-plan-action\">\r\n            <bk-button v-if=\"isFinished\" class=\"w120\" theme=\"primary\" @click=\"handleFinish\">\r\n                {{ '完成' }}\r\n            </bk-button>\r\n            <template v-else>\r\n                <bk-button class=\"mr10\" @click=\"handleCancle\">\r\n                    {{ '取消' }}\r\n                </bk-button>\r\n                <span :tippy-tips=\"syncSubmitInvalid ? '所有方案均已同步至最新版' : ''\">\r\n                    <bk-button\r\n                        class=\"w120\"\r\n                        theme=\"primary\"\r\n                        :loading=\"isSyncLoading || isCronJobLoading\"\r\n                        \r\n                        @click=\"handleSubmitSync\">\r\n                        {{ '立即同步' }}\r\n                    </bk-button>\r\n                </span>\r\n            </template>\r\n        </div>\r\n        <confirm-cron\r\n            :is-show=\"isShowConfirmCron\"\r\n            v-bind=\"selectPlanInfo\"\r\n            @on-change=\"handleSelectPlanConfirmChange\"\r\n            @on-close=\"hanndleSelectPlanConfirmClose\" />\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n       import TaskManageService from '@service/task-manage';\r\n    import TaskPlanService from '@service/task-plan';\r\n    import TimeTaskService from '@service/time-task';\r\n    import SyncPlanVO from '@domain/variable-object/sync-plan';\r\n    import ListActionLayout from '@components/list-action-layout';\r\n    import {\r\n        getOffset,\r\n        leaveConfirm,\r\n    } from '@utils/assist';\r\n    import ConfirmCron from './components/confirm-cron';\r\n\r\n    const runStepByStep = (data, callback, finishCallback = () => {}) => {\r\n        let startIndex = 0;\r\n        const next = () => {\r\n            startIndex += 1;\r\n            if (startIndex >= data.length) {\r\n                finishCallback();\r\n                return;\r\n            }\r\n            callback(data[startIndex], next);\r\n        };\r\n        callback(data[startIndex], next);\r\n    };\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            ListActionLayout,\r\n            ConfirmCron,\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: true,\r\n                data: [{},{},{}],\r\n                tableHeight: '',\r\n                isCronJobLoading: false,\r\n                isConfirmLoading: false,\r\n                isComfirmAllFinished: false,\r\n                isSyncLoading: false,\r\n                isShowConfirmCron: false,\r\n                isFinished: false,\r\n                syncValueMemoMap: {},\r\n                selectPlanInfo: {\r\n                    templateId: -1,\r\n                    planId: -1,\r\n                    cronJobInfoList: [{},{},{}],\r\n                },\r\n            };\r\n        },\r\n        computed: {\r\n            isSkeletonLoading () {\r\n                return this.isLoading;\r\n            },\r\n            planConfirmInfo () {\r\n                let confirmed = 0;\r\n                let unconfirmed = 0;\r\n                \r\n                this.data.forEach((currentPlan) => {\r\n                    if (currentPlan.isConfirmed) {\r\n                        confirmed += 1;\r\n                    } else {\r\n                        unconfirmed += 1;\r\n                    }\r\n                });\r\n                return {\r\n                    confirmed,\r\n                    unconfirmed,\r\n                };\r\n            },\r\n            syncSubmitInvalid () {\r\n                // eslint-disable-next-line no-plusplus\r\n                for (let i = 0; i < this.data.length; i++) {\r\n                    const currentPlan = this.data[i];\r\n                    // 需要确认定时任务\r\n                    if (currentPlan.needUpdate) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            },\r\n        },\r\n        created () {\r\n            const { planIds = '' } = this.$route.query;\r\n            this.planIds = planIds;\r\n            // 如果是从作业模板的执行方案列表过来同步的\r\n            // 所有执行方案的templateId相同，保留下来，路由回退时需要\r\n            this.lastOnePlanTemplateId = '';\r\n            this.fetchData();\r\n        },\r\n        mounted () {\r\n            this.calcTableHeight();\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 获取要同步的执行方案基本信息\r\n             *\r\n             * 初始化同步执行方案的状态\r\n             */\r\n            fetchData () {\r\n                this.isLoading = true;\r\n                TaskPlanService.fetchBatchPlan({\r\n                    planIds: this.planIds,\r\n                }).then((data) => {\r\n                    const planData = [];\r\n                    const needCheckCronJobStatusPlanMap = {};\r\n                    \r\n                    data.forEach((_) => {\r\n                        const currentSyncPlan = new SyncPlanVO(_);\r\n                        planData.push(currentSyncPlan);\r\n                        this.lastOnePlanTemplateId = _.templateId;\r\n                        // 执行方案有关联定时任务\r\n                        // 执行方案的状态设置为加载定时任务中（SyncPlanVO.STATUS_CRON_JOB_LOADING）\r\n                        // 缓存该执行方案id用于下一步获取关联定时任务\r\n                        if (currentSyncPlan.cronJobCount > 0) {\r\n                            currentSyncPlan.status = SyncPlanVO.STATUS_CRON_JOB_LOADING;\r\n                            needCheckCronJobStatusPlanMap[currentSyncPlan.id] = currentSyncPlan;\r\n                        }\r\n                    });\r\n                    this.data = planData;\r\n\r\n                    // 有执行方案需要获取关联定时任务\r\n                    // 页面操作状态设置定时任务任务获取中（isCronJobLoading），其它操作失效\r\n                    const needCheckCronJobStatusPlanIds = Object.keys(needCheckCronJobStatusPlanMap);\r\n                    if (needCheckCronJobStatusPlanIds.length > 0) {\r\n                        this.isCronJobLoading = true;\r\n                        TimeTaskService.fetchTaskOfPlanBatch({\r\n                            planIds: needCheckCronJobStatusPlanIds.join(','),\r\n                        }).then((data) => {\r\n                            for (const planId in data) {\r\n                                const currentCronJobList = data[planId];\r\n                                if (currentCronJobList.some(_ => _.enable)) {\r\n                                    // 执行方案关联的定时任务[有开启状态]——同步状态设置为未就绪\r\n                                    needCheckCronJobStatusPlanMap[planId].status = SyncPlanVO.STATUS_DEFAULT;\r\n                                } else {\r\n                                    // 执行方案关联的定时任务[全部是关闭状态]——同步状态设置为已就绪\r\n                                    needCheckCronJobStatusPlanMap[planId].status = SyncPlanVO.STATUS_CONFIRMED;\r\n                                }\r\n                            }\r\n                        })\r\n                            .finally(() => {\r\n                                this.isCronJobLoading = false;\r\n                            });\r\n                    }\r\n                    \r\n                    if (this.data.length > 0) {\r\n                        window.changeAlert = true;\r\n                    }\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n\r\n            /**\r\n             * @desc 计算页面高度，实现表格内部滚动\r\n             */\r\n            calcTableHeight () {\r\n                const { top } = getOffset(this.$refs.list);\r\n                const windowHeight = window.innerHeight;\r\n                this.tableHeight = windowHeight - top - 77;\r\n            },\r\n            /**\r\n             * @desc 计算表格行的样式\r\n             */\r\n            calcRowClass ({ row }) {\r\n                let className = 'template-plan-sync-record';\r\n                if (!row.canEdit) {\r\n                    className = `${className} sync-permission`;\r\n                }\r\n                return className;\r\n            },\r\n            /**\r\n             * @desc 全部确认操作\r\n             *\r\n             * 一条条数据串联同步\r\n             */\r\n            handleConfirmAll () {\r\n                window.changeAlert = true;\r\n                this.isConfirmLoading = true;\r\n                const syncValueMemoMap = { ...this.syncValueMemoMap };\r\n                this.data.forEach((item) => {\r\n                    if (syncValueMemoMap[item.id]) {\r\n                        return;\r\n                    }\r\n                    item.status = SyncPlanVO.STATUS_CONFIRM_QUEUE;\r\n                });\r\n                let errorNums = 0;\r\n                const confirmOnePlan = (plan, next) => {\r\n                    const currentSyncPlan = plan;\r\n                    const syncValue = {\r\n                        planId: currentSyncPlan.id,\r\n                        templateId: currentSyncPlan.templateId,\r\n                        templateVersion: currentSyncPlan.templateVersion,\r\n                        cronJobInfoList: [{},{},{}],\r\n                    };\r\n                    \r\n                    // 执行方案没有查看和编辑权限——跳过\r\n                    if (!currentSyncPlan.canView || !currentSyncPlan.canEdit) {\r\n                        next();\r\n                        return;\r\n                    }\r\n                    // 已确认——跳过\r\n                    if (currentSyncPlan.isConfirmed) {\r\n                        next();\r\n                        return;\r\n                    }\r\n                    // 没有定时任务——跳过\r\n                    if (currentSyncPlan.isPassConfirm) {\r\n                        syncValueMemoMap[currentSyncPlan.id] = syncValue;\r\n                        next();\r\n                        return;\r\n                    }\r\n                    \r\n                    // 定时任务确认中\r\n                    currentSyncPlan.status = SyncPlanVO.STATUS_CONFIRM_PENDGING;\r\n                    Promise.all([\r\n                        TaskManageService.taskDetail({\r\n                            id: currentSyncPlan.templateId,\r\n                        }),\r\n                        TimeTaskService.fetchTaskOfPlan({\r\n                            id: currentSyncPlan.id,\r\n                        }),\r\n                    ]).then(([\r\n                        template,\r\n                        cronJobList,\r\n                    ]) => {\r\n                        // 作业模板中的变量\r\n                        const currentTemplateVariableList = template.variables;\r\n\r\n                        // 必填变量没有赋值\r\n                        let isRequiredError = false;\r\n                        let isPermissionError = false;\r\n\r\n                        // 确认定时任务的变量值\r\n                        // 1，将模板中的变量同步到定时任务中\r\n                        // 2，作业模板和定时任务同名的变量保留定时任务中的变量值\r\n                        // 3，作业模板中新增的变量为必填但值为空则同步失败\r\n                        const cronJobInfoList = [];\r\n                        // eslint-disable-next-line no-plusplus\r\n                        for (let i = 0; i < cronJobList.length; i++) {\r\n                            const currentCronJob = cronJobList[i];\r\n\r\n                            const currentCronJobInfo = {\r\n                                id: currentCronJob.id,\r\n                                name: currentCronJob.name,\r\n                                enable: currentCronJob.enable,\r\n                                hasConfirm: false,\r\n                                variableValue: [],\r\n                            };\r\n                            // 没有定时任务的管理权限——跳过处理\r\n                            if (!currentCronJob.canManage) {\r\n                                isPermissionError = true;\r\n                                cronJobInfoList.push(currentCronJobInfo);\r\n                                continue;\r\n                            }\r\n                            // 当前定时任务未被开启——跳过处理\r\n                            if (!currentCronJob.enable) {\r\n                                cronJobInfoList.push(currentCronJobInfo);\r\n                                continue;\r\n                            }\r\n\r\n                            // 同步作业模板中变量到定时任务\r\n                            // 作业模板和定时任务同名的变量——保留定时任务中的变量值\r\n                            const currentCronJobVariableMap = currentCronJob.variableValue.reduce((result, item) => {\r\n                                result[item.id] = item;\r\n                                return result;\r\n                            }, {});\r\n                            const newCronJobVariableList = [];\r\n                            // eslint-disable-next-line no-plusplus\r\n                            for (let j = 0; j < currentTemplateVariableList.length; j++) {\r\n                                const newVariableFromTemplate = _.cloneDeep(currentTemplateVariableList[j]);\r\n                                \r\n                                if (currentCronJobVariableMap[newVariableFromTemplate.id]) {\r\n                                    const {\r\n                                        value,\r\n                                        targetValue,\r\n                                    } = currentCronJobVariableMap[newVariableFromTemplate.id];\r\n                                    newVariableFromTemplate.defaultValue = value;\r\n                                    newVariableFromTemplate.defaultTargetValue = targetValue;\r\n                                }\r\n                                // 必填变量不能为空\r\n                                if (newVariableFromTemplate.isRequired && newVariableFromTemplate.isEmpty) {\r\n                                    isRequiredError = true;\r\n                                }\r\n                                const { id, name, type, defaultValue, defaultTargetValue } = newVariableFromTemplate;\r\n                                // 定时任务中的变量需要赋值操作\r\n                                newCronJobVariableList.push({\r\n                                    id,\r\n                                    name,\r\n                                    type,\r\n                                    defaultValue,\r\n                                    defaultTargetValue,\r\n                                    value: defaultValue,\r\n                                    targetValue: defaultTargetValue,\r\n                                });\r\n                            }\r\n\r\n                            // 有必填变量没有被赋值，确实失败\r\n                            currentCronJobInfo.hasConfirm = !isRequiredError;\r\n                            currentCronJobInfo.variableValue = newCronJobVariableList;\r\n                            cronJobInfoList.push(currentCronJobInfo);\r\n                        }\r\n                        \r\n                        // 手动确认过——继续使用手动确认的结果\r\n                        if (!syncValueMemoMap[currentSyncPlan.id]) {\r\n                            syncValue.cronJobInfoList = cronJobInfoList;\r\n                            syncValueMemoMap[currentSyncPlan.id] = syncValue;\r\n                        }\r\n\r\n                        // 定时任务确认完成\r\n                        currentSyncPlan.cronJobInfoList = cronJobInfoList;\r\n                        if (isRequiredError) {\r\n                            currentSyncPlan.status = SyncPlanVO.STATUS_CONFIRM_FAILED;\r\n                            currentSyncPlan.error = '定时任务中必填变量未赋值';\r\n                            errorNums += 1;\r\n                        } else if (isPermissionError) {\r\n                            currentSyncPlan.status = SyncPlanVO.STATUS_CONFIRM_FAILED;\r\n                            currentSyncPlan.error = '没有定时任务管理权限，请手动确认';\r\n                            errorNums += 1;\r\n                        } else {\r\n                            currentSyncPlan.status = SyncPlanVO.STATUS_CONFIRMED;\r\n                        }\r\n                    })\r\n                        .catch(() => {\r\n                            // 定时任务确认失败\r\n                            currentSyncPlan.status = SyncPlanVO.STATUS_CONFIRM_FAILED;\r\n                            currentSyncPlan.error = '自动确认定时任务失败，请手动确认';\r\n                            errorNums += 1;\r\n                        })\r\n                        .finally(() => {\r\n                            next();\r\n                        });\r\n                };\r\n                \r\n                runStepByStep(this.data, confirmOnePlan, () => {\r\n                    this.isConfirmLoading = false;\r\n                    this.syncValueMemoMap = Object.freeze(syncValueMemoMap);\r\n                    this.isComfirmAllFinished = true;\r\n                    if (errorNums > 0) {\r\n                        this.messageError(`${errorNums} ${'项执行方案的确认出现问题，请逐个确认'}`);\r\n                    }\r\n                });\r\n            },\r\n            /**\r\n             * @desc 查看同步差异\r\n             */\r\n            handleGoDiff (plan) {\r\n                const router = this.$router.resolve({\r\n                    name: 'syncPlan',\r\n                    params: {\r\n                        id: plan.id,\r\n                        templateId: plan.templateId,\r\n                    },\r\n                    query: {\r\n                        mode: 'view',\r\n                    },\r\n                });\r\n                window.open(router.href);\r\n            },\r\n            /**\r\n             * @desc 打开手动确认弹框\r\n             * @param {Object} plan 要确认的执行方案\r\n             */\r\n            handleConfirmCron (plan) {\r\n                let cronJobInfoList = [];\r\n                if (this.syncValueMemoMap[plan.id]) {\r\n                    /* eslint-disable prefer-destructuring */\r\n                    cronJobInfoList = this.syncValueMemoMap[plan.id].cronJobInfoList;\r\n                }\r\n                this.isShowConfirmCron = true;\r\n                this.selectPlanInfo = {\r\n                    templateId: plan.templateId,\r\n                    planId: plan.id,\r\n                    cronJobInfoList,\r\n                };\r\n            },\r\n            /**\r\n             * @desc 关闭手动确认弹框\r\n             */\r\n            hanndleSelectPlanConfirmClose () {\r\n                this.isShowConfirmCron = false;\r\n                this.selectPlanInfo = {\r\n                    templateId: -1,\r\n                    planId: -1,\r\n                    cronJobInfoList: [{},{},{}],\r\n                };\r\n            },\r\n            /**\r\n             * @desc 提交手动确认的定任务信息\r\n             * @param {Array} cronJobInfoList 执行方案关联的定时任务变量信息\r\n             */\r\n            handleSelectPlanConfirmChange (cronJobInfoList) {\r\n                window.changeAlert = true;\r\n\r\n                const syncValueMemoMap = { ...this.syncValueMemoMap };\r\n                \r\n                syncValueMemoMap[this.selectPlanInfo.planId] = {\r\n                    templateId: this.selectPlanInfo.templateId,\r\n                    id: this.selectPlanInfo.planId,\r\n                    cronJobInfoList,\r\n                };\r\n                this.syncValueMemoMap = Object.freeze(syncValueMemoMap);\r\n\r\n                const currentPlan = _.find(this.data, _ => _.id === this.selectPlanInfo.planId);\r\n                // 定时任务全部确认完成\r\n                if (cronJobInfoList.every(_ => _.hasConfirm || !_.enable)) {\r\n                    currentPlan.status = SyncPlanVO.STATUS_CONFIRMED;\r\n                }\r\n                currentPlan.cronJobInfoList = cronJobInfoList;\r\n                this.data = [\r\n                    ...this.data,\r\n                ];\r\n            },\r\n            /**\r\n             * @desc 提交同步\r\n             *\r\n             * 一条一条数据串联同步\r\n             */\r\n            handleSubmitSync () {\r\n                this.isSyncLoading = true;\r\n                this.data.forEach((item) => {\r\n                    // 进入同步队列\r\n                    if (item.needUpdate) {\r\n                        item.status = SyncPlanVO.STATUS_SYNC_QUEUE;\r\n                    }\r\n                });\r\n                \r\n                const syncOnePlan = (plan, next) => {\r\n                    const currentSyncPlan = plan;\r\n                    // 需要同步的执行方案才会变更同步状态\r\n                    if (!currentSyncPlan.needUpdate) {\r\n                        currentSyncPlan.status = SyncPlanVO.STATUS_SYNCED;\r\n                        next();\r\n                        return;\r\n                    }\r\n                    \r\n                    // 同步中\r\n                    currentSyncPlan.status = SyncPlanVO.STATUS_SYNC_PENDING;\r\n\r\n                    TaskPlanService.planSyncInfo({\r\n                        planId: currentSyncPlan.id,\r\n                        templateId: currentSyncPlan.templateId,\r\n                        templateVersion: currentSyncPlan.templateVersion,\r\n                    }).then(() => {\r\n                        // 有定时任务才会执行同步定时任务\r\n                        if (this.syncValueMemoMap[currentSyncPlan.id]\r\n                            && this.syncValueMemoMap[currentSyncPlan.id].cronJobInfoList.length > 0) {\r\n                            return TimeTaskService.updatePlanTask({\r\n                                cronJobInfoList: this.syncValueMemoMap[currentSyncPlan.id].cronJobInfoList,\r\n                            });\r\n                        }\r\n                        // 不需要同步定时任务\r\n                        return Promise.resolve();\r\n                    })\r\n                        .then(() => {\r\n                            // 同步成功\r\n                            currentSyncPlan.status = SyncPlanVO.STATUS_SYNCED;\r\n                        })\r\n                        .catch(() => {\r\n                            // 同步失败\r\n                            currentSyncPlan.status = SyncPlanVO.STATUS_SYNC_FAILED;\r\n                        })\r\n                        .finally(() => {\r\n                            next();\r\n                        });\r\n                };\r\n\r\n                runStepByStep(this.data, syncOnePlan, () => {\r\n                    this.isSyncLoading = false;\r\n                    this.isFinished = true;\r\n                    window.changeAlert = false;\r\n                });\r\n            },\r\n            /**\r\n             * @desc 同步失败重试\r\n             * @param {Object} plan 重试的执行方案\r\n             */\r\n            handleSyncRetry (plan) {\r\n                plan.status = SyncPlanVO.STATUS_SYNC_PENDING;\r\n                TaskPlanService.planSyncInfo({\r\n                    planId: plan.id,\r\n                    templateId: plan.templateId,\r\n                    templateVersion: plan.templateVersion,\r\n                }).then(() => TimeTaskService.updatePlanTask({\r\n                    cronJobInfoList: this.syncValueMemoMap[plan.id].cronJobList,\r\n                }))\r\n                    .then(() => {\r\n                        // 同步成功\r\n                        plan.status = SyncPlanVO.STATUS_SYNCED;\r\n                    })\r\n                    .catch(() => {\r\n                        // 同步失败\r\n                        plan.error = '同步请求失败，请重试';\r\n                        plan.status = SyncPlanVO.STATUS_SYNC_FAILED;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 取消批量同步\r\n             *\r\n             * 需要确认页面的编辑状态\r\n             */\r\n            handleCancle () {\r\n                leaveConfirm()\r\n                    .then(() => {\r\n                        this.routerBack();\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 完成批量同步\r\n             */\r\n            handleFinish () {\r\n                window.changeAlert = false;\r\n                this.routerBack();\r\n            },\r\n            /**\r\n             * @desc 路由回退\r\n             */\r\n            routerBack () {\r\n                const { from } = this.$route.query;\r\n                if (from === 'viewPlan') {\r\n                    this.$router.push({\r\n                        name: 'viewPlan',\r\n                        params: {\r\n                            templateId: this.lastOnePlanTemplateId,\r\n                        },\r\n                    });\r\n                } else if (from === 'planList') {\r\n                    this.$router.push({\r\n                        name: 'planList',\r\n                    });\r\n                } else if (from === 'templateDetail') {\r\n                    this.$router.push({\r\n                        name: 'templateDetail',\r\n                        params: {\r\n                            id: this.lastOnePlanTemplateId,\r\n                        },\r\n                    });\r\n                } else if (from === 'templateEdit') {\r\n                    this.$router.push({\r\n                        name: 'viewPlan',\r\n                        params: {\r\n                            templateId: this.lastOnePlanTemplateId,\r\n                        },\r\n                    });\r\n                } else {\r\n                    this.$router.push({\r\n                        name: 'planList',\r\n                    });\r\n                }\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    @keyframes sync-loading-ani {\r\n        from {\r\n            transform: rotateZ(0);\r\n        }\r\n\r\n        to {\r\n            transform: rotateZ(360deg);\r\n        }\r\n    }\r\n\r\n    .sync-plan-batch-page {\r\n        .render-list-header {\r\n            display: flex;\r\n            height: 42px;\r\n            padding: 0 15px;\r\n            font-size: 12px;\r\n            color: #63656e;\r\n            background: #f0f1f5;\r\n            border: 1px solid #dcdee5;\r\n            border-bottom: none;\r\n            align-items: center;\r\n\r\n            .list-name {\r\n                font-weight: bold;\r\n\r\n                .total {\r\n                    color: #979ba5;\r\n                }\r\n            }\r\n\r\n            .item-status {\r\n                margin-left: auto;\r\n\r\n                .confirmed,\r\n                .unconfirmed {\r\n                    padding-right: 4px;\r\n                    font-weight: bold;\r\n                }\r\n\r\n                .confirmed {\r\n                    color: #3a84ff;\r\n                }\r\n            }\r\n        }\r\n\r\n        .sync-plan-list {\r\n            &.bk-table {\r\n                border-top-right-radius: 0;\r\n                border-top-left-radius: 0;\r\n            }\r\n\r\n            .template-plan-sync-record {\r\n                &:hover {\r\n                    .open-link-flag {\r\n                        opacity: 100%;\r\n                    }\r\n                }\r\n            }\r\n\r\n            .sync-permission {\r\n                background: #fafbfd;\r\n            }\r\n\r\n            .open-link-flag {\r\n                font-size: 12px;\r\n                opacity: 0%;\r\n            }\r\n\r\n            .status-column {\r\n                .cell {\r\n                    overflow: unset;\r\n                }\r\n            }\r\n\r\n            .confirm-status-box {\r\n                display: flex;\r\n                align-items: center;\r\n\r\n                .status-flag {\r\n                    margin-right: 4px;\r\n\r\n                    &.sync-default {\r\n                        color: #c4c6cc;\r\n                    }\r\n\r\n                    &.sync-pending {\r\n                        color: #3a84ff;\r\n                        animation: sync-loading-ani 1s linear infinite;\r\n                    }\r\n\r\n                    &.sync-success {\r\n                        color: #3fc06d;\r\n                    }\r\n\r\n                    &.sync-failed {\r\n                        color: #ea3636;\r\n                    }\r\n                }\r\n\r\n                span[tippy-tips] {\r\n                    padding-bottom: 2px;\r\n                    cursor: pointer;\r\n                    border-bottom: 1px dashed #c4c6cc;\r\n                }\r\n            }\r\n        }\r\n\r\n        .confirm-status {\r\n            height: 16px;\r\n            padding: 0 5px;\r\n            font-size: 12px;\r\n            line-height: 16px;\r\n            color: #979ba5;\r\n            background: #f0f1f5;\r\n            border-radius: 8px;\r\n\r\n            &.confirmed {\r\n                color: #3a84ff;\r\n                background: #e1ecff;\r\n            }\r\n        }\r\n\r\n        .plan-cron-job-loading {\r\n            color: #3a84ff;\r\n            animation: sync-loading-ani 1s linear infinite;\r\n        }\r\n\r\n        .sync-plan-action {\r\n            position: fixed;\r\n            right: 0;\r\n            bottom: 0;\r\n            left: 0;\r\n            display: flex;\r\n            justify-content: flex-end;\r\n            align-items: center;\r\n            height: 52px;\r\n            padding-right: 24px;\r\n            background: #fff;\r\n            box-shadow: 0 -2px 4px 0 rgb(0 0 0 / 6%);\r\n        }\r\n    }\r\n</style>\r\n"],"names":[],"sourceRoot":""}