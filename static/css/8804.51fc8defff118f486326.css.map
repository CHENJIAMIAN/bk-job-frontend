{"version":3,"file":"static/css/8804.51fc8defff118f486326.css","mappings":"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","sources":["webpack://job/./src/views/executive-history/task-detail/components/task-step/index.vue","webpack://job/./src/views/executive-history/task-detail/components/execution-process/index.vue","webpack://job/./src/views/executive-history/task-detail/index.vue"],"sourcesContent":["\r\n\r\n<template>\r\n    <component\r\n        :is=\"themeCom\"\r\n        v-bind=\"$attrs\"\r\n        :data=\"data\"\r\n        :choose=\"handleChoose\"\r\n        :handle-change-status=\"handleChangeStatus\" />\r\n</template>\r\n<script>\r\n    import I18n from '@/i18n';\r\n    import TaskExecuteService from '@service/task-execute';\r\n    import ThemeNormal from './theme/normal';\r\n    import ThemeApproval from './theme/approval';\r\n    import StepAction from '../../../common/step-action';\r\n\r\n    export default {\r\n        name: 'TaskStep',\r\n        components: {\r\n            StepAction,\r\n        },\r\n        props: {\r\n            data: {\r\n                type: Object,\r\n                required: true,\r\n            },\r\n        },\r\n        computed: {\r\n            themeCom () {\r\n                if (this.data.isApproval && !this.data.isNotStart) {\r\n                    return ThemeApproval;\r\n                }\r\n                return ThemeNormal;\r\n            },\r\n        },\r\n        methods: {\r\n            handleChoose () {\r\n                if (this.data.isApproval) {\r\n                    return;\r\n                }\r\n                if (this.data.isNotStart) {\r\n                    this.$bkMessage({\r\n                        theme: 'warning',\r\n                        message: I18n.t('history.该步骤还未执行'),\r\n                        limit: 1,\r\n                    });\r\n                    return;\r\n                }\r\n                \r\n                this.$emit('on-select', this.data);\r\n            },\r\n            handleChangeStatus (operationCode, confirmReason) {\r\n                return TaskExecuteService.updateTaskExecutionStepOperate({\r\n                    id: this.data.stepInstanceId,\r\n                    operationCode,\r\n                    confirmReason,\r\n                }).then(() => {\r\n                    this.$bkMessage({\r\n                        limit: 1,\r\n                        theme: 'success',\r\n                        message: I18n.t('history.操作成功'),\r\n                    });\r\n                    this.$emit('on-update');\r\n                    return true;\r\n                });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    @keyframes ani-rotate {\r\n        to {\r\n            transform: rotateZ(360deg);\r\n        }\r\n    }\r\n\r\n    .execution-step-box {\r\n        position: relative;\r\n        z-index: 1;\r\n        display: flex;\r\n        height: 42px;\r\n        padding: 0 4px;\r\n        margin: 14px 0;\r\n        margin-left: 16px;\r\n        background: #fff;\r\n        border: 1px solid transparent;\r\n        border-radius: 21px;\r\n        box-shadow: 0 2px 6px #ddd;\r\n        align-items: center;\r\n\r\n        &.theme-start,\r\n        &.theme-end {\r\n            width: 44px;\r\n        }\r\n\r\n        &.theme-end {\r\n            &.disabled {\r\n                background: #f5f7fa;\r\n                border: 1px solid #dcdee5;\r\n\r\n                .step-icon {\r\n                    color: #f0f1f5;\r\n                    background-color: #dcdee5;\r\n                }\r\n            }\r\n        }\r\n\r\n        &.theme-normal {\r\n            width: 546px;\r\n            cursor: pointer;\r\n\r\n            .theme-normal-wraper {\r\n                position: relative;\r\n                display: flex;\r\n                height: 100%;\r\n                align-items: center;\r\n                flex: 1;\r\n\r\n                &:hover {\r\n                    .step-desc {\r\n                        color: #3a84ff;\r\n                    }\r\n\r\n                    .step-info {\r\n                        margin-right: -20px;\r\n                        opacity: 100%;\r\n                        visibility: visible;\r\n                    }\r\n                }\r\n\r\n                .step-status-desc {\r\n                    margin-right: 30px;\r\n                    margin-left: auto;\r\n\r\n                    .time {\r\n                        color: #979ba5;\r\n                    }\r\n                }\r\n            }\r\n\r\n            .name-text {\r\n                max-width: 390px;\r\n                overflow: hidden;\r\n                text-overflow: ellipsis;\r\n                white-space: nowrap;\r\n            }\r\n\r\n            .step-info {\r\n                position: absolute;\r\n                top: 50%;\r\n                right: 0;\r\n                z-index: 99;\r\n                display: flex;\r\n                max-width: 390px;\r\n                padding: 8px 11px;\r\n                margin-right: 0;\r\n                font-size: 12px;\r\n                line-height: 16px;\r\n                color: #63656e;\r\n                background: #fff;\r\n                border: 1px solid #dcdee5;\r\n                border-radius: 4px;\r\n                opacity: 0%;\r\n                visibility: hidden;\r\n                transform: translate(100%, -50%);\r\n                box-shadow: 0 0 5px 0 rgb(0 0 0 / 9%);\r\n                transition: all 0.15s;\r\n                user-select: none;\r\n                flex-direction: column;\r\n\r\n                &::before {\r\n                    position: absolute;\r\n                    top: 50%;\r\n                    left: -2px;\r\n                    width: 11px;\r\n                    height: 11px;\r\n                    background: #fff;\r\n                    border-top: 1px solid #dcdee5;\r\n                    border-left: 1px solid #dcdee5;\r\n                    content: \"\";\r\n                    transform: rotateZ(-45deg) translateY(-50%);\r\n                }\r\n\r\n                &::after {\r\n                    position: absolute;\r\n                    top: 0;\r\n                    width: 30px;\r\n                    height: 100%;\r\n                    margin-left: -30px;\r\n                    content: \"\";\r\n                }\r\n\r\n                .jb-detail-layout {\r\n                    .detail-item {\r\n                        margin-bottom: 0;\r\n                        font-size: 12px;\r\n                        line-height: 16px;\r\n                    }\r\n\r\n                    .detail-content {\r\n                        word-break: break-all;\r\n                    }\r\n                }\r\n            }\r\n\r\n            .step-instance-action {\r\n                box-shadow: 0 2px 6px 0 rgb(0 0 0 / 6%);\r\n            }\r\n        }\r\n\r\n        &.theme-approval {\r\n            display: block;\r\n            height: auto;\r\n            padding: 20px;\r\n            margin-left: 0;\r\n\r\n            &.success {\r\n                .confirm-flag {\r\n                    display: block;\r\n                }\r\n            }\r\n\r\n            .step-icon {\r\n                margin-right: 18px;\r\n            }\r\n\r\n            .step-desc {\r\n                margin-left: 0;\r\n                font-size: 18px;\r\n                color: #313238;\r\n                align-items: center;\r\n            }\r\n\r\n            .approval-container {\r\n                padding: 0 52px;\r\n            }\r\n\r\n            .approval-info {\r\n                display: flex;\r\n                margin-top: -2px;\r\n                font-size: 12px;\r\n                line-height: 20px;\r\n                color: #b2b5bd;\r\n                align-items: center;\r\n                flex-wrap: wrap;\r\n            }\r\n\r\n            .approval-person {\r\n                display: flex;\r\n                flex-wrap: wrap;\r\n\r\n                .persion-label,\r\n                .person {\r\n                    margin-top: 10px;\r\n                }\r\n\r\n                .role-flag {\r\n                    margin-right: 4px;\r\n                }\r\n            }\r\n\r\n            .person {\r\n                display: inline-flex;\r\n                height: 22px;\r\n                padding: 0 6px;\r\n                margin-right: 6px;\r\n                font-size: 12px;\r\n                color: #63656e;\r\n                background: #f0f1f5;\r\n                border-radius: 2px;\r\n                align-items: center;\r\n            }\r\n\r\n            .approval-channel {\r\n                margin-top: 10px;\r\n            }\r\n\r\n            .confirm-reason,\r\n            .confirm-reason-text {\r\n                margin-top: 20px;\r\n            }\r\n\r\n            .confirm-reason-text {\r\n                font-size: 14px;\r\n                line-height: 22px;\r\n                color: #63656e;\r\n            }\r\n\r\n            .confirm-flag {\r\n                display: none;\r\n                height: 18px;\r\n                padding: 0 5px;\r\n                margin-left: 8px;\r\n                font-size: 12px;\r\n                line-height: 18px;\r\n                color: #2dcb9d;\r\n                background: rgb(45 203 157 / 14%);\r\n                border-radius: 2px;\r\n            }\r\n\r\n            .step-message {\r\n                padding-top: 14px;\r\n                font-size: 14px;\r\n                line-height: 26px;\r\n                color: #63656e;\r\n            }\r\n\r\n            .step-action {\r\n                position: relative;\r\n                left: unset;\r\n                height: auto;\r\n                margin-top: 20px;\r\n                justify-content: flex-end;\r\n\r\n                .step-instance-action {\r\n                    margin-right: 0;\r\n                    margin-left: 10px;\r\n                    border: 1px solid #c4c6cc;\r\n\r\n                    &:hover {\r\n                        border-color: currentColor;\r\n                    }\r\n                }\r\n            }\r\n\r\n            .step-process {\r\n                left: 36px;\r\n            }\r\n        }\r\n\r\n        &.loading {\r\n            color: #63656e;\r\n\r\n            .step-icon {\r\n                background: #3a84ff;\r\n            }\r\n\r\n            .step-desc {\r\n                .time {\r\n                    color: #3a84ff;\r\n                }\r\n            }\r\n\r\n            .loading-progress {\r\n                display: block;\r\n                animation: \"ani-rotate\" 2s linear infinite;\r\n            }\r\n        }\r\n\r\n        &.ingore {\r\n            .step-icon {\r\n                background: #abd88a;\r\n            }\r\n        }\r\n\r\n        &.disabled {\r\n            color: #c4c6cc;\r\n            cursor: default;\r\n            background: #f5f7fa;\r\n            border-color: #dcdee5;\r\n            box-shadow: none;\r\n            user-select: none;\r\n\r\n            &:hover {\r\n                .step-desc {\r\n                    color: #c4c6cc !important;\r\n                }\r\n            }\r\n\r\n            .step-desc {\r\n                color: #c4c6cc;\r\n            }\r\n\r\n            .step-icon {\r\n                background: #dcdee5;\r\n            }\r\n        }\r\n\r\n        &.fail,\r\n        &.forced,\r\n        &.confirm-forced {\r\n            color: #979ba5;\r\n\r\n            .theme-normal-wraper {\r\n                &:hover {\r\n                    .step-desc {\r\n                        .time {\r\n                            display: block;\r\n                        }\r\n                    }\r\n\r\n                    .step-error-flag {\r\n                        display: none;\r\n                    }\r\n                }\r\n            }\r\n\r\n            .step-icon {\r\n                background: #ff5656;\r\n            }\r\n\r\n            .step-desc {\r\n                .time {\r\n                    display: none;\r\n                }\r\n            }\r\n\r\n            .step-error-flag {\r\n                font-size: 18px;\r\n                color: #ff5656;\r\n            }\r\n        }\r\n\r\n        &.confirm {\r\n            color: #979ba5;\r\n\r\n            .step-icon {\r\n                background: #ff9c01;\r\n            }\r\n        }\r\n\r\n        .step-icon {\r\n            display: flex;\r\n            height: 34px;\r\n            font-size: 14px;\r\n            font-weight: 600;\r\n            color: #fff;\r\n            background: #2dcb9d;\r\n            border-radius: 50%;\r\n            align-items: center;\r\n            justify-content: center;\r\n            flex: 0 0 34px;\r\n        }\r\n\r\n        .step-desc {\r\n            display: flex;\r\n            margin-left: 18px;\r\n            font-size: 14px;\r\n            color: #979ba5;\r\n            flex: 1;\r\n        }\r\n\r\n        .step-process {\r\n            position: absolute;\r\n            bottom: -28px;\r\n            left: 21px;\r\n            z-index: 1;\r\n            font-size: 31px;\r\n            color: #c4c6cc;\r\n            transform: translateX(-50%);\r\n\r\n            &.step-pending {\r\n                bottom: -31px;\r\n                left: 20px;\r\n                z-index: -1;\r\n            }\r\n        }\r\n\r\n        .loading-progress {\r\n            position: absolute;\r\n            top: 0;\r\n            left: 1px;\r\n            width: 40px;\r\n            height: 40px;\r\n        }\r\n\r\n        .step-action {\r\n            position: absolute;\r\n            left: 566px;\r\n            display: flex;\r\n            height: 100%;\r\n            white-space: pre;\r\n            align-items: center;\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <div\r\n        v-bk-tooltips=\"$t('history.定位到当前步骤')\"\r\n        class=\"task-exeution-process\"\r\n        @click=\"handleScrollToCurrentStep\">\r\n        {{ current }} / {{ total }}\r\n    </div>\r\n</template>\r\n<script>\r\n    import {\r\n        scrollTopSmooth,\r\n        getOffset,\r\n    } from '@utils/assist';\r\n\r\n    export default {\r\n        name: '',\r\n        props: {\r\n            total: {\r\n                type: Number,\r\n                required: true,\r\n            },\r\n            current: {\r\n                type: Number,\r\n                required: true,\r\n            },\r\n        },\r\n        mounted () {\r\n            this.timer = setTimeout(() => {\r\n                this.handleScrollToCurrentStep();\r\n            }, 1000);\r\n        },\r\n        beforeDestroy () {\r\n            clearTimeout(this.timer);\r\n        },\r\n        methods: {\r\n            handleScrollToCurrentStep () {\r\n                const $srollContainer = document.querySelector('.container-content');\r\n                if (!$srollContainer) {\r\n                    return;\r\n                }\r\n                const $currentStep = document.querySelectorAll('.execution-step-box')[this.current];\r\n                const { top } = getOffset($currentStep);\r\n                const windowHeight = window.innerHeight;\r\n                const targetHieght = $currentStep.getBoundingClientRect().height;\r\n                const offset = (windowHeight - targetHieght) / 2;\r\n                scrollTopSmooth($srollContainer, top - offset);\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .task-exeution-process {\r\n        width: 100px;\r\n        height: 28px;\r\n        margin-left: 10px;\r\n        font-size: 14px;\r\n        line-height: 28px;\r\n        color: #fff;\r\n        text-align: center;\r\n        cursor: pointer;\r\n        background: rgb(0 0 0 / 25%);\r\n        border-radius: 14px;\r\n\r\n        &:hover {\r\n            background: rgb(0 0 0 / 40%);\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <div\r\n        class=\"executive-history-task\"\r\n        v-bkloading=\"{ isLoading }\"\r\n        :key=\"taskInstanceId\">\r\n        <div class=\"step-list\">\r\n            <task-step-start key=\"start\" />\r\n            <task-step\r\n                v-for=\"(step, index) in formData.stepExecution\"\r\n                :key=\"index\"\r\n                :data=\"step\"\r\n                @on-select=\"handleSelectStep\"\r\n                @on-update=\"handleUpdateStepStatus\" />\r\n            <task-step-end key=\"end\" :finished=\"formData.taskExecution.isSuccess\" />\r\n        </div>\r\n        <div class=\"step-list-action\">\r\n            <back-top size=\"small\" :fixed=\"false\" />\r\n            <execution-process\r\n                v-if=\"!isLoading\"\r\n                class=\"execution-process\"\r\n                :total=\"formData.totalStep\"\r\n                :current=\"formData.currentStepRunningOrder\" />\r\n        </div>\r\n        <div class=\"task-action\">\r\n            <auth-component\r\n                auth=\"task_instance/redo\"\r\n                :resource-id=\"taskInstanceId\">\r\n                <div\r\n                    v-bk-tooltips.bottom=\"$t('history.去重做')\"\r\n                    class=\"action-btn\"\r\n                    @click=\"handleGoRetry\">\r\n                    <Icon type=\"redo\" />\r\n                </div>\r\n                <div slot=\"forbid\" class=\"action-btn\">\r\n                    <Icon type=\"redo\" />\r\n                </div>\r\n            </auth-component>\r\n            <div\r\n                v-bk-tooltips.bottom=\"$t('history.全局变量')\"\r\n                class=\"action-btn\"\r\n                @click=\"handleShowGlobalVariable\">\r\n                <Icon type=\"global-var\" />\r\n            </div>\r\n            <div\r\n                v-bk-tooltips.bottom=\"$t('history.执行方案')\"\r\n                class=\"action-btn\"\r\n                @click=\"handleGoPlan\">\r\n                <Icon type=\"flow\" />\r\n            </div>\r\n            <div\r\n                v-bk-tooltips.bottom=\"$t('history.操作记录')\"\r\n                class=\"action-btn\"\r\n                @click=\"handleShowOperationRecord\">\r\n                <Icon type=\"clock\" />\r\n            </div>\r\n        </div>\r\n        <execution-status-bar type=\"task\" :data=\"formData.taskExecution\">\r\n            <step-action\r\n                v-if=\"formData.taskExecution.isForcedEnable\"\r\n                name=\"forced\"\r\n                @on-cancel=\"handleCancelForceTask\"\r\n                @on-show=\"handleStartForceTask\"\r\n                :confirm-handler=\"handleForceTask\" />\r\n        </execution-status-bar>\r\n        <jb-sideslider\r\n            :is-show.sync=\"isShowGlobalVariable\"\r\n            :show-footer=\"false\"\r\n            :quick-close=\"true\"\r\n            :title=\"$t('history.全局变量')\"\r\n            :width=\"960\">\r\n            <global-variable :id=\"taskInstanceId\" />\r\n        </jb-sideslider>\r\n        <jb-sideslider\r\n            :is-show.sync=\"isShowOperationRecord\"\r\n            :show-footer=\"false\"\r\n            :quick-close=\"true\"\r\n            :title=\"$t('history.操作记录')\"\r\n            :width=\"900\">\r\n            <operation-record\r\n                :id=\"taskInstanceId\"\r\n                from=\"historyTask\" />\r\n        </jb-sideslider>\r\n    </div>\r\n</template>\r\n<script>\r\n    import I18n from '@/i18n';\r\n    import TaskExecuteService from '@service/task-execute';\r\n    import BackTop from '@components/back-top';\r\n    import TaskStep from './components/task-step';\r\n    import ExecutionProcess from './components/execution-process';\r\n    import TaskStepStart from './components/task-step/theme/start';\r\n    import TaskStepEnd from './components/task-step/theme/end';\r\n    import GlobalVariable from '../common/global-variable';\r\n    import OperationRecord from '../common/operation-record';\r\n    import StepAction from '../common/step-action';\r\n    import ExecutionStatusBar from '../common/execution-status-bar';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            BackTop,\r\n            TaskStep,\r\n            ExecutionProcess,\r\n            GlobalVariable,\r\n            OperationRecord,\r\n            StepAction,\r\n            TaskStepStart,\r\n            TaskStepEnd,\r\n            ExecutionStatusBar,\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: true,\r\n                taskInstanceId: 0,\r\n                isShowGlobalVariable: false,\r\n                isShowOperationRecord: false,\r\n                formData: {\r\n                    finished: true,\r\n                    totalStep: 0,\r\n                    currentStepRunningOrder: 0,\r\n                    taskExecution: {},\r\n                    stepExecution: [],\r\n                },\r\n            };\r\n        },\r\n        computed: {\r\n            isSkeletonLoading () {\r\n                return this.isLoading;\r\n            },\r\n        },\r\n        created () {\r\n            this.timer = '';\r\n            this.taskPollingQueue = [];\r\n            this.taskInstanceId = this.$route.params.id;\r\n            this.isForceing = false;\r\n            this.fetchData();\r\n            this.startTimer();\r\n            this.$once('hook:beforeDestroy', () => {\r\n                this.clearTimer();\r\n            });\r\n        },\r\n        \r\n        methods: {\r\n            fetchData (isFirst = true) {\r\n                if (isFirst) {\r\n                    this.isLoading = true;\r\n                }\r\n                \r\n                TaskExecuteService.fetchTaskExecutionResult({\r\n                    id: this.taskInstanceId,\r\n                }, {\r\n                    permission: 'page',\r\n                }).then((data) => {\r\n                    if (this.isForceing) {\r\n                        return;\r\n                    }\r\n                    this.formData = data;\r\n                    if (data.finished) {\r\n                        this.taskPollingQueue = [];\r\n                        return;\r\n                    }\r\n                    this.taskPollingQueue.push(() => this.fetchData(false));\r\n                })\r\n                    .catch((error) => {\r\n                        this.taskPollingQueue = [];\r\n                        if ([400, 1244006].includes(error.code)) {\r\n                            setTimeout(() => {\r\n                                this.$router.push({\r\n                                    name: 'historyList',\r\n                                });\r\n                            }, 3000);\r\n                        }\r\n                    })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            startTimer () {\r\n                if (this.timerClear) {\r\n                    return;\r\n                }\r\n                if (this.taskPollingQueue.length > 0) {\r\n                    const nextTask = this.taskPollingQueue.shift();\r\n                    nextTask();\r\n                }\r\n                setTimeout(() => {\r\n                    this.startTimer();\r\n                }, 1000);\r\n            },\r\n            clearTimer () {\r\n                this.timerClear = true;\r\n                this.taskPollingQueue = [];\r\n            },\r\n            handleSelectStep (stepInstance) {\r\n                this.$router.push({\r\n                    name: 'historyStep',\r\n                    params: {\r\n                        taskInstanceId: this.taskInstanceId,\r\n                    },\r\n                    query: {\r\n                        stepInstanceId: stepInstance.stepInstanceId,\r\n                        retryCount: stepInstance.retryCount,\r\n                        from: this.$route.query.from || 'historyTask',\r\n                    },\r\n                });\r\n            },\r\n            handleStartForceTask () {\r\n                this.isForceing = true;\r\n            },\r\n            handleCancelForceTask () {\r\n                this.isForceing = false;\r\n                this.fetchData();\r\n            },\r\n            handleForceTask () {\r\n                return TaskExecuteService.updateTaskExecutionStepOperateTerminate({\r\n                    taskInstanceId: this.taskInstanceId,\r\n                }).then(() => {\r\n                    this.isForceing = false;\r\n                    this.fetchData();\r\n                    this.messageSuccess(I18n.t('history.操作成功'));\r\n                    return true;\r\n                });\r\n            },\r\n            handleUpdateStepStatus () {\r\n                this.fetchData();\r\n            },\r\n            handleGoRetry () {\r\n                this.isLoading = true;\r\n                TaskExecuteService.fetchTaskInstance({\r\n                    id: this.taskInstanceId,\r\n                }).then(({ variables }) => {\r\n                    if (variables.length > 0) {\r\n                        // 有变量，去设置变量\r\n                        this.$router.push({\r\n                            name: 'redoTask',\r\n                            params: {\r\n                                taskInstanceId: this.taskInstanceId,\r\n                            },\r\n                        });\r\n                        return;\r\n                    }\r\n                    // 没有变量直接执行\r\n                    this.$bkInfo({\r\n                        title: I18n.t('history.确认执行？'),\r\n                        subTitle: I18n.t('history.该方案未设置全局变量，点击确认将直接执行。'),\r\n                        confirmFn: () => {\r\n                            this.isLoading = true;\r\n                            TaskExecuteService.redoTask({\r\n                                taskInstanceId: this.taskInstanceId,\r\n                                taskVariables: [],\r\n                            }).then(({ taskInstanceId }) => {\r\n                                this.$bkMessage({\r\n                                    theme: 'success',\r\n                                    message: I18n.t('history.执行成功'),\r\n                                });\r\n                                this.$router.push({\r\n                                    name: 'historyTask',\r\n                                    params: {\r\n                                        id: taskInstanceId,\r\n                                    },\r\n                                });\r\n                                this.taskInstanceId = taskInstanceId;\r\n                            // this.fetchData()\r\n                            })\r\n                                .finally(() => {\r\n                                    this.isLoading = false;\r\n                                });\r\n                        },\r\n                    });\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            handleShowGlobalVariable () {\r\n                this.isShowGlobalVariable = true;\r\n            },\r\n            handleShowOperationRecord () {\r\n                this.isShowOperationRecord = true;\r\n            },\r\n            handleGoPlan () {\r\n                let router = {};\r\n                if (this.formData.taskExecution.debugTask) {\r\n                    router = this.$router.resolve({\r\n                        name: 'debugPlan',\r\n                        params: {\r\n                            id: this.formData.taskExecution.templateId,\r\n                        },\r\n                        query: {\r\n                            from: 'historyTask',\r\n                        },\r\n                    });\r\n                } else {\r\n                    router = this.$router.resolve({\r\n                        name: 'viewPlan',\r\n                        params: {\r\n                            templateId: this.formData.taskExecution.templateId,\r\n                        },\r\n                        query: {\r\n                            from: 'historyTask',\r\n                            viewPlanId: this.formData.taskExecution.taskId,\r\n                            taskInstanceId: this.taskInstanceId,\r\n                        },\r\n                    });\r\n                }\r\n                window.open(router.href);\r\n            },\r\n            routerBack () {\r\n                const { from } = this.$route.query;\r\n                if (from === 'viewPlan') {\r\n                    this.$router.push({\r\n                        name: 'viewPlan',\r\n                        params: {\r\n                            templateId: this.formData.taskExecution.templateId,\r\n                        },\r\n                        query: {\r\n                            viewPlanId: this.formData.taskExecution.taskId,\r\n                        },\r\n                    });\r\n                    return;\r\n                }\r\n                if (from === 'planList') {\r\n                    this.$router.push({\r\n                        name: 'planList',\r\n                        query: {\r\n                            viewTemplateId: this.formData.taskExecution.templateId,\r\n                            viewPlanId: this.formData.taskExecution.taskId,\r\n                        },\r\n                    });\r\n                    return;\r\n                }\r\n                \r\n                this.$router.push({\r\n                    name: 'historyList',\r\n                });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .executive-history-task {\r\n        position: relative;\r\n        top: 0;\r\n        right: 0;\r\n        padding-top: 13px;\r\n        padding-bottom: 53px;\r\n\r\n        .step-list {\r\n            display: flex;\r\n            flex-direction: column;\r\n            width: 578px;\r\n            margin: 0 auto;\r\n        }\r\n\r\n        .step-list-action {\r\n            position: fixed;\r\n            bottom: 18px;\r\n            left: 50%;\r\n            z-index: 9;\r\n            display: flex;\r\n            transform: translateX(-50%);\r\n            user-select: none;\r\n\r\n            .execution-process {\r\n                margin-left: 10px;\r\n            }\r\n        }\r\n\r\n        .task-action {\r\n            position: fixed;\r\n            top: 126px;\r\n            right: 22px;\r\n            display: flex;\r\n\r\n            .action-btn {\r\n                display: flex;\r\n                width: 32px;\r\n                height: 32px;\r\n                padding: 0 7px;\r\n                margin-left: 10px;\r\n                font-size: 19px;\r\n                color: #979ba5;\r\n                cursor: pointer;\r\n                background: #fff;\r\n                border-radius: 50%;\r\n                box-shadow: 0 2px 6px 0 rgb(0 0 0 / 6%);\r\n                align-items: center;\r\n                justify-content: center;\r\n\r\n                &:hover {\r\n                    color: #3a84ff;\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>\r\n"],"names":[],"sourceRoot":""}