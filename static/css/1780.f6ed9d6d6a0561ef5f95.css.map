{"version":3,"file":"static/css/1780.f6ed9d6d6a0561ef5f95.css","mappings":"AAgBA,WAIA,mBADA,gBADA,kBADA,iBA4BA,CAvBA,qBAQA,gCACA,kCAFA,mCADA,SAHA,UAFA,kBACA,SAGA,QADA,SAkBA,CAXA,0BAQA,gCACA,kCAFA,mCAHA,cAEA,SAHA,UAFA,kBACA,QAGA,OAKA,CCgHA,0DACA,UACA,CAGA,oBACA,aACA,qBA6CA,CA3CA,yBACA,aACA,kBAYA,CAVA,oCACA,eACA,CAEA,gCAEA,cAEA,cAHA,eAEA,eAEA,CAGA,iCAEA,gBADA,UAEA,CAEA,2CAEA,uBADA,aAEA,gBACA,kBAMA,CAJA,wDACA,aACA,cACA,CAGA,sCACA,aACA,cAEA,kBADA,cAEA,CAEA,iCACA,eACA,CC1JA,eAEA,mBCSA,0BDRA,CEsJA,UACA,kBAmHA,CA/GA,sCACA,oBACA,CAKA,mKAKA,uBACA,CAEA,wKAKA,aACA,CAEA,yBACA,aACA,sBACA,CAEA,qBAIA,cACA,eAHA,eACA,iBAFA,eAKA,kBASA,CAPA,4BACA,aACA,CAEA,iCACA,aACA,CAIA,6BASA,yBACA,kBAHA,cAHA,eAFA,YAGA,iBAMA,aARA,eAKA,kBAPA,WAKA,iBAWA,CAJA,wCAEA,uBADA,aAEA,CAIA,sBAIA,cADA,iBADA,eADA,eAIA,iBACA,CAEA,qBASA,qBAHA,cALA,aAGA,eAFA,YAQA,uBALA,iBAFA,gBAIA,kBACA,4BA4BA,CAxBA,4BACA,WASA,CAPA,mCACA,oBAKA,CAHA,iDACA,yBACA,CAIA,4BACA,eACA,CAEA,4BAMA,eALA,aAIA,eAFA,mBACA,iBAFA,eAKA,CC0UA,8CACA,0BACA,CAEA,+DACA,kBACA,SACA,CAEA,mDACA,qBACA,UAKA,CAHA,6DACA,uBACA,CAGA,iDAGA,cAEA,eAJA,qBACA,eAEA,kBAEA,CAEA,2DACA,aACA,CC1fA,yDAEA,mBADA,aAEA,WAiBA,CAfA,+DASA,mBAFA,mBACA,kBAFA,cALA,aAIA,eAHA,YAEA,kBADA,aAOA,CAEA,wEACA,gBACA,CAGA,qDACA,eACA,CAEA,6DACA,aACA,CC7FA,6DAIA,mBACA,gCAJA,aAEA,wBADA,mBA0DA,CArDA,uEAgBA,mBANA,mBAEA,4CAEA,2BADA,4BALA,cACA,eARA,aAKA,eAJA,YAKA,iBAFA,mBADA,kBADA,eAYA,mBAiBA,CAdA,8EAEA,gBACA,qBAFA,cAYA,CARA,wFAEA,mBADA,aAEA,CAEA,4FACA,UACA,CAIA,uEACA,gBACA,CAEA,uEAMA,mBACA,kBAFA,cAFA,eAFA,YAGA,iBAFA,cAMA,mBACA,CAEA,2EAEA,gDADA,aAEA,CCmdA,8BACA,GACA,mBACA,CAEA,GACA,uBACA,CACA,CAGA,6BAEA,cADA,cAEA,CAEA,mCACA,gBAKA,CAHA,mDACA,cACA,CAGA,iCAKA,cAIA,eARA,qBACA,YACA,eACA,gBAEA,uBAEA,sBADA,kBAGA,CAIA,qDACA,kBACA,CAIA,kDACA,kBACA,CAIA,qDACA,kBACA,CAGA,6CAKA,kBACA,WALA,qBAEA,WACA,kBAFA,SAKA,CAGA,6BACA,WACA,CAEA,qCAKA,gDAHA,aAEA,YAHA,kBAEA,UAGA,CAEA,iCACA,qBACA,YACA,eACA,gBACA,uBAEA,sBADA,kBAEA","sources":["webpack://job/./src/views/cron-job/list/components/render-strategy.vue","webpack://job/./src/views/cron-job/list/components/operation/execute-notify.vue","webpack://job/./src/views/cron-job/list/components/operation/form-item-strategy/execute-before-notify.vue","webpack://job/./src/views/cron-job/list/components/operation/form-item-strategy/finish-before-notify.vue","webpack://job/./src/views/cron-job/list/components/operation/cron-job.vue","webpack://job/./src/views/cron-job/list/components/operation/index.vue","webpack://job/./src/views/cron-job/list/components/detail.vue","webpack://job/./src/views/cron-job/list/components/history-record/index.vue","webpack://job/./src/views/cron-job/list/index.vue"],"sourcesContent":["<template>\n    <div class=\"cron-item\">\n        <div class=\"triangle\" :style=\"{ left: `${left}px` }\" />\n        <div>\n            <slot />\n        </div>\n    </div>\n</template>\n<script>\n    export default {\n        props: {\n            left: String,\n        },\n    };\n</script>\n<style lang=\"postcss\">\n    .cron-item {\n        position: relative;\n        padding: 16px 20px;\n        margin-top: 10px;\n        background: #f0f1f5;\n\n        .triangle {\n            position: absolute;\n            top: -7px;\n            left: 84px;\n            z-index: 1;\n            width: 0;\n            height: 0;\n            border-right: 7px solid transparent;\n            border-bottom: 7px solid #f0f1f5;\n            border-left: 7px solid transparent;\n\n            span {\n                position: absolute;\n                top: 2px;\n                left: -9px;\n                display: block;\n                width: 0;\n                height: 0;\n                border-right: 6px solid transparent;\n                border-bottom: 6px solid #fafbfd;\n                border-left: 6px solid transparent;\n            }\n        }\n    }\n</style>\n","<template>\n    <div class=\"execute-notify-box\" v-bkloading=\"{ isLoading }\">\n        <jb-form-item :label=\"notifyOffsetLabel\" layout=\"inline\" :rules=\"rules.notifyOffset\">\n            <bk-select :value=\"formData.notifyOffset\" class=\"time-select\" @change=\"handleNotifyOffsetChange\">\n                <bk-option :id=\"10\" :name=\"`10 ${'分钟'}`\">10 {{ '分钟' }}</bk-option>\n                <bk-option :id=\"30\" :name=\"`30 ${'分钟'}`\">30 {{ '分钟' }}</bk-option>\n                <bk-option :id=\"45\" :name=\"`45 ${'分钟'}`\">45 {{ '分钟' }}</bk-option>\n                <bk-option :id=\"60\" :name=\"`1 ${'小时'}`\">1 {{ '小时' }}</bk-option>\n            </bk-select>\n        </jb-form-item>\n        <jb-form-item :label=\"'通知对象'\" layout=\"inline\">\n            <jb-user-selector\n                :placeholder=\"'输入通知对象'\"\n                class=\"input\"\n                :user=\"formData.notifyUser.userList\"\n                :role=\"formData.notifyUser.roleList\"\n                :filter-list=\"['JOB_EXTRA_OBSERVER']\"\n                @on-change=\"handleApprovalUserChange\" />\n        </jb-form-item>\n        <jb-form-item :label=\"'通知方式'\" style=\"margin-bottom: 0;\" layout=\"inline\">\n            <div class=\"notify-channel-wraper\">\n                <bk-checkbox\n                    @click.native=\"handleToggleAllChannel\"\n                    :checked=\"isChannelAll\"\n                    :indeterminate=\"isChannelIndeterminate\">\n                    {{ '全部' }}\n                </bk-checkbox>\n                <bk-checkbox-group\n                    :value=\"formData.notifyChannel\"\n                    class=\"all-channel\"\n                    @change=\"handleNotifyChannelChange\">\n                    <bk-checkbox\n                        v-for=\"channel in channleList\"\n                        :key=\"channel.code\"\n                        :value=\"channel.code\">\n                        {{ channel.name }}\n                    </bk-checkbox>\n                </bk-checkbox-group>\n            </div>\n        </jb-form-item>\n    </div>\n</template>\n<script>\n       import QueryGlobalSettingService from '@service/query-global-setting';\n    import JbUserSelector from '@components/jb-user-selector';\n\n    export default {\n        name: '',\n        components: {\n            JbUserSelector,\n        },\n        props: {\n            notifyOffsetLabel: {\n                type: String,\n                required: true,\n            },\n            formData: {\n                type: Object,\n                required: true,\n            },\n            mode: {\n                type: String,\n                default: 'finish-before', // execute-beofre / finish-before\n            },\n        },\n        data () {\n            return {\n                isLoading: false,\n                channleList: [{},{},{}],\n            };\n        },\n        computed: {\n            isChannelAll () {\n                if (this.channleList.length < 1) {\n                    return false;\n                }\n                return this.formData.notifyChannel.length === this.channleList.length;\n            },\n            isChannelIndeterminate () {\n                if (this.formData.notifyChannel.length < 1) {\n                    return false;\n                }\n                return this.formData.notifyChannel.length !== this.channleList.length;\n            },\n        },\n        created () {\n            this.fetchAllChannel();\n            this.$emit('on-change', {\n                notifyOffset: 10,\n            });\n            this.rules = {\n                notifyOffset: [],\n            };\n            if (this.mode === 'execute-beofre') {\n                this.rules.notifyOffset = [\n                    {\n                        // 执行时间 - 执行前通知的时间 > 当前时间\n                        validator: () => new Date(this.formData.executeTime).getTime()\n                            - parseInt(this.formData.notifyOffset, 10) * 6000 > Date.now(),\n                        message: '设置的提醒时间已过期',\n                        trigger: 'change',\n                    },\n                ];\n            }\n        },\n        beforeDestroy () {\n            this.$emit('on-change', {\n                notifyOffset: 0,\n                notifyUser: {\n                    userList: [{},{},{}],\n                    roleList: [{},{},{}],\n                },\n                notifyChannel: [],\n            });\n        },\n        methods: {\n            fetchAllChannel () {\n                QueryGlobalSettingService.fetchActiveNotifyChannel()\n                    .then((data) => {\n                        this.channleList = data;\n                    })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            },\n            handleToggleAllChannel () {\n                if (this.isChannelAll) {\n                    this.handleNotifyChannelChange([]);\n                } else {\n                    this.handleNotifyChannelChange(this.channleList.map(_ => _.code));\n                }\n            },\n            handleNotifyOffsetChange (value) {\n                this.$emit('on-change', {\n                    notifyOffset: value,\n                });\n            },\n            handleApprovalUserChange (userList, roleList) {\n                this.$emit('on-change', {\n                    notifyUser: {\n                        userList,\n                        roleList,\n                    },\n                });\n            },\n            handleNotifyChannelChange (value) {\n                this.$emit('on-change', {\n                    notifyChannel: value,\n                });\n            },\n        },\n    };\n</script>\n<style lang='postcss'>\n    html[lang=\"en-US\"] .notify-channel-wraper {\n        .bk-form-checkbox {\n            width: 64px;\n        }\n    }\n\n    .execute-notify-box {\n        display: flex;\n        flex-direction: column;\n\n        .row {\n            display: flex;\n            margin-bottom: 20px;\n\n            &:last-child {\n                margin-bottom: 0;\n            }\n\n            .label {\n                font-size: 14px;\n                color: #63656e;\n                text-align: left;\n                flex: 0 0 80px;\n            }\n        }\n\n        .time-select {\n            width: 100%;\n            background: #fff;\n        }\n\n        .notify-channel-wraper {\n            display: flex;\n            align-items: flex-start;\n            min-height: 32px;\n            white-space: nowrap;\n\n            .all-channel {\n                display: flex;\n                flex-wrap: wrap;\n            }\n        }\n\n        .bk-form-checkbox {\n            display: flex;\n            flex: 0 0 auto;\n            margin-top: 6px;\n            margin-right: 40px;\n        }\n\n        .bk-checkbox {\n            background: #fff;\n        }\n    }\n</style>\n","<template>\n    <div>\n        <jb-form-item>\n            <bk-checkbox v-model=\"executeBeforeNotify\">{{ '执行前通知' }}</bk-checkbox>\n        </jb-form-item>\n        <render-strategy v-if=\"executeBeforeNotify\" left=\"55\" class=\"notify-wraper\">\n            <execute-notify\n                v-on=\"$listeners\"\n                v-bind=\"$attrs\"\n                mode=\"execute-beofre\"\n                :form-data=\"formData\"\n                :notify-offset-label=\"'执行前'\" />\n        </render-strategy>\n    </div>\n</template>\n<script>\n    import RenderStrategy from '../../render-strategy';\n    import ExecuteNotify from '../execute-notify';\n\n    export default {\n        name: '',\n        components: {\n            RenderStrategy,\n            ExecuteNotify,\n        },\n        props: {\n            formData: {\n                type: Object,\n                required: true,\n            },\n        },\n        data () {\n            return {\n                executeBeforeNotify: false,\n            };\n        },\n        watch: {\n            formData: {\n                handler (formData) {\n                    if (this.formData.notifyOffset\n                        || this.formData.notifyChannel.length > 0\n                        || this.formData.notifyUser.roleList.length > 0\n                        || this.formData.notifyUser.userList.length > 0) {\n                        this.executeBeforeNotify = true;\n                    }\n                },\n                immediate: true,\n            },\n        },\n    };\n</script>\n<style lang=\"postcss\">\n    .notify-wraper {\n        margin-top: -20px !important;\n        margin-bottom: 20px;\n    }\n</style>\n","<template>\n    <div v-if=\"isShowNotify\">\n        <jb-form-item>\n            <bk-checkbox v-model=\"isFinishBeforeNotify\">{{ '结束前通知' }}</bk-checkbox>\n        </jb-form-item>\n        <render-strategy v-if=\"isFinishBeforeNotify\" left=\"55\" class=\"notify-wraper\">\n            <execute-notify\n                v-on=\"$listeners\"\n                v-bind=\"$attrs\"\n                :form-data=\"formData\"\n                :notify-offset-label=\"'结束前'\" />\n        </render-strategy>\n    </div>\n</template>\n<script>\n    import RenderStrategy from '../../render-strategy';\n    import ExecuteNotify from '../execute-notify';\n\n    export default {\n        name: '',\n        components: {\n            RenderStrategy,\n            ExecuteNotify,\n        },\n        props: {\n            formData: {\n                type: Object,\n                required: true,\n            },\n        },\n        data () {\n            return {\n                isFinishBeforeNotify: false,\n            };\n        },\n        computed: {\n            isShowNotify () {\n                if (!this.formData.endTime) {\n                    return false;\n                }\n                if (this.isFinishBeforeNotify) {\n                    return true;\n                }\n                return true;\n            },\n        },\n        watch: {\n            formData: {\n                handler (formData) {\n                    if (this.formData.notifyOffset\n                        || this.formData.notifyChannel.length > 0\n                        || this.formData.notifyUser.roleList.length > 0\n                        || this.formData.notifyUser.userList.length > 0) {\n                        this.isFinishBeforeNotify = true;\n                    }\n                },\n                immediate: true,\n            },\n        },\n    };\n</script>\n<style lang=\"postcss\">\n    .notify-wraper {\n        margin-top: -20px !important;\n    }\n</style>\n","<template>\n    <div class=\"cron-job\"\n        :class=\"[\n            { 'is-error': isError },\n            `error-${errorField}`,\n            `select-${selectIndex}`,\n        ]\">\n        <div class=\"time-describe\">\n            <span class=\"time-text minute\" @click=\"handleTimeTextChange('minute')\">{{ '分' }}</span>\n            <span class=\"time-text hour\" @click=\"handleTimeTextChange('hour')\">{{ '时' }}</span>\n            <span class=\"time-text dayOfMonth\" @click=\"handleTimeTextChange('dayOfMonth')\">{{ '日' }}</span>\n            <span class=\"time-text month\" @click=\"handleTimeTextChange('month')\">{{ '月' }}</span>\n            <span class=\"time-text dayOfWeek\" @click=\"handleTimeTextChange('dayOfWeek')\">{{ '周' }}</span>\n        </div>\n        <div class=\"time-input\">\n            <input\n                ref=\"input\"\n                class=\"input\"\n                type=\"text\"\n                :value=\"nativeValue\"\n                @input=\"handleInput\"\n                @blur=\"handleBlur\"\n                @keyup.left=\"handleSelectText\"\n                @keyup.right=\"handleSelectText\"\n                @mousedown=\"handleSelectText\">\n        </div>\n        <div class=\"time-parse\" v-if=\"parseValue.length > 1\">\n            <template v-if=\"parseValue[0]\">\n                <span class=\"month\">{{ parseValue[0] }}</span>\n            </template>\n            <template v-if=\"parseValue[1]\">\n                <span class=\"dayOfMonth\">{{ parseValue[1] }}</span>\n                <span v-if=\"parseValue[2]\">以及当月</span>\n            </template>\n            <template v-if=\"parseValue[2]\">\n                <span class=\"dayOfWeek\">{{ parseValue[2] }}</span>\n            </template>\n            <template v-if=\"parseValue[3]\">\n                <span class=\"hour\">{{ parseValue[3] }}</span>\n            </template>\n            <span class=\"minute\">{{ parseValue[4] }}</span>\n        </div>\n        <div v-if=\"nextTime.length > 0\" class=\"time-next\" :class=\"{ active: isTimeMore }\">\n            <div class=\"label\">{{ '下次：' }}</div>\n            <div class=\"value\">\n                <div v-for=\"(time, index) in nextTime\" :key=\"`${time}_${index}`\">{{ time }}</div>\n            </div>\n            <div class=\"arrow\" @click=\"handleShowMore\">\n                <Icon type=\"angle-double-down\" class=\"arrow-button\" />\n            </div>\n        </div>\n    </div>\n</template>\n<script>\n    import _ from 'lodash';\n    import CronExpression from 'cron-parser-custom';\n    import Translate from '@utils/cron/translate';\n    import { prettyDateTimeFormat } from '@utils/assist';\n\n    const labelIndexMap = {\n        minute: 0,\n        hour: 1,\n        dayOfMonth: 2,\n        month: 3,\n        dayOfWeek: 4,\n        0: 'minute',\n        1: 'hour',\n        2: 'dayOfMonth',\n        3: 'month',\n        4: 'dayOfWeek',\n    };\n\n    export default {\n        name: '',\n        props: {\n            value: {\n                type: String,\n                default: '',\n            },\n        },\n        data () {\n            return {\n                selectIndex: '',\n                nativeValue: this.value,\n                nextTime: [],\n                parseValue: [],\n                errorField: '',\n                isError: false,\n                isTimeMore: false,\n            };\n        },\n        mounted () {\n            if (!this.nativeValue) {\n                return;\n            }\n            this.checkAndTranslate(this.nativeValue);\n        },\n        methods: {\n            /**\n             * @desc 检测crontab格式和翻译\n             */\n            checkAndTranslate (value) {\n                const interval = CronExpression.parse(`0 ${value.trim()}`, {\n                    currentDate: new Date(),\n                });\n\n                let i = 5;\n                this.nextTime = [];\n                while (i > 0) {\n                    this.nextTime.push(prettyDateTimeFormat(interval.next().toString()));\n                    i -= 1;\n                }\n\n                this.errorField = '';\n                this.isError = false;\n                this.parseValue = Translate(value);\n            },\n            /**\n             * @desc 选中crontab字段\n             * @param {String} lable 选中的字段名\n             */\n            handleTimeTextChange (label) {\n                if (!this.nativeValue) {\n                    return;\n                }\n                const timeItem = this.nativeValue.split(' ');\n                const index = labelIndexMap[label];\n                if (timeItem.length < index) {\n                    return;\n                }\n                const preStrLength = timeItem.slice(0, index).join('').length + index;\n                const endPosition = preStrLength + timeItem[index].length;\n                setTimeout(() => {\n                    this.selectIndex = label;\n                    this.$refs.input.focus();\n                    this.$refs.input.selectionStart = preStrLength;\n                    this.$refs.input.selectionEnd = endPosition;\n                });\n            },\n            /**\n             * @desc 输入框失去焦点\n             */\n            handleBlur () {\n                this.selectIndex = '';\n            },\n            /**\n             * @desc 选中输入框文本\n             * @param {Object} event 文本选择事件\n             */\n            handleSelectText (event) {\n                const $target = event.target;\n                const value = _.trim($target.value);\n                this.nativeValue = value;\n                if (!value) return;\n                setTimeout(() => {\n                    const cursorStart = $target.selectionStart;\n                    const cursorStr = value.slice(0, cursorStart);\n                    const checkBackspce = cursorStr.match(/ /g);\n                    if (checkBackspce) {\n                        this.selectIndex = labelIndexMap[checkBackspce.length];\n                    } else {\n                        this.selectIndex = labelIndexMap['0'];\n                    }\n                });\n            },\n            /**\n             * @desc 输入框输入\n             * @param {Object} event 输入框input事件\n             */\n            handleInput: _.debounce(function (event) {\n                const { value } = event.target;\n                this.nativeValue = value;\n\n                try {\n                    this.checkAndTranslate(value);\n                    this.$emit('change', value);\n                    this.$emit('input', value);\n                } catch (error) {\n                    this.parseValue = [];\n                    this.nextTime = [];\n                    const all = [\n                        'minute',\n                        'hour',\n                        'dayOfMonth',\n                        'month',\n                        'dayOfWeek',\n                    ];\n                    if (all.includes(error.message)) {\n                        this.errorField = error.message;\n                    }\n                    this.isError = true;\n                    this.$emit('change', '');\n                    this.$emit('input', '');\n                }\n            }, 200),\n            /**\n             * @desc 展示下次执行时间列表\n             */\n            handleShowMore () {\n                this.isTimeMore = !this.isTimeMore;\n            },\n        },\n    };\n</script>\n<style lang='postcss'>\n    .cron-job {\n        background: #f0f1f5;\n\n        &.is-error {\n            .time-input {\n                .input {\n                    border-color: #ff5656;\n                }\n            }\n        }\n\n        /* stylelint-disable selector-class-pattern */\n        &.error-month .month,\n        &.error-dayOfMonth .dayOfMonth,\n        &.error-dayOfWeek .dayOfWeek,\n        &.error-hour .hour,\n        &.error-minute .minute {\n            color: #ff5656 !important;\n        }\n\n        &.select-month .month,\n        &.select-dayOfMonth .dayOfMonth,\n        &.select-dayOfWeek .dayOfWeek,\n        &.select-hour .hour,\n        &.select-minute .minute {\n            color: #3a84ff;\n        }\n\n        .time-describe {\n            display: flex;\n            justify-content: center;\n        }\n\n        .time-text {\n            padding: 0 19px;\n            font-size: 12px;\n            line-height: 22px;\n            color: #c4c6cc;\n            cursor: pointer;\n            transition: all 0.1s;\n\n            &.active {\n                color: #3a84ff;\n            }\n\n            &.field-error {\n                color: #ff5656;\n            }\n        }\n\n        .time-input {\n            .input {\n                width: 100%;\n                height: 48px;\n                padding: 0 30px;\n                font-size: 24px;\n                line-height: 48px;\n                word-spacing: 30px;\n                color: #63656e;\n                text-align: center;\n                border: 1px solid #3a84ff;\n                border-radius: 2px;\n                outline: none;\n\n                &::selection {\n                    color: #3a84ff;\n                    background: transparent;\n                }\n            }\n        }\n\n        .time-parse {\n            padding: 10px 0;\n            margin-top: 8px;\n            line-height: 18px;\n            color: #63656e;\n            text-align: center;\n        }\n\n        .time-next {\n            display: flex;\n            height: 18px;\n            overflow: hidden;\n            font-size: 12px;\n            line-height: 18px;\n            color: #979ba5;\n            text-align: center;\n            transition: height 0.2s linear;\n            align-content: center;\n            justify-content: center;\n\n            &.active {\n                height: 90px;\n\n                .arrow {\n                    align-items: flex-end;\n\n                    .arrow-button {\n                        transform: rotateZ(-180deg);\n                    }\n                }\n            }\n\n            .value {\n                text-align: left;\n            }\n\n            .arrow {\n                display: flex;\n                padding-top: 2px;\n                padding-bottom: 2px;\n                padding-left: 2px;\n                font-size: 12px;\n                cursor: pointer;\n            }\n        }\n    }\n</style>\n","<template>\n    <div\n        class=\"time-task-operation\"\n        :class=\"{ loading: isLoading }\"\n        v-bkloading=\"{ isLoading }\">\n        <jb-form\n            v-if=\"!isLoading\"\n            :model=\"formData\"\n            :rules=\"rules\"\n            form-type=\"vertical\"\n            ref=\"timeTaskForm\">\n            <jb-form-item\n                :label=\"'任务名称'\"\n                required\n                property=\"name\">\n                <jb-input\n                    :placeholder=\"'推荐按照该定时执行的实际场景来取名...'\"\n                    v-model=\"formData.name\"\n                    :maxlength=\"60\" />\n            </jb-form-item>\n            <jb-form-item\n                :label=\"'执行策略'\"\n                required\n                :property=\"strategyField\">\n                <bk-radio-group\n                    :value=\"strategy\"\n                    @change=\"handleStrategyChange\">\n                    <bk-radio-button value=\"once\">\n                        {{ '单次执行' }}\n                    </bk-radio-button>\n                    <bk-radio-button value=\"period\">\n                        {{ '周期执行' }}\n                    </bk-radio-button>\n                </bk-radio-group>\n                <div class=\"strategy-wraper\">\n                    <render-strategy\n                        v-if=\"strategy === 'once'\"\n                        left=\"40\">\n                        <bk-date-picker\n                            style=\"width: 100%;\"\n                            v-model=\"formData.executeTime\"\n                            :transfer=\"true\"\n                            :clearable=\"false\"\n                            :options=\"dateOptions\"\n                            type=\"datetime\"\n                            :placeholder=\"'选择日期时间'\" />\n                    </render-strategy>\n                    <render-strategy\n                        v-else\n                        left=\"135\">\n                        <cron-job\n                            v-model=\"formData.cronExpression\"\n                            class=\"cron-task\" />\n                    </render-strategy>\n                </div>\n            </jb-form-item>\n            <form-item-factory\n                v-for=\"item in strategyFormItemList\"\n                :name=\"item\"\n                :key=\"item\"\n                :form-data=\"formData\"\n                @on-change=\"handleFormItemChange\" />\n            <jb-form-item\n                :label=\"'作业模板'\"\n                required\n                property=\"taskTemplateId\">\n                <bk-select\n                    v-model=\"formData.taskTemplateId\"\n                    :placeholder=\"'选择作业模板'\"\n                    :clearable=\"false\"\n                    searchable\n                    :loading=\"isTemplateLoading\"\n                    @selected=\"handleTemplateChange\">\n                    <auth-option\n                        v-for=\"option in templateList\"\n                        :key=\"option.id\"\n                        :id=\"option.id\"\n                        :name=\"option.name\"\n                        :permission=\"option.canView\"\n                        :resource-id=\"option.id\"\n                        auth=\"job_template/view\" />\n                </bk-select>\n            </jb-form-item>\n            <jb-form-item\n                :label=\"'执行方案'\"\n                required\n                property=\"taskPlanId\">\n                <div\n                    class=\"plan-select\"\n                    :class=\"hasPlan ? 'new-width' : ''\">\n                    <bk-select\n                        v-model=\"formData.taskPlanId\"\n                        :placeholder=\"'选择执行方案'\"\n                        :clearable=\"false\"\n                        \n                        :loading=\"isPlanLoading\"\n                        searchable\n                        @selected=\"handlePlanChange\">\n                        <auth-option\n                            v-for=\"option in planList\"\n                            :key=\"option.id\"\n                            :id=\"option.id\"\n                            :name=\"option.name\"\n                            :permission=\"option.canView\"\n                            :resource-id=\"option.id\"\n                            auth=\"job_plan/view\" />\n                    </bk-select>\n                </div>\n                <div class=\"plan-icon\" v-if=\"hasPlan\">\n                    <Icon\n                        type=\"audit\"\n                        v-bk-tooltips=\"'查看执行方案'\"\n                        @click=\"handleGoPlan\" />\n                </div>\n            </jb-form-item>\n            <div\n                v-if=\"hasPlan\"\n                class=\"global-variable-content\"\n                v-bkloading=\"{ isLoading: isVariableLoading }\">\n                <render-strategy left=\"70\">\n                    <span\n                        v-if=\"isVariabelEmpty\"\n                        class=\"plan-variable-empty\">\n                        {{ '该执行方案无全局变量' }}\n                    </span>\n                    <global-variable-layout v-else type=\"vertical\">\n                        <global-variable\n                            ref=\"usedVariable\"\n                            v-for=\"variable in usedList\"\n                            value-width=\"100%\"\n                            :type=\"variable.type\"\n                            :key=\"`${currentRenderPlanId}_${variable.id}_${variable.name}`\"\n                            :data=\"variable\" />\n                        <toggle-display\n                            v-if=\"unusedList.length > 0\"\n                            :count=\"unusedList.length\"\n                            style=\"max-width: 960px; margin-top: 20px;\">\n                            <div style=\"margin-top: 20px;\">\n                                <global-variable\n                                    ref=\"unusedVariable\"\n                                    v-for=\"variable in unusedList\"\n                                    value-width=\"100%\"\n                                    :type=\"variable.type\"\n                                    :key=\"`${currentRenderPlanId}_${variable.id}_${variable.name}`\"\n                                    :data=\"variable\" />\n                            </div>\n                        </toggle-display>\n                    </global-variable-layout>\n                </render-strategy>\n            </div>\n        </jb-form>\n    </div>\n</template>\n<script>\n       import TaskService from '@service/task-manage';\n    import TaskPlanService from '@service/task-plan';\n    import TimeTaskService from '@service/time-task';\n    import {\n        generatorDefaultCronTime,\n        findUsedVariable,\n    } from '@utils/assist';\n    import { timeTaskNameRule } from '@utils/validator';\n    import GlobalVariableLayout from '@components/global-variable/layout';\n    import GlobalVariable from '@components/global-variable/edit';\n    import ToggleDisplay from '@components/global-variable/toggle-display';\n    import JbInput from '@components/jb-input';\n    import RenderStrategy from '../render-strategy';\n    import FormItemFactory from './form-item-strategy';\n    import CronJob from './cron-job';\n\n    const onceItemList = [\n        'executeBeforeNotify',\n    ];\n    const periodItemList = [\n        'endTime',\n        'finishBeforeNotify',\n    ];\n\n    const getDefaultData = () => ({\n        id: 0,\n        executeBeforeNotify: false,\n        cronExpression: '* * * * *', // 循环执行的定时表达式\n        enable: false, // 是否启用\n        endTime: '', // 周期执行的结束时间\n        executeTime: generatorDefaultCronTime(), // 单次执行的指定执行时间\n        isEnable: false,\n        name: '', // 任务名称\n        notifyChannel: [], // 通知渠道\n        notifyOffset: 0, // 通知提前时间\n        notifyUser: { // 用户角色列表\n            roleList: [{},{},{}],\n            userList: [{},{},{}],\n        },\n        taskPlanId: 0, // 关联的执行方案 ID\n        taskTemplateId: 0,\n        variableValue: [], // 变量信息\n    });\n \n    export default {\n        name: '',\n        components: {\n            GlobalVariableLayout,\n            GlobalVariable,\n            ToggleDisplay,\n            RenderStrategy,\n            JbInput,\n            FormItemFactory,\n            CronJob,\n        },\n        props: {\n            data: {\n                type: Object,\n                default: () => ({}),\n            },\n            id: {\n                type: [\n                    String,\n                    Number,\n                ],\n                default: '',\n            },\n        },\n        data () {\n            this.rules = {};\n            return {\n                isLoading: false,\n                isTemplateLoading: false,\n                isPlanLoading: false,\n                strategy: 'period',\n                formData: getDefaultData(),\n                templateList: [{},{},{}],\n                planList: [{},{},{}],\n                planStepList: [{},{},{}],\n                isVariableLoading: false,\n                currentPlanVariableList: [{},{},{}],\n                currentRenderPlanId: 0, // 切换执行方案后更新全局变量（不同执行方案里面的变量id和name是相同的当value不同时页面不会更新）\n                usedList: [{},{},{}],\n                unusedList: [{},{},{}],\n                isRepeat: false,\n                dateOptions: {\n                    disabledDate (date) {\n                        return date.valueOf() < Date.now() - 86400000;\n                    },\n                },\n            };\n        },\n        computed: {\n            strategyFormItemList () {\n                if (this.strategy === 'once') {\n                    return onceItemList;\n                }\n                return periodItemList;\n            },\n            strategyField () {\n                return this.strategy === 'once' ? 'executeTime' : 'cronExpression';\n            },\n            hasTemplate () {\n                return !!this.formData.taskTemplateId;\n            },\n            hasPlan () {\n                return !!this.formData.taskPlanId;\n            },\n            hasVariabel () {\n                return this.currentPlanVariableList.length < 1;\n            },\n            isVariabelEmpty () {\n                return this.currentPlanVariableList.length < 1;\n            },\n        },\n        watch: {\n            strategy: {\n                handler (value) {\n                    if (value === 'once') {\n                        delete this.rules.cronExpression;\n                        this.rules.executeTime = [\n                            { required: true, message: '单次执行时间必填', trigger: 'blur' },\n                            {\n                                validator: value => new Date(value).getTime() > Date.now(),\n                                message: '执行时间无效（早于当前时间）',\n                                trigger: 'blur',\n                            },\n                        ];\n                    } else {\n                        delete this.rules.executeTime;\n                        this.rules.cronExpression = [\n                            { required: true, message: '请输入正确时间表达式', trigger: 'blur' },\n                        ];\n                    }\n                },\n                immediate: true,\n            },\n            /**\n             * @desc 检测选中的执行方案的全局变量，判断出被使用和未被使用的变量\n             * @param { Array } variableList\n             */\n            currentPlanVariableList (variableList) {\n                // 执行方案使用的步骤中引用变量的状态\n                const planStepList = this.planStepList.filter(step => step.enable === 1);\n                const usedVariableNameMap = findUsedVariable(planStepList).reduce((result, item) => {\n                    result[item] = true;\n                    return result;\n                }, {});\n                // 执行方案中的步骤使用了得变量\n                const usedList = [];\n                // 未被使用的变量\n                const unusedList = [];\n                variableList.forEach((variable) => {\n                    if (usedVariableNameMap[variable.name]) {\n                        usedList.push(variable);\n                    } else {\n                        unusedList.push(variable);\n                    }\n                });\n                this.usedList = Object.freeze(usedList);\n                this.unusedList = Object.freeze(unusedList);\n            },\n        },\n        created () {\n            // 作业模板列表\n            this.fetchTemplateList();\n\n            if (this.data.id) {\n                // 编辑状态\n\n                this.formData.id = this.data.id;\n                this.formData.name = this.data.name;\n                this.formData.taskTemplateId = this.data.taskTemplateId;\n                this.formData.taskPlanId = this.data.taskPlanId;\n                this.fetchData();\n                this.fetchTemplatePlanList();\n            } else {\n                // 新建(指定指定执行方案)\n\n                // 通过url指定作业模板和执行方案的定时任务任务\n                // 执行方案id 必须是 templateId 同时存在时才有效\n                const { templateId, planId } = this.$route.query;\n                if (parseInt(templateId, 10) > 0) {\n                    this.formData.taskTemplateId = parseInt(templateId, 10);\n                    this.fetchTemplatePlanList();\n                    if (parseInt(planId, 10) > 0) {\n                        this.formData.taskPlanId = parseInt(planId, 10);\n                        this.fetchPlanDetailInfo();\n                    }\n                }\n            }\n\n            this.rules = Object.assign({}, this.rules, {\n                name: [\n                    {\n                        required: true,\n                        message: '任务名称必填',\n                        trigger: 'blur',\n                    },\n                    {\n                        validator: timeTaskNameRule.validator,\n                        message: timeTaskNameRule.message,\n                        trigger: 'blur',\n                    },\n                    {\n                        validator: this.checkName,\n                        message: '任务名称已存在，请重新输入',\n                        trigger: 'blur',\n                    },\n                ],\n                taskTemplateId: [\n                    {\n                        required: true,\n                        message: '作业模板必填',\n                        trigger: 'blur',\n                    },\n                ],\n                taskPlanId: [\n                    {\n                        required: true,\n                        message: '执行方案必填',\n                        trigger: 'blur',\n                    },\n                ],\n            });\n        },\n        \n        methods: {\n            /**\n             * @desc 定时任务详情\n             */\n            fetchData () {\n                this.isLoading = true;\n                Promise.all([\n                    TimeTaskService.getDetail({\n                        id: this.formData.id,\n                    }),\n                    TaskPlanService.fetchPlanDetailInfo({\n                        templateId: this.formData.taskTemplateId,\n                        id: this.formData.taskPlanId,\n                    }),\n                ]).then(([\n                    cronJob,\n                    planInfo,\n                ]) => {\n                    const {\n                        cronExpression,\n                        enable,\n                        endTime,\n                        executeTime,\n                        name,\n                        notifyChannel,\n                        notifyOffset,\n                        notifyUser,\n                        scriptId,\n                        scriptVersionId,\n                        taskPlanId,\n                        taskTemplateId,\n                    } = cronJob;\n\n                    if (executeTime) {\n                        this.strategy = 'once';\n                    }\n                    this.formData = {\n                        ...this.formData,\n                        cronExpression,\n                        enable,\n                        endTime,\n                        executeTime,\n                        name,\n                        notifyChannel,\n                        notifyOffset,\n                        notifyUser,\n                        scriptId,\n                        scriptVersionId,\n                        taskPlanId,\n                        taskTemplateId,\n                        variableValue: [],\n                    };\n\n                    // 使用执行方案的变量\n                    // 如果定时任务任务中存有变量变量值——拷贝过来\n                    // 获取执行方案的接口是一个批量接口，取数组第一个\n                    if (planInfo) {\n                        this.planStepList = Object.freeze(planInfo.stepList);\n                        const cronJobVariableList = [\n                            ...cronJob.variableValue,\n                        ];\n                        // 当前定时任务变量\n                        const cronJobVariableMap = cronJobVariableList.reduce((result, variableItem) => {\n                            result[variableItem.id] = variableItem;\n                            return result;\n                        }, {});\n                        const currentPlanVariableList = planInfo.variableList;\n                        // 拷贝定时任务中的变量值到执行方案的相同变量中\n                        // 定时任务中的变量是执行的赋值逻辑，分别使用的是value、server字段来存储\n                        // 执行方案中的变量表示的是默认值，分别使用defaultValue、defaultTargetValue字段来存储\n                        currentPlanVariableList.forEach((validVariableFromPlan) => {\n                            if (cronJobVariableMap[validVariableFromPlan.id]) {\n                                const { value, targetValue } = cronJobVariableMap[validVariableFromPlan.id];\n                                validVariableFromPlan.defaultValue = value;\n                                validVariableFromPlan.defaultTargetValue = targetValue;\n                            }\n                        });\n                        this.currentPlanVariableList = Object.freeze(currentPlanVariableList);\n                    }\n                })\n                    .finally(() => {\n                        this.isLoading = false;\n                    })\n                    .catch((error) => {\n                        if (error.code === 1238001) {\n                            this.formData.taskTemplateId = '';\n                            this.formData.taskPlanId = '';\n                        }\n                    });\n            },\n            /**\n             * @desc 所有的作业模板列表\n             */\n            fetchTemplateList () {\n                this.isTemplateLoading = true;\n                TaskService.taskList({\n                    pageSize: -1,\n                    start: -1,\n                }).then(({ data }) => {\n                    this.templateList = Object.freeze(data);\n                })\n                    .finally(() => {\n                        this.isTemplateLoading = false;\n                    });\n            },\n            /**\n             * @desc 指定作业模板关联的执行方案列白哦\n             */\n            fetchTemplatePlanList () {\n                this.isPlanLoading = true;\n                TaskPlanService.fetchTaskPlan({\n                    id: this.formData.taskTemplateId,\n                }).then((data) => {\n                    this.planList = Object.freeze(data);\n                })\n                    .finally(() => {\n                        this.isPlanLoading = false;\n                    });\n            },\n            /**\n             * @desc 执行方案详情\n             */\n            fetchPlanDetailInfo () {\n                this.isVariableLoading = true;\n                TaskPlanService.fetchPlanDetailInfo({\n                    templateId: this.formData.taskTemplateId,\n                    id: this.formData.taskPlanId,\n                }).then((planInfo) => {\n                    this.currentPlanVariableList = Object.freeze(planInfo.variableList);\n                    this.currentRenderPlanId = this.formData.taskPlanId;\n                    this.planStepList = Object.freeze(planInfo.stepList);\n                })\n                    .finally(() => {\n                        this.isVariableLoading = false;\n                    });\n            },\n            /**\n             * @desc 检测定时任务是否重名\n             * @param {String} name 定时任务名\n             */\n            checkName (name) {\n                return TimeTaskService.timeTaskCheckName({\n                    id: this.formData.id,\n                    name,\n                });\n            },\n            /**\n             * @desc 切换执行策略\n             * @param {String} strategy 执行策略\n             */\n            handleStrategyChange (strategy) {\n                this.strategy = strategy;\n                if (strategy === 'once') {\n                    this.$refs.timeTaskForm.clearError('cronExpression');\n                    this.formData.executeTime = generatorDefaultCronTime();\n                } else {\n                    this.formData.cronExpression = '* * * * *';\n                }\n                this.formData.endTime = '';\n                this.formData.notifyChannel = [];\n                this.formData.notifyOffset = 0; // 通知提前时间\n                this.formData.notifyUser = { // 用户角色列表\n                    roleList: [{},{},{}],\n                    userList: [{},{},{}],\n                };\n            },\n            /**\n             * @desc 执行通知相关的字段值更新\n             * @param {Object} payload 字段名和值\n             */\n            handleFormItemChange (payload) {\n                this.formData = {\n                    ...this.formData,\n                    ...payload,\n                };\n            },\n            /**\n             * @desc 作业模板更新\n             * @param {Id} templateId 作业模板id\n             *\n             * 作业模板改变时重新获取执行方案列表\n             */\n            handleTemplateChange (templateId) {\n                this.formData.taskPlanId = '';\n                if (templateId) {\n                    this.fetchTemplatePlanList();\n                }\n            },\n            /**\n             * @desc 执行方案更新\n             * @param {Id} planId 执行方案id\n             *\n             * 执行方案该表重新获取执行方案详情\n             */\n            handlePlanChange (planId) {\n                if (planId) {\n                    this.fetchPlanDetailInfo();\n                }\n            },\n            /**\n             * @desc 打开执行方案详情页\n             */\n            handleGoPlan () {\n                const routerUrl = this.$router.resolve({\n                    name: 'viewPlan',\n                    params: {\n                        templateId: this.formData.taskTemplateId,\n                    },\n                    query: {\n                        from: 'cronJob',\n                        viewPlanId: this.formData.taskPlanId,\n                    },\n                });\n                window.open(routerUrl.href, '_blank');\n            },\n            /**\n             * @desc 保存定时任务\n             */\n            submit () {\n                return this.$refs.timeTaskForm.validate().then(() => {\n                    if (this.currentPlanVariableList.length < 1) {\n                        return Promise.resolve([]);\n                    }\n                    const validateQueue = [];\n                    if (this.$refs.usedVariable) {\n                        this.$refs.usedVariable.forEach((item) => {\n                            validateQueue.push(item.validate());\n                        });\n                    }\n                    if (this.$refs.unusedVariable) {\n                        this.$refs.unusedVariable.forEach((item) => {\n                            validateQueue.push(item.validate());\n                        });\n                    }\n                    return Promise.all(validateQueue);\n                })\n                    .then((variableValue) => {\n                        const params = { ...this.formData };\n                        if (this.strategy === 'period') {\n                            params.executeTime = '';\n                        } else {\n                            params.cronExpression = '';\n                            params.executeTime = new Date(params.executeTime).getTime() / 1000;\n                        }\n                        if (params.endTime) {\n                            params.endTime = new Date(params.endTime).getTime() / 1000;\n                        }\n                        return TimeTaskService.timeTaskUpdate({\n                            ...params,\n                            variableValue,\n                        }).then(() => {\n                            if (params.id) {\n                                // 编辑\n                                this.messageSuccess('定时任务编辑成功');\n                            } else {\n                                // 新建\n                                this.messageSuccess('定时任务创建成功(默认关闭，请手动开启)');\n                            }\n                            \n                            this.$emit('on-change');\n                        });\n                    });\n            },\n        },\n    };\n</script>\n<style lang='postcss' scoped>\n    .time-task-operation {\n        &.loading {\n            height: calc(100vh - 100px);\n        }\n\n        .global-variable-content {\n            position: relative;\n            top: -10px;\n        }\n\n        .plan-select {\n            display: inline-block;\n            width: 100%;\n\n            &.new-width {\n                width: calc(100% - 22px);\n            }\n        }\n\n        .plan-icon {\n            display: inline-block;\n            font-size: 16px;\n            color: #979ba5;\n            vertical-align: top;\n            cursor: pointer;\n        }\n\n        .plan-variable-empty {\n            color: #b2b5bd;\n        }\n    }\n</style>\n","<template>\n    <detail-layout\n        mode=\"see\"\n        class=\"detail-layout-wrapper\"\n        v-bkloading=\"{ isLoading }\">\n        <detail-item :label=\"'任务名称：'\">\n            {{ data.name }}\n        </detail-item>\n        <detail-item :label=\"'执行策略：'\">\n            {{ data.executeStrategyText }}\n        </detail-item>\n        <detail-item :label=\"'执行时间：'\">\n            <span\n                class=\"tips\"\n                v-bk-tooltips.right=\"data.executeTimeTips\">\n                {{ data.policeText }}\n            </span>\n        </detail-item>\n        <detail-item v-if=\"data.endTime\" :label=\"'结束时间：'\">\n            {{ data.endTime }}\n        </detail-item>\n        <detail-item\n            v-if=\"data.notifyOffset\"\n            :label=\"data.executeStrategy === 'once' ? '执行前通知：' : '结束前通知：'\">\n            {{ data.notifyOffset }}{{ '分钟' }}\n        </detail-item>\n        <detail-item\n            v-if=\"renderRoleList.length > 0 || data.notifyUser.userList.length > 0\"\n            :label=\"'通知对象：'\">\n            <div class=\"approval-wraper\">\n                <div v-for=\"role in renderRoleList\" :key=\"role\" class=\"item\">\n                    <Icon type=\"user-group-gray\" class=\"approval-flag\" />\n                    {{ role }}\n                </div>\n                <div v-for=\"user in data.notifyUser.userList\" :key=\"user\" class=\"item\">\n                    <Icon type=\"user\" class=\"approval-flag\" />\n                    {{ user }}\n                </div>\n            </div>\n        </detail-item>\n        <detail-item v-if=\"renderChannel\" :label=\"'通知方式：'\">\n            {{ renderChannel }}\n        </detail-item>\n        <detail-item :label=\"'执行方案：'\">\n            {{ data.taskPlanName }}\n        </detail-item>\n        <render-strategy left=\"20\" v-bkloading=\"{ isVarLoading }\">\n            <template v-if=\"!isVarLoading\">\n                <span\n                    v-if=\"currentPlanVariableList.length < 1\"\n                    class=\"plan-variable-empty\">\n                    {{ '该执行方案无全局变量' }}\n                </span>\n                <global-variable-layout v-else>\n                    <global-variable\n                        v-for=\"variable in currentPlanVariableList\"\n                        value-width=\"100%\"\n                        :type=\"variable.type\"\n                        :layout=\"variable.type === 3 ? 'vertical' : ''\"\n                        :key=\"variable.id + variable.name\"\n                        :data=\"variable\" />\n                </global-variable-layout>\n            </template>\n        </render-strategy>\n    </detail-layout>\n</template>\n<script>\n    import QueryGlobalSettingService from '@service/query-global-setting';\n    import NotifyService from '@service/notify';\n    import TaskPlanService from '@service/task-plan';\n    import DetailLayout from '@components/detail-layout';\n    import DetailItem from '@components/detail-layout/item';\n    import GlobalVariableLayout from '@components/global-variable/layout';\n    import GlobalVariable from '@components/global-variable/view';\n    import RenderStrategy from './render-strategy';\n\n    export default {\n        name: 'TimeTaskDetail',\n        components: {\n            DetailLayout,\n            DetailItem,\n            RenderStrategy,\n            GlobalVariableLayout,\n            GlobalVariable,\n        },\n        props: {\n            data: {\n                type: Object,\n                default: () => ({}),\n            },\n        },\n        data () {\n            return {\n                isLoading: true,\n                isVarLoading: false,\n                renderRoleList: [{},{},{}],\n                renderChannel: '',\n                currentPlanVariableList: [{},{},{}],\n            };\n        },\n        \n        created () {\n            Promise.all([\n                this.fetchData(),\n                this.fetchRoleList(),\n                this.fetchAllChannel(),\n            ]).finally(() => {\n                this.isLoading = false;\n            });\n        },\n        methods: {\n            /**\n             * @desc 获取定时人详情\n             */\n            fetchData () {\n                TaskPlanService.fetchPlanDetailInfo({\n                    templateId: this.data.taskTemplateId,\n                    id: this.data.taskPlanId,\n                }).then((planInfo) => {\n                    // 使用执行方案的变量\n                    // 如果定时任务任务中存有变量变量值——拷贝过来\n                    const currentPlanVariableList = planInfo.variableList;\n                    // 当前定时任务变量\n                    const cronJobVariableMap = this.data.variableValue.reduce((result, variableItem) => {\n                        result[variableItem.id] = variableItem;\n                        return result;\n                    }, {});\n                    // 拷贝定时任务中的变量值到执行方案的相同变量中\n                    // 定时任务中的变量是执行的赋值逻辑，分别使用的是value、server字段来存储\n                    // 执行方案中的变量表示的是默认值，分别使用defaultValue、defaultTargetValue字段来存储\n                    currentPlanVariableList.forEach((validVariableFromPlan) => {\n                        if (cronJobVariableMap[validVariableFromPlan.id]) {\n                            const { value, targetValue } = cronJobVariableMap[validVariableFromPlan.id];\n                            validVariableFromPlan.defaultValue = value;\n                            validVariableFromPlan.defaultTargetValue = targetValue;\n                        }\n                    });\n                    this.currentPlanVariableList = Object.freeze(currentPlanVariableList);\n                });\n            },\n            /**\n             * @desc 通知人列表\n             */\n            fetchRoleList () {\n                NotifyService.fetchRoleList()\n                    .then((data) => {\n                        const roleMap = {};\n                        data.forEach((role) => {\n                            roleMap[role.code] = role.name;\n                        });\n                        this.renderRoleList = this.data.notifyUser.roleList.map(_ => roleMap[_]);\n                    });\n            },\n            /**\n             * @desc 通知渠道\n             */\n            fetchAllChannel () {\n                QueryGlobalSettingService.fetchActiveNotifyChannel()\n                    .then((data) => {\n                        const channelMap = {};\n                        data.forEach((channel) => {\n                            channelMap[channel.code] = channel.name;\n                        });\n                        this.renderChannel = this.data.notifyChannel.map(_ => channelMap[_]).join('，');\n                    });\n            },\n        },\n    };\n</script>\n<style lang=\"postcss\" scoped>\n    .detail-layout-wrapper {\n        .approval-wraper {\n            display: flex;\n            align-items: center;\n            height: 34px;\n\n            .item {\n                display: flex;\n                height: 20px;\n                padding: 0 6px;\n                margin-right: 10px;\n                font-size: 12px;\n                color: #63656e;\n                background: #f0f1f5;\n                border-radius: 2px;\n                align-items: center;\n            }\n\n            .approval-flag {\n                margin-right: 4px;\n            }\n        }\n\n        .detail-item {\n            margin-bottom: 0;\n        }\n\n        .plan-variable-empty {\n            color: #b2b5bd;\n        }\n    }\n</style>\n","<template>\n    <div class=\"cron-job-history-record\">\n        <div class=\"record-tab-wraper\">\n            <div\n                class=\"tab-item\"\n                :class=\"{ active: listTab === 'launch' }\"\n                @click=\"handleTabChange('launch')\">\n                <div class=\"tab-name\">{{ '任务正常启动' }}</div>\n                <Icon\n                    v-if=\"isLaunchLoading\"\n                    type=\"sync-pending\"\n                    svg\n                    class=\"loading-flag\" />\n                <div v-else class=\"tab-nums\">{{ launchNums }}</div>\n            </div>\n            <div\n                class=\"tab-item\"\n                :class=\"{ active: listTab === 'unlaunch' }\"\n                @click=\"handleTabChange('unlaunch')\">\n                <div class=\"tab-name\">{{ '任务未能启动' }}</div>\n                <Icon\n                    v-if=\"isUnlaunchLoading\"\n                    type=\"sync-pending\"\n                    svg\n                    class=\"loading-flag\" />\n                <div v-else class=\"tab-nums\">{{ unLaunchNums }}</div>\n            </div>\n        </div>\n        <component\n            :is=\"listCom\"\n            :data=\"data\"\n            v-bind=\"$attrs\"\n            v-on=\"$listeners\" />\n    </div>\n</template>\n<script>\n    import TaskExecuteService from '@service/task-execute';\n    import TimeTaskService from '@service/time-task';\n    import LaunchList from './launch-list';\n    import UnlaunchList from './unlaunch-list';\n\n    const listComMap = {\n        launch: LaunchList,\n        unlaunch: UnlaunchList,\n    };\n\n    export default {\n        name: '',\n        props: {\n            data: {\n                type: Object,\n                required: true,\n            },\n        },\n        data () {\n            return {\n                listTab: 'launch',\n                isLaunchLoading: true,\n                isUnlaunchLoading: true,\n                launchNums: 0,\n                unLaunchNums: 0,\n            };\n        },\n        computed: {\n            listCom () {\n                return listComMap[this.listTab];\n            },\n        },\n        created () {\n            this.fetchData();\n        },\n        methods: {\n            handleTabChange (value) {\n                this.listTab = value;\n            },\n            fetchData () {\n                TaskExecuteService.fetchExecutionHistoryList({\n                    cronTaskId: this.data.id,\n                    startTime: '',\n                    endTime: '',\n                    start: 0,\n                    pageSize: 1,\n                    timeRange: 30,\n                }).then((data) => {\n                    this.launchNums = data.total;\n                })\n                    .finally(() => {\n                        this.isLaunchLoading = false;\n                    });\n                TimeTaskService.fetchUnlaunchHistory({\n                    cronTaskId: this.data.id,\n                    start: 0,\n                    pageSize: 1,\n                    timeRange: 30,\n                }).then((data) => {\n                    this.unLaunchNums = data.total;\n                })\n                    .finally(() => {\n                        this.isUnlaunchLoading = false;\n                    });\n            },\n        },\n    };\n</script>\n<style lang='postcss' scoped>\n    .cron-job-history-record {\n        .record-tab-wraper {\n            display: flex;\n            padding: 20px 30px 0;\n            margin: -20px -30px 20px;\n            background: #f5f6fa;\n            border-bottom: 1px solid #dcdee5;\n\n            .tab-item {\n                display: flex;\n                height: 32px;\n                padding: 0 12px;\n                margin-right: 20px;\n                margin-bottom: -1px;\n                font-size: 13px;\n                line-height: 32px;\n                color: #63656e;\n                cursor: pointer;\n                background: #e1e3eb;\n                border: 1px solid #e1e3eb;\n                border-bottom: none;\n                border-top-right-radius: 4px;\n                border-top-left-radius: 4px;\n                transition: all 0.15s;\n                align-items: center;\n\n                &.active {\n                    color: ##313238;\n                    background: #fff;\n                    border-color: #dcdee5;\n\n                    .tab-nums {\n                        color: #63656e;\n                        background: #ebecf0;\n                    }\n\n                    .loading-flag {\n                        color: #fff;\n                    }\n                }\n            }\n\n            .tab-name {\n                margin-right: 4px;\n            }\n\n            .tab-nums {\n                height: 16px;\n                padding: 0 4px;\n                font-size: 12px;\n                line-height: 16px;\n                color: #63656e;\n                background: #ebecf0;\n                border-radius: 8px;\n                transition: all 0.15s;\n            }\n\n            .loading-flag {\n                color: #3a84ff;\n                animation: sync-fetch-loading 1s linear infinite;\n            }\n        }\n    }\n</style>\n","<template>\n    <div class=\"cron-job-manage\">\n        <list-action-layout>\n            <auth-button\n                ref=\"create\"\n                theme=\"primary\"\n                auth=\"cron/create\"\n                @click=\"handleCreate\"\n                class=\"w120\"\n                v-test=\"{ type: 'button', value: 'createCrontab' }\">\n                {{ '新建' }}\n            </auth-button>\n            <template #right>\n                <jb-search-select\n                    ref=\"search\"\n                    @on-change=\"handleSearch\"\n                    :data=\"searchSelect\"\n                    :placeholder=\"'搜索任务ID，任务名称，更新人...'\"\n                    style=\"width: 480px;\" />\n            </template>\n        </list-action-layout>\n        <render-list\n            ref=\"list\"\n            :data-source=\"getCronJobList\"\n            :size=\"tableSize\"\n            :search-control=\"() => $refs.search\"\n            v-test=\"{ type: 'list', value: 'crontab' }\">\n            <bk-table-column\n                v-if=\"allRenderColumnMap.id\"\n                label=\"ID\"\n                prop=\"id\"\n                key=\"id\"\n                width=\"100\"\n                align=\"left\" />\n            <bk-table-column\n                v-if=\"allRenderColumnMap.name\"\n                :label=\"'任务名称'\"\n                sortable\n                prop=\"name\"\n                key=\"name\"\n                align=\"left\"\n                min-width=\"200\"\n                show-overflow-tooltip>\n                <template slot-scope=\"{ row }\">\n                    <auth-component\n                        :permission=\"row.canManage\"\n                        :resource-id=\"row.id\"\n                        auth=\"cron/view\">\n                        <span class=\"time-task-name\" @click=\"handleViewDetail(row)\">\n                            {{ row.name }}\n                        </span>\n                        <span slot=\"forbid\">{{ row.name }}</span>\n                    </auth-component>\n                </template>\n            </bk-table-column>\n            <bk-table-column\n                v-if=\"allRenderColumnMap.planName\"\n                :label=\"'执行方案名称'\"\n                key=\"planName\"\n                min-width=\"200\"\n                align=\"left\"\n                show-overflow-tooltip>\n                <template slot-scope=\"{ row }\">\n                    <div v-if=\"row.isPlanLoading\" class=\"sync-fetch\">\n                        <div class=\"sync-fetch-loading\">\n                            <Icon type=\"sync-pending\" svg style=\"color: #3a84ff;\" />\n                        </div>\n                    </div>\n                    <router-link\n                        v-else\n                        class=\"task-plan-text\"\n                        :to=\"{\n                            name: 'viewPlan',\n                            params: {\n                                templateid: 4 || row.taskTemplateId,\n                            },\n                            query: {\n                                from: 'cronJob',\n                                viewPlanid: 4 || row.taskPlanId,\n                            },\n                        }\">\n                        {{ row.taskPlanName }}\n                    </router-link>\n                </template>\n            </bk-table-column>\n            <bk-table-column\n                v-if=\"allRenderColumnMap.policeText\"\n                :label=\"'执行策略'\"\n                prop=\"policeText\"\n                key=\"policeText\"\n                width=\"180\"\n                align=\"left\">\n                <template slot-scope=\"{ row }\">\n                    <span\n                        class=\"tips\"\n                        v-bk-tooltips.right=\"row.executeTimeTips\">\n                        {{ row.policeText }}\n                    </span>\n                </template>\n            </bk-table-column>\n            <bk-table-column\n                v-if=\"allRenderColumnMap.creator\"\n                :label=\"'创建人'\"\n                prop=\"creator\"\n                key=\"creator\"\n                width=\"120\"\n                align=\"left\" />\n            <bk-table-column\n                v-if=\"allRenderColumnMap.createTime\"\n                :label=\"'创建时间'\"\n                prop=\"createTime\"\n                key=\"createTime\"\n                width=\"180\"\n                align=\"left\" />\n            <bk-table-column\n                v-if=\"allRenderColumnMap.lastModifyUser\"\n                :label=\"'更新人'\"\n                sortable\n                prop=\"lastModifyUser\"\n                key=\"lastModifyUser\"\n                width=\"140\"\n                align=\"left\" />\n            <bk-table-column\n                v-if=\"allRenderColumnMap.lastModifyTime\"\n                :label=\"'更新时间'\"\n                prop=\"lastModifyTime\"\n                key=\"lastModifyTime\"\n                width=\"180\"\n                align=\"left\" />\n            <bk-table-column\n                v-if=\"allRenderColumnMap.lastExecuteStatus\"\n                :label=\"'最新执行结果'\"\n                sortable\n                prop=\"lastExecuteStatus\"\n                key=\"lastExecuteStatus\"\n                width=\"150\"\n                align=\"left\">\n                <template slot-scope=\"{ row }\">\n                    <Icon\n                        svg\n                        :type=\"row.statusIconType\"\n                        style=\"font-size: 16px; vertical-align: middle;\" />\n                    <span style=\"vertical-align: middle;\">{{ row.statusText }}</span>\n                </template>\n            </bk-table-column>\n            <bk-table-column\n                v-if=\"allRenderColumnMap.successRateText\"\n                :label=\"'周期成功率'\"\n                :render-header=\"renderHeader\"\n                key=\"successRateText\"\n                width=\"150\"\n                align=\"left\">\n                <template slot-scope=\"{ row }\">\n                    <div v-if=\"row.isStatictisLoading\" class=\"sync-fetch\">\n                        <div class=\"sync-fetch-loading\">\n                            <Icon type=\"sync-pending\" svg style=\"color: #3a84ff;\" />\n                        </div>\n                    </div>\n                    <template v-else>\n                        <template v-if=\"row.isRateEmpty\">\n                            <p v-html=\"row.successRateText\" />\n                        </template>\n                        <template v-else>\n                            <bk-popover placement=\"right\" theme=\"light\">\n                                <p style=\"padding-right: 10px;\" v-html=\"row.successRateText\" />\n                                <div slot=\"content\" style=\"color: #63656e;\">\n                                    <div v-html=\"row.successRateTips\" />\n                                    <div v-if=\"row.showMoreFailAcion\" class=\"more-fail-action\">\n                                        <bk-button\n                                            text\n                                            @click=\"handleHistoryRecord(row, true)\">\n                                            {{ '更多失败记录' }}\n                                        </bk-button>\n                                    </div>\n                                </div>\n                            </bk-popover>\n                        </template>\n                    </template>\n                </template>\n            </bk-table-column>\n            <bk-table-column\n                :label=\"'操作'\"\n                :resizable=\"false\"\n                width=\"200\"\n                key=\"action\"\n                fixed=\"right\"\n                align=\"left\">\n                <template slot-scope=\"{ row }\">\n                    <bk-switcher\n                        :value=\"row.enable\"\n                        size=\"small\"\n                        theme=\"primary\"\n                        class=\"mr10\"\n                        @change=\"value => handleStatusChange(value, row)\"\n                        v-test=\"{ type: 'button', value: 'toggleCrontabStatus' }\" />\n                    <auth-button\n                        auth=\"cron/edit\"\n                        :resource-id=\"row.id\"\n                        :permission=\"row.canManage\"\n                        class=\"time-task-edit mr10\"\n                        text\n                        @click=\"handleEdit(row)\"\n                        v-test=\"{ type: 'button', value: 'editCrontab' }\">\n                        {{ '编辑' }}\n                    </auth-button>\n                    <jb-popover-confirm\n                        :title=\"'确定删除该定时任务？'\"\n                        :content=\"'删除后不可恢复，请谨慎操作！'\"\n                        :confirm-handler=\"instance => handleDelete(row)\">\n                        <auth-button\n                            auth=\"cron/delete\"\n                            :resource-id=\"row.id\"\n                            :permission=\"row.canManage\"\n                            text\n                            v-test=\"{ type: 'button', value: 'deleteCrontab' }\">\n                            {{ '删除' }}\n                        </auth-button>\n                    </jb-popover-confirm>\n                    <bk-button\n                        text\n                        @click=\"handleHistoryRecord(row)\"\n                        v-test=\"{ type: 'button', value: 'crontabExecRecord' }\">\n                        {{ '执行记录' }}\n                    </bk-button>\n                </template>\n            </bk-table-column>\n            <bk-table-column type=\"setting\">\n                <bk-table-setting-content\n                    :fields=\"tableColumn\"\n                    :selected=\"selectedTableColumn\"\n                    :size=\"tableSize\"\n                    @setting-change=\"handleSettingChange\" />\n            </bk-table-column>\n        </render-list>\n        <jb-sideslider\n            :is-show.sync=\"showOperation\"\n            v-bind=\"operationSidesliderInfo\"\n            :width=\"960\">\n            <task-operation\n                v-if=\"showOperation\"\n                :id=\"editTaskId\"\n                :data=\"cronJobDetailInfo\"\n                @on-change=\"handleCronChange\" />\n        </jb-sideslider>\n        <jb-sideslider\n            :is-show.sync=\"showDetail\"\n            :title=\"'定时任务详情'\"\n            :width=\"960\">\n            <task-detail :data=\"cronJobDetailInfo\" />\n            <template #footer>\n                <bk-button\n                    theme=\"primary\"\n                    @click=\"handleToggelEdit\"\n                    v-test=\"{ type: 'button', value: 'showCrontabDetail' }\">\n                    {{ '编辑' }}\n                </bk-button>\n            </template>\n        </jb-sideslider>\n        <jb-sideslider\n            :is-show.sync=\"showHistoryRecord\"\n            :show-footer=\"false\"\n            quick-close\n            transfer\n            :width=\"960\">\n            <div slot=\"header\">\n                <span>{{ '定时执行记录' }}</span>\n                <span style=\"font-size: 12px; color: #313238;\">（{{ cronJobDetailInfo.name }}）</span>\n            </div>\n            <history-record\n                v-if=\"showHistoryRecord\"\n                :show-faild=\"showHistoryFailedRecord\"\n                :data=\"cronJobDetailInfo\"\n                @on-change=\"handleCronChange\" />\n        </jb-sideslider>\n    </div>\n</template>\n<script>\n       import TimeTaskService from '@service/time-task';\n    import NotifyService from '@service/notify';\n    import { listColumnsCache } from '@utils/cache-helper';\n    import ListActionLayout from '@components/list-action-layout';\n    import RenderList from '@components/render-list';\n    import JbSearchSelect from '@components/jb-search-select';\n    import JbSideslider from '@components/jb-sideslider';\n    import JbPopoverConfirm from '@components/jb-popover-confirm';\n    import TaskOperation from './components/operation';\n    import TaskDetail from './components/detail';\n    import HistoryRecord from './components/history-record';\n\n    const TABLE_COLUMN_CACHE = 'cron_list_columns';\n\n    export default {\n        name: '',\n        components: {\n            ListActionLayout,\n            RenderList,\n            JbSearchSelect,\n            JbSideslider,\n            JbPopoverConfirm,\n            TaskOperation,\n            TaskDetail,\n            HistoryRecord,\n        },\n        data () {\n            return {\n                showOperation: false,\n                showDetail: false,\n                showHistoryRecord: false,\n                showHistoryFailedRecord: false,\n                searchParams: [],\n                cronData: {},\n                loading: false,\n                editTaskId: '',\n                cronJobDetailInfo: {},\n                currentOperate: 'create',\n                historyRecordDialogTitle: '',\n                selectedTableColumn: [],\n                tableSize: 'small',\n            };\n        },\n        computed: {\n            isSkeletonLoading () {\n                return this.$refs.list.isLoading;\n            },\n            allRenderColumnMap () {\n                return this.selectedTableColumn.reduce((result, item) => {\n                    result[item.id] = true;\n                    return result;\n                }, {});\n            },\n            operationSidesliderInfo () {\n                if (this.cronJobDetailInfo.id) {\n                    return {\n                        title: '编辑定时任务',\n                        okText: '保存',\n                    };\n                }\n                return {\n                    title: '新建定时任务',\n                    okText: '提交',\n                };\n            },\n        },\n        watch: {\n            '$route' () {\n                this.initParseURL();\n            },\n        },\n        created () {\n            this.getCronJobList = TimeTaskService.timeTaskList;\n            this.searchSelect = [\n                {\n                    name: 'ID',\n                    id: 'cronJobId',\n                    description: '将覆盖其它条件',\n                    validate (values, item) {\n                        const validate = (values || []).every(_ => /^(\\d*)$/.test(_.name));\n                        return !validate ? 'ID只支持数字' : true;\n                    },\n                },\n                {\n                    name: '任务名称',\n                    id: 'name',\n                    default: true,\n                },\n                {\n                    name: '执行方案ID',\n                    id: 'planId',\n                    default: true,\n                },\n                {\n                    name: '创建人',\n                    id: 'creator',\n                    remoteMethod: NotifyService.fetchUsersOfSearch,\n                    inputInclude: true,\n                },\n                {\n                    name: '更新人',\n                    id: 'lastModifyUser',\n                    remoteMethod: NotifyService.fetchUsersOfSearch,\n                    inputInclude: true,\n                },\n            ];\n            this.tableColumn = [\n                {\n                    id: 'id',\n                    label: 'ID',\n                },\n                {\n                    id: 'name',\n                    label: '任务名称',\n                    disabled: true,\n                },\n                {\n                    id: 'planName',\n                    label: '执行方案名称',\n                },\n                {\n                    id: 'policeText',\n                    label: '执行策略',\n                    disabled: true,\n                },\n                {\n                    id: 'creator',\n                    label: '创建人',\n                },\n                {\n                    id: 'createTime',\n                    label: '创建时间',\n                },\n                {\n                    id: 'lastModifyUser',\n                    label: '更新人',\n                },\n                {\n                    id: 'lastModifyTime',\n                    label: '更新时间',\n                },\n                {\n                    id: 'lastExecuteStatus',\n                    label: '最新执行结果',\n                    disabled: true,\n                },\n                {\n                    id: 'successRateText',\n                    label: '周期成功率',\n                    disabled: true,\n                },\n            ];\n            const columnsCache = listColumnsCache.getItem(TABLE_COLUMN_CACHE);\n            if (columnsCache) {\n                this.selectedTableColumn = Object.freeze(columnsCache.columns);\n                this.tableSize = columnsCache.size;\n            } else {\n                this.selectedTableColumn = Object.freeze([\n                    { id: 'name' },\n                    { id: 'planName' },\n                    { id: 'policeText' },\n                    { id: 'lastModifyUser' },\n                    { id: 'lastModifyTime' },\n                    { id: 'lastExecuteStatus' },\n                    { id: 'successRateText' },\n                ]);\n            }\n        },\n        mounted () {\n            this.initParseURL();\n        },\n        methods: {\n            /**\n             * @desc 获取列表数据\n             */\n            fetchData () {\n                this.$refs.list.$emit('onFetch', this.searchParams);\n            },\n            /**\n             * @desc 解析 URL 参数\n             */\n            initParseURL () {\n                // 在列表通过url指定查看定时任务详情\n                const {\n                    name,\n                    cronJobId,\n                    // mode 表示 url 访问的场景，\n                    // create: 展示新建定时任务弹框\n                    // detail: 展示定时任务详情弹框\n                    // edit: 展示编辑定时任务弹框\n                    mode,\n                } = this.$route.query;\n                if (mode === 'create') {\n                    this.handleCreate();\n                    return;\n                }\n            \n                if (!name && !cronJobId) {\n                    return;\n                }\n            \n                const unWatch = this.$watch(() => this.$refs.list.isLoading, (isLoading) => {\n                    if (!isLoading) {\n                        if (mode === 'detail') {\n                            setTimeout(() => {\n                                // 通过url默认打开定时任务详情\n                                const $firstTimeTaskName = this.$refs.list.$el.querySelector('.time-task-name');\n                                if ($firstTimeTaskName) {\n                                    $firstTimeTaskName.click();\n                                }\n                            });\n                        } else if (mode === 'edit') {\n                            setTimeout(() => {\n                                // // 通过url默认打开定时任务编辑\n                                const $firstTimeTask = this.$refs.list.$el.querySelector('.time-task-edit');\n                                if ($firstTimeTask) {\n                                    $firstTimeTask.click();\n                                }\n                            });\n                        }\n                    \n                        unWatch();\n                    }\n                });\n            },\n            /**\n             * @desc 表格表头渲染\n             * @param { Function } h\n             * @param { Object } data 表格配置信息\n             * @returns { vNode }\n             */\n            renderHeader (h, data) {\n                return (\n                <span>\n                    <span>{ data.column.label }</span>\n                    <bk-popover>\n                        <icon\n                            type=\"circle-italics-info\"\n                            style=\"margin-left: 8px; font-size: 12px;\" />\n                        <div slot=\"content\">\n                            <div style=\"font-weight: bold\">{ '「周期成功率」采样规则和计算公式' }</div>\n                            <div style=\"margin-top: 8px; font-weight: bold\">{ '采样规则：' }</div>\n                            <div>{ '近 24小时执行次数 ＞10，则 “分母” 为近 24 小时执行总数' }</div>\n                            <div>{ '近 24小时执行次数 ≤ 10，则 “分母” 为近 10 次执行任务' }</div>\n                            <div style=\"margin-top: 6px; font-weight: bold\">{ '计算公式：' }</div>\n                            <div>{ '成功次数(分子) / 分母 * 100 = 周期成功率（%）' }</div>\n                        </div>\n                    </bk-popover>\n                </span>\n                );\n            },\n            /**\n             * @desc 表格列自定义\n             * @param { Object } 列信息\n             */\n            handleSettingChange ({ fields, size }) {\n                this.selectedTableColumn = Object.freeze(fields);\n                this.tableSize = size;\n                listColumnsCache.setItem(TABLE_COLUMN_CACHE, {\n                    columns: fields,\n                    size,\n                });\n            },\n            /**\n             * @desc 搜索\n             * @param { Object } searchParams\n             */\n            handleSearch (searchParams) {\n                this.searchParams = searchParams;\n                this.fetchData();\n            },\n            /**\n             * @desc 查看执行记录\n             * @param { Object } crontabData 定时任务信息\n             * @param { Boolean } showFailed 显示失败记录\n             */\n            handleHistoryRecord (crontabData, showFailed = false) {\n                this.cronJobDetailInfo = crontabData;\n                this.showHistoryFailedRecord = showFailed;\n                this.historyRecordDialogTitle = `定时执行记录${crontabData.name}`;\n                this.showHistoryRecord = true;\n            },\n            /**\n             * @desc 定时任务详情\n             * @param { Object } crontabData 定时任务信息\n             */\n            handleViewDetail (crontabData) {\n                this.cronJobDetailInfo = crontabData;\n                this.showDetail = true;\n            },\n            /**\n             * @desc 新建定时任务\n             */\n            handleCreate () {\n                this.cronJobDetailInfo = {};\n                this.showOperation = true;\n            },\n            /**\n             * @desc 编辑定时任务\n             * @param { Object } crontabData 定时任务信息\n             */\n            handleEdit (crontabData) {\n                this.cronJobDetailInfo = crontabData;\n                this.showOperation = true;\n            },\n            /**\n             * @desc 从详情切换为编辑状态\n             */\n            handleToggelEdit () {\n                this.showDetail = false;\n                this.showOperation = true;\n            },\n            /**\n             * @desc 定时任务有更新刷新列表数据\n             */\n            handleCronChange () {\n                this.fetchData();\n            },\n            /**\n             * @desc 切换定时任务状态\n             * @param { Boolean } enable 开启状态\n             * @param { Object } crontabData 定时任务信息\n             */\n            handleStatusChange (enable, crontabData) {\n                const enableMemo = crontabData.enable;\n                crontabData.enable = enable;\n                TimeTaskService.timeTaskStatusUpdate({\n                    id: crontabData.id,\n                    enable,\n                }).then(() => {\n                    this.messageSuccess(enable ? '开启成功' : '关闭成功');\n                })\n                    .catch(() => {\n                        crontabData.enable = enableMemo;\n                    });\n            },\n            /**\n             * @desc 删除定时任务\n             * @param { Object } crontabData 定时任务信息\n             *\n             * 删除成功后刷新列表数据\n             */\n            handleDelete (crontabData) {\n                return TimeTaskService.timeTaskDelete({\n                    id: crontabData.id,\n                }).then(() => {\n                    this.messageSuccess('删除定时任务成功');\n                    this.fetchData();\n                    return true;\n                });\n            },\n        },\n    };\n</script>\n<style lang=\"postcss\">\n    @keyframes sync-fetch-loading {\n        0% {\n            transform: rotateZ(0);\n        }\n\n        100% {\n            transform: rotateZ(360deg);\n        }\n    }\n\n    .cron-job-manage {\n        .expression {\n            font-size: 14px;\n            color: #c4c6cc;\n        }\n\n        .more-fail-action {\n            text-align: right;\n\n            .bk-button-text {\n                font-size: 12px;\n            }\n        }\n\n        .time-task-name {\n            display: inline-block;\n            height: 18px;\n            max-width: 100%;\n            overflow: hidden;\n            color: #3a84ff;\n            text-overflow: ellipsis;\n            white-space: nowrap;\n            vertical-align: bottom;\n            cursor: pointer;\n        }\n\n        .execute-result-text {\n            &.success {\n                &::before {\n                    background: #2dcb56;\n                }\n            }\n\n            &.fail {\n                &::before {\n                    background: #ea3636;\n                }\n            }\n\n            &.waiting {\n                &::before {\n                    background: #dcdee5;\n                }\n            }\n\n            &::before {\n                display: inline-block;\n                width: 8px;\n                height: 8px;\n                margin-right: 10px;\n                border-radius: 50%;\n                content: \"\";\n            }\n        }\n\n        .sync-fetch {\n            height: 13px;\n        }\n\n        .sync-fetch-loading {\n            position: absolute;\n            display: flex;\n            width: 13px;\n            height: 13px;\n            animation: sync-fetch-loading 1s linear infinite;\n        }\n\n        .task-plan-text {\n            display: inline-block;\n            height: 18px;\n            max-width: 100%;\n            overflow: hidden;\n            text-overflow: ellipsis;\n            white-space: nowrap;\n            vertical-align: bottom;\n        }\n    }\n\n</style>\n"],"names":[],"sourceRoot":""}