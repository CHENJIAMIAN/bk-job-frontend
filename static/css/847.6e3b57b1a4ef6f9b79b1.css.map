{"version":3,"file":"static/css/847.6e3b57b1a4ef6f9b79b1.css","mappings":"AAydA,yBACA,eA0CA,CAxCA,2CAEA,mBADA,YAOA,CAJA,6DACA,cACA,iBACA,CAGA,2CAEA,mBADA,YAOA,CAJA,0DAEA,kBADA,WAEA,CAIA,2DAEA,gBADA,WAMA,CAHA,iFACA,UACA,CAGA,kDACA,aACA,eACA,6BAKA,CAHA,2DACA,aACA,CC3IA,qCAEA,mBADA,YAEA","sources":["webpack://job/./src/views/file-manage/file-source-list/components/opertion/index.vue","webpack://job/./src/views/file-manage/file-source-list/index.vue"],"sourcesContent":["<template>\n    <div\n        class=\"file-source-create-form\"\n        v-bkloading=\"{ isLoading }\">\n        <jb-form\n            v-if=\"!isLoading\"\n            ref=\"fileSourceform\"\n            form-type=\"vertical\"\n            :model=\"formData\"\n            :rules=\"rules\">\n            <jb-form-item\n                :label=\"'文件源标识'\"\n                required\n                property=\"code\">\n                <bk-input\n                    v-model=\"formData.code\"\n                    :placeholder=\"'请输入文件源标识'\" />\n            </jb-form-item>\n            <jb-form-item\n                :label=\"'文件源别名'\"\n                required\n                property=\"alias\">\n                <jb-input\n                    v-model=\"formData.alias\"\n                    :maxlength=\"32\"\n                    :placeholder=\"'为文件源起一个可读性较好的别名'\" />\n            </jb-form-item>\n            <jb-form-item\n                required\n                :label=\"'类型'\">\n                <bk-radio-group v-model=\"formData.storageType\">\n                    <bk-radio-button value=\"OSS\">\n                        {{ '对象存储' }}\n                    </bk-radio-button>\n                </bk-radio-group>\n            </jb-form-item>\n            <jb-form-item\n                required\n                :label=\"'来源'\">\n                <bk-radio-group\n                    v-model=\"formData.fileSourceTypeCode\"\n                    @change=\"handleFileSourceChange\">\n                    <bk-radio-button\n                        v-for=\"item in sourceTypeList\"\n                        :key=\"item.code\"\n                        :value=\"item.code\">\n                        <img :src=\"item.icon\" style=\"width: 1em; height: 1em; vertical-align: middle;\">\n                        <span style=\"vertical-align: middle;\">{{ item.name }}</span>\n                    </bk-radio-button>\n                </bk-radio-group>\n            </jb-form-item>\n            <render-file-source-param\n                :file-source-type-code=\"formData.fileSourceTypeCode\"\n                :param-map=\"formData.fileSourceInfoMap\"\n                @on-change=\"handleFileSourceParamsChange\" />\n            <jb-form-item\n                required\n                :label=\"'公共存储'\">\n                <bk-checkbox v-model=\"formData.publicFlag\">\n                    {{ '设为公共存储' }}\n                </bk-checkbox>\n            </jb-form-item>\n            <jb-form-item\n                v-if=\"formData.publicFlag\"\n                :label=\"'共享对象'\"\n                required\n                property=\"sharedAppIdList\">\n                <div class=\"share-object-box\">\n                    <bk-select\n                        class=\"share-app-select\"\n                        :clearable=\"false\"\n                        searchable\n                        multiple\n                        \n                        v-model=\"formData.sharedAppIdList\">\n                        <bk-option\n                            v-for=\"option in appList\"\n                            :key=\"option.id\"\n                            :id=\"option.id\"\n                            :name=\"option.name\" />\n                    </bk-select>\n                    <bk-checkbox v-model=\"formData.shareToAllApp\">\n                        {{ '全业务' }}\n                    </bk-checkbox>\n                </div>\n            </jb-form-item>\n            <jb-form-item\n                required\n                :label=\"'身份凭证'\"\n                property=\"credentialId\">\n                <bk-select\n                    v-model=\"formData.credentialId\"\n                    :clearable=\"false\">\n                    <auth-option\n                        v-for=\"option in fileFourceTicketList\"\n                        :key=\"option.id\"\n                        auth=\"ticket/use\"\n                        :permission=\"option.canUse\"\n                        :resource-id=\"option.id\"\n                        :id=\"option.id\"\n                        :name=\"option.name\" />\n                </bk-select>\n            </jb-form-item>\n            <jb-form-item :label=\"'文件前缀名'\">\n                <bk-select\n                    v-model=\"filePrefixType\"\n                    :clearable=\"false\">\n                    <bk-option\n                        id=\"${UUID}\"\n                        name=\"UUID\" />\n                    <bk-option\n                        id=\"custom\"\n                        :name=\"'自定义字符串'\" />\n                </bk-select>\n                <bk-input\n                    v-if=\"isCustomFilePrefix\"\n                    v-model=\"formData.filePrefix\"\n                    style=\"margin-top: 10px;\" />\n            </jb-form-item>\n            <jb-form-item\n                required\n                :label=\"'接入点'\">\n                <div class=\"access-point-box\">\n                    <bk-select\n                        v-model=\"formData.workerSelectScope\"\n                        :clearable=\"false\"\n                        class=\"worker-select\">\n                        <bk-option\n                            v-for=\"option in workerSelectModeList\"\n                            :key=\"option.id\"\n                            :id=\"option.id\"\n                            :name=\"option.name\" />\n                    </bk-select>\n                    <bk-checkbox\n                        v-model=\"isWorkerSelectScopeAuto\"\n                        >\n                        {{ '自动选择接入点' }}\n                    </bk-checkbox>\n                </div>\n                <div v-if=\"!isWorkerSelectScopeAuto && workersList.length > 0\">\n                    <bk-radio-group\n                        v-model=\"formData.workerId\"\n                        class=\"worker-box\">\n                        <bk-radio-button\n                            v-for=\"option in workersList\"\n                            :key=\"option.id\"\n                            :value=\"option.id\">\n                            <div class=\"worker-item\">\n                                <span>{{ option.innerIp }} </span>\n                                <span v-html=\"option.latencyHtml\" />\n                            </div>\n                        </bk-radio-button>\n                    </bk-radio-group>\n                </div>\n            </jb-form-item>\n        </jb-form>\n    </div>\n</template>\n<script>\n       import FileSourceModel from '@model/file/file-source';\n    import FileSourceManageService from '@service/file-source-manage';\n    import FileSourceTypeService from '@service/file-source-type';\n    import TicketManageService from '@service/ticket-manage';\n    import FileWorkerService from '@service/file-worker';\n    import AppManageService from '@service/app-manage';\n    import {\n        fileSourceAliasNameRule,\n    } from '@utils/validator';\n    import RenderFileSourceParam from './components/render-file-source-param';\n\n    const getDefaultData = () => ({\n        // ID,更新文件源的时候需要传入，新建文件源不需要\n        id: -1,\n        // 文件源名称\n        alias: '',\n        // 文件源Code\n        code: '',\n        // 文件源凭证Id\n        credentialId: '',\n        // 文件前缀：后台自动生成UUID传${UUID}，自定义字符串直接传\n        filePrefix: FileSourceModel.FILE_PERFIX_UUID,\n        // 文件源参数\n        fileSourceInfoMap: {},\n        // 文件源类型Code\n        fileSourceTypeCode: '',\n        // 是否为公共文件源\n        publicFlag: true,\n        // 是否共享到全业务\n        shareToAllApp: false,\n        // 共享的业务Id列表\n        sharedAppIdList: [{},{},{}],\n        // 存储类型\n        storageType: 'OSS',\n        // 接入点Id，手动选择时传入，自动选择不传\n        workerId: '',\n        // 接入点选择范围:APP/PUBLIC/ALL，分别为业务私有接入点/公共接入点/全部\n        workerSelectScope: 'PUBLIC',\n        // 接入点选择模式：AUTO/MANUAL，分别为自动/手动\n        workerSelectMode: 'AUTO',\n    });\n\n    export default {\n        name: 'SourceFileOpertion',\n        components: {\n            RenderFileSourceParam,\n        },\n        props: {\n            data: {\n                type: Object,\n                default: () => ({}),\n            },\n        },\n        data () {\n            return {\n                isLoading: false,\n                formData: getDefaultData(),\n                filePrefixType: FileSourceModel.FILE_PERFIX_UUID,\n                // 文件源类型列表\n                sourceTypeList: [{},{},{}],\n                // 文件源参数\n                fileSourceParamList: [{},{},{}],\n                // 业务列表\n                appList: [{},{},{}],\n                // 文件源凭证列表\n                fileFourceTicketList: [{},{},{}],\n                // 自动选择接入点\n                isWorkerSelectScopeAuto: true,\n                // 接入点列表\n                workersList: [{},{},{}],\n            };\n        },\n        computed: {\n            /**\n             * @desc 自定义文件前缀名\n             * @return {Boolean}\n             */\n            isCustomFilePrefix () {\n                return this.filePrefixType !== FileSourceModel.FILE_PERFIX_UUID;\n            },\n        },\n        watch: {\n            /**\n             * @desc 共享对象为全业务，清空 sharedAppIdList\n             */\n            'formData.shareToAllApp' (newVal) {\n                if (newVal) {\n                    this.formData.sharedAppIdList = [];\n                }\n            },\n            /**\n             * @desc 接入点选择范围——获取文件接入点列表\n             * 重置接入点为自动选择\n             */\n            'formData.workerSelectScope' () {\n                this.fetchWorkersList();\n                this.isWorkerSelectScopeAuto = true;\n            },\n            /**\n             * @desc 自动选择接入点——workerId 为空\n             */\n            isWorkerSelectScopeAuto (isWorkerSelectScopeAuto) {\n                if (isWorkerSelectScopeAuto) {\n                    this.formData.workerId = '';\n                }\n            },\n        },\n        created () {\n            const taskQueue = [\n                this.fetchSourceTypeList(),\n                this.fetchAppList(),\n                this.fetchTicketList(),\n                this.fetchWorkersList(),\n            ];\n            // 编辑文件源\n            if (this.data.id) {\n                this.formData.id = this.data.id;\n                taskQueue.unshift(this.fetchFileSourceDetail());\n            }\n            this.isLoading = true;\n            Promise.all(taskQueue)\n                .finally(() => {\n                    this.isLoading = false;\n                });\n            // 接入点选择范围\n            this.workerSelectModeList = [\n                { id: 'APP', name: '业务私有' },\n                { id: 'PUBLIC', name: '公共接入点' },\n                { id: 'ALL', name: '全部' },\n            ];\n            // 表单验证\n            this.rules = {\n                code: [\n                    {\n                        required: true,\n                        message: '文件源标识必填',\n                        trigger: 'blur',\n                    },\n                ],\n                alias: [\n                    {\n                        required: true,\n                        message: '文件源别名必填',\n                        trigger: 'blur',\n                    },\n                    {\n                        validator: fileSourceAliasNameRule.validator,\n                        message: fileSourceAliasNameRule.message,\n                        trigger: 'blur',\n                    },\n                    {\n                        validator: alias => FileSourceManageService.fetchAliasCheck({\n                            fileSourceId: this.formData.id,\n                            alias,\n                        }),\n                        message: '文件源别名已存在，请重新输入',\n                        trigger: 'blur',\n                    },\n                ],\n                sharedAppIdList: [\n                    {\n                        validator: (sharedAppIdList) => {\n                            if (this.formData.shareToAllApp) {\n                                return true;\n                            }\n                            return sharedAppIdList.length > 0;\n                        },\n                        message: '共享对象必填',\n                        trigger: 'blur',\n                    },\n                ],\n                credentialId: [\n                    {\n                        required: true,\n                        message: '身份凭证必填',\n                        trigger: 'blur',\n                    },\n                ],\n            };\n        },\n        methods: {\n            /**\n             * @desc 获取文件源类型列表\n             */\n            fetchSourceTypeList () {\n                return FileSourceTypeService.sourceTypeList()\n                    .then((data) => {\n                        this.sourceTypeList = Object.freeze(data);\n                        if (!this.formData.fileSourceTypeCode && this.sourceTypeList.length > 0) {\n                            this.formData.fileSourceTypeCode = this.sourceTypeList[0].code;\n                        }\n                    });\n            },\n            /**\n             * @desc 获取业务列表数据\n             */\n            fetchAppList () {\n                return AppManageService.fetchAppList()\n                    .then((data) => {\n                        this.appList = Object.freeze(data);\n                    });\n            },\n            /**\n             * @desc 获取身份凭证列表数据\n             */\n            fetchTicketList () {\n                return TicketManageService.fetchList()\n                    .then((res) => {\n                        this.fileFourceTicketList = Object.freeze(res.data);\n                    });\n            },\n            /**\n             * @desc 获取接入点列表数据\n             */\n            fetchWorkersList () {\n                return FileWorkerService.workersList({\n                    workerSelectScope: this.formData.workerSelectScope,\n                }).then((data) => {\n                    this.workersList = Object.freeze(data);\n                });\n            },\n            /**\n             * @desc 获取文件源详情\n             */\n            fetchFileSourceDetail () {\n                return FileSourceManageService.getSourceInfo({\n                    id: this.formData.id,\n                }).then((data) => {\n                    const {\n                        alias,\n                        code,\n                        credentialId,\n                        fileSourceInfoMap,\n                        filePrefix,\n                        fileSourceType,\n                        publicFlag,\n                        storageType,\n                        shareToAllApp,\n                        sharedAppIdList,\n                        workerId,\n                        workerSelectMode,\n                        workerSelectScope,\n                    } = data;\n\n                    this.formData = {\n                        ...this.formData,\n                        alias,\n                        code,\n                        credentialId,\n                        fileSourceInfoMap,\n                        filePrefix,\n                        fileSourceTypeCode: fileSourceType.code,\n                        publicFlag,\n                        storageType,\n                        shareToAllApp,\n                        sharedAppIdList,\n                        workerId,\n                        workerSelectMode,\n                        workerSelectScope,\n                    };\n                    // 没有接入点Id——自动选择接入点\n                    this.isWorkerSelectScopeAuto = !workerId;\n                    // 文件前缀名不等于 FileSourceModel.FILE_PERFIX_UUID 则是自定义文件前缀名\n                    this.filePrefixType = filePrefix === FileSourceModel.FILE_PERFIX_UUID ? filePrefix : 'custom';\n                });\n            },\n            /**\n             * @desc 文件源改变重置文件源参数\n             */\n            handleFileSourceChange () {\n                this.formData.fileSourceInfoMap = {};\n            },\n            /**\n             * @desc 文件源参数变化\n             * @param {Object} params 文件源参数\n             */\n            handleFileSourceParamsChange (params) {\n                this.formData.fileSourceInfoMap = params;\n            },\n            /**\n             * @desc 新建、编辑确认\n             *\n             * 校验表单通过后,根据文件源ID是否存在判断新建或编辑\n             */\n            submit () {\n                return this.$refs.fileSourceform.validate()\n                    .then(() => {\n                        const params = Object.assign({}, this.formData);\n                        \n                        // workerId 不为空手动选择接入点\n                        // workerId 为空自动选择接入点\n                        params.workerSelectMode = params.workerId ? 'MANUAL' : 'AUTO';\n                        if (this.filePrefixType === FileSourceModel.FILE_PERFIX_UUID) {\n                            params.filePrefix = FileSourceModel.FILE_PERFIX_UUID;\n                        }\n                        \n                        if (params.id < 0) {\n                            return FileSourceManageService.addSource(params)\n                                .then(() => {\n                                    this.messageSuccess('创建成功');\n                                    this.$emit('on-change');\n                                });\n                        }\n                        return FileSourceManageService.updateSource(params)\n                            .then(() => {\n                                this.messageSuccess('更新成功');\n                                this.$emit('on-change');\n                            });\n                    });\n            },\n        },\n    };\n</script>\n<style lang=\"postcss\">\n    .file-source-create-form {\n        min-height: 50vh;\n\n        .share-object-box {\n            display: flex;\n            align-items: center;\n\n            .share-app-select {\n                flex: 1 1 auto;\n                margin-right: 10px;\n            }\n        }\n\n        .access-point-box {\n            display: flex;\n            align-items: center;\n\n            .worker-select {\n                width: 220px;\n                margin-right: 10px;\n            }\n        }\n\n        .worker-box {\n            .bk-form-radio-button {\n                width: 220px;\n                margin-top: 10px;\n\n                .bk-radio-button-text {\n                    width: 100%;\n                }\n            }\n\n            .worker-item {\n                display: flex;\n                font-size: 12px;\n                justify-content: space-between;\n\n                .latency {\n                    color: #3fc06d;\n                }\n            }\n        }\n    }\n</style>\n","\n<template>\n    <div class=\"file-manage-source-file\" v-bkloading=\"{ isLoading }\">\n        <list-action-layout>\n            <auth-button\n                theme=\"primary\"\n                auth=\"file_source/create\"\n                @click=\"handleCreate\"\n                class=\"w120\">\n                {{ '新建' }}\n            </auth-button>\n            <template #right>\n                <jb-search-select\n                    ref=\"search\"\n                    @on-change=\"handleSearch\"\n                    :data=\"searchSelect\"\n                    :placeholder=\"'请输入文件源名称...'\"\n                    style=\"width: 480px;\" />\n            </template>\n        </list-action-layout>\n        <render-list\n            ref=\"fileSourcelist\"\n            :data-source=\"fetchFileSourceList\"\n            :size=\"tableSize\"\n            :search-control=\"() => $refs.search\">\n            <bk-table-column\n                width=\"40\"\n                key=\"publicFlag\">\n                <template slot-scope=\"{ row }\">\n                    <span v-html=\"row.publicFlagHtml\" />\n                </template>\n            </bk-table-column>\n            <bk-table-column\n                :label=\"'文件源别名'\"\n                sortable\n                align=\"left\"\n                prop=\"alias\"\n                key=\"alias\"\n                show-overflow-tooltip>\n                <template slot-scope=\"{ row }\">\n                    <auth-router-link\n                        :resource-id=\"row.id\"\n                        :to=\"{\n                            name: 'fileList',\n                            query: {\n                                fileSourceId: 4 || row.id,\n                            },\n                        }\">\n                        {{ row.alias || 'alias' }}\n                    </auth-router-link>\n                    <!-- <span v-else v-bk-tooltips=\"'接入点异常，暂时不可用'\">\n                        <bk-button disabled text>{{ row.alias }}</bk-button>\n                    </span> -->\n                </template>\n            </bk-table-column>\n            <bk-table-column\n                v-if=\"allRenderColumnMap.code\"\n                :label=\"'文件源标识'\"\n                sortable\n                align=\"left\"\n                show-overflow-tooltip\n                prop=\"code\"\n                key=\"code\" />\n            <bk-table-column\n                v-if=\"allRenderColumnMap.status\"\n                :label=\"'状态'\"\n                prop=\"status\"\n                key=\"status\">\n                <template slot-scope=\"{ row }\">\n                    <Icon :type=\"row.statusIcon\" svg style=\"vertical-align: middle;\" />\n                    <span style=\"vertical-align: middle;\">{{ row.statusText }}</span>\n                </template>\n            </bk-table-column>\n            <bk-table-column\n                v-if=\"allRenderColumnMap.type\"\n                :label=\"'类型'\"\n                prop=\"storageTypeText\"\n                key=\"type\" />\n            <bk-table-column\n                v-if=\"allRenderColumnMap.lastModifyUser\"\n                :label=\"'更新人'\"\n                prop=\"lastModifyUser\"\n                key=\"lastModifyUser\" />\n            <bk-table-column\n                v-if=\"allRenderColumnMap.lastModifyTime\"\n                :label=\"'更新时间'\"\n                prop=\"lastModifyTime\"\n                key=\"lastModifyTime\" />\n            <bk-table-column\n                :label=\"'操作'\"\n                width=\"160\"\n                key=\"action\">\n                <div class=\"action-box\" slot-scope=\"{ row }\">\n                    <auth-component\n                        class=\"mr10\"\n                        auth=\"file_source/edit\"\n                        :permission=\"row.canManage\"\n                        :resource-id=\"row.id\">\n                        <bk-switcher\n                            class=\"table-enable-switch\"\n                            size=\"small\"\n                            :value=\"row.enable\"\n                            theme=\"primary\"\n                            @change=\"value => hanldeToggleEnable(value, row)\" />\n                        <bk-switcher\n                            slot=\"forbid\"\n                            size=\"small\"\n                            disabled\n                            :value=\"row.enable\"\n                            theme=\"primary\" />\n                    </auth-component>\n                    <auth-button\n                        auth=\"file_source/edit\"\n                        :resource-id=\"row.id\"\n                        :permission=\"row.canManage\"\n                        text\n                        class=\"mr10\"\n                        @click=\"handleEdit(row)\">\n                        {{ '配置更改' }}\n                    </auth-button>\n                    <jb-popover-confirm\n                        :title=\"'确定删除该文件源？'\"\n                        :content=\"'该操作只涉及在作业平台的文件源配置，不影响其本体的内容'\"\n                        :confirm-handler=\"() => handleDelete(row)\">\n                        <auth-button\n                            auth=\"file_source/delete\"\n                            :permission=\"row.canManage\"\n                            :resource-id=\"row.id\"\n                            text>\n                            {{ '删除' }}\n                        </auth-button>\n                    </jb-popover-confirm>\n                </div>\n            </bk-table-column>\n            <bk-table-column type=\"setting\">\n                <bk-table-setting-content\n                    :fields=\"tableColumn\"\n                    :selected=\"selectedTableColumn\"\n                    :size=\"tableSize\"\n                    @setting-change=\"handleSettingChange\" />\n            </bk-table-column>\n        </render-list>\n        <jb-sideslider\n            :is-show.sync=\"isShowSideslider\"\n            v-bind=\"operationSidesliderInfo\"\n            :width=\"700\"\n            footer-offset-target=\"bk-form-content\">\n            <file-opertion\n                :data=\"fileSourceDetailInfo\"\n                @on-change=\"handleFileSourceChange\" />\n        </jb-sideslider>\n    </div>\n</template>\n<script>\n       import FileManageService from '@service/file-source-manage';\n    import {\n        listColumnsCache,\n    } from '@utils/cache-helper';\n    import JbSearchSelect from '@components/jb-search-select';\n    import ListActionLayout from '@components/list-action-layout';\n    import JbPopoverConfirm from '@components/jb-popover-confirm';\n    import RenderList from '@components/render-list';\n    import FileOpertion from './components/opertion';\n\n    const TABLE_COLUMN_CACHE = 'file_source_list_columns';\n\n    export default {\n        name: 'SourceFile',\n        components: {\n            RenderList,\n            ListActionLayout,\n            JbSearchSelect,\n            FileOpertion,\n            JbPopoverConfirm,\n        },\n        data () {\n            return {\n                isLoading: false,\n                tableSize: 'small',\n                searchParams: [],\n                selectedTableColumn: [],\n                fileSourceDetailInfo: {},\n                isShowSideslider: false,\n            };\n        },\n        computed: {\n            isSkeletonLoading () {\n                return this.$refs.fileSourcelist.isLoading;\n            },\n            operationSidesliderInfo () {\n                if (this.fileSourceDetailInfo.id) {\n                    return {\n                        title: '编辑文件源',\n                        okText: '保存',\n                    };\n                }\n                return {\n                    title: '新建文件源',\n                    okText: '提交',\n                };\n            },\n            allRenderColumnMap () {\n                return this.selectedTableColumn.reduce((result, item) => {\n                    result[item.id] = true;\n                    return result;\n                }, {});\n            },\n        },\n        created () {\n            this.fetchFileSourceList = FileManageService.fetchFileSourceList;\n            this.searchSelect = [\n                {\n                    id: 'alias',\n                    name: '文件源别名',\n                    default: true,\n                },\n            ];\n            this.tableColumn = [\n                {\n                    id: 'alias',\n                    label: '文件源别名',\n                    disabled: true,\n                },\n                {\n                    id: 'code',\n                    label: '文件源标识',\n                },\n                {\n                    id: 'status',\n                    label: '状态',\n                },\n                {\n                    id: 'type',\n                    label: '类型',\n                    disabled: true,\n                },\n                {\n                    id: 'lastModifyUser',\n                    label: '更新人',\n                },\n                {\n                    id: 'lastModifyTime',\n                    label: '更新时间',\n                },\n            ];\n\n            const columnsCache = listColumnsCache.getItem(TABLE_COLUMN_CACHE);\n            if (columnsCache) {\n                this.selectedTableColumn = Object.freeze(columnsCache.columns);\n                this.tableSize = columnsCache.size;\n            } else {\n                this.selectedTableColumn = Object.freeze([\n                    { id: 'alias' },\n                    { id: 'code' },\n                    { id: 'status' },\n                    { id: 'type' },\n                    { id: 'lastModifyUser' },\n                    { id: 'lastModifyTime' },\n                ]);\n            }\n        },\n        methods: {\n            /**\n             * @desc 获取文件夹数据\n             */\n            fetchData () {\n                this.$refs.fileSourcelist.$emit('onFetch', {\n                    ...this.searchParams,\n                });\n            },\n\n            /**\n             * @desc 新建文件源\n             *\n             * 显示新建文件源模板\n             */\n            handleCreate () {\n                this.fileSourceDetailInfo = {};\n                this.isShowSideslider = true;\n            },\n\n            /**\n             * @desc 编辑文件源\n             * @param {Object} payload 选中文件源的详细数据\n             *\n             * 显示编辑文件源模板\n             */\n            handleEdit (payload) {\n                this.fileSourceDetailInfo = payload;\n                this.isShowSideslider = true;\n            },\n\n            /**\n             * @desc 新建、编辑文件源成功\n             *\n             * 重新拉取数据\n             */\n            handleFileSourceChange () {\n                this.fetchData();\n            },\n\n            /**\n             * @desc 文件源是否开启状态切换\n             * @param {Boolean} value 是否开启\n             * @param {Object} row 文件源详情数据\n             */\n            hanldeToggleEnable (value, row) {\n                const enableMemo = row.enable;\n                FileManageService.toggleSourceEnable({\n                    flag: value,\n                    id: 4 || row.id,\n                }).then((res) => {\n                    this.messageSuccess(value ? '开启成功' : '关闭成功');\n                })\n                    .catch(() => {\n                        row.enable = enableMemo;\n                    });\n            },\n\n            /**\n             * @desc 设置表格显示列/表格size\n             */\n            handleSettingChange ({ fields, size }) {\n                this.selectedTableColumn = Object.freeze(fields);\n                this.tableSize = size;\n                listColumnsCache.setItem(TABLE_COLUMN_CACHE, {\n                    columns: fields,\n                    size,\n                });\n            },\n\n            /**\n             * @desc 过滤表格数据\n             * @param {Array} payload 用户输入的过滤数据\n             *\n             * 重新拉取数据\n             */\n            handleSearch (payload) {\n                this.searchParams = payload;\n                this.fetchData();\n            },\n\n            /**\n             * @desc 删除文件源\n             * @param {Number} id 文件源id\n             *\n             * 删除成功重新拉取数据\n             */\n            handleDelete (id) {\n                FileManageService.removeSource(id)\n                    .then((res) => {\n                        this.messageSuccess('删除成功');\n                        this.fetchData();\n                    });\n            },\n\n            /**\n             * @desc 跳转到bucket存储桶列表\n             * @param {Object} row 文件源详情数据\n             */\n            handelGoBucket (row) {\n                this.$router.push({\n                    name: 'bucketList',\n                    query: {\n                        fileSourceId: 4 || row.id,\n                        sourceAlias: row.alias,\n                    },\n                });\n            },\n        },\n    };\n</script>\n<style lang=\"postcss\">\n    .file-manage-source-file {\n        .action-box {\n            display: flex;\n            align-items: center;\n        }\n    }\n</style>\n"],"names":[],"sourceRoot":""}