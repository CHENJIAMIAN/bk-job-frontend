{"version":3,"file":"static/css/5619.bee51c908c786862bc5b.css","mappings":"AAuTA,sBAEA,eADA,iBAsBA,CAnBA,wCAEA,kBADA,iBAUA,CAPA,8CACA,kBAKA,CAHA,0DACA,2BACA,CAIA,uCACA,kBAEA,WADA,MAEA,UACA,CAGA,kCAEA,aACA,YAEA,gBADA,eAHA,iBAyBA,CAnBA,+CAMA,cAFA,aACA,eAJA,kBAEA,UADA,OAKA,CAGA,qDACA,UACA,kBACA,CAEA,qDACA,aACA,CAIA,4BAEA,iBADA,gBAEA,uBACA,kBACA,CAEA,iCAEA,mBAIA,cALA,aAIA,eADA,kBADA,cAwBA,CAnBA,8CAEA,eACA,UAFA,sBAGA,mBAEA,6BADA,eAMA,CAHA,oDACA,aACA,CAGA,+CAIA,4CADA,gBAFA,kBACA,OAGA,CAGA,gCAGA,YAFA,kBACA,UAqBA,CAjBA,sDACA,8BACA,CAGA,iDAOA,mBAHA,SAMA,cAJA,aAGA,eADA,eAPA,kBAEA,QADA,MAGA,SAMA,CC1UA,0BAGA,kBADA,kBADA,iBAkEA,CA9DA,qCAWA,mBADA,gBADA,eAJA,aAEA,YAJA,OAKA,kBAPA,kBACA,MAIA,WAFA,SAyDA,CAhDA,2CACA,kBAiBA,CAdA,+DAEA,mBADA,aAEA,CAEA,8DAEA,gBADA,aAEA,CAGA,4DACA,aACA,CAGA,kDAOA,kBADA,eALA,qBAGA,eAFA,YAGA,iBAFA,aAeA,CATA,yDAEA,mBADA,aAEA,CAEA,wDAEA,mBADA,aAEA,CAGA,sDAMA,cAFA,aACA,eAJA,kBAEA,UADA,OAKA,CC8HA,wCAEA,yBACA,kBACA,mBAHA,UAiCA,CA5BA,sFAQA,6BAFA,cADA,eAHA,YAEA,kBADA,mBAIA,eAEA,CAEA,2CAGA,mBADA,cADA,eAGA,CAEA,2CACA,eACA,CAEA,wDACA,cAKA,CAHA,mEACA,cACA,CAIA,mCACA,UAKA,CAHA,kDACA,WACA,CAGA,yCACA,aACA,CAEA,wCAEA,mBADA,YAMA,CAHA,mDACA,cACA,CAIA,wDAEA,yBADA,iBAkBA,CAfA,iEACA,oBACA,CAEA,8DACA,kBAKA,CAHA,+EACA,aACA,CAGA,yEACA,YACA,CAIA,uCACA,gBASA,CAPA,uDACA,WACA,CAEA,wDACA,OACA","sources":["webpack://job/./src/components/jb-edit/select.vue","webpack://job/./src/views/dangerous-rule-manage/index/components/edit-action.vue","webpack://job/./src/views/dangerous-rule-manage/index/index.vue"],"sourcesContent":["<template>\n    <div\n        class=\"jb-edit-select\"\n        :class=\"mode\"\n        :key=\"refreshKey\">\n        <template v-if=\"!isEditing\">\n            <div class=\"render-value-box\" @click.stop=\"handleBlockShowEdit\">\n                <div class=\"value-text\" v-bk-overflow-tips>\n                    <slot v-bind:value=\"renderText\">\n                        <span>{{ renderText }}</span>\n                    </slot>\n                </div>\n                <i class=\"bk-icon icon-angle-down value-arrow\" />\n                <div class=\"edit-action-box\">\n                    <Icon\n                        v-if=\"!isBlock && !isSubmiting\"\n                        type=\"edit-2\"\n                        class=\"edit-action\"\n                        @click.self.stop=\"handleShowEdit\" />\n                    <Icon\n                        v-if=\"isSubmiting\"\n                        type=\"loading-circle\"\n                        class=\"edit-loading\" />\n                </div>\n            </div>\n        </template>\n        <template v-else>\n            <div\n                class=\"edit-value-box\"\n                :class=\"{ 'edit-error': !!error }\"\n                @click.stop=\"\">\n                <bk-select\n                    ref=\"select\"\n                    v-bind=\"$attrs\"\n                    :value=\"value\"\n                    :clearable=\"false\"\n                    @change=\"handleSelectChange\"\n                    @toggle=\"handleSelectToggle\">\n                    <bk-option\n                        v-for=\"item in list\"\n                        :id=\"item.id\"\n                        :name=\"item.name\"\n                        :key=\"item.id\" />\n                </bk-select>\n                <div\n                    v-if=\"error\"\n                    class=\"input-edit-info\"\n                    v-bk-tooltips.top=\"error\">\n                    <Icon type=\"info\" />\n                </div>\n            </div>\n        </template>\n    </div>\n</template>\n<script>\n    import _ from 'lodash';\n   \n    const compare = (pre, last) => {\n        if (pre === last) {\n            return true;\n        }\n        if (Object.prototype.toString.call(pre) !== Object.prototype.toString.call(last)) {\n            return false;\n        }\n        if (Array.isArray(pre)) {\n            if (pre.length !== last.length) {\n                return false;\n            }\n            const preMap = pre.reduce((result, item) => {\n                result[item] = true;\n                return result;\n            }, []);\n            // eslint-disable-next-line no-plusplus\n            for (let i = 0; i < last.length; i++) {\n                if (!preMap[last[i]]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    };\n\n    export default {\n        name: 'JbEditSelect',\n        props: {\n            /**\n             * @value block 块级交互\n             * @value ‘’ 默认鼠标点击编辑按钮\n             */\n            mode: {\n                type: String,\n                default: '',\n            },\n            /**\n             * @desc 编辑操作对应的字段名称\n             */\n            field: {\n                type: String,\n                required: true,\n            },\n            /**\n             * @desc 默认值\n             */\n            value: {\n                type: [String, Number, Array],\n                default: '',\n            },\n            /**\n             * @desc 下拉数据列表\n             */\n            list: {\n                type: Array,\n                require: true,\n            },\n            /**\n             * @desc 宽度\n             */\n            width: {\n                type: String,\n                default: 'auto',\n            },\n            remoteHander: {\n                type: Function,\n                default: () => Promise.resolve(),\n            },\n            /**\n             * @desc 值验证规则\n             */\n            rules: {\n                type: Array,\n                default: () => [],\n            },\n        },\n        data () {\n            return {\n                localValue: this.value,\n                error: '',\n                isEditing: false,\n                isSubmiting: false,\n            };\n        },\n        computed: {\n            /**\n             * @desc 非编辑状态时\n             * @returns { Boolean }\n             */\n            renderText () {\n                const valueMap = {};\n                if (Array.isArray(this.localValue)) {\n                    this.localValue.forEach((value) => {\n                        valueMap[value] = true;\n                    });\n                } else {\n                    valueMap[this.localValue] = true;\n                }\n                const result = _.filter(this.list, ({ id }) => valueMap[id]);\n                if (result.length < 1) {\n                    return '--';\n                }\n                return result.map(({ name }) => name).join(',');\n            },\n            styles () {\n                return {\n                    width: this.width,\n                };\n            },\n            isBlock () {\n                return this.mode === 'block';\n            },\n            refreshKey () {\n                return `editSelect_${Array.isArray(this.value) ? this.value.join('_') : this.value}`;\n            },\n        },\n        watch: {\n            value (localValue) {\n                this.localValue = localValue;\n            },\n        },\n        mounted () {\n            this.isValidatoring = false;\n            document.body.addEventListener('click', this.handleHideEdit);\n            this.$once('hook:beforeDestroy', () => {\n                document.body.removeEventListener('click', this.handleHideEdit);\n            });\n        },\n        methods: {\n            /**\n             * @desc 值验证\n             */\n            doValidator () {\n                const checkValidator = (rule, value) => new Promise((resolve, reject) => {\n                    if (rule.required && !value) {\n                        reject(rule.message);\n                    }\n                    // 通过自定义方法来检测\n                    if (rule.validator && (typeof rule.validator === 'function')) {\n                        const result = rule.validator(value);\n                        if (result.then) {\n                            result.then((data) => {\n                                if (data) {\n                                    return resolve();\n                                }\n                                return reject(rule.message);\n                            }).catch(() => {\n                                reject(rule.message);\n                            });\n                        } else if (result) {\n                            return resolve();\n                        } else {\n                            return reject(rule.message);\n                        }\n                    } else {\n                        resolve();\n                    }\n                });\n                \n                const allPromise = this.rules.map(rule => checkValidator(rule, this.localValue));\n                this.isValidatoring = true;\n                return Promise.all(allPromise).finally(() => {\n                    this.isValidatoring = false;\n                });\n            },\n            /**\n             * @desc 提交编辑\n             */\n            triggerChange () {\n                this.doValidator()\n                    .then(() => {\n                        this.isEditing = false;\n                        if (compare(this.localValue, this.value)) {\n                            return;\n                        }\n                        this.isSubmiting = true;\n                        this.remoteHander({\n                            [this.field]: this.localValue,\n                        }).then(() => {\n                            this.$emit('on-change', {\n                                [this.field]: this.localValue,\n                            });\n                            this.messageSuccess('编辑成功');\n                        })\n                            .catch(() => {\n                                this.localValue = this.value;\n                            })\n                            .finally(() => {\n                                this.isSubmiting = false;\n                            });\n                    })\n                    .catch((error) => {\n                        this.error = error;\n                    });\n            },\n            handleBlockShowEdit () {\n                if (!this.isBlock) {\n                    return;\n                }\n                this.handleShowEdit();\n            },\n            /**\n             * @desc 显示input\n             */\n            handleShowEdit () {\n                document.body.click();\n                this.isEditing = true;\n                this.$nextTick(() => {\n                    this.$refs.select.$el.querySelector('.bk-select-name').click();\n                });\n            },\n            /**\n             * @desc 隐藏 input 框\n             * @param {Object} event dom 事件\n             */\n            handleHideEdit (event) {\n                if (this.isValidatoring || this.error) {\n                    return;\n                }\n                if (event.path && event.path.length > 0) {\n                    // eslint-disable-next-line no-plusplus\n                    for (let i = 0; i < event.path.length; i++) {\n                        const target = event.path[i];\n                        if (target.className === 'jb-edit-select'\n                            || target.className === 'tippy-content') {\n                            return;\n                        }\n                    }\n                }\n                this.isEditing = false;\n            },\n            /**\n             * @desc input 值更新\n             * @param {String} value 最新输入值\n             */\n            handleSelectChange (value) {\n                this.localValue = value;\n            },\n            /**\n             * @desc 下拉面板收起，取消编辑状态\n             */\n            handleSelectToggle (toggle) {\n                if (!toggle) {\n                    // this.isEditing = false;\n                    this.triggerChange();\n                }\n            },\n            \n        },\n    };\n</script>\n<style lang='postcss'>\n    .jb-edit-select {\n        &.block {\n            position: relative;\n            cursor: pointer;\n\n            .render-value-box {\n                padding-left: 10px;\n                margin-left: -10px;\n\n                &:hover {\n                    background: #f0f1f5;\n\n                    .value-text {\n                        max-width: calc(100% - 32px);\n                    }\n                }\n            }\n\n            .edit-action-box {\n                position: absolute;\n                top: 0;\n                right: 10px;\n                width: 16px;\n            }\n        }\n\n        .render-value-box {\n            position: relative;\n            display: flex;\n            height: 30px;\n            min-width: 36px;\n            min-height: 28px;\n\n            .value-arrow {\n                position: absolute;\n                top: 2px;\n                right: 2px;\n                display: none;\n                font-size: 22px;\n                color: #979ba5;\n            }\n\n            &:hover {\n                .edit-action {\n                    opacity: 100%;\n                    transform: scale(1);\n                }\n\n                .value-arrow {\n                    display: block;\n                }\n            }\n        }\n\n        .value-text {\n            overflow: hidden;\n            line-height: 30px;\n            text-overflow: ellipsis;\n            white-space: nowrap;\n        }\n\n        .edit-action-box {\n            display: flex;\n            align-items: center;\n            min-height: 1em;\n            margin-right: auto;\n            font-size: 16px;\n            color: #979ba5;\n\n            .edit-action {\n                padding: 6px 0 6px 2px;\n                cursor: pointer;\n                opacity: 0%;\n                transform: scale(0);\n                transition: 0.15s;\n                transform-origin: left center;\n\n                &:hover {\n                    color: #3a84ff;\n                }\n            }\n\n            .edit-loading {\n                position: absolute;\n                top: 9px;\n                margin-left: 2px;\n                animation: rotate-loading 1s linear infinite;\n            }\n        }\n\n        .edit-value-box {\n            position: relative;\n            width: 100%;\n            font-size: 0;\n\n            &.edit-error {\n                .bk-select {\n                    border-color: #ea3636 !important;\n                }\n            }\n\n            .input-edit-info {\n                position: absolute;\n                top: 0;\n                right: 0;\n                bottom: 0;\n                z-index: 1;\n                display: flex;\n                align-items: center;\n                padding: 0 10px;\n                font-size: 16px;\n                color: #ea3636;\n            }\n        }\n    }\n</style>\n","<template>\n    <div class=\"dangerous-rule-edit-mode\">\n        <bk-select\n            ref=\"select\"\n            :value=\"value\"\n            :clearable=\"false\"\n            @toggle=\"handleSelectToggle\"\n            @change=\"handleChange\">\n            <bk-option\n                v-for=\"item in actionList\"\n                :name=\"item.name\"\n                :id=\"item.id\"\n                :key=\"item.id\" />\n        </bk-select>\n        <div v-show=\"!isEditing\" class=\"value-box\" @click.stop=\"handleEdit\">\n            <div\n                class=\"action-text\"\n                :class=\"textClass\">\n                {{ text }}\n            </div>\n            <i class=\"bk-icon icon-angle-down value-box-arrow\" />\n        </div>\n    </div>\n</template>\n<script>\n    import _ from 'lodash';\n   \n    export default {\n        name: '',\n        props: {\n            value: {\n                type: Number,\n                require: true,\n            },\n        },\n        data () {\n            return {\n                isEditing: false,\n            };\n        },\n        computed: {\n            text () {\n                return _.find(this.actionList, _ => _.id === this.value).name;\n            },\n            textClass () {\n                const classMap = {\n                    1: 'normal',\n                    2: 'hight',\n                };\n                return classMap[this.value];\n            },\n        },\n        created () {\n            this.actionList = [\n                {\n                    id: 1,\n                    name: '扫描',\n                },\n                {\n                    id: 2,\n                    name: '拦截',\n                },\n            ];\n        },\n        methods: {\n            /**\n             * @desc 开始编辑\n             */\n            handleEdit () {\n                this.isEditing = true;\n                this.$nextTick(() => {\n                    this.$refs.select.$el.querySelector('.bk-select-name').click();\n                });\n            },\n            /**\n             * @desc 下拉面板收起，取消编辑状态\n             */\n            handleSelectToggle (toggle) {\n                if (!toggle) {\n                    this.isEditing = false;\n                }\n            },\n            /**\n             * @desc 触发change 事件\n             */\n            handleChange (value) {\n                this.$emit('on-change', value);\n            },\n        },\n    };\n</script>\n<style lang='postcss'>\n    .dangerous-rule-edit-mode {\n        position: relative;\n        padding-left: 10px;\n        margin-left: -10px;\n\n        .value-box {\n            position: absolute;\n            top: 0;\n            left: 0;\n            z-index: 1;\n            display: flex;\n            width: 100%;\n            height: 100%;\n            padding-left: 10px;\n            cursor: pointer;\n            background: #fff;\n            align-items: center;\n\n            &:hover {\n                background: #f0f1f5;\n\n                .action-text {\n                    &.normal {\n                        color: #63656e;\n                        background: #e1e3eb;\n                    }\n\n                    &.hight {\n                        color: #e63535;\n                        background: #fdd;\n                    }\n                }\n\n                .value-box-arrow {\n                    display: block;\n                }\n            }\n\n            .action-text {\n                display: inline-block;\n                height: 18px;\n                padding: 0 5px;\n                font-size: 12px;\n                line-height: 18px;\n                cursor: pointer;\n                border-radius: 2px;\n\n                &.normal {\n                    color: #979ba5;\n                    background: #f0f1f5;\n                }\n\n                &.hight {\n                    color: #ea3636;\n                    background: #ffebeb;\n                }\n            }\n\n            .value-box-arrow {\n                position: absolute;\n                top: 2px;\n                right: 2px;\n                display: none;\n                font-size: 22px;\n                color: #979ba5;\n            }\n        }\n    }\n</style>\n","<template>\n    <div class=\"dangerous-rule-manage-page\">\n        <table\n            class=\"rule-table\"\n            v-test=\"{ type: 'list', value: 'dangerousRule' }\">\n            <thead>\n                <tr>\n                    <th style=\"width: 200px;\">{{ '语法检测表达式' }}</th>\n                    <th>{{ '规则说明' }}</th>\n                    <th style=\"width: 300px;\">{{ '脚本类型' }}</th>\n                    <th style=\"width: 300px;\">\n                        <span>{{ '动作' }}</span>\n                        <bk-popover placement=\"right\">\n                            <Icon type=\"info\" class=\"action-tips\" />\n                            <div slot=\"content\">\n                                <div>{{ '【扫描】' }}</div>\n                                <div>{{ '命中规则的脚本执行任务仅会做记录，不会拦截' }}</div>\n                                <div style=\"margin-top: 8px;\">{{ '【拦截】' }}</div>\n                                <div>{{ '命中规则的脚本执行任务会被记录，并中止运行' }}</div>\n                            </div>\n                        </bk-popover>\n                    </th>\n                    <th style=\"width: 180px;\">\n                        {{ '操作' }}\n                        <Icon\n                            v-bk-tooltips=\"{\n                                theme: 'dark',\n                                content: '规则的顺位越高，表示执行优先度越高',\n                            }\"\n                            class=\"action-tips\"\n                            type=\"info\" />\n                    </th>\n                </tr>\n            </thead>\n            <table-action-row @on-change=\"handleAdd\" />\n            <tbody\n                v-for=\"(rule, index) in list\"\n                :key=\"rule.id\">\n                <tr>\n                    <td>\n                        <jb-edit-input\n                            field=\"expression\"\n                            mode=\"block\"\n                            :rules=\"formRules.expression\"\n                            :value=\"rule.expression\"\n                            :remote-hander=\"val => handleUpdate(rule, val)\" />\n                    </td>\n                    <td>\n                        <jb-edit-input\n                            field=\"description\"\n                            mode=\"block\"\n                            :rules=\"formRules.description\"\n                            :value=\"rule.description\"\n                            :remote-hander=\"val => handleUpdate(rule, val)\" />\n                    </td>\n                    <td>\n                        <jb-edit-select\n                            field=\"scriptTypeList\"\n                            mode=\"block\"\n                            :rules=\"formRules.scriptTypeList\"\n                            multiple\n                            show-select-all\n                            :value=\"rule.scriptTypeList\"\n                            :list=\"scriptTypeList\"\n                            :remote-hander=\"val => handleUpdate(rule, val)\" />\n                    </td>\n                    <td>\n                        <edit-action\n                            :value=\"rule.action\"\n                            @on-change=\"action => handleUpdate(rule, { action })\" />\n                    </td>\n                    <td>\n                        <div class=\"action-box\">\n                            <bk-switcher\n                                :value=\"rule.status\"\n                                :true-value=\"1\"\n                                :false-value=\"0\"\n                                @update=\"status => handleUpdate(rule, { status })\"\n                                class=\"mr10\"\n                                theme=\"primary\"\n                                size=\"small\"\n                                v-test=\"{ type: 'button', value: 'toggleRuleStatus' }\" />\n                            <bk-button\n                                class=\"arrow-btn mr10\"\n                                text\n                                \n                                v-bk-tooltips.top=\"'上移'\"\n                                @click=\"handleMove(index, -1)\"\n                                v-test=\"{ type: 'button', value: 'upMoveRule' }\">\n                                <Icon type=\"increase-line\" />\n                            </bk-button>\n                            <bk-button\n                                class=\"arrow-btn mr10\"\n                                text\n                                \n                                v-bk-tooltips.top=\"'下移'\"\n                                @click=\"handleMove(index, 1)\"\n                                v-test=\"{ type: 'button', value: 'downMoveRule' }\">\n                                <Icon type=\"decrease-line\" />\n                            </bk-button>\n                            <jb-popover-confirm\n                                :title=\"'确定删除该规则？'\"\n                                :content=\"'脚本编辑器中匹配该规则将不会再收到提醒'\"\n                                :confirm-handler=\"() => handleDelete(rule.id)\">\n                                <bk-button\n                                    text\n                                    v-test=\"{ type: 'button', value: 'deleteRule' }\">\n                                    {{ '删除' }}\n                                </bk-button>\n                            </jb-popover-confirm>\n                        </div>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</template>\n<script>\n       import DangerousRuleService from '@service/dangerous-rule';\n    import PublicScriptManageService from '@service/public-script-manage';\n    import JbEditInput from '@components/jb-edit/input';\n    import JbEditSelect from '@components/jb-edit/select';\n    import JbPopoverConfirm from '@components/jb-popover-confirm';\n    import TableActionRow from './components/table-action-row';\n    import EditAction from './components/edit-action';\n\n    export default {\n        name: '',\n        components: {\n            JbEditInput,\n            JbEditSelect,\n            JbPopoverConfirm,\n            TableActionRow,\n            EditAction,\n        },\n        data () {\n            return {\n                isLoading: true,\n                list: [{},{},{}],\n                scriptTypeList: [{},{},{}],\n            };\n        },\n        computed: {\n            isSkeletonLoading () {\n                return this.isLoading;\n            },\n        },\n        created () {\n            this.editRule = {};\n            this.fetchData();\n            this.fetchScriptType();\n\n            this.formRules = {\n                expression: [\n                    {\n                        required: true,\n                        message: '语法检测表达式不能为空',\n                    },\n                ],\n                description: [\n                    {\n                        required: true,\n                        message: '规则说明不能为空',\n                    },\n                ],\n                scriptTypeList: [\n                    {\n                        validator: value => value.length > 0,\n                        message: '脚本类型不能为空',\n                    },\n                ],\n            };\n        },\n        methods: {\n            /**\n             * @desc 获取高危语句规则\n             */\n            fetchData () {\n                this.isLoading = true;\n                DangerousRuleService.fetchList({}, {\n                    permission: 'page',\n                })\n                    .then((data) => {\n                        this.list = data;\n                    })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            },\n            /**\n             * @desc 获取支持的脚本类型列表\n             */\n            fetchScriptType () {\n                PublicScriptManageService.scriptTypeList()\n                    .then((data) => {\n                        this.scriptTypeList = data;\n                    });\n            },\n            /**\n             * @desc 更新脚本类型\n             * @param {String} rule 高危语句规则\n             * @param {Array} scriptTypeList 脚本语言列表哦\n             */\n            handleScriptTypeUpdate (rule, scriptTypeList) {\n                this.editRule = {\n                    ...rule,\n                    scriptTypeList,\n                };\n            },\n            /**\n             * @desc 脚本语言下拉框收起时提交更新\n             * @param {Boolean} toggle 脚本语言下拉框收起状态\n             */\n            handleSubmitScriptTypeChange (toggle) {\n                if (!toggle\n                    && this.editRule.scriptTypeList\n                    && this.editRule.scriptTypeList.length > 0) {\n                    DangerousRuleService.update({\n                        ...this.editRule,\n                    }).then(() => {\n                        this.messageSuccess('编辑成功');\n                    });\n                }\n            },\n            /**\n             * @desc 更新高危语句配置\n             * @param {Object} rule 高危语句规则\n             * @param {Object} payload 脚本语言列表哦\n             */\n            handleUpdate (rule, payload) {\n                console.log('from handleUpdate = ', rule, payload);\n                return DangerousRuleService.update({\n                    ...rule,\n                    ...payload,\n                }).then(() => {\n                    this.messageSuccess('编辑成功');\n                    Object.assign(rule, payload);\n                });\n            },\n            /**\n             * @desc 添加一条高危语句\n             */\n            handleAdd () {\n                this.fetchData();\n            },\n            /**\n             * @desc 移动高危语句的顺序\n             * @param {Number} index 当前语句的位置索引\n             * @param {Number} step 移动的步数\n             */\n            handleMove (index, step) {\n                this.isLoading = true;\n                DangerousRuleService.updateSort({\n                    id: this.list[index].id,\n                    dir: step,\n                }).then(() => {\n                    const current = this.list[index];\n                    const change = this.list[index + step];\n                    this.list.splice(index, 1, change);\n                    this.list.splice(index + step, 1, current);\n                    this.messageSuccess(step < 0 ? '上移成功' : '下移成功');\n                })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            },\n            /**\n             * @desc 删除高危语句\n             * @param {Number} id 高危语句的id\n             */\n            handleDelete (id) {\n                return DangerousRuleService.remove({\n                    id,\n                }).then(() => {\n                    this.messageSuccess('删除成功');\n                    this.fetchData();\n                });\n            },\n        },\n    };\n</script>\n<style lang='postcss'>\n    .dangerous-rule-manage-page {\n        .rule-table {\n            width: 100%;\n            border: 1px solid #dcdee5;\n            border-radius: 2px;\n            table-layout: fixed;\n\n            th,\n            td {\n                height: 40px;\n                padding-right: 15px;\n                padding-left: 15px;\n                font-size: 12px;\n                color: #63656e;\n                text-align: left;\n                border-top: 1px solid #dcdee5;\n            }\n\n            th {\n                font-weight: normal;\n                color: #313238;\n                background: #fafbfd;\n            }\n\n            td {\n                background: #fff;\n            }\n\n            .bk-button-text {\n                font-size: 12px;\n\n                .icon-plus {\n                    font-size: 18px;\n                }\n            }\n        }\n\n        .input {\n            width: 100%;\n\n            .bk-form-input {\n                height: 26px;\n            }\n        }\n\n        .action-tips {\n            color: #c4c6cc;\n        }\n\n        .action-box {\n            display: flex;\n            align-items: center;\n\n            .arrow-btn {\n                font-size: 16px;\n            }\n        }\n\n        .script-type-edit {\n            &.bk-select {\n                margin-left: -10px;\n                border-color: transparent;\n\n                &.is-focus {\n                    border-color: #3a84ff;\n                }\n\n                &:hover {\n                    background: #f0f1f5;\n\n                    .bk-select-angle {\n                        display: block;\n                    }\n                }\n\n                .bk-select-angle {\n                    display: none;\n                }\n            }\n        }\n\n        .bk-select {\n            line-height: 24px;\n\n            .bk-select-name {\n                height: 24px;\n            }\n\n            .bk-select-angle {\n                top: 2px;\n            }\n        }\n    }\n</style>\n"],"names":[],"sourceRoot":""}