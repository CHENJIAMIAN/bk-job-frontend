{"version":3,"file":"static/css/8460.0216e5e0e316d14d58d7.css","mappings":"AA8pBA,2CAGA,cADA,eADA,iBAkBA,CAdA,iDAIA,wBACA,UAHA,kBACA,oBAFA,UAKA,CAEA,2DAGA,SACA,iBAHA,kBACA,OAGA","sources":["webpack://job/./src/views/executive-history/list/index.vue"],"sourcesContent":["\r\n<template>\r\n    <div class=\"executive-history-page\">\r\n        <list-action-layout>\r\n            <jb-search-select\r\n                ref=\"search\"\r\n                @on-change=\"handleSearch\"\r\n                :data=\"searchSelect\"\r\n                :placeholder=\"$t('history.搜索任务ID，任务名称，执行方式，任务类型，任务状态，执行人...')\"\r\n                style=\"width: 600px;\" />\r\n            <template #right>\r\n                <bk-date-picker\r\n                    ref=\"datePicker\"\r\n                    :value=\"defaultDateTime\"\r\n                    :placeholder=\"$t('history.选择日期')\"\r\n                    :shortcuts=\"shortcuts\"\r\n                    type=\"datetimerange\"\r\n                    :shortcut-close=\"true\"\r\n                    :use-shortcut-text=\"true\"\r\n                    :clearable=\"false\"\r\n                    up-to-now\r\n                    @change=\"handleDateChange\" />\r\n            </template>\r\n        </list-action-layout>\r\n        <render-list\r\n            ref=\"list\"\r\n            :size=\"tableSize\"\r\n            :data-source=\"fetchExecutionHistoryList\"\r\n            :search-control=\"() => $refs.search\"\r\n            class=\"executive-history-table\"\r\n            v-test=\"{ type: 'list', value: 'execHistory' }\">\r\n            <bk-table-column\r\n                v-if=\"allRenderColumnMap.id\"\r\n                label=\"ID\"\r\n                prop=\"id\"\r\n                key=\"id\"\r\n                width=\"130\"\r\n                align=\"left\">\r\n                <template slot-scope=\"{ row }\">\r\n                    <auth-button\r\n                        :permission=\"row.canView\"\r\n                        auth=\"task_instance/view\"\r\n                        :resource-id=\"row.id\"\r\n                        text\r\n                        @click=\"handleGoDetail(row)\">\r\n                        {{ row.id }}\r\n                    </auth-button>\r\n                </template>\r\n            </bk-table-column>\r\n            <bk-table-column\r\n                v-if=\"allRenderColumnMap.name\"\r\n                :label=\"$t('history.任务名称.colHead')\"\r\n                prop=\"name\"\r\n                key=\"name\"\r\n                min-width=\"200\"\r\n                align=\"left\"\r\n                show-overflow-tooltip />\r\n            <bk-table-column\r\n                v-if=\"allRenderColumnMap.startupModeDesc\"\r\n                :label=\"$t('history.执行方式.colHead')\"\r\n                prop=\"startupModeDesc\"\r\n                key=\"startupModeDesc\"\r\n                width=\"120\"\r\n                align=\"left\" />\r\n            <bk-table-column\r\n                v-if=\"allRenderColumnMap.typeDesc\"\r\n                :label=\"$t('history.任务类型.colHead')\"\r\n                prop=\"typeDesc\"\r\n                key=\"typeDesc\"\r\n                width=\"140\"\r\n                align=\"left\" />\r\n            <bk-table-column\r\n                v-if=\"allRenderColumnMap.statusDesc\"\r\n                :label=\"$t('history.任务状态.colHead')\"\r\n                prop=\"statusDesc\"\r\n                key=\"statusDesc\"\r\n                width=\"140\"\r\n                align=\"left\">\r\n                <template slot-scope=\"{ row }\">\r\n                    <Icon\r\n                        svg\r\n                        :type=\"row.statusIconType\"\r\n                        :class=\"{\r\n                            'rotate-loading': row.isDoing,\r\n                        }\"\r\n                        style=\"font-size: 16px; color: #3a84ff; vertical-align: middle;\" />\r\n                    <span style=\"vertical-align: middle;\">{{ row.statusDesc }}</span>\r\n                </template>\r\n            </bk-table-column>\r\n            <bk-table-column\r\n                v-if=\"allRenderColumnMap.operator\"\r\n                :label=\"$t('history.执行人.colHead')\"\r\n                prop=\"operator\"\r\n                key=\"operator\"\r\n                width=\"140\"\r\n                align=\"left\" />\r\n            <bk-table-column\r\n                v-if=\"allRenderColumnMap.createTime\"\r\n                :label=\"$t('history.开始时间.colHead')\"\r\n                prop=\"createTime\"\r\n                key=\"createTime\"\r\n                width=\"180\"\r\n                align=\"left\" />\r\n            <bk-table-column\r\n                v-if=\"allRenderColumnMap.totalTimeText\"\r\n                :label=\"$t('history.耗时时长')\"\r\n                prop=\"totalTimeText\"\r\n                key=\"totalTimeText\"\r\n                width=\"130\"\r\n                align=\"right\" />\r\n            <bk-table-column\r\n                :label=\"$t('history.操作')\"\r\n                width=\"150\"\r\n                key=\"action\"\r\n                fixed=\"right\"\r\n                align=\"left\">\r\n                <template slot-scope=\"{ row }\">\r\n                    <auth-button\r\n                        :permission=\"row.canView\"\r\n                        auth=\"task_instance/view\"\r\n                        :resource-id=\"row.id\"\r\n                        text\r\n                        @click=\"handleGoDetail(row)\">\r\n                        {{ $t('history.查看详情') }}\r\n                    </auth-button>\r\n                    <auth-button\r\n                        v-if=\"!redoRequestMap[row.id]\"\r\n                        :permission=\"row.canExecute\"\r\n                        auth=\"task_instance/redo\"\r\n                        :resource-id=\"row.id\"\r\n                        text\r\n                        @click=\"handleGoRetry(row)\">\r\n                        {{ $t('history.去重做') }}\r\n                    </auth-button>\r\n                    <span\r\n                        v-else\r\n                        class=\"task-redo-loading ml10\"\r\n                        :data-text=\"$t('history.去重做')\">\r\n                        <Icon\r\n                            svg\r\n                            type=\"sync-pending\"\r\n                            class=\"rotate-loading\" />\r\n                    </span>\r\n                </template>\r\n            </bk-table-column>\r\n            <bk-table-column type=\"setting\">\r\n                <bk-table-setting-content\r\n                    :fields=\"tableColumn\"\r\n                    :selected=\"selectedTableColumn\"\r\n                    :size=\"tableSize\"\r\n                    @setting-change=\"handleSettingChange\" />\r\n            </bk-table-column>\r\n        </render-list>\r\n    </div>\r\n</template>\r\n<script>\r\n    import I18n from '@/i18n';\r\n    import TaskExecuteService from '@service/task-execute';\r\n    import NotifyService from '@service/notify';\r\n    import { prettyDateTimeFormat } from '@utils/assist';\r\n    import { listColumnsCache } from '@utils/cache-helper';\r\n    import { IPRule } from '@utils/validator';\r\n    import ListActionLayout from '@components/list-action-layout';\r\n    import RenderList from '@components/render-list';\r\n    import JbSearchSelect from '@components/jb-search-select';\r\n\r\n    const TABLE_COLUMN_CACHE = 'execute_history_list_columns';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            ListActionLayout,\r\n            RenderList,\r\n            JbSearchSelect,\r\n        },\r\n        data () {\r\n            return {\r\n                showOperation: false,\r\n                searchParams: {\r\n                    startTime: '',\r\n                    endTime: '',\r\n                },\r\n                defaultDateTime: [\r\n                    '', '',\r\n                ],\r\n                selectedTableColumn: [],\r\n                tableSize: 'small',\r\n                redoRequestMap: {},\r\n            };\r\n        },\r\n        computed: {\r\n            isSkeletonLoading () {\r\n                return this.$refs.list.isLoading;\r\n            },\r\n            searchInfoEnable () {\r\n                return !!this.searchParams.taskInstanceId;\r\n            },\r\n            allRenderColumnMap () {\r\n                return this.selectedTableColumn.reduce((result, item) => {\r\n                    result[item.id] = true;\r\n                    return result;\r\n                }, {});\r\n            },\r\n        },\r\n        created () {\r\n            this.parseDefaultDateTime();\r\n            this.fetchExecutionHistoryList = TaskExecuteService.fetchExecutionHistoryList;\r\n            this.searchSelect = [\r\n                {\r\n                    name: 'ID',\r\n                    id: 'taskInstanceId',\r\n                    description: I18n.t('history.将覆盖其它条件'),\r\n                    validate (values, item) {\r\n                        const validate = values.every(_ => /^(\\d*)$/.test(_.name));\r\n                        return !validate ? I18n.t('history.ID只支持数字') : true;\r\n                    },\r\n                },\r\n                {\r\n                    name: I18n.t('history.任务名称.colHead'),\r\n                    id: 'taskName',\r\n                    default: true,\r\n                },\r\n                {\r\n                    name: I18n.t('history.目标 IP'),\r\n                    id: 'ip',\r\n                    validate (values, item) {\r\n                        const validate = values.every(_ => IPRule.validator(_.name));\r\n                        return !validate ? IPRule.message : true;\r\n                    },\r\n                },\r\n                {\r\n                    name: I18n.t('history.执行耗时'),\r\n                    id: 'totalTimeType',\r\n                    children: [\r\n                        {\r\n                            name: '≤ 60s',\r\n                            id: 'LESS_THAN_ONE_MINUTE',\r\n                        },\r\n                        {\r\n                            name: '＞60s and ≤ 600s',\r\n                            id: 'ONE_MINUTE_TO_TEN_MINUTES',\r\n                        },\r\n                        {\r\n                            name: '＞ 600s',\r\n                            id: 'MORE_THAN_TEN_MINUTES',\r\n                        },\r\n                    ],\r\n                },\r\n                {\r\n                    name: I18n.t('history.执行方式.colHead'),\r\n                    id: 'startupModes',\r\n                    children: [\r\n                        {\r\n                            name: I18n.t('history.页面执行'),\r\n                            id: 1,\r\n                        },\r\n                        {\r\n                            name: I18n.t('history.定时执行'),\r\n                            id: 3,\r\n                        },\r\n                        {\r\n                            name: I18n.t('history.API调用'),\r\n                            id: 2,\r\n                        },\r\n                    ],\r\n                },\r\n                {\r\n                    name: I18n.t('history.任务类型.colHead'),\r\n                    id: 'taskType',\r\n                    children: [\r\n                        {\r\n                            name: I18n.t('history.作业执行'),\r\n                            id: 0,\r\n                        },\r\n                        {\r\n                            name: I18n.t('history.脚本执行'),\r\n                            id: 1,\r\n                        },\r\n                        {\r\n                            name: I18n.t('history.文件分发'),\r\n                            id: 2,\r\n                        },\r\n                    ],\r\n                },\r\n                {\r\n                    name: I18n.t('history.任务状态.colHead'),\r\n                    id: 'status',\r\n                    children: [\r\n                        {\r\n                            name: I18n.t('history.等待执行'),\r\n                            id: 1,\r\n                        },\r\n                        {\r\n                            name: I18n.t('history.正在执行'),\r\n                            id: 2,\r\n                        },\r\n                        {\r\n                            name: I18n.t('history.执行成功'),\r\n                            id: 3,\r\n                        },\r\n                        {\r\n                            name: I18n.t('history.执行失败'),\r\n                            id: 4,\r\n                        },\r\n                        {\r\n                            name: I18n.t('history.等待确认'),\r\n                            id: 7,\r\n                        },\r\n                        {\r\n                            name: I18n.t('history.强制终止中'),\r\n                            id: 10,\r\n                        },\r\n                        {\r\n                            name: I18n.t('history.强制终止成功'),\r\n                            id: 11,\r\n                        },\r\n                        {\r\n                            name: I18n.t('history.确认终止'),\r\n                            id: 13,\r\n                        },\r\n                        {\r\n                            name: I18n.t('history.被丢弃'),\r\n                            id: 14,\r\n                        },\r\n                    ],\r\n                },\r\n                {\r\n                    name: I18n.t('history.执行人.colHead'),\r\n                    id: 'operator',\r\n                    remoteMethod: NotifyService.fetchUsersOfSearch,\r\n                    inputInclude: true,\r\n                },\r\n            ];\r\n            this.shortcuts = [\r\n                {\r\n                    text: I18n.t('history.近1小时'),\r\n                    value () {\r\n                        const end = new Date();\r\n                        const start = new Date();\r\n                        start.setTime(start.getTime() - 3600000);\r\n                        return [\r\n                            start, end,\r\n                        ];\r\n                    },\r\n                },\r\n                {\r\n                    text: I18n.t('history.近12小时'),\r\n                    value () {\r\n                        const end = new Date();\r\n                        const start = new Date();\r\n                        start.setTime(start.getTime() - 43200000);\r\n                        return [\r\n                            start, end,\r\n                        ];\r\n                    },\r\n                },\r\n                {\r\n                    text: I18n.t('history.近1天'),\r\n                    value () {\r\n                        const end = new Date();\r\n                        const start = new Date();\r\n                        start.setTime(start.getTime() - 86400000);\r\n                        return [\r\n                            start, end,\r\n                        ];\r\n                    },\r\n                },\r\n                {\r\n                    text: I18n.t('history.近7天'),\r\n                    value () {\r\n                        const end = new Date();\r\n                        const start = new Date();\r\n                        start.setTime(start.getTime() - 604800000);\r\n                        return [\r\n                            start, end,\r\n                        ];\r\n                    },\r\n                },\r\n            ];\r\n            this.tableColumn = [\r\n                {\r\n                    id: 'id',\r\n                    label: I18n.t('history.任务 ID'),\r\n                    disabled: true,\r\n                },\r\n                {\r\n                    id: 'name',\r\n                    label: I18n.t('history.任务名称.colHead'),\r\n                    disabled: true,\r\n                },\r\n                {\r\n                    id: 'startupModeDesc',\r\n                    label: I18n.t('history.执行方式.colHead'),\r\n                    disabled: true,\r\n                },\r\n                {\r\n                    id: 'typeDesc',\r\n                    label: I18n.t('history.任务类型.colHead'),\r\n                },\r\n                {\r\n                    id: 'statusDesc',\r\n                    label: I18n.t('history.任务状态.colHead'),\r\n                    disabled: true,\r\n                },\r\n                {\r\n                    id: 'operator',\r\n                    label: I18n.t('history.执行人.colHead'),\r\n                },\r\n                {\r\n                    id: 'createTime',\r\n                    label: I18n.t('history.开始时间.colHead'),\r\n                },\r\n                {\r\n                    id: 'totalTimeText',\r\n                    label: I18n.t('history.耗时时长'),\r\n                },\r\n            ];\r\n            const columnsCache = listColumnsCache.getItem(TABLE_COLUMN_CACHE);\r\n            if (columnsCache) {\r\n                this.selectedTableColumn = Object.freeze(columnsCache.columns);\r\n                this.tableSize = columnsCache.size;\r\n            } else {\r\n                this.selectedTableColumn = Object.freeze([\r\n                    { id: 'id' },\r\n                    { id: 'name' },\r\n                    { id: 'startupModeDesc' },\r\n                    { id: 'typeDesc' },\r\n                    { id: 'statusDesc' },\r\n                    { id: 'operator' },\r\n                    { id: 'createTime' },\r\n                    { id: 'totalTimeText' },\r\n                ]);\r\n            }\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 获取列表数据\r\n             */\r\n            fetchData () {\r\n                this.$refs.list.$emit('onFetch', this.searchParams);\r\n            },\r\n            /**\r\n             * @desc 重做任务\r\n             */\r\n            redoTask (taskInstanceId) {\r\n                TaskExecuteService.redoTask({\r\n                    taskInstanceId,\r\n                    taskVariables: [],\r\n                }).then(({ taskInstanceId }) => {\r\n                    this.$bkMessage({\r\n                        theme: 'success',\r\n                        message: I18n.t('history.执行成功'),\r\n                    });\r\n                    this.$router.push({\r\n                        name: 'historyTask',\r\n                        params: {\r\n                            id: taskInstanceId,\r\n                        },\r\n                    });\r\n                });\r\n            },\r\n            /**\r\n             * @desc 列表默认的执行时间筛选值\r\n             */\r\n            parseDefaultDateTime () {\r\n                const defaultDateTime = [\r\n                    '', '',\r\n                ];\r\n                const searchParams = {\r\n                    startTime: '',\r\n                    endTime: '',\r\n                };\r\n                \r\n                const currentTime = new Date().getTime();\r\n                \r\n                if (Object.prototype.hasOwnProperty.call(this.$route.query, 'startTime')) {\r\n                    defaultDateTime[0] = this.$route.query.startTime;\r\n                } else {\r\n                    defaultDateTime[0] = prettyDateTimeFormat(currentTime - 86400000);\r\n                }\r\n                \r\n                searchParams.startTime = defaultDateTime[0]; // eslint-disable-line prefer-destructuring\r\n\r\n                if (Object.prototype.hasOwnProperty.call(this.$route.query, 'endTime')) {\r\n                    defaultDateTime[1] = this.$route.query.endTime;\r\n                    searchParams.endTime = this.$route.query.endTime;\r\n                } else {\r\n                    defaultDateTime[1] = prettyDateTimeFormat(currentTime);\r\n                    searchParams.endTime = '';\r\n                }\r\n                this.defaultDateTime = defaultDateTime;\r\n                this.searchParams = searchParams;\r\n                if (!searchParams.endTime) {\r\n                    setTimeout(() => {\r\n                        this.setToNowText(this.defaultDateTime);\r\n                    });\r\n                }\r\n            },\r\n            /**\r\n             * @desc 自定义表格显示\r\n             */\r\n            handleSettingChange ({ fields, size }) {\r\n                this.selectedTableColumn = Object.freeze(fields);\r\n                this.tableSize = size;\r\n                listColumnsCache.setItem(TABLE_COLUMN_CACHE, {\r\n                    columns: fields,\r\n                    size,\r\n                });\r\n            },\r\n            /**\r\n             * @desc 自定义表格显示\r\n             * @param {Object} params 筛选值\r\n             */\r\n            handleSearch (params) {\r\n                const { startTime, endTime } = this.searchParams;\r\n                this.searchParams = {\r\n                    ...params,\r\n                    startTime,\r\n                    endTime,\r\n                };\r\n                this.fetchData();\r\n            },\r\n            /**\r\n             * @desc 筛选时间\r\n             * @param {Array} date 时间值\r\n             * @param {String} type 选择类型\r\n             */\r\n            handleDateChange (date, type) {\r\n                if (type === 'upToNow') {\r\n                    this.setToNowText(date);\r\n                }\r\n                this.searchParams.startTime = date[0];// eslint-disable-line prefer-destructuring\r\n                this.searchParams.endTime = type === 'upToNow' ? '' : date[1];\r\n                this.fetchData();\r\n            },\r\n            /**\r\n             * @desc 日期值显示为至今\r\n             * @param {Array} date 日期值\r\n             */\r\n            setToNowText (date) {\r\n                this.$refs.datePicker.shortcut = {\r\n                    text: `${date[0]} ${I18n.t('history.至今')}`,\r\n                };\r\n            },\r\n            /**\r\n             * @desc 调整执行详情页面\r\n             * @param {Object} taskInstance 任务详情\r\n             *\r\n             * 如果作业类型的跳转到作业执行详情，如果不是则跳到步骤执行详情\r\n             */\r\n            handleGoDetail (taskInstance) {\r\n                if (!taskInstance.isTask) {\r\n                    this.$router.push({\r\n                        name: 'historyTask',\r\n                        params: {\r\n                            id: 1 || taskInstance.id,\r\n                        },\r\n                    });\r\n                    return;\r\n                }\r\n                this.$router.push({\r\n                    name: 'historyStep',\r\n                    params: {\r\n                        taskInstanceId: 1 || taskInstance.id,\r\n                    },\r\n                    query: {\r\n                        from: 'historyList',\r\n                    },\r\n                });\r\n            },\r\n            /**\r\n             * @desc 重做执行任务\r\n             * @param {Object} taskInstance 任务详情\r\n             *\r\n             * 1，作业执行\r\n             *  —— 有变量需要先去变量设置页面设置变量值\r\n             *  —— 没有变量直接重做\r\n             * 2，快速执行脚本\r\n             *  —— 跳转到快速执行脚本页面\r\n             * 3，快速分发文件\r\n             *  —— 跳转到快速分发文件页面\r\n             */\r\n            handleGoRetry (taskInstance) {\r\n                // 作业执行\r\n                if (!taskInstance.isTask) {\r\n                    // 当重做接口比较慢时页面可能存在多个重做请求，避免重复操作需要禁用正在重做的任务操作\r\n                    this.redoRequestMap = {\r\n                        ...this.redoRequestMap,\r\n                        [taskInstance.id]: true,\r\n                    };\r\n\r\n                    // 历史作业任务详情\r\n                    // TaskExecuteService.fetchTaskInstance({\r\n                    //     id: taskInstance.id,\r\n                    // }).then(({ variables }) => {\r\n                    const variables = [1];\r\n                    // 有变量，去设置变量\r\n                    if (variables.length > 0) {\r\n                        this.redoRequestMap[taskInstance.id] = false;\r\n                        this.$router.push({\r\n                            name: 'redoTask',\r\n                            params: {\r\n                                taskInstanceId: taskInstance.id,\r\n                            },\r\n                        });\r\n                        return;\r\n                    }\r\n                    // 没有变量直接执行\r\n                    this.$bkInfo({\r\n                        title: I18n.t('history.确认执行？'),\r\n                        subTitle: I18n.t('history.该方案未设置全局变量，点击确认将直接执行。'),\r\n                        confirmFn: () => {\r\n                            TaskExecuteService.redoTask({\r\n                                taskInstanceId: taskInstance.id,\r\n                                taskVariables: [],\r\n                            }).then(({ taskInstanceId }) => {\r\n                                this.$bkMessage({\r\n                                    theme: 'success',\r\n                                    message: I18n.t('history.执行成功'),\r\n                                });\r\n                                this.$router.push({\r\n                                    name: 'historyTask',\r\n                                    params: {\r\n                                        id: taskInstanceId,\r\n                                    },\r\n                                });\r\n                            })\r\n                                .finally(() => {\r\n                                    this.redoRequestMap[taskInstance.id] = false;\r\n                                });\r\n                        },\r\n                    });\r\n                    // })\r\n                    // .catch(() => {\r\n                    //     this.redoRequestMap[taskInstance.id] = false;\r\n                    // });\r\n                }\r\n                // 快速执行脚本\r\n                // 去快速执行脚本页面重做\r\n                if (taskInstance.isScript) {\r\n                    this.$router.push({\r\n                        name: 'fastExecuteScript',\r\n                        params: {\r\n                            taskInstanceId: taskInstance.id,\r\n                        },\r\n                        query: {\r\n                            from: 'executiveHistory',\r\n                        },\r\n                    });\r\n                    return;\r\n                }\r\n                // 快速分发文件\r\n                // 去快速执行分发文件页面重做\r\n                if (taskInstance.isFile) {\r\n                    this.$router.push({\r\n                        name: 'fastPushFile',\r\n                        params: {\r\n                            taskInstanceId: taskInstance.id,\r\n                        },\r\n                        query: {\r\n                            from: 'executiveHistory',\r\n                        },\r\n                    });\r\n                }\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .executive-history-page {\r\n        .task-redo-loading {\r\n            position: relative;\r\n            font-size: 14px;\r\n            color: #3a84ff;\r\n\r\n            &::after {\r\n                z-index: -1;\r\n                text-align: center;\r\n                word-break: keep-all;\r\n                content: attr(data-text);\r\n                opacity: 0%;\r\n            }\r\n\r\n            .rotate-loading {\r\n                position: absolute;\r\n                top: 2px;\r\n                left: 50%;\r\n                margin-left: -9px;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n"],"names":[],"sourceRoot":""}