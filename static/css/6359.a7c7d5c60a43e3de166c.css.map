{"version":3,"file":"static/css/6359.a7c7d5c60a43e3de166c.css","mappings":"AAmEA,2BACA,YAwEA,CAtEA,wCAGA,mBACA,+BAHA,kBAIA,4BAHA,OAsBA,CAhBA,0BADA,iDAEA,WAcA,CAbA,CAEA,0BALA,iDAMA,WAUA,CATA,CAEA,0BATA,iDAUA,WAMA,CALA,CAEA,0BAbA,iDAcA,WAEA,CADA,CAIA,yCAIA,gBACA,sBACA,cAHA,aAFA,kBACA,wBAyCA,CAnCA,gDAGA,kGADA,UADA,UAGA,CAEA,wDAcA,mBAJA,mBAEA,+BADA,4BAHA,WACA,eALA,aAGA,eADA,YASA,uBAZA,UAFA,kBACA,QAWA,2BARA,UAuBA,CAXA,8DACA,kBACA,CAEA,sEACA,wBAKA,CAHA,2EACA,uBACA,CCuGA,sBACA,GACA,uBACA,CACA,CAEA,sBAGA,mBAKA,cACA,eAPA,aAKA,eAHA,YAEA,kBADA,mBAJA,iBA0HA,CAhHA,4BAEA,mBADA,aAUA,CAHA,2EACA,aACA,CAGA,+BACA,cACA,kBAWA,CAJA,6FACA,aACA,CAKA,0CACA,YACA,CAEA,8CACA,YACA,CAGA,6BAEA,mBADA,aAUA,CAHA,6EACA,aACA,CAIA,gDACA,8BACA,CAGA,gCAEA,cADA,gBAEA,CAEA,gCAGA,mBADA,aADA,OAGA,YAEA,gBADA,kBAQA,CALA,2CACA,gBACA,uBACA,kBACA,CAGA,mCAGA,cAFA,cACA,gBAMA,CAHA,gDACA,yCACA,CAGA,mCAMA,mBAFA,SAMA,eALA,aAEA,uBAEA,kBADA,mBAPA,kBAEA,QADA,KASA,CAEA,uCAOA,mBAHA,SAMA,cAJA,aAGA,eADA,eAPA,kBAEA,WADA,MAGA,SAMA,CChMA,wCACA,aACA,sBACA,eACA,cAOA,CALA,8CAGA,mBAFA,WACA,aAEA,CCqJA,8BACA,eAyFA,CAvFA,yCAGA,yBACA,kBAHA,aACA,qBAGA,CAEA,0CACA,aAoBA,CAjBA,yEACA,UASA,CAPA,oFACA,MACA,CAEA,wFACA,iBACA,CAIA,yDACA,mCACA,yCACA,CAGA,uCACA,wBA4CA,CA1CA,iDACA,aACA,qBASA,CAPA,2DACA,kBAKA,CAHA,sEACA,eACA,CAIA,uGAMA,mBACA,kBAJA,eACA,gBACA,iBAHA,aAMA,CAEA,mDACA,aACA,CAEA,oDAEA,mBADA,aAEA,CAEA,qDAOA,mBACA,kBAHA,cAFA,eACA,iBAFA,gBADA,cAKA,qBAGA,CAGA,0CAOA,mBACA,6BAHA,cACA,eAHA,eAFA,YAGA,iBAFA,iBAOA","sources":["webpack://job/./src/views/script-manage/list/components/layout.vue","webpack://job/./src/views/script-manage/list/components/tag-panel/tab-item.vue","webpack://job/./src/views/script-manage/list/components/tag-panel/index.vue","webpack://job/./src/views/script-manage/list/components/batch-edit-tag.vue"],"sourcesContent":["<template>\n    <div ref=\"handler\" class=\"script-manage-list-layout\">\n        <div\n            v-if=\"$slots.tag\"\n            :class=\"{\n                'layout-left': true,\n                expended: isOpen,\n            }\">\n            <scroll-faker :style=\"styles\">\n                <slot name=\"tag\" />\n            </scroll-faker>\n        </div>\n        <div\n            class=\"layout-right\"\n            :class=\"{\n                'no-tag': !$slots.tag,\n            }\">\n            <div\n                v-if=\"$slots.tag\"\n                class=\"toggle-button\"\n                @click=\"handleToggle\">\n                <Icon\n                    type=\"down-small\"\n                    class=\"toggle-arrow\"\n                    :class=\"{ open: isOpen }\" />\n            </div>\n            <slot />\n        </div>\n    </div>\n</template>\n<script>\n    import { getOffset } from '@utils/assist';\n    const TASK_TAG_PANEL_TOGGLE = 'script_list_tag_panel_toggle';\n\n    export default {\n        data () {\n            let isOpen = localStorage.getItem(TASK_TAG_PANEL_TOGGLE);\n            if (!isOpen) {\n                isOpen = true;\n            } else {\n                isOpen = JSON.parse(isOpen);\n            }\n            \n            return {\n                isOpen,\n                styles: {},\n            };\n        },\n        mounted () {\n            const {\n                top,\n            } = getOffset(this.$refs.handler);\n            this.styles = {\n                height: `calc(100vh  - ${top}px)`,\n            };\n        },\n        methods: {\n            handleToggle () {\n                this.isOpen = !this.isOpen;\n                localStorage.setItem(TASK_TAG_PANEL_TOGGLE, JSON.stringify(this.isOpen));\n            },\n        },\n    };\n</script>\n<style lang='postcss'>\n    @import \"@/css/mixins/media\";\n\n    .script-manage-list-layout {\n        display: flex;\n\n        .layout-left {\n            position: relative;\n            width: 0;\n            background: #fafbfd;\n            border-right: 1px solid #ecedf3;\n            transition: width 0.2s linear;\n\n            &.expended {\n                @media (--small-viewports) {\n                    width: 200px;\n                }\n\n                @media (--medium-viewports) {\n                    width: 240px;\n                }\n\n                @media (--large-viewports) {\n                    width: 280px;\n                }\n\n                @media (--huge-viewports) {\n                    width: 280px;\n                }\n            }\n        }\n\n        .layout-right {\n            position: relative;\n            width: calc(100% - 280px);\n            padding: 24px;\n            background: #fff;\n            box-sizing: border-box;\n            flex: 1 0 auto;\n\n            &.no-tag {\n                width: 100%;\n                padding: 0;\n                background: unset;\n            }\n\n            .toggle-button {\n                position: absolute;\n                top: 50%;\n                left: -1px;\n                display: flex;\n                width: 14px;\n                height: 64px;\n                font-size: 24px;\n                color: #fff;\n                cursor: pointer;\n                background: #dcdee5;\n                border-top-right-radius: 6px;\n                border-bottom-right-radius: 6px;\n                transform: translateY(-50%);\n                align-items: center;\n                justify-content: center;\n\n                &:hover {\n                    background: #c4c6cc;\n                }\n\n                .toggle-arrow {\n                    transform: rotateZ(-90deg);\n\n                    &.open {\n                        transform: rotateZ(90deg);\n                    }\n                }\n            }\n        }\n    }\n</style>\n","<template>\n    <div\n        class=\"script-list-tag-edit\"\n        :class=\"{\n            'active': value === id,\n            'display': !canEdit,\n            'edit': canEdit,\n            'edit-error': !!error,\n        }\"\n        @click.stop=\"\">\n        <Icon :type=\"icon\" class=\"tag-flag\" />\n        <template v-if=\"!isEditable\">\n            <div\n                class=\"tag-name\"\n                v-bk-tooltips=\"{\n                    allowHtml: true,\n                    width: 240,\n                    distance: 15,\n                    trigger: 'mouseenter',\n                    theme: 'light',\n                    content: `#${sefId}`,\n                    placement: 'right-start',\n                    boundary: 'window',\n                    disabled: tooltipsDisabled,\n                }\"\n                @click=\"handleSelect\">\n                <div class=\"name-text\">{{ displayName }}</div>\n            </div>\n            <div class=\"tag-num-box\">\n                <span class=\"tag-num\">{{ count }}</span>\n            </div>\n            <auth-component\n                v-if=\"canEdit\"\n                auth=\"tag/edit\"\n                :resource-id=\"id\">\n                <div class=\"edit-action\" @click=\"handleEdit\">\n                    <Icon type=\"edit-2\" />\n                </div>\n                <div slot=\"forbid\" class=\"edit-action\">\n                    <Icon type=\"edit-2\" />\n                </div>\n            </auth-component>\n        </template>\n        <template v-else>\n            <bk-input\n                ref=\"input\"\n                :placeholder=\"'请输入标签名...'\"\n                :value=\"displayName\"\n                @change=\"handleChange\"\n                @blur=\"handleBlur\"\n                @keyup=\"handleEnter\" />\n            <div v-if=\"error\" class=\"input-edit-info\" v-bk-tooltips=\"errorTipsConfig\">\n                <Icon type=\"info\" />\n            </div>\n        </template>\n        <div style=\"display: none;\">\n            <table\n                :id=\"sefId\"\n                style=\"font-size: 12px; line-height: 24px; color: #63656e;\">\n                <tr>\n                    <td style=\"color: #979ba5; text-align: right; white-space: nowrap; vertical-align: top;\">标签名称：</td>\n                    <td style=\"word-break: break-all; vertical-align: top;\">{{ displayName }}</td>\n                </tr>\n                <tr>\n                    <td style=\"color: #979ba5; text-align: right; white-space: nowrap; vertical-align: top;\">标签描述：</td>\n                    <td style=\"word-break: break-all; vertical-align: top;\">{{ description || '--' }}</td>\n                </tr>\n            </table>\n        </div>\n    </div>\n</template>\n<script>\n    import _ from 'lodash';\n       import { tagNameRule } from '@utils/validator';\n\n    export default {\n        name: '',\n        props: {\n            icon: {\n                type: String,\n                default: 'tag',\n            },\n            loading: {\n                type: Boolean,\n                default: true,\n            },\n            count: {\n                type: Number,\n                default: 0,\n            },\n            name: {\n                type: String,\n                default: '',\n            },\n            value: {\n                type: Number,\n            },\n            description: String,\n            tooltipsDisabled: {\n                type: Boolean,\n                default: false,\n            },\n            id: {\n                type: Number,\n            },\n            canEdit: {\n                type: Boolean,\n                default: false,\n            },\n            tagList: {\n                type: Array,\n                default: () => [],\n            },\n        },\n        data () {\n            return {\n                displayName: this.name,\n                isEditable: false,\n                error: '',\n            };\n        },\n        computed: {\n            /**\n             * @desc 重名检测\n             * @returns { Array }\n             */\n            checkRenameList () {\n                return this.tagList.filter(_ => _.name !== this.name);\n            },\n            /**\n             * @desc 编辑时错误信息提示\n             * @returns { Object }\n             */\n            errorTipsConfig () {\n                const errorMap = {\n                    1: '标签名不可为空',\n                    2: '标签名已存在，请重新输入',\n                    3: tagNameRule.message,\n                };\n                return {\n                    placement: 'top-left',\n                    content: errorMap[this.error],\n                    width: this.error === 3 ? 200 : '',\n                };\n            },\n        },\n        created () {\n            this.sefId = `tag_${_.random(1, 1000)}_${Date.now()}`;\n        },\n        mounted () {\n            document.body.addEventListener('click', this.hideEdit);\n            this.$once('hook:beforeDestroy', () => {\n                document.body.removeEventListener('click', this.hideEdit);\n            });\n        },\n        methods: {\n            /**\n             * @desc 选中当前 TAG\n             * @returns { viod }\n             */\n            handleSelect () {\n                this.$emit('on-select', this.id, this.name);\n            },\n            /**\n             * @desc 编辑状态值更新\n             */\n            triggerChange () {\n                if (this.displayName === this.name) {\n                    this.isEditable = false;\n                    return;\n                }\n                if (this.displayName === '') {\n                    this.error = 1;\n                    return;\n                }\n                if (_.find(this.checkRenameList, _ => _.name === this.displayName)) {\n                    this.error = 2;\n                    return;\n                }\n                if (!tagNameRule.validator(this.displayName)) {\n                    this.error = 3;\n                    return;\n                }\n                this.error = '';\n\n                this.isEditable = false;\n                \n                this.$emit('on-edit', {\n                    id: this.id,\n                    name: this.displayName,\n                });\n            },\n            /**\n             * @desc 开始编辑\n             */\n            handleEdit () {\n                document.body.click();\n                this.isEditable = true;\n                this.$nextTick(() => {\n                    this.$refs.input.focus();\n                });\n            },\n            /**\n             * @desc 输入框值更新\n             */\n            handleChange (value) {\n                this.displayName = value.trim();\n            },\n            /**\n             * @desc 输入框失去焦点\n             */\n            handleBlur () {\n                this.triggerChange();\n            },\n            /**\n             * @desc Enter 触发值更新\n             */\n            handleEnter (value, event) {\n                if (!this.isEditable) return;\n                if (event.key === 'Enter' && event.keyCode === 13) {\n                    this.triggerChange();\n                }\n            },\n            /**\n             * @desc 取消编辑状态\n             */\n            hideEdit () {\n                if (!this.isEditable) {\n                    return;\n                }\n                if (this.error) {\n                    return;\n                }\n                this.isEditable = false;\n            },\n        },\n    };\n</script>\n<style lang='postcss'>\n    @keyframes ani-rotate {\n        to {\n            transform: rotateZ(360deg);\n        }\n    }\n\n    .script-list-tag-edit {\n        position: relative;\n        display: flex;\n        align-items: center;\n        height: 36px;\n        padding-right: 20px;\n        padding-left: 25px;\n        font-size: 14px;\n        color: #63656e;\n        cursor: pointer;\n\n        &:hover {\n            color: #3a84ff;\n            background: #e1ecff;\n\n            .tag-flag {\n                color: #3a84ff;\n            }\n\n            .tag-num {\n                color: #3a84ff;\n            }\n        }\n\n        &.disabled {\n            color: #c4c6cc;\n            cursor: not-allowed;\n\n            &:hover {\n                .tag-flag {\n                    color: #c4c6cc;\n                }\n\n                .tag-num {\n                    color: #c4c6cc;\n                }\n            }\n        }\n\n        &.edit:hover {\n            .tag-num {\n                display: none;\n            }\n\n            .edit-action {\n                display: flex;\n            }\n        }\n\n        &.active {\n            color: #3a84ff;\n            background: #e1ecff;\n\n            .tag-flag {\n                color: #3a84ff;\n            }\n\n            .tag-num {\n                color: #3a84ff;\n            }\n        }\n\n        &.edit-error {\n            .bk-form-input {\n                border-color: #ea3636 !important;\n            }\n        }\n\n        .tag-flag {\n            margin-right: 7px;\n            color: #c4c6cc;\n        }\n\n        .tag-name {\n            flex: 1;\n            display: flex;\n            align-items: center;\n            height: 100%;\n            padding-right: 10px;\n            overflow: hidden;\n\n            .name-text {\n                overflow: hidden;\n                text-overflow: ellipsis;\n                white-space: nowrap;\n            }\n        }\n\n        .tag-num-box {\n            flex: 0 0 auto;\n            margin-left: auto;\n            color: #c4c6cc;\n\n            .tag-loading {\n                animation: \"ani-rotate\" 2s linear infinite;\n            }\n        }\n\n        .edit-action {\n            position: absolute;\n            top: 0;\n            right: 0;\n            bottom: 0;\n            display: none;\n            align-items: center;\n            justify-content: center;\n            padding-right: 20px;\n            padding-left: 10px;\n            cursor: pointer;\n        }\n\n        .input-edit-info {\n            position: absolute;\n            top: 0;\n            right: 20px;\n            bottom: 0;\n            z-index: 1;\n            display: flex;\n            align-items: center;\n            padding: 0 10px;\n            font-size: 16px;\n            color: #ea3636;\n        }\n    }\n</style>\n","<template>\n    <div class=\"script-list-tag-panel\" v-bkloading=\"{ isLoading }\">\n        <tab-item\n            :name=\"'全部脚本'\"\n            :id=\"1\"\n            :value=\"classesId\"\n            icon=\"business-manage\"\n            :count=\"totalCount\"\n            :tooltips-disabled=\"true\"\n            @on-select=\"handleClassesSelect\" />\n        <tab-item\n            :name=\"'未分类'\"\n            :id=\"2\"\n            :value=\"classesId\"\n            icon=\"unclassified\"\n            :count=\"unclassifiedCount\"\n            :tooltips-disabled=\"true\"\n            @on-select=\"handleClassesSelect\" />\n        <div class=\"line\" />\n        <template v-for=\"item in list\">\n            <tab-item\n                v-if=\"item.relatedScriptNum > 0\"\n                :key=\"item.id\"\n                :id=\"item.id\"\n                :count=\"item.relatedScriptNum\"\n                :name=\"item.name\"\n                :value=\"tagId\"\n                :can-edit=\"true\"\n                :tag-list=\"list\"\n                :description=\"item.description\"\n                @on-select=\"handleSelect\"\n                @on-edit=\"handleEdit\" />\n        </template>\n    </div>\n</template>\n<script>\n       import ScriptManageService from '@service/script-manage';\n    import PublicScriptManageService from '@service/public-script-manage';\n    import TagManageService from '@service/tag-manage';\n    import PubliceTagManageService from '@service/public-tag-manage';\n    import { checkPublicScript } from '@utils/assist';\n    import TabItem from './tab-item';\n\n    export default {\n        name: 'RenderTagTabItem',\n        components: {\n            TabItem,\n        },\n        data () {\n            return {\n                isLoading: false,\n                classesId: 1,\n                tagId: 0,\n                list: [{},{},{}],\n                countMap: {},\n                isNumberLoading: false,\n            };\n        },\n        computed: {\n            totalCount () {\n                return this.countMap.total || 0;\n            },\n            unclassifiedCount () {\n                return this.countMap.unclassified || 0;\n            },\n        },\n        created () {\n            this.isPublicScript = checkPublicScript(this.$route);\n            this.init();\n        },\n        mounted () {\n            this.parseDefaultValueFromURL();\n        },\n        methods: {\n            /**\n             * @desc 获取tag列表\n             */\n            fetchTagList () {\n                if (this.isPublicScript) {\n                    return PubliceTagManageService.fetchTagList();\n                }\n                return TagManageService.fetchWholeList();\n            },\n            /**\n             * @desc 获取tag的使用数量\n             */\n            fetchTagScriptNum () {\n                if (this.isPublicScript) {\n                    return PublicScriptManageService.fetchTagCount();\n                }\n                return ScriptManageService.fetchTagCount();\n            },\n            init () {\n                this.isLoading = true;\n                Promise.all([\n                    this.fetchTagList(),\n                    this.fetchTagScriptNum(),\n                ]).then(([tagList, countMap]) => {\n                    this.countMap = Object.freeze(countMap);\n                    const list = [];\n                    tagList.forEach((tag) => {\n                        tag.relatedScriptNum = countMap.tagCount[tag.id] || 0;\n                        list.push(tag);\n                    });\n                    this.list = Object.freeze(list);\n                    this.$emit('on-init', list);\n                })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            },\n            /**\n             * @desc 解析url中的默认tag\n             */\n            parseDefaultValueFromURL () {\n                let classesId = 1;\n                if (this.$route.query.panelType) {\n                    classesId = ~~this.$route.query.panelType || 1;\n                    this.handleClassesSelect(classesId);\n                    return;\n                }\n                \n                if (this.$route.query.panelTag) {\n                    const currentTagId = parseInt(this.$route.query.panelTag, 10);\n                    if (currentTagId > 0) {\n                        this.classesId = 0;\n                        this.handleSelect(currentTagId);\n                    }\n                }\n            },\n            /**\n             * @desc 分类切换\n             * @param {Number} id 分类id\n             */\n            handleClassesSelect (id) {\n                if (this.classesId === id) {\n                    return;\n                }\n                this.classesId = id;\n                this.tagId = 0;\n                this.$emit('on-change', {\n                    panelType: this.classesId,\n                    panelTag: '',\n                });\n            },\n            /**\n             * @desc tag切换\n             * @param {Number} id 分类id\n             */\n            handleSelect (id) {\n                if (id === this.tagId) return;\n                this.tagId = id;\n                this.classesId = 0;\n                this.$emit('on-change', {\n                    panelType: '',\n                    panelTag: this.tagId,\n                });\n            },\n            /**\n             * @desc 编辑tag\n             * @param {Object} payload 标签数据\n             *\n             * 编辑成功需要刷新标签数据\n             */\n            handleEdit (payload) {\n                TagManageService.updateTag(payload)\n                    .then(() => {\n                        this.messageSuccess('标签名更新成功');\n                        this.fetchTagList();\n                    });\n            },\n        },\n    };\n</script>\n<style lang='postcss' scoped>\n    .script-list-tag-panel {\n        display: flex;\n        flex-direction: column;\n        min-height: 50%;\n        padding: 24px 0;\n\n        .line {\n            height: 1px;\n            margin: 10px 0;\n            background: #f0f1f5;\n        }\n    }\n</style>\n","<template>\n    <div class=\"script-manage-batch-edit-tag\" v-bkloading=\"{ isLoading }\">\n        <div style=\"margin-bottom: 8px;\">\n            {{ '范围' }}：{{ '共' }}<span class=\"strong number\">{{ templateNums }}</span>{{ '个脚本' }}\n        </div>\n        <jb-form form-type=\"vertical\">\n            <jb-form-item\n                :label=\"'标签'\"\n                required\n                style=\"margin-bottom: 0;\">\n                <div class=\"tag-panel\">\n                    <bk-input\n                        class=\"tag-search\"\n                        :value=\"search\"\n                        :spellcheck=\"false\"\n                        left-icon=\"bk-icon icon-search\"\n                        @change=\"handleSearch\" />\n                    <div\n                        class=\"wrapper\"\n                        style=\"height: 210px;\">\n                        <scroll-faker\n                            v-if=\"renderList.length > 0\"\n                            ref=\"scrollRef\">\n                            <bk-checkbox-group\n                                v-model=\"operationList\"\n                                class=\"tag-list\">\n                                <bk-checkbox\n                                    v-for=\"tagItem in renderList\"\n                                    :value=\"tagItem.id\"\n                                    class=\"tag-item\"\n                                    :key=\"tagItem.id\"\n                                    v-bind=\"tagCheckInfoMap[tagItem.id]\"\n                                    @change=\"value => handleTagCheckChange(value, tagItem.id)\">\n                                    {{ tagItem.name }}\n                                    <template v-if=\"tagCheckInfoMap[tagItem.id]\">\n                                        <span\n                                            v-if=\"tagCheckInfoMap[tagItem.id].checked\"\n                                            v-bk-tooltips.right=\"'勾选范围里，全部脚本使用'\"\n                                            class=\"relate-all\">\n                                            All\n                                        </span>\n                                        <span\n                                            v-if=\"tagCheckInfoMap[tagItem.id].indeterminate\"\n                                            v-bk-tooltips.right=\"`${'勾选范围里，有'} ${tagRelateNumMap[tagItem.id]} ${'个脚本使用'}`\"\n                                            class=\"relate-nums\">\n                                            {{ tagRelateNumMap[tagItem.id] }}/{{ templateNums }}\n                                        </span>\n                                    </template>\n                                    <span\n                                        v-if=\"tagItem.isNew\"\n                                        class=\"new-tag-flag\">\n                                        new\n                                    </span>\n                                </bk-checkbox>\n                            </bk-checkbox-group>\n                        </scroll-faker>\n                        <Empty\n                            v-else-if=\"search\"\n                            type=\"search\"\n                            style=\"margin-top: 20px;\">\n                            <span>{{ '搜索结果为空' }}，</span>\n                            <bk-button\n                                text\n                                @click=\"handleClearSearch\">\n                                {{ '清空搜索' }}\n                            </bk-button>\n                        </Empty>\n                    </div>\n                    <template v-if=\"!isPublicScript\">\n                        <auth-component auth=\"tag/create\">\n                            <div class=\"tag-create\" @click=\"handleNew\">\n                                <bk-icon\n                                    type=\"plus-circle\"\n                                    style=\" margin-right: 8px; font-size: 16px;\" />\n                                <span>{{ '新建标签' }}</span>\n                            </div>\n                            <div slot=\"forbid\" class=\"tag-create\">\n                                <bk-icon\n                                    type=\"plus-circle\"\n                                    style=\" margin-right: 8px; font-size: 16px;\" />\n                                <span>{{ '新建标签' }}</span>\n                            </div>\n                        </auth-component>\n                    </template>\n                </div>\n            </jb-form-item>\n        </jb-form>\n        <lower-component\n            level=\"custom\"\n            :custom=\"isShowCreate\">\n            <operation-tag\n                v-model=\"isShowCreate\"\n                @on-change=\"handleTagNew\" />\n        </lower-component>\n    </div>\n</template>\n<script>\n    import {\n        reactive,\n        ref,\n        toRefs,\n        computed,\n        onBeforeMount,\n        getCurrentInstance,\n    } from '@vue/composition-api';\n    import _ from 'lodash';\n       import PubliceTagManageService from '@service/public-tag-manage';\n    import TagManageService from '@service/tag-manage';\n    import ScriptManageService from '@service/script-manage';\n    import PublicScriptManageService from '@service/public-script-manage';\n    import {\n        checkPublicScript,\n        encodeRegexp,\n    } from '@utils/assist';\n    import OperationTag from '@components/operation-tag';\n\n    export default {\n        components: {\n            OperationTag,\n        },\n        props: {\n            scriptList: {\n                type: Array,\n                required: true,\n            },\n        },\n        emit: ['on-change'],\n        setup (props, ctx) {\n            const { proxy } = getCurrentInstance();\n            const state = reactive({\n                isLoading: true,\n                isShowCreate: false,\n                search: '',\n                newTagList: [{},{},{}],\n                wholeTagList: [{},{},{}],\n                renderList: [{},{},{}],\n                templateNums: props.scriptList.length,\n                operationList: [{},{},{}],\n                tagRelateNumMap: {},\n                tagCheckInfoMap: {},\n            });\n            const scrollRef = ref(null);\n            const isPublicScript = checkPublicScript(proxy.$route);\n            const scriptRequestService = isPublicScript ? PublicScriptManageService : ScriptManageService;\n            const tagRequestHandler = isPublicScript ? PubliceTagManageService.fetchTagList : TagManageService.fetchWholeList;\n            // 初始统计 tag 被模板使用的数量\n            const tagRelateNumMap = {};\n            // 缓存全选\n            const memoCheckedMap = {};\n            // 缓存半选\n            const memoIndeterminateMap = {};\n            // 所选作业关联 tag 的默认选中状态\n            const tagCheckInfoMap = {};\n\n            // 展示的 tag 列表\n            const renderList = computed(() => {\n                const allTagList = [...state.newTagList, ...state.wholeTagList];\n                if (!state.search) {\n                    return allTagList;\n                }\n                const searchReg = new RegExp(encodeRegexp(state.search), 'i');\n                const result = allTagList.filter(item => searchReg.test(item.name));\n                return Object.freeze(result);\n            });\n            \n            const fetchScriptList = () => scriptRequestService.fetchBatchBasicInfo({\n                ids: props.scriptList.map(({ id }) => id).join(','),\n            }).then((data) => {\n                data.forEach(({ tags }) => {\n                    tags.forEach(({ id }) => {\n                        // 计算每个被使用到的 tag 数量\n                        if (tagRelateNumMap[id]) {\n                            tagRelateNumMap[id] += 1;\n                        } else {\n                            tagRelateNumMap[id] = 1;\n                        }\n                        // tag 的 checkbox 选中状态\n                        if (!tagCheckInfoMap[id]) {\n                            tagCheckInfoMap[id] = {\n                                indeterminate: true,\n                            };\n                            memoIndeterminateMap[id] = true;\n                        }\n                        // 如果所有作业都使用了该 tag 则默认被选中\n                        if (tagRelateNumMap[id] === state.templateNums) {\n                            delete memoIndeterminateMap[id];\n                            memoCheckedMap[id] = id;\n                            tagCheckInfoMap[id] = {\n                                checked: true,\n                            };\n                        }\n                    });\n                });\n            \n                state.tagRelateNumMap = Object.freeze(tagRelateNumMap);\n                state.operationList = Object.values(memoCheckedMap);\n                state.tagCheckInfoMap = Object.freeze(tagCheckInfoMap);\n            });\n            /**\n             * @desc 获取 tag 列表数据\n             */\n            const fetchWholeTagList = () => tagRequestHandler()\n                .then((data) => {\n                    // 排序\n                    // 已经被使用的 tag 在前面\n                    state.wholeTagList = Object.freeze(data.reduce((result, item) => {\n                        if (tagRelateNumMap[item.id]) {\n                            result.unshift(item);\n                        } else {\n                            result.push(item);\n                        }\n                        return result;\n                    }, []));\n                });\n            /**\n             * @desc 过滤 tag\n             * @param { String } search\n             */\n            const handleSearch = (search) => {\n                state.search = _.trim(search);\n            };\n            const handleClearSearch = () => {\n                state.search = '';\n            };\n            /**\n             * @desc 新建 tag\n             */\n            const handleNew = () => {\n                state.isShowCreate = true;\n            };\n\n            /**\n             * @desc 切换 tag 的选中状态\n             * @param { Boolean } value\n             * @param { Number } tagId\n             */\n            const handleTagCheckChange = (value, tagId) => {\n                const tagCheckInfoMap = Object.assign({}, state.tagCheckInfoMap);\n                if (!tagCheckInfoMap[tagId]) {\n                    // 选中添加新 tag\n                    tagCheckInfoMap[tagId] = {\n                        checked: true,\n                    };\n                } else if (!tagCheckInfoMap[tagId].checked) {\n                    // 未被选中 -> 选中\n                    tagCheckInfoMap[tagId] = {\n                        checked: true,\n                    };\n                } else {\n                    // 选中 -> 未被选中\n                    tagCheckInfoMap[tagId] = {\n                        checked: false,\n                    };\n                }\n                window.changeAlert = true;\n                state.tagCheckInfoMap = Object.freeze(tagCheckInfoMap);\n            };\n            /**\n             * @desc 新增 tag\n             * @param { Object } tag\n             */\n            const handleTagNew = (tag) => {\n                if (scrollRef.value) {\n                    scrollRef.value.scrollTo(0, 0);\n                }\n                tag.isNew = true;\n                state.newTagList.unshift(tag);\n                window.changeAlert = true;\n            };\n            /**\n             * @desc 提交批量编辑\n             * @returns { Promise }\n             */\n            const submit = () => {\n                const currentCheckedMap = state.operationList.reduce((result, item) => {\n                    result[item] = true;\n                    return result;\n                }, {});\n                // add tag\n                const addTagIdList = [...state.operationList];\n                // - 移除默认选中的\n                _.remove(addTagIdList, id => memoCheckedMap[id]);\n                // delete tag\n                const deleteTagIdList = [];\n                //  - 默认选中，在最新的数据未选中\n                Object.keys(memoCheckedMap).forEach((tagId) => {\n                    if (!currentCheckedMap[tagId]) {\n                        deleteTagIdList.push(Number(tagId));\n                    }\n                });\n                // - 默认半选，在最新的数据中没有任何状态\n                Object.keys(memoIndeterminateMap).forEach((tagId) => {\n                    if (!state.tagCheckInfoMap[tagId].indeterminate\n                        && !state.tagCheckInfoMap[tagId].checked) {\n                        deleteTagIdList.push(Number(tagId));\n                    }\n                });\n                \n                return scriptRequestService.batchUpdateTag({\n                    addTagIdList,\n                    deleteTagIdList,\n                    idList: props.scriptList.map(({ id }) => id),\n                }).then(() => {\n                    proxy.messageSuccess('编辑标签成功');\n                    ctx.emit('on-change');\n                });\n            };\n\n            onBeforeMount(() => {\n                state.isLoading = true;\n                Promise.all([\n                    fetchScriptList(),\n                    fetchWholeTagList(),\n                ]).finally(() => {\n                    state.isLoading = false;\n                });\n            });\n\n            return {\n                ...toRefs(state),\n                scrollRef,\n                isPublicScript,\n                renderList,\n                handleSearch,\n                handleClearSearch,\n                handleNew,\n                handleTagCheckChange,\n                handleTagNew,\n                submit,\n            };\n        },\n    };\n</script>\n<style lang=\"postcss\">\n    .script-manage-batch-edit-tag {\n        padding-top: 5px;\n\n        .tag-panel {\n            display: flex;\n            flex-direction: column;\n            border: 1px solid #dcdee5;\n            border-radius: 2px;\n        }\n\n        .tag-search {\n            margin: 0 10px;\n\n            &.bk-form-control {\n                &.with-left-icon {\n                    width: auto;\n\n                    .left-icon {\n                        left: 0;\n                    }\n\n                    .bk-form-input {\n                        padding-left: 24px;\n                    }\n                }\n            }\n\n            .bk-form-input {\n                border-color: transparent !important;\n                border-bottom: 1px solid #c4c6cc !important;\n            }\n        }\n\n        .wrapper {\n            padding: 18px 0 18px 12px;\n\n            .tag-list {\n                display: flex;\n                flex-direction: column;\n\n                .tag-item {\n                    margin-bottom: 16px;\n\n                    &:last-child {\n                        margin-bottom: 0;\n                    }\n                }\n            }\n\n            .relate-all,\n            .relate-nums {\n                padding: 0 4px;\n                font-size: 12px;\n                font-weight: 500;\n                line-height: 16px;\n                background: #e1ecff;\n                border-radius: 2px;\n            }\n\n            .relate-all {\n                color: #3a84ff;\n            }\n\n            .relate-nums {\n                color: #979ba5;\n                background: #f0f1f5;\n            }\n\n            .new-tag-flag {\n                padding: 0 5px;\n                margin-left: 5px;\n                font-size: 12px;\n                line-height: 16px;\n                color: #ff9c01;\n                vertical-align: middle;\n                background: #ffe8c3;\n                border-radius: 2px;\n            }\n        }\n\n        .tag-create {\n            height: 38px;\n            padding-left: 10px;\n            font-size: 12px;\n            line-height: 38px;\n            color: #63656e;\n            cursor: pointer;\n            background: #fafbfd;\n            border-top: 1px solid #dcdee5;\n        }\n    }\n</style>\n"],"names":[],"sourceRoot":""}