{"version":3,"file":"static/css/3301.8da184ee3033c6832f09.css","mappings":"AAsCA,yCAEA,mBAEA,cACA,eAJA,aAEA,cAGA,CAEA,+CAEA,eADA,gBAEA,CC6nBA,oBACA,YAmDA,CAjDA,iCAGA,cAFA,2BACA,kBAEA,sBAKA,CAHA,qDACA,mBACA,CAGA,kCAIA,cAHA,2BAEA,mBADA,gBAGA,CAEA,0BACA,kBACA,CAGA,sGACA,eACA,CAEA,8DACA,eACA,CAIA,0BADA,uCAEA,WAcA,CAbA,CAEA,0BALA,uCAMA,WAUA,CATA,CAEA,0BATA,uCAUA,WAMA,CALA,CAEA,0BAbA,uCAcA,WAEA,CADA,CAMA,qFACA,qBACA,CAIA,gDACA,4BACA,CAEA,oCACA,YACA","sources":["webpack://job/./src/views/task-manage/template-operation/components/toggle-display.vue","webpack://job/./src/views/task-manage/template-operation/index.vue"],"sourcesContent":["\r\n\r\n<template>\r\n    <div class=\"toggle-display\">\r\n        <div v-show=\"isOpen\">\r\n            <slot />\r\n        </div>\r\n        <bk-form-item label=\" \" style=\"margin-top: -10px;\">\r\n            <div class=\"action\" @click=\"handleToggle\">\r\n                <template v-if=\"isOpen\">\r\n                    <Icon type=\"angle-double-up\" class=\"toggle-arrow\" />\r\n                    <span>{{ '收起更多设置' }}</span>\r\n                </template>\r\n                <template v-else>\r\n                    <Icon type=\"angle-double-down\" class=\"toggle-arrow\" />\r\n                    <span>{{ '展开更多设置' }}</span>\r\n                </template>\r\n            </div>\r\n        </bk-form-item>\r\n    </div>\r\n</template>\r\n<script>\r\n    export default {\r\n        name: 'ToggleDisplay',\r\n        data () {\r\n            return {\r\n                isOpen: false,\r\n            };\r\n        },\r\n        methods: {\r\n            handleToggle () {\r\n                this.isOpen = !this.isOpen;\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    .toggle-display {\r\n        .action {\r\n            display: flex;\r\n            align-items: center;\r\n            font-size: 14px;\r\n            color: #3a84ff;\r\n            cursor: pointer;\r\n        }\r\n\r\n        .toggle-arrow {\r\n            margin-right: 3px;\r\n            font-size: 12px;\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <div\r\n        id=\"templateOperation\"\r\n        class=\"template-operation\">\r\n        <div class=\"layout-left\">\r\n            <scroll-faker ref=\"contentScroll\">\r\n                <div class=\"template-container\">\r\n                    <smart-action offset-target=\"bk-form-content\">\r\n                        <jb-form\r\n                            :model=\"formData\"\r\n                            :rules=\"rules\"\r\n                            ref=\"templateOperateRef\"\r\n                            v-test=\"{ type: 'form', value: 'template' }\">\r\n                            <bk-alert class=\"info\" :title=\"'「对作业模板的修改不会立即自动更新执行方案，需要由用户手动触发」'\" />\r\n                            <jb-form-item\r\n                                :label=\"'模板名称'\"\r\n                                required property=\"name\">\r\n                                <jb-input\r\n                                    class=\"input form-item-content\"\r\n                                    :placeholder=\"'输入作业模板名称'\"\r\n                                    v-model=\"formData.name\"\r\n                                    :maxlength=\"60\" />\r\n                            </jb-form-item>\r\n                            <toggle-display style=\"margin-bottom: 20px;\">\r\n                                <jb-form-item\r\n                                    :label=\"'场景标签'\"\r\n                                    property=\"tags\">\r\n                                    <jb-tag-select\r\n                                        class=\"input form-item-content\"\r\n                                        :placeholder=\"'标签对资源的分类管理有很大帮助'\"\r\n                                        v-model=\"formData.tags\" />\r\n                                </jb-form-item>\r\n                                <jb-form-item :label=\"'模板描述'\">\r\n                                    <bk-input\r\n                                        v-model=\"formData.description\"\r\n                                        class=\"template-desc-textarea form-item-content\"\r\n                                        type=\"textarea\"\r\n                                        :maxlength=\"500\"\r\n                                        :placeholder=\"'填写该模板的功能介绍等详细描述...'\" />\r\n                                </jb-form-item>\r\n                            </toggle-display>\r\n                            <jb-form-item\r\n                                :label=\"'全局变量'\"\r\n                                style=\"margin-bottom: 30px;\">\r\n                                <render-global-var\r\n                                    :list=\"formData.variables\"\r\n                                    mode=\"operate\"\r\n                                    @on-change=\"handleGlobalVariableChange\" />\r\n                            </jb-form-item>\r\n                            <jb-form-item\r\n                                :label=\"'作业步骤'\"\r\n                                required\r\n                                property=\"steps\"\r\n                                style=\"margin-bottom: 30px;\">\r\n                                <render-task-step\r\n                                    ref=\"step\"\r\n                                    :list=\"formData.steps\"\r\n                                    :variable=\"formData.variables\"\r\n                                    mode=\"operation\"\r\n                                    @on-change=\"handleTaskStepChange\" />\r\n                            </jb-form-item>\r\n                        </jb-form>\r\n                        <template #action>\r\n                            <bk-button\r\n                                class=\"w120 mr10\"\r\n                                theme=\"primary\"\r\n                                :loading=\"isSubmiting\"\r\n                                @click=\"handlerSubmit\"\r\n                                v-test=\"{ type: 'button', value: 'operationTemplateSubmit' }\">\r\n                                {{ submitText }}\r\n                            </bk-button>\r\n                            <bk-button\r\n                                @click=\"handleCancel\"\r\n                                v-test=\"{ type: 'button', value: 'operationTemplateCancel' }\">\r\n                                {{ '取消' }}\r\n                            </bk-button>\r\n                        </template>\r\n                    </smart-action>\r\n                </div>\r\n            </scroll-faker>\r\n            <back-top :target=\"getScrollParent\" />\r\n        </div>\r\n        <div id=\"templateOperationLayoutRight\" class=\"layout-right\" />\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n       import TaskManageService from '@service/task-manage';\r\n    import TaskPlanService from '@service/task-plan';\r\n    import { taskTemplateName } from '@utils/validator';\r\n    import JbTagSelect from '@components/jb-tag-select';\r\n    import JbInput from '@components/jb-input';\r\n    import BackTop from '@components/back-top';\r\n    import RenderGlobalVar from '../common/render-global-var';\r\n    import RenderTaskStep from '../common/render-task-step';\r\n    import ToggleDisplay from './components/toggle-display';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            JbTagSelect,\r\n            JbInput,\r\n            BackTop,\r\n            ToggleDisplay,\r\n            RenderGlobalVar,\r\n            RenderTaskStep,\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: true,\r\n                isPlanListLoading: true,\r\n                formData: {\r\n                    name: '',\r\n                    tags: [],\r\n                    variables: [],\r\n                    steps: [],\r\n                    description: '',\r\n                },\r\n                planList: [{},{},{}],\r\n                isSubmiting: false,\r\n                execLoading: false,\r\n            };\r\n        },\r\n        computed: {\r\n            isSkeletonLoading () {\r\n                return this.isLoading;\r\n            },\r\n        },\r\n        watch: {\r\n            formData: {\r\n                handler  () {\r\n                    if (this.isLoading) {\r\n                        return;\r\n                    }\r\n                    this.hasChange = true;\r\n                },\r\n                deep: true,\r\n            },\r\n        },\r\n        created () {\r\n            this.taskId = this.$route.params.id || 0;\r\n            this.isEdit = this.$route.name === 'templateEdit';\r\n            this.isClone = this.$route.name === 'templateClone';\r\n            // 是否默认显示步骤编辑框\r\n            this.initShowStepId = Number(this.$route.params.stepId);\r\n\r\n            // 编辑和克隆作业模板时需要获取模板数据\r\n            if (this.$route.name !== 'templateCreate') {\r\n                this.fetchData(true);\r\n            }\r\n            // 编辑作业模板需要获取模板对应的执行方案列表\r\n            if (this.isEdit) {\r\n                this.fetchPlanList();\r\n            }\r\n            this.submitText = this.isEdit ? '保存' : '提交';\r\n            this.rules = {\r\n                name: [\r\n                    {\r\n                        required: true,\r\n                        message: '模板名称必填',\r\n                        trigger: 'blur',\r\n                    },\r\n                    {\r\n                        validator: taskTemplateName.validator,\r\n                        message: taskTemplateName.message,\r\n                        trigger: 'blur',\r\n                    },\r\n                    {\r\n                        validator: this.checkName,\r\n                        message: '模板名已存在，请重新输入',\r\n                        trigger: 'blur',\r\n                    },\r\n                ],\r\n                steps: [\r\n                    {\r\n                        validator: value => value.length && value.some(item => !item.delete),\r\n                        message: '作业步骤必填',\r\n                        trigger: 'blur',\r\n                    },\r\n                ],\r\n            };\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 获取模板详情\r\n             * @param {Boolean} isFirst 是否是第一次执行\r\n             */\r\n            fetchData (isFirst = false) {\r\n                this.isLoading = true;\r\n                const requestHandler = this.isEdit ? TaskManageService.taskDetail : TaskManageService.taskClone;\r\n                requestHandler({\r\n                    id: this.taskId,\r\n                }, {\r\n                    permission: 'page',\r\n                }).then((data) => {\r\n                    const { name, description, tags, variables, stepList } = data;\r\n                    this.formData = {\r\n                        name,\r\n                        description,\r\n                        tags,\r\n                        variables,\r\n                        steps: stepList,\r\n                    };\r\n                    // 克隆模板提示密文变量\r\n                    if (this.isClone) {\r\n                        this.searchCiphertextVariable();\r\n                    }\r\n                    // 编辑执行步骤\r\n                    if (isFirst && this.isEdit && this.initShowStepId > 0) {\r\n                        setTimeout(() => {\r\n                            this.$refs.step.clickStepByIndex(_.findIndex(stepList, ({ id }) => id === this.initShowStepId));\r\n                        });\r\n                    }\r\n                    // 再次编辑\r\n                    // 拉取模板最新数据\r\n                    if (!isFirst) {\r\n                        setTimeout(() => {\r\n                            window.changeAlert = false;\r\n                        }, 100);\r\n                    }\r\n                })\r\n                    .catch((error) => {\r\n                        if ([\r\n                            1,\r\n                            400,\r\n                        ].includes(error.code)) {\r\n                            setTimeout(() => {\r\n                                this.$router.push({\r\n                                    name: 'taskList',\r\n                                });\r\n                            }, 3000);\r\n                        }\r\n                    })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 获取模板关联的执行方案\r\n             */\r\n            fetchPlanList () {\r\n                this.isPlanListLoading = true;\r\n                TaskPlanService.fetchTaskPlan({\r\n                    id: this.taskId,\r\n                }).then((data) => {\r\n                    this.planList = Object.freeze(data);\r\n                })\r\n                    .finally(() => {\r\n                        this.isPlanListLoading = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 验证作业模板的名\r\n             * @param {String} name 作业模板名\r\n             *\r\n             */\r\n            checkName (name) {\r\n                return TaskManageService.taskCheckName({\r\n                    id: this.isEdit ? this.taskId : 0,\r\n                    name,\r\n                });\r\n            },\r\n            getScrollParent () {\r\n                return this.$refs.contentScroll.$el.querySelector('.scroll-faker-content');\r\n            },\r\n            /**\r\n             * @desc 克隆作业模板时提示密文变量\r\n             */\r\n            searchCiphertextVariable () {\r\n                const stack = [];\r\n                \r\n                this.formData.variables.forEach((current) => {\r\n                    if (current.isPassword) {\r\n                        stack.push(current.name);\r\n                    }\r\n                });\r\n                if (stack.length < 1) {\r\n                    return;\r\n                }\r\n                this.$bkInfo({\r\n                    title: '模板中包含密文变量，请重新设置值',\r\n                    subTitle: '“密文”类型的变量经过特殊加密处理，为避免信息泄露，克隆后初始值不会还原，需用户重新设置。',\r\n                    okText: '我知道了',\r\n                    extCls: 'password-variable-info',\r\n                });\r\n            },\r\n            \r\n            /**\r\n             * @desc 删除全局变量-删除步骤中的变量引用\r\n             * @param {Array} stepList 步骤列表\r\n             * @param {Object} deleteMap 删除的变量名\r\n             * @returns {Array}\r\n             *\r\n             * 忽略已经删除的步骤\r\n             */\r\n            syncStepVarialbeDelete (stepList, deleteMap) {\r\n                let changeFlag = false;\r\n                // 所有主机全局变量\r\n                stepList.forEach((currentStep) => {\r\n                    // 步骤已经删除\r\n                    if (currentStep.delete) {\r\n                        return;\r\n                    }\r\n                    if (currentStep.isFile) {\r\n                        // 分发文件步骤\r\n                        const { fileDestination, fileSourceList } = currentStep.fileStepInfo;\r\n                        // 执行目标使用变量\r\n                        const { server } = fileDestination;\r\n                        if (deleteMap[server.variable]) {\r\n                            server.variable = '';\r\n                            currentStep.localValidator = false;\r\n                            changeFlag = true;\r\n                        }\r\n                        // 源文件使用变量\r\n                        fileSourceList.forEach((currentFile) => {\r\n                            if (currentFile.fileType === 1) {\r\n                                if (deleteMap[currentFile.host.variable]) {\r\n                                    currentFile.host.variable = '';\r\n                                    // 步骤使用的全局变量被删除，步骤需要被标记为待补全状态\r\n                                    currentStep.localValidator = false;\r\n                                    changeFlag = true;\r\n                                }\r\n                            }\r\n                        });\r\n                        return;\r\n                    }\r\n                    if (currentStep.isScript) {\r\n                        // 脚本步骤\r\n                        const { executeTarget } = currentStep.scriptStepInfo;\r\n                        if (deleteMap[executeTarget.variable]) {\r\n                            executeTarget.variable = '';\r\n                            // 步骤使用的全局变量被删除，步骤需要被标记为待补全状态\r\n                            currentStep.localValidator = false;\r\n                            changeFlag = true;\r\n                        }\r\n                    }\r\n                });\r\n                return changeFlag ? [...stepList] : stepList;\r\n            },\r\n            /**\r\n             * @desc 修改全局变量名-同步步骤中引用的变量\r\n             * @param {Array} stepList 步骤列表\r\n             * @param {Object} renameMap 全局变量对应的最新名字\r\n             * @returns {Array}\r\n             *\r\n             * 忽略已经删除的步骤\r\n             */\r\n            syncStepVariableRename (stepList, renameMap) {\r\n                stepList.forEach((currentStep) => {\r\n                    // 步骤已经删除\r\n                    if (currentStep.delete) {\r\n                        return;\r\n                    }\r\n                    // 分发文件步骤\r\n                    if (currentStep.isFile) {\r\n                        // 执行目标使用全局变量\r\n                        const { fileDestination, fileSourceList } = currentStep.fileStepInfo;\r\n                        const { server } = fileDestination;\r\n                        if (renameMap[server.variable]) {\r\n                            server.variable = renameMap[server.variable];\r\n                        }\r\n                        // 源文件使用全局变量\r\n                        fileSourceList.forEach((currentFile) => {\r\n                            if (currentFile.fileType === 1) {\r\n                                // 服务器文件\r\n                                if (renameMap[currentFile.host.variable]) {\r\n                                    currentFile.host.variable = renameMap[currentFile.host.variable];\r\n                                }\r\n                            }\r\n                        });\r\n                        return;\r\n                    }\r\n                    // 脚本步骤\r\n                    if (currentStep.isScript) {\r\n                        // 执行目标使用全局变量\r\n                        const { executeTarget } = currentStep.scriptStepInfo;\r\n                        if (renameMap[executeTarget.variable]) {\r\n                            executeTarget.variable = renameMap[executeTarget.variable];\r\n                        }\r\n                    }\r\n                });\r\n                return [...stepList];\r\n            },\r\n            /**\r\n             * @desc 全局变量更新\r\n             * @param {Array} variableList 最新的变量列表\r\n             *\r\n             * 更新主机变量名\r\n             *  -自动替换步骤中已经引用的全局变量\r\n             * 删除主机变量\r\n             *  -将使用了该全局变量的步骤标记为待补全\r\n             */\r\n            handleGlobalVariableChange (variableList) {\r\n                const newVariableMap = variableList.reduce((result, variable) => {\r\n                    result[variable.id] = {\r\n                        name: variable.name,\r\n                        delete: variable.delete,\r\n                    };\r\n                    return result;\r\n                }, {});\r\n                // 主机变量修改变量名自动同步步骤里面的变量引用\r\n                const renameMap = {};\r\n                // 主机变量被删除同步删除步骤里面的引用记录\r\n                const deleteMap = {};\r\n                this.formData.variables.forEach((variable) => {\r\n                    if (!variable.isHost) {\r\n                        return;\r\n                    }\r\n                    const {\r\n                        id,\r\n                        name,\r\n                    } = variable;\r\n                    // 全局变量被删除\r\n                    if (!newVariableMap[id] || newVariableMap[id].delete) {\r\n                        deleteMap[name] = true;\r\n                        return;\r\n                    }\r\n                    // 修改了变量\r\n                    if (newVariableMap[id].name !== name) {\r\n                        renameMap[name] = newVariableMap[id].name;\r\n                    }\r\n                });\r\n                // 优先同步删除操作\r\n                let stepList = this.syncStepVarialbeDelete(this.formData.steps, deleteMap);\r\n                // 同步改名操作\r\n                stepList = this.syncStepVariableRename(stepList, renameMap);\r\n                this.formData.variables = variableList;\r\n                this.formData.steps = stepList;\r\n            },\r\n            /**\r\n             * @desc 步骤更新\r\n             * @param {Array} steps 最新的步骤列表\r\n             */\r\n            handleTaskStepChange (steps) {\r\n                this.formData.steps = steps;\r\n                this.$refs.templateOperateRef.clearError();\r\n            },\r\n            /**\r\n             * @desc 保存作业模板\r\n             *\r\n             * 需要对作模板数据做逻辑验证处理\r\n             * - 步骤的基本数据是否完整\r\n             */\r\n            handlerSubmit () {\r\n                // eslint-disable-next-line no-plusplus\r\n                for (let i = 0; i < this.formData.steps.length; i++) {\r\n                    if (this.formData.steps[i].delete !== 1\r\n                        && this.formData.steps[i].localValidator === false) {\r\n                        this.messageError('请将「待补全」的步骤信息完善后提交重试');\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                // 提交作业模板\r\n                // 再主动拉取作业模板对应的执行方案列表，判断执行方案是否为空和是否需要同步\r\n                this.isSubmiting = true;\r\n                this.$refs.templateOperateRef.validate()\r\n                    .then(() => TaskManageService.taskUpdate({\r\n                        ...this.formData,\r\n                        id: this.isEdit ? this.taskId : 0,\r\n                    }).then((taskId) => {\r\n                        window.changeAlert = false;\r\n                        return TaskPlanService.fetchTaskPlan({\r\n                            id: taskId,\r\n                        }).then((planList) => {\r\n                            let planSync = false;\r\n                            // eslint-disable-next-line no-plusplus\r\n                            for (let i = 0; i < planList.length; i++) {\r\n                                if (planList[i].needUpdate) {\r\n                                    planSync = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            this.planList = Object.freeze(planList);\r\n                            if (this.isEdit) {\r\n                                this.editSuccessCallback(taskId, planSync);\r\n                            } else {\r\n                                this.createSuccessCallback(taskId);\r\n                            }\r\n                        });\r\n                    }))\r\n                    .finally(() => {\r\n                        this.isSubmiting = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 创建作业模板成功\r\n             * @param {Number} taskId 作业模板id\r\n             */\r\n            createSuccessCallback (taskId) {\r\n                let confirmInfo = '';\r\n                let isClickClose = false;\r\n                const handleGoTemplateEdit = () => {\r\n                    this.$router.push({\r\n                        name: 'templateEdit',\r\n                        params: {\r\n                            id: taskId,\r\n                        },\r\n                    });\r\n                    isClickClose = true;\r\n                    confirmInfo.close();\r\n                };\r\n                const handleGoTemplateDetail = () => {\r\n                    this.$router.push({\r\n                        name: 'templateDetail',\r\n                        params: {\r\n                            id: taskId,\r\n                        },\r\n                    });\r\n                    isClickClose = true;\r\n                    confirmInfo.close();\r\n                };\r\n                const handleGoPlan = () => {\r\n                    this.$router.push({\r\n                        name: 'viewPlan',\r\n                        params: {\r\n                            templateId: taskId,\r\n                        },\r\n                        query: {\r\n                            mode: 'create',\r\n                        },\r\n                    });\r\n                    isClickClose = true;\r\n                    confirmInfo.close();\r\n                };\r\n                \r\n                const subHeader = () => (\r\n                <div>\r\n                    <p style={{ marginBottom: '10px', color: '#979BA5' }}>\r\n                        {'还差一步「 设置执行方案」，即可执行作业'}\r\n                    </p>\r\n                    <p>\r\n                        <bk-button\r\n                            style={{ marginRight: '10px' }}\r\n                            text\r\n                            onClick={handleGoTemplateEdit}>\r\n                            {'继续编辑'}\r\n                        </bk-button>\r\n                        <bk-button\r\n                            style={{ marginRight: '10px' }}\r\n                            text\r\n                            onClick={handleGoTemplateDetail}>\r\n                            {'立即查看'}\r\n                        </bk-button>\r\n                        <bk-button\r\n                            text\r\n                            onClick={handleGoPlan}>\r\n                            {'设置方案'}\r\n                        </bk-button>\r\n                    </p>\r\n                </div>\r\n                );\r\n\r\n                confirmInfo = this.$bkInfo({\r\n                    type: 'success',\r\n                    title: '作业创建成功',\r\n                    showFooter: false,\r\n                    subHeader: subHeader(),\r\n                    cancelFn: () => {\r\n                        if (isClickClose) {\r\n                            return;\r\n                        }\r\n                        this.$router.push({\r\n                            name: 'templateEdit',\r\n                            params: {\r\n                                id: taskId,\r\n                            },\r\n                        });\r\n                    },\r\n                });\r\n            },\r\n            /**\r\n             * @desc 编辑作业模板成功\r\n             * @param {Number} taskId 作业模板id\r\n             * @param {Boolean} planSync 执行方案是否需要同步\r\n             */\r\n            editSuccessCallback (taskId, planSync) {\r\n                let confirmInfo = '';\r\n                let isClickClose = false;\r\n                const handleGoTemplateDetail = () => {\r\n                    this.$router.push({\r\n                        name: 'templateDetail',\r\n                        params: {\r\n                            id: taskId,\r\n                        },\r\n                    });\r\n                    isClickClose = true;\r\n                    confirmInfo.close();\r\n                };\r\n                const handleGoSync = () => {\r\n                    this.$router.push({\r\n                        name: 'syncPlanBatch',\r\n                        query: {\r\n                            planIds: this.planList.map(_ => _.id).join(','),\r\n                            from: 'templateEdit',\r\n                        },\r\n                    });\r\n                    isClickClose = true;\r\n                    confirmInfo.close();\r\n                };\r\n                const handleGoPlan = () => {\r\n                    this.$router.push({\r\n                        name: 'viewPlan',\r\n                        params: {\r\n                            templateId: taskId,\r\n                        },\r\n                        query: {\r\n                            from: 'templateDetail',\r\n                        },\r\n                    });\r\n                    isClickClose = true;\r\n                    confirmInfo.close();\r\n                };\r\n                const subHeader = () => (\r\n                <div>\r\n                    <p style={{ marginBottom: '10px', color: '#979BA5' }}>\r\n                        {'可以通过 “立即同步” 入口前往更新所有执行方案'}\r\n                    </p>\r\n                    <p>\r\n                        <bk-button\r\n                            class=\"mr10\"\r\n                            text\r\n                            onClick={handleGoTemplateDetail}>\r\n                            {'返回查看'}\r\n                        </bk-button>\r\n                        <bk-button\r\n                            class=\"mr10\"\r\n                            text\r\n                            disabled={!planSync}\r\n                            onClick={handleGoSync}>\r\n                            {'立即同步'}\r\n                        </bk-button>\r\n                        <bk-button\r\n                            text\r\n                            onClick={handleGoPlan}>\r\n                            {'查看方案'}\r\n                        </bk-button>\r\n                    </p>\r\n                </div>\r\n                );\r\n\r\n                confirmInfo = this.$bkInfo({\r\n                    type: 'success',\r\n                    title: '编辑保存成功',\r\n                    showFooter: false,\r\n                    subHeader: subHeader(),\r\n                    cancelFn: () => {\r\n                        if (isClickClose) {\r\n                            return;\r\n                        }\r\n                        this.fetchData(false);\r\n                    },\r\n                });\r\n            },\r\n            /**\r\n             * @desc 取消\r\n             */\r\n            handleCancel () {\r\n                this.routerBack();\r\n            },\r\n            /**\r\n             * @desc 路由回退\r\n             */\r\n            routerBack () {\r\n                const { from } = this.$route.query;\r\n                if (from === 'templateDetail') {\r\n                    this.$router.push({\r\n                        name: 'templateDetail',\r\n                        params: {\r\n                            id: this.taskId,\r\n                        },\r\n                    });\r\n                    return;\r\n                }\r\n                this.$router.push({\r\n                    name: 'taskList',\r\n                });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    @import \"@/css/mixins/media\";\r\n\r\n    .template-operation {\r\n        display: flex;\r\n\r\n        .layout-left {\r\n            height: calc(100vh - 124px);\r\n            margin-right: auto;\r\n            flex: 0 1 auto;\r\n            transform: translate(0, 0);\r\n\r\n            .template-container {\r\n                padding-right: 100px;\r\n            }\r\n        }\r\n\r\n        .layout-right {\r\n            height: calc(100vh - 104px);\r\n            margin-top: -20px;\r\n            margin-right: -24px;\r\n            flex: 0 0 auto;\r\n        }\r\n\r\n        .info {\r\n            margin-bottom: 20px;\r\n        }\r\n\r\n        .template-desc-textarea {\r\n            .bk-textarea-wrapper .bk-form-textarea.textarea-maxlength {\r\n                margin-bottom: 0;\r\n            }\r\n\r\n            .bk-form-textarea {\r\n                min-height: 86px;\r\n            }\r\n        }\r\n\r\n        .form-item-content {\r\n            @media (--small-viewports) {\r\n                width: 500px;\r\n            }\r\n\r\n            @media (--medium-viewports) {\r\n                width: 560px;\r\n            }\r\n\r\n            @media (--large-viewports) {\r\n                width: 620px;\r\n            }\r\n\r\n            @media (--huge-viewports) {\r\n                width: 680px;\r\n            }\r\n        }\r\n    }\r\n\r\n    .invalid-variable-info,\r\n    .password-variable-info {\r\n        .bk-dialog-content {\r\n            width: 500px !important;\r\n        }\r\n    }\r\n\r\n    .password-variable-info {\r\n        .bk-dialog-header-inner {\r\n            white-space: normal !important;\r\n        }\r\n\r\n        .bk-default {\r\n            display: none;\r\n        }\r\n    }\r\n</style>\r\n"],"names":[],"sourceRoot":""}