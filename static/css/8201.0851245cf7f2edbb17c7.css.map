{"version":3,"file":"static/css/8201.0851245cf7f2edbb17c7.css","mappings":"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","sources":["webpack://job/./src/views/executive-history/step-detail/components/task-step/view/approval.vue","webpack://job/./src/views/executive-history/step-detail/components/task-step/view/normal.vue","webpack://job/./src/views/executive-history/step-detail/components/task-step/view/no-start.vue","webpack://job/./src/views/executive-history/step-detail/components/task-step/index.vue","webpack://job/./src/views/executive-history/step-detail/components/task-status.vue","webpack://job/./src/views/executive-history/step-detail/components/execution-history-select.vue","webpack://job/./src/views/executive-history/step-detail/components/group-tab.vue","webpack://job/./src/views/executive-history/step-detail/components/ip-list/index.vue","webpack://job/./src/views/executive-history/step-detail/components/execution-info/script-log/index.vue","webpack://job/./src/views/executive-history/step-detail/components/execution-info/file-log/log-item.vue","webpack://job/./src/views/executive-history/step-detail/components/execution-info/file-log/index.vue","webpack://job/./src/views/executive-history/step-detail/components/execution-info/variable-view.vue","webpack://job/./src/views/executive-history/step-detail/components/execution-info/index.vue","webpack://job/./src/views/executive-history/step-detail/components/export-log.vue","webpack://job/./src/views/executive-history/step-detail/index.vue"],"sourcesContent":["<template>\r\n    <div\r\n        ref=\"popover\"\r\n        class=\"task-execute-bar-step-confirm-popover-view\"\r\n        :class=\"{\r\n            [data.displayStyle]: true,\r\n            'not-start': data.isNotStart,\r\n        }\">\r\n        <div class=\"confirm-wraper\">\r\n            <div class=\"step-name\">{{ data.name }}</div>\r\n            <div class=\"approval-info\">\r\n                <div v-if=\"data.roleNameList.length || data.userList.length\" class=\"approval-person\">\r\n                    <span class=\"persion-label\">{{ '确认人' }}：</span>\r\n                    <div v-for=\"item in data.roleNameList\" :key=\"`role_${item}`\" class=\"person\">\r\n                        <Icon type=\"user-group-gray\" class=\"role-flag\" />\r\n                        {{ item }}\r\n                    </div>\r\n                    <div v-for=\"item in data.userList\" :key=\"`user_${item}`\" class=\"person\">\r\n                        <Icon type=\"user\" class=\"role-flag\" />\r\n                        {{ item }}\r\n                    </div>\r\n                </div>\r\n                <div v-if=\"data.notifyChannelNameList.length > 0\" class=\"approval-channel\">\r\n                    {{ '通知方式' }}：{{ data.notifyChannelNameList.join('，') }}\r\n                </div>\r\n            </div>\r\n            <div v-if=\"data.confirmMessage\" class=\"step-desc\">{{ data.confirmMessage }}</div>\r\n            <template v-if=\"!data.isNotStart\">\r\n                <bk-input\r\n                    v-if=\"data.isApprovaling\"\r\n                    v-model=\"confirmReason\"\r\n                    class=\"confirm-reason\"\r\n                    type=\"textarea\"\r\n                    :rows=\"3\"\r\n                    :maxlength=\"100\"\r\n                    :placeholder=\"'可在此处输入确认或终止的因由'\" />\r\n                <div v-else-if=\"data.operator\" class=\"confirm-reason-text\">\r\n                    <div class=\"person\">{{ data.operator }}</div>\r\n                    <span v-html=\"data.confirmReasonHtml\" />\r\n                </div>\r\n                <div v-if=\"data.actions.length > 0\" class=\"step-action\" @click.stop=\"\">\r\n                    <step-action\r\n                        v-for=\"action in data.actions\"\r\n                        :name=\"action\"\r\n                        :key=\"action\"\r\n                        :confirm-handler=\"operationCode => handleChangeStatus(operationCode)\" />\r\n                </div>\r\n            </template>\r\n        </div>\r\n        <Icon v-if=\"data.displayStyle !== 'success'\" type=\"close\" class=\"approval-close\" @click=\"handleClose\" />\r\n    </div>\r\n</template>\r\n<script>\r\n       import TaskExecuteService from '@service/task-execute';\r\n    import StepAction from '../../../../common/step-action';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            StepAction,\r\n        },\r\n        props: {\r\n            data: {\r\n                type: Object,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                confirmReason: '',\r\n            };\r\n        },\r\n\r\n        methods: {\r\n            handleChangeStatus (operationCode) {\r\n                return TaskExecuteService.updateTaskExecutionStepOperate({\r\n                    id: this.data.stepInstanceId,\r\n                    operationCode,\r\n                    confirmReason: this.confirmReason,\r\n                }).then((data) => {\r\n                    this.$bkMessage({\r\n                        limit: 1,\r\n                        theme: 'success',\r\n                        message: '操作成功',\r\n                    });\r\n                    this.$emit('on-update', data);\r\n                    return true;\r\n                });\r\n            },\r\n            handleClose () {\r\n                this.$emit('on-close');\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .task-execute-bar-step-confirm-popover-view {\r\n        position: relative;\r\n        width: 472px;\r\n        background: #fff;\r\n\r\n        &.not-start {\r\n            &::before {\r\n                background: #dcdee5;\r\n                border-color: #dcdee5;\r\n            }\r\n\r\n            .confirm-wraper {\r\n                border-left-color: #dcdee5;\r\n            }\r\n        }\r\n\r\n        &.success {\r\n            &::before {\r\n                background: #2dcb9d;\r\n                border-color: #2dcb9d;\r\n            }\r\n\r\n            .confirm-wraper {\r\n                border-left-color: #2dcb9d;\r\n            }\r\n        }\r\n\r\n        &.confirm-forced {\r\n            &::before {\r\n                background: #ff5656;\r\n                border-color: #ff5656;\r\n            }\r\n\r\n            .confirm-wraper {\r\n                border-left-color: #ff5656;\r\n            }\r\n        }\r\n\r\n        &.middle {\r\n            &::before {\r\n                top: 50%;\r\n                transform: translateY(-50%) rotateZ(-45deg);\r\n            }\r\n        }\r\n\r\n        &.top {\r\n            &::before {\r\n                top: 10px;\r\n                transform: rotateZ(-45deg);\r\n            }\r\n        }\r\n\r\n        &.bottom {\r\n            &::before {\r\n                bottom: 20px;\r\n                transform: rotateZ(-45deg);\r\n            }\r\n        }\r\n\r\n        &::before {\r\n            position: absolute;\r\n            left: -6px;\r\n            width: 10px;\r\n            height: 10px;\r\n            background: #ffb848;\r\n            border: 1px solid #dcdee5;\r\n            border-color: #ffb848;\r\n            content: \"\";\r\n        }\r\n\r\n        .confirm-wraper {\r\n            position: relative;\r\n            padding: 20px 36px 24px 30px;\r\n            background: #fff;\r\n            border-left: 6px solid #ffb848;\r\n        }\r\n\r\n        .step-name {\r\n            font-size: 16px;\r\n            font-weight: bold;\r\n            line-height: 21px;\r\n            color: #313238;\r\n        }\r\n\r\n        .approval-info {\r\n            display: flex;\r\n            align-items: center;\r\n            flex-wrap: wrap;\r\n            padding-top: 4px;\r\n            font-size: 12px;\r\n            line-height: 20px;\r\n            color: #b2b5bd;\r\n        }\r\n\r\n        .approval-person {\r\n            display: flex;\r\n            flex-wrap: wrap;\r\n\r\n            .persion-label,\r\n            .person {\r\n                margin-top: 10px;\r\n            }\r\n\r\n            .role-flag {\r\n                margin-right: 4px;\r\n            }\r\n        }\r\n\r\n        .person {\r\n            display: inline-flex;\r\n            height: 22px;\r\n            padding: 0 6px;\r\n            margin-right: 6px;\r\n            font-size: 12px;\r\n            color: #63656e;\r\n            background: #f0f1f5;\r\n            border-radius: 2px;\r\n            align-items: center;\r\n        }\r\n\r\n        .approval-channel {\r\n            margin-top: 10px;\r\n        }\r\n\r\n        .confirm-reason,\r\n        .confirm-reason-text {\r\n            margin-top: 20px;\r\n        }\r\n\r\n        .confirm-reason-text {\r\n            font-size: 14px;\r\n            line-height: 22px;\r\n            color: #63656e;\r\n        }\r\n\r\n        .step-desc {\r\n            padding-top: 14px;\r\n            white-space: normal;\r\n        }\r\n\r\n        .step-action {\r\n            display: flex;\r\n            justify-content: flex-end;\r\n            margin-top: 20px;\r\n\r\n            .step-instance-action {\r\n                width: 76px;\r\n                height: 26px;\r\n                padding: 0;\r\n                margin-right: 0;\r\n                margin-left: 10px;\r\n                font-size: 12px;\r\n                border-radius: 2px;\r\n\r\n                &.confirm {\r\n                    color: #fff;\r\n                    background: #3a84ff;\r\n                }\r\n\r\n                &.confirm-forced {\r\n                    color: #63656e !important;\r\n                    background: #fff;\r\n                    border: 1px solid #c4c6cc;\r\n                }\r\n\r\n                &.retry {\r\n                    width: auto;\r\n                    padding: 0 14px;\r\n                    color: #fff;\r\n                    background: #3a84ff;\r\n                }\r\n\r\n                .job-icon {\r\n                    display: none;\r\n                }\r\n            }\r\n        }\r\n\r\n        .approval-close {\r\n            position: absolute;\r\n            top: 0;\r\n            right: 0;\r\n            padding: 10px;\r\n            font-size: 24px;\r\n            color: #c4c6cc;\r\n            cursor: pointer;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"task-execute-bar-step-description-popover\">\r\n        <div>\r\n            {{ data.typeDesc }}:<span class=\"value\">{{ data.name }}</span>\r\n        </div>\r\n        <div>\r\n            {{ '步骤状态' }}:<span class=\"value\" :class=\"[data.displayStyle]\">{{ data.statusDesc }}</span>\r\n        </div>\r\n        <div>\r\n            {{ '步骤耗时' }}:<span class=\"value\">{{ data.totalTimeText }}</span>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    export default {\r\n        name: '',\r\n        props: {\r\n            data: {\r\n                type: Object,\r\n                required: true,\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .task-execute-bar-step-description-popover {\r\n        padding: 0.3rem 0.6rem;\r\n\r\n        &::before {\r\n            position: absolute;\r\n            top: 50%;\r\n            left: -6px;\r\n            width: 10px;\r\n            height: 10px;\r\n            margin-top: -8px;\r\n            background: #fff;\r\n            border: none;\r\n            border: 1px solid #dcdee5;\r\n            border-right: none;\r\n            border-bottom: none;\r\n            content: \"\";\r\n            transform: translateY(-50%) rotateZ(-45deg);\r\n        }\r\n\r\n        .value {\r\n            margin-left: 1em;\r\n\r\n            &.loading {\r\n                color: #3a84ff;\r\n            }\r\n\r\n            &.success {\r\n                color: #2dcb9d;\r\n            }\r\n\r\n            &.disabled {\r\n                color: #c4c6cc;\r\n            }\r\n\r\n            &.fail,\r\n            &.forced {\r\n                color: #ff5656;\r\n            }\r\n\r\n            &.confirm {\r\n                color: #ff9c01;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"task-execute-bar-step-description-popover\">\r\n        <div>\r\n            {{ data.typeDesc }}:<span class=\"value\">{{ data.name }}</span>\r\n        </div>\r\n        <div>\r\n            {{ '步骤状态' }}:<span class=\"value\">--</span>\r\n        </div>\r\n        <div>\r\n            {{ '步骤耗时' }}:<span class=\"value\">--</span>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    export default {\r\n        name: '',\r\n        props: {\r\n            data: {\r\n                type: Object,\r\n                required: true,\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .task-execute-bar-step-description-popover {\r\n        padding: 0.3rem 0.6rem;\r\n\r\n        &::before {\r\n            position: absolute;\r\n            top: 50%;\r\n            left: -6px;\r\n            width: 10px;\r\n            height: 10px;\r\n            margin-top: -8px;\r\n            background: #fff;\r\n            border: none;\r\n            border: 1px solid #dcdee5;\r\n            border-right: none;\r\n            border-bottom: none;\r\n            content: \"\";\r\n            transform: translateY(-50%) rotateZ(-45deg);\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div\r\n        class=\"task-execute-bar-step\"\r\n        :class=\"{\r\n            [data.displayStyle]: true,\r\n            active: data.stepInstanceId === activeId,\r\n        }\"\r\n        @mouseenter=\"handleShowPopover\"\r\n        @mouseleave=\"handleHidePopover\"\r\n        @click=\"handleSelect\">\r\n        <div class=\"step-wraper\">\r\n            <div class=\"step-icon\">\r\n                <Icon :type=\"data.icon\" />\r\n            </div>\r\n            <img\r\n                v-if=\"data.isDoing\"\r\n                class=\"loading-progress\"\r\n                src=\"/static/images/task-loading.png\">\r\n        </div>\r\n        <Icon :type=\"data.lastStepIcon\" svg class=\"step-next\" />\r\n        <component\r\n            v-show=\"isShowPopover\"\r\n            ref=\"popover\"\r\n            :is=\"popoverCom\"\r\n            :data=\"data\"\r\n            :class=\"['task-status-bar-step-popover', arrowPlacement]\"\r\n            :style=\"popoverStyles\"\r\n            @on-update=\"handleTaskStatusUpdate\"\r\n            @on-close=\"handleClosePopover\" />\r\n    </div>\r\n</template>\r\n<script>\r\n    import ApprovalView from './view/approval';\r\n    import NormalView from './view/normal';\r\n    import NotStartView from './view/no-start';\r\n\r\n    let activeHandler = null;\r\n\r\n    export default {\r\n        props: {\r\n            activeId: {\r\n                type: [String, Number],\r\n            },\r\n            data: {\r\n                type: Object,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isShowPopover: false,\r\n                confirmReason: '',\r\n                popoverPosition: {\r\n                    top: 0,\r\n                    left: 0,\r\n                },\r\n                arrowPlacement: 'top',\r\n            };\r\n        },\r\n        computed: {\r\n            popoverCom () {\r\n                if (this.data.isApproval) {\r\n                    return ApprovalView;\r\n                }\r\n                if (this.data.isNotStart) {\r\n                    return NotStartView;\r\n                }\r\n                return NormalView;\r\n            },\r\n            popoverStyles () {\r\n                const { top, left, zIndex } = this.popoverPosition;\r\n                return {\r\n                    position: 'absolute',\r\n                    top: `${top}px`,\r\n                    left: `${left + 72}px`,\r\n                    'z-index': zIndex,\r\n                };\r\n            },\r\n        },\r\n        beforeDestroy () {\r\n            this.destroyePopover();\r\n        },\r\n        methods: {\r\n            handleSelect () {\r\n                this.$emit('on-select', this.data);\r\n            },\r\n            handleTaskStatusUpdate (payload) {\r\n                this.$emit('on-update', payload);\r\n            },\r\n            handleShowPopover () {\r\n                if (activeHandler) {\r\n                    activeHandler.handleClosePopover();\r\n                }\r\n                \r\n                this.isShowPopover = true;\r\n                activeHandler = this;\r\n                let offset = 0;\r\n                if (this.data.isApproval) {\r\n                    offset = 15;\r\n                }\r\n                this.$nextTick(() => {\r\n                    this.arrowPlacement = 'top';\r\n                    const position = {\r\n                        top: 0,\r\n                        left: 0,\r\n                        zIndex: window.__bk_zIndex_manager.nextZIndex(), // eslint-disable-line no-underscore-dangle\r\n                    };\r\n                    const $popoverTarget = this.$refs.popover.$el;\r\n                    const windowHeight = window.innerHeight;\r\n                    const { height } = $popoverTarget.getBoundingClientRect();\r\n                    const { top, left } = this.$el.getBoundingClientRect();\r\n                    position.left = left;\r\n                    position.top = top + offset;\r\n                    if (top + height + 20 > windowHeight) {\r\n                        this.arrowPlacement = 'bottom';\r\n                        position.top = top - height + 60;\r\n                    }\r\n                    if (position.top < 20) {\r\n                        this.arrowPlacement = 'middle';\r\n                        position.top = top - height / 2 + 30;\r\n                    }\r\n                    document.body.appendChild($popoverTarget);\r\n                    this.popoverPosition = position;\r\n                });\r\n            },\r\n            // 人工确认步骤——如果没有确认需要手动关闭\r\n            // 其它步骤鼠标离开自动关闭\r\n            handleHidePopover () {\r\n                if (this.data.isApproval && this.data.displayStyle !== 'success') {\r\n                    return;\r\n                }\r\n                this.isShowPopover = false;\r\n            },\r\n            handleClosePopover () {\r\n                this.isShowPopover = false;\r\n            },\r\n            destroyePopover () {\r\n                try {\r\n                    activeHandler = null;\r\n                    if (this.$refs.popover.$el && document.body.hasChildNodes(this.$refs.popover.$el)) {\r\n                        document.body.removeChild(this.$refs.popover.$el);\r\n                    }\r\n                } catch {}\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .task-execute-bar-step {\r\n        cursor: pointer;\r\n\r\n        &.start,\r\n        &.end {\r\n            cursor: default;\r\n\r\n            &:hover {\r\n                background: #fff;\r\n            }\r\n        }\r\n\r\n        &:hover {\r\n            background: #f0f1f5;\r\n        }\r\n\r\n        &.active {\r\n            background: #e1ecff;\r\n        }\r\n\r\n        &.loading {\r\n            color: #63656e;\r\n\r\n            .step-icon {\r\n                background: #3a84ff;\r\n            }\r\n\r\n            .time {\r\n                color: #3a84ff;\r\n            }\r\n        }\r\n\r\n        &.ingore {\r\n            .step-icon {\r\n                background: #abd88a;\r\n            }\r\n        }\r\n\r\n        &.disabled {\r\n            cursor: default;\r\n            background: transparent;\r\n\r\n            .step-icon {\r\n                background: #dcdee5;\r\n            }\r\n        }\r\n\r\n        &.fail,\r\n        &.forced,\r\n        &.confirm-forced {\r\n            color: #979ba5;\r\n\r\n            .step-icon {\r\n                background: #ff5656;\r\n            }\r\n        }\r\n\r\n        &.confirm {\r\n            color: #979ba5;\r\n\r\n            .step-icon {\r\n                background: #ff9c01;\r\n            }\r\n        }\r\n\r\n        .step-wraper {\r\n            position: relative;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            width: 60px;\r\n            height: 60px;\r\n        }\r\n\r\n        .step-icon {\r\n            display: flex;\r\n            width: 34px;\r\n            height: 34px;\r\n            font-size: 14px;\r\n            font-weight: 600;\r\n            color: #fff;\r\n            background: #2dcb9d;\r\n            border-radius: 50%;\r\n            align-items: center;\r\n            justify-content: center;\r\n        }\r\n\r\n        .step-next {\r\n            position: absolute;\r\n            left: 50%;\r\n            font-size: 31px;\r\n            color: #c4c6cc;\r\n            transform: translate(-50%, -18px);\r\n        }\r\n\r\n        .loading-progress {\r\n            position: absolute;\r\n            top: 9px;\r\n            left: 9px;\r\n            display: block;\r\n            width: 42px;\r\n            height: 42px;\r\n            animation: \"ani-rotate\" 2s linear infinite;\r\n        }\r\n    }\r\n\r\n    .task-status-bar-step-popover {\r\n        /* position: relative; */\r\n        font-size: 14px;\r\n        line-height: 22px;\r\n        color: #63656e;\r\n        white-space: nowrap;\r\n        background: #fff;\r\n        border: 1px solid #dcdee5;\r\n        border-radius: 2px;\r\n        box-shadow: 0 0 5px 0 rgb(0 0 0 / 9%);\r\n\r\n        /* &:after{\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: -15px;\r\n            width: 20px;\r\n            height: 60px;\r\n        } */\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"task-execution-step-wraper\" :class=\"{ column: taskExecutionDetail.taskExecution.isTask }\">\r\n        <div v-if=\"taskExecutionDetail.taskExecution.isTask\" class=\"task-process\">\r\n            <div class=\"process-wraper\">\r\n                <scroll-faker>\r\n                    <task-step-start />\r\n                    <task-step\r\n                        v-for=\"step in taskExecutionDetail.stepExecution\"\r\n                        :data=\"step\"\r\n                        :active-id=\"currentStepInstanceId\"\r\n                        @on-select=\"handleChangeStep\"\r\n                        @on-update=\"handleTaskStatusUpdate\"\r\n                        :key=\"step.stepInstanceId\" />\r\n                    <task-step-end :disable=\"!taskExecutionDetail.taskExecution.isSuccess\" />\r\n                </scroll-faker>\r\n            </div>\r\n            <div class=\"execution-process\">\r\n                {{ currentStepOrder }} / {{ taskExecutionDetail.totalStep }}\r\n            </div>\r\n        </div>\r\n        <div class=\"task-step-detail\">\r\n            <slot />\r\n        </div>\r\n        <div v-if=\"historyEnable\" class=\"execution-history\" :class=\"{ active: isShowHistory }\">\r\n            <div class=\"toggle-btn\" @click=\"handleShowHistory\">\r\n                <Icon class=\"toggle-flag\" type=\"angle-double-left\" />\r\n                <div class=\"return-edit\">{{ '返回编辑' }}</div>\r\n            </div>\r\n            <div class=\"history-content\">\r\n                <template v-if=\"taskExecutionDetail.taskExecution.isScript\">\r\n                    <div\r\n                        v-for=\"item in scriptHistoryList\"\r\n                        class=\"item\"\r\n                        :key=\"item.id\"\r\n                        @click=\"handleGoRedoScriptExec(item)\">\r\n                        {{ item.name }}\r\n                    </div>\r\n                </template>\r\n                <template v-if=\"taskExecutionDetail.taskExecution.isFile\">\r\n                    <div\r\n                        v-for=\"item in fileHistoryList\"\r\n                        class=\"item\"\r\n                        :key=\"item.id\"\r\n                        @click=\"handleGoRedoFileExec(item)\">\r\n                        {{ item.name }}\r\n                    </div>\r\n                </template>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n       import TaskExecuteService from '@service/task-execute';\r\n    import {\r\n        buildURLParams,\r\n    } from '@utils/assist';\r\n    import {\r\n        execScriptHistory,\r\n        pushFileHistory,\r\n    } from '@utils/cache-helper';\r\n    import TaskStep from './task-step/index';\r\n    import TaskStepStart from './task-step/start';\r\n    import TaskStepEnd from './task-step/end';\r\n    import mixins from './mixins';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            TaskStep,\r\n            TaskStepStart,\r\n            TaskStepEnd,\r\n        },\r\n        mixins: [\r\n            mixins,\r\n        ],\r\n        data () {\r\n            return {\r\n                isLoading: false,\r\n                isShow: false,\r\n                taskExecutionDetail: {\r\n                    isFinished: false,\r\n                    taskExecution: {},\r\n                    stepExecution: [],\r\n                },\r\n                scriptHistoryList: [{},{},{}],\r\n                fileHistoryList: [{},{},{}],\r\n                isShowHistory: false,\r\n                isFinished: false,\r\n                currentStepInstanceId: '',\r\n            };\r\n        },\r\n        computed: {\r\n            currentStepOrder () {\r\n                return _.findIndex(\r\n                    this.taskExecutionDetail.stepExecution,\r\n                    _ => _.stepInstanceId === this.currentStepInstanceId,\r\n                ) + 1;\r\n            },\r\n            historyEnable () {\r\n                if (this.taskExecutionDetail.taskExecution.isScript) {\r\n                    return this.scriptHistoryList.length > 0;\r\n                }\r\n                if (this.taskExecutionDetail.taskExecution.isFile) {\r\n                    return this.fileHistoryList.length > 0;\r\n                }\r\n                return false;\r\n            },\r\n        },\r\n        created () {\r\n            this.timer = '';\r\n\r\n            const { taskInstanceId } = this.$route.params;\r\n            const { stepInstanceId, retryCount = 0 } = this.$route.query;\r\n            \r\n            this.taskInstanceId = parseInt(taskInstanceId, 10);\r\n            this.stepInstanceId = parseInt(stepInstanceId, 10);\r\n            this.retryCount = parseInt(retryCount, 10);\r\n            \r\n            this.fetchData();\r\n        },\r\n        mounted () {\r\n            this.initHistory();\r\n            this.$once('hook:beforeDestroy', () => {\r\n                clearTimeout(this.timer);\r\n            });\r\n        },\r\n        methods: {\r\n            fetchData (trigger = false) {\r\n                this.isLoading = true;\r\n                TaskExecuteService.fetchTaskExecutionResult({\r\n                    id: this.taskInstanceId,\r\n                }).then((data) => {\r\n                    this.taskExecutionDetail = Object.freeze(data);\r\n                    if (!data.finished) {\r\n                        this.timer = setTimeout(() => {\r\n                            this.reLoading();\r\n                        }, 1000);\r\n                    }\r\n                    // 没有指定stepInstanceId默认取第一个步骤\r\n                    if (!this.stepInstanceId) {\r\n                        const [\r\n                            {\r\n                                stepInstanceId,\r\n                                retryCount,\r\n                            },\r\n                        ] = data.stepExecution;\r\n                        this.stepInstanceId = stepInstanceId;\r\n                        this.retryCount = retryCount;\r\n                    }\r\n                    this.currentStepInstanceId = this.stepInstanceId;\r\n                    this.$emit('on-init', {\r\n                        taskInstanceId: this.taskInstanceId,\r\n                        stepInstanceId: this.stepInstanceId,\r\n                        retryCount: this.retryCount,\r\n                        taskStepList: data.stepExecution,\r\n                        isTask: this.taskExecutionDetail.taskExecution.isTask,\r\n                    });\r\n                })\r\n                    .catch((error) => {\r\n                        if ([\r\n                            400,\r\n                            1244006,\r\n                        ].includes(error.code)) {\r\n                            setTimeout(() => {\r\n                                this.$router.push({\r\n                                    name: 'historyList',\r\n                                });\r\n                            }, 3000);\r\n                        }\r\n                    })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            // 作业执行状态轮询\r\n            reLoading () {\r\n                // 是作业类型的任务才会轮询作业的状态\r\n                if (!this.taskExecutionDetail.taskExecution.isTask) {\r\n                    return;\r\n                }\r\n                TaskExecuteService.fetchTaskExecutionResult({\r\n                    id: this.taskInstanceId,\r\n                }).then((data) => {\r\n                    this.taskExecutionDetail = Object.freeze(data);\r\n                    if (!data.finished) {\r\n                        this.$pollingQueueRun(this.reLoading);\r\n                    }\r\n                });\r\n            },\r\n            initHistory () {\r\n                this.scriptHistoryList = Object.freeze(execScriptHistory.getItem());\r\n                this.fileHistoryList = Object.freeze(pushFileHistory.getItem());\r\n            },\r\n            handleShowHistory () {\r\n                this.isShowHistory = !this.isShowHistory;\r\n            },\r\n            handleGoRedoScriptExec (payload) {\r\n                this.$router.push({\r\n                    name: 'fastExecuteScript',\r\n                    params: {\r\n                        taskInstanceId: payload.taskInstanceId,\r\n                    },\r\n                    query: {\r\n                        from: 'historyStep',\r\n                    },\r\n                });\r\n            },\r\n            handleGoRedoFileExec (payload) {\r\n                this.$router.push({\r\n                    name: 'fastPushFile',\r\n                    params: {\r\n                        taskInstanceId: payload.taskInstanceId,\r\n                    },\r\n                    query: {\r\n                        from: 'historyStep',\r\n                    },\r\n                });\r\n            },\r\n            handleChangeStep (step) {\r\n                if (step.stepInstanceId === this.currentStepInstanceId) {\r\n                    return;\r\n                }\r\n\r\n                if (step.isNotStart) {\r\n                    this.$bkMessage({\r\n                        theme: 'warning',\r\n                        message: '该步骤还未执行',\r\n                        limit: 1,\r\n                    });\r\n                    return;\r\n                }\r\n\r\n                if (step.isApproval) {\r\n                    this.$bkMessage({\r\n                        theme: 'warning',\r\n                        message: '人工确认步骤不支持查看步骤详情',\r\n                        limit: 1,\r\n                    });\r\n                    return;\r\n                }\r\n                \r\n                const { stepInstanceId, retryCount } = step;\r\n                this.currentStepInstanceId = stepInstanceId;\r\n                const query = buildURLParams({\r\n                    ...this.$route.query,\r\n                    stepInstanceId,\r\n                    retryCount,\r\n                });\r\n                window.history.replaceState({}, '', `?${query}`);\r\n                \r\n                this.$emit('on-init', {\r\n                    stepInstanceId,\r\n                    taskInstanceId: this.taskInstanceId,\r\n                    retryCount,\r\n                    taskStepList: this.taskExecutionDetail.stepExecution,\r\n                    isTask: this.taskExecutionDetail.taskExecution.isTask,\r\n                });\r\n            },\r\n            handleTaskStatusUpdate (payload) {\r\n                this.reLoading();\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    html[lang=\"en-US\"] {\r\n        .return-edit {\r\n            margin-top: 6px;\r\n            transform: rotate(90deg);\r\n        }\r\n    }\r\n\r\n    @keyframes ani-rotate {\r\n        to {\r\n            transform: rotateZ(360deg);\r\n        }\r\n    }\r\n\r\n    .task-execution-step-wraper {\r\n        background: #fff;\r\n\r\n        &.column {\r\n            display: flex;\r\n\r\n            .task-step-detail {\r\n                width: 0;\r\n            }\r\n        }\r\n\r\n        .task-process {\r\n            display: flex;\r\n            height: calc(100vh - 104px);\r\n            padding-bottom: 38px;\r\n            background: #fff;\r\n            border-right: 1px solid #e2e2e2;\r\n            flex-direction: column;\r\n            flex: 0 0 61px;\r\n\r\n            .process-wraper {\r\n                height: 100%;\r\n\r\n                .scroll-faker-content {\r\n                    position: relative;\r\n                }\r\n            }\r\n\r\n            .execution-process {\r\n                position: absolute;\r\n                right: 0;\r\n                bottom: 0;\r\n                left: 0;\r\n                width: 60px;\r\n                height: 28px;\r\n                font-size: 14px;\r\n                line-height: 28px;\r\n                color: #fff;\r\n                text-align: center;\r\n                background: rgb(0 0 0 / 25%);\r\n                user-select: none;\r\n            }\r\n        }\r\n\r\n        .task-step-detail {\r\n            flex: 1;\r\n            background: #fff;\r\n        }\r\n\r\n        .execution-history {\r\n            position: fixed;\r\n            top: 127px;\r\n            right: 0;\r\n            z-index: 999;\r\n            font-size: 12px;\r\n            line-height: 30px;\r\n            color: #c4c6cc;\r\n            background: #63656e;\r\n            border-bottom-left-radius: 2px;\r\n            transform: translateX(100%);\r\n            transition: all 0.35s;\r\n            user-select: none;\r\n\r\n            &.active {\r\n                transform: translateX(0);\r\n\r\n                .toggle-flag {\r\n                    transform: rotateZ(180deg);\r\n                }\r\n            }\r\n\r\n            .toggle-btn {\r\n                position: absolute;\r\n                top: 0;\r\n                left: -22px;\r\n                display: flex;\r\n                width: 22px;\r\n                height: 88px;\r\n                line-height: 13px;\r\n                color: #dcdee5;\r\n                text-align: center;\r\n                cursor: pointer;\r\n                background: #63656e;\r\n                border-right: 1px solid #757783;\r\n                border-bottom-left-radius: 8px;\r\n                border-top-left-radius: 8px;\r\n                flex-direction: column;\r\n                justify-content: center;\r\n\r\n                .toggle-flag {\r\n                    margin-bottom: 5px;\r\n                    color: #979ba5;\r\n                    transition: all 0.2s;\r\n                }\r\n            }\r\n\r\n            .history-content {\r\n                display: flex;\r\n                min-height: 90px;\r\n                padding: 12px 0;\r\n                flex-direction: column;\r\n                justify-content: center;\r\n            }\r\n\r\n            .item {\r\n                padding-right: 16px;\r\n                padding-left: 16px;\r\n                cursor: pointer;\r\n                transition: all 0.15s;\r\n\r\n                &:hover {\r\n                    color: #fff;\r\n                    background: #4f515a;\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","\r\n<template>\r\n    <div\r\n        ref=\"target\"\r\n        class=\"step-execution-history-select\">\r\n        <span>{{ retryCountText }}</span>\r\n        <Icon type=\"down-small\" style=\"font-size: 16px;\" />\r\n        <div ref=\"content\" class=\"dropdown-menu\">\r\n            <div\r\n                v-for=\"item in executionList\"\r\n                :key=\"item.createTime\"\r\n                class=\"menu-item\"\r\n                :class=\"{\r\n                    active: item.retryCount === retryCount,\r\n                }\"\r\n                @click=\"handleSelectRetryCount(item.retryCount)\">\r\n                <div class=\"retry-count\">{{ item.text }}</div>\r\n                <div class=\"time\">{{ item.createTime }}</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n    import TaskExecuteService from '@service/task-execute';\r\n\r\n    const ordinalSuffixOf = (i) => {\r\n        const j = i % 10;\r\n        const k = i % 100;\r\n        if (j === 1 && k !== 11) {\r\n            return `${i} st`;\r\n        }\r\n        if (j === 2 && k !== 12) {\r\n            return `${i} nd`;\r\n        }\r\n        if (j === 3 && k !== 13) {\r\n            return `${i} rd`;\r\n        }\r\n        return `${i} th`;\r\n    };\r\n\r\n    export default {\r\n        name: '',\r\n        props: {\r\n            stepInstanceId: {\r\n                type: Number,\r\n                required: true,\r\n            },\r\n            retryCount: {\r\n                type: [Number, String],\r\n                default: 0,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isNeedRender: false,\r\n                executionList: [{}, {}, {}],\r\n            };\r\n        },\r\n        computed: {\r\n            retryCountText () {\r\n                // eslint-disable-next-line no-plusplus\r\n                for (let i = 0; i < this.executionList.length; i++) {\r\n                    if (this.executionList[i].retryCount === this.retryCount) {\r\n                        return this.executionList[i].text;\r\n                    }\r\n                }\r\n                return 'LATEST';\r\n            },\r\n        },\r\n        watch: {\r\n            stepInstanceId: {\r\n                handler (stepInstanceId) {\r\n                    this.popperDestroy();\r\n                    if (!stepInstanceId) {\r\n                        return;\r\n                    }\r\n                    this.fetchStepExecutionHistory();\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        created () {\r\n            this.fetchStepExecutionHistory();\r\n        },\r\n        beforeDestroy () {\r\n            this.popperDestroy();\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 组件外部调用api，刷新数据\r\n             */\r\n            reLoading () {\r\n                this.fetchStepExecutionHistory();\r\n            },\r\n            /**\r\n             * @desc 获取步骤执行历史\r\n             *\r\n             * retryCount的最大值显示为LATEST\r\n             * 如果重试次数大于0，显示retryCount切换列表\r\n             */\r\n            fetchStepExecutionHistory () {\r\n                // TaskExecuteService.fetchStepExecutionHistory({\r\n                //     stepInstanceId: this.stepInstanceId,\r\n                // }).then((data) => {\r\n                const data = [{\r\n                    retryCount: 5,\r\n                    createTime: '2018-01-01 12:00:00',\r\n                }];\r\n                const max = _.max(data.map(_ => _.retryCount));\r\n                const result = data.map((item) => {\r\n                    const {\r\n                        retryCount,\r\n                        createTime,\r\n                    } = item;\r\n\r\n                    const realIndex = retryCount + 1;\r\n                    return {\r\n                        retryCount,\r\n                        createTime,\r\n                        text: retryCount !== max ? ordinalSuffixOf(realIndex) : 'LATEST',\r\n                    };\r\n                });\r\n                this.executionList = Object.freeze(result);\r\n                // 重试次数大于1才需要显示\r\n                this.isNeedRender = this.executionList.length > 1;\r\n                if (this.isNeedRender) {\r\n                    this.$nextTick(() => {\r\n                        if (!this.popperInstance) {\r\n                            this.popperInstance = this.$bkPopover(this.$el, {\r\n                                theme: 'light step-execution-history-menu',\r\n                                arrow: false,\r\n                                interactive: true,\r\n                                placement: 'bottom-start',\r\n                                content: this.$refs.content,\r\n                                animation: 'slide-toggle',\r\n                                trigger: 'click',\r\n                                width: '240px',\r\n                            });\r\n                        }\r\n                    });\r\n                } else {\r\n                    this.popperDestroy();\r\n                }\r\n                // });\r\n            },\r\n            /**\r\n             * @desc 销毁popover实例\r\n             */\r\n            popperDestroy () {\r\n                if (this.popperInstance) {\r\n                    this.popperInstance.destroy();\r\n                    this.popperInstance = null;\r\n                }\r\n            },\r\n            /**\r\n             * @desc 切换重试次数\r\n             * @param retryCount [Number] 重试记录\r\n             *\r\n             * 切换成功后需要将retryCount的最新值更新到url上\r\n             */\r\n            handleSelectRetryCount (retryCount) {\r\n                debugger;\r\n                this.selectRetryCount = retryCount;\r\n                this.popperInstance && this.popperInstance.hide();\r\n                this.$emit('on-change', retryCount);\r\n                const searchParams = new URLSearchParams(window.location.search);\r\n                searchParams.set('retryCount', retryCount);\r\n                window.history.replaceState({}, '', `?${searchParams.toString()}`);\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .step-execution-history-select {\r\n        position: relative;\r\n        display: flex;\r\n        height: 20px;\r\n        padding-right: 2px;\r\n        padding-left: 10px;\r\n        margin-left: 8px;\r\n        color: #63656e;\r\n        cursor: pointer;\r\n        background: #e6e7eb;\r\n        border-radius: 2px;\r\n        align-items: center;\r\n    }\r\n\r\n    .step-execution-history-menu-theme {\r\n        .menu-item {\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: space-between;\r\n            height: 32px;\r\n            padding: 0 10px;\r\n            font-size: 12px;\r\n            color: #979ba5;\r\n            cursor: pointer;\r\n\r\n            &:hover {\r\n                background: #f4f6fa;\r\n            }\r\n\r\n            &.active {\r\n                background: #eaf3ff;\r\n\r\n                .retry-count {\r\n                    color: #3a84ff;\r\n                }\r\n            }\r\n\r\n            .retry-count {\r\n                color: #63656e;\r\n            }\r\n        }\r\n\r\n        .tippy-content {\r\n            margin: 0 -0.6rem;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"step-execute-host-group\" :class=\"{ hide: isHide }\">\r\n        <div ref=\"groupTab\" class=\"group-tab\" :class=\"{ toggle: showGroupToggle }\">\r\n            <div\r\n                v-for=\"(item) in renderGroup\"\r\n                :key=\"item.resultType + item.tag\"\r\n                class=\"tab-item\"\r\n                :class=\"{ active: chooseGroupName === item.groupName }\"\r\n                @click=\"handleGroupChange(item)\">\r\n                <div class=\"group-name\" v-bk-overflow-tips>{{ item.groupName }}</div>\r\n                <Icon\r\n                    v-if=\"item.tagMaxLength\"\r\n                    class=\"max-length-info\"\r\n                    v-bk-tooltips=\"'分组标签长度最大支持256，超过会被自动截断，请留意！'\"\r\n                    type=\"info\" />\r\n                <div class=\"group-nums\">{{ item.agentTaskSize }}</div>\r\n            </div>\r\n            <div v-if=\"showGroupToggle\" class=\"group-toggle\" :class=\"groupToggleClass\">\r\n                <div class=\"tab-more\">\r\n                    <div class=\"group-holder\">{{ groupHolder }}</div>\r\n                    <Icon type=\"arrow-full-right\" class=\"toggle-flag\" />\r\n                </div>\r\n                <div class=\"dropdown-menu\">\r\n                    <div\r\n                        class=\"dropdowm-item\"\r\n                        v-for=\"(item, index) in toggleGroup\"\r\n                        :class=\"{ active: chooseGroupName === item.groupName }\"\r\n                        @click=\"handleGroupChange(item)\"\r\n                        :key=\"index\">\r\n                        <div class=\"group-name\" v-bk-overflow-tips>{{ item.groupName }}</div>\r\n                        <Icon\r\n                            v-if=\"item.tagMaxLength\"\r\n                            class=\"max-length-info\"\r\n                            v-bk-tooltips=\"'分组标签长度最大支持256，超过会被自动截断，请留意！'\"\r\n                            type=\"info\" />\r\n                        <div class=\"group-nums\">{{ item.agentTaskSize }}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n   \r\n    export default {\r\n        name: '',\r\n        props: {\r\n            data: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isHide: true,\r\n                renderGroup: [],\r\n                toggleGroup: [],\r\n                chooseGroupName: '',\r\n            };\r\n        },\r\n        computed: {\r\n            groupHolder () {\r\n                if (this.toggleGroup.find(_ => _.groupName === this.chooseGroupName)) {\r\n                    return this.chooseGroupName;\r\n                }\r\n                return '更多分组';\r\n            },\r\n            showGroupToggle () {\r\n                return this.toggleGroup.length > 0;\r\n            },\r\n            groupToggleClass () {\r\n                if (this.toggleGroup.find(_ => _.groupName === this.chooseGroupName)) {\r\n                    return 'active';\r\n                }\r\n                return '';\r\n            },\r\n        },\r\n        watch: {\r\n            /**\r\n             * @desc 没有选中的分组和选中的分组不存在了，默认选中第一个\r\n             */\r\n            data: {\r\n                handler (data) {\r\n                    if (this.data.length < 1) {\r\n                        return;\r\n                    }\r\n                    // 没有选中的分组，默认选中第一个\r\n                    if (!this.chooseGroupName || !data.find(_ => _.groupName === this.chooseGroupName)) {\r\n                        this.handleGroupChange(data[0]);\r\n                    }\r\n                    this.isHide = true;\r\n                    this.renderGroup = Object.freeze(data);\r\n                    setTimeout(() => {\r\n                        this.initTab();\r\n                    }, 20);\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        /**\r\n         * @desc 浏览器宽度变化时，重新计算分组的排版\r\n         */\r\n        mounted () {\r\n            const resizeHandler = _.throttle(() => {\r\n                this.renderGroup = this.data;\r\n                this.isHide = true;\r\n                this.timer = setTimeout(() => {\r\n                    this.initTab();\r\n                });\r\n            }, 100);\r\n            window.addEventListener('resize', resizeHandler);\r\n            this.$once('hook:beforeDestroy', () => {\r\n                window.removeEventListener('resize', resizeHandler);\r\n                clearTimeout(this.timer);\r\n            });\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 计算分组的排版，超过一行的分组聚合到最后\r\n             */\r\n            initTab () {\r\n                const { width } = this.$refs.groupTab.getBoundingClientRect();\r\n                const allGroup = [...this.$refs.groupTab.querySelectorAll('.tab-item')];\r\n                \r\n                let realTabCotentWidth = 0;\r\n                let realDisplayNum = 0;\r\n                // eslint-disable-next-line no-plusplus\r\n                for (realDisplayNum = 0; realDisplayNum < allGroup.length; realDisplayNum++) {\r\n                    const groupWidth = allGroup[realDisplayNum].getBoundingClientRect().width;\r\n                    if (realTabCotentWidth + groupWidth < width) {\r\n                        realTabCotentWidth += groupWidth;\r\n                        continue;\r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n                const isLast = realDisplayNum === allGroup.length - 1;\r\n                if (!isLast) {\r\n                    if (realTabCotentWidth + 124 > width) {\r\n                        realDisplayNum -= 1;\r\n                    }\r\n                }\r\n                this.renderGroup = Object.freeze(this.data.slice(0, realDisplayNum));\r\n                this.toggleGroup = Object.freeze(this.data.slice(realDisplayNum));\r\n                this.isHide = false;\r\n            },\r\n            /**\r\n             * @desc 切换分组\r\n             * @param {Object} group 最新选中的分组\r\n             */\r\n            handleGroupChange (group) {\r\n                this.chooseGroupName = group.groupName;\r\n                \r\n                this.$emit('on-change', {\r\n                    groupName: group.groupName,\r\n                    resultType: group.resultType || '',\r\n                    tag: group.tag,\r\n                });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    @import \"@/css/mixins/scroll\";\r\n\r\n    .step-execute-host-group {\r\n        width: 100%;\r\n        padding: 0 24px;\r\n        background: #f5f6fa;\r\n        border-bottom: 1px solid #e2e2e2;\r\n\r\n        &.hide {\r\n            overflow: hidden;\r\n\r\n            .group-tab {\r\n                visibility: hidden;\r\n            }\r\n        }\r\n\r\n        .group-tab {\r\n            display: flex;\r\n            height: 40px;\r\n            color: #63656e;\r\n            visibility: visible;\r\n            transition: all 0.15s;\r\n\r\n            &.toggle {\r\n                .tab-item {\r\n                    margin-right: 0;\r\n                }\r\n            }\r\n\r\n            .tab-item,\r\n            .tab-more {\r\n                position: relative;\r\n                display: flex;\r\n                height: 41px;\r\n                padding: 0 20px;\r\n                font-size: 14px;\r\n                color: #63656e;\r\n                cursor: pointer;\r\n                border: 1px solid transparent;\r\n                border-top-right-radius: 6px;\r\n                border-top-left-radius: 6px;\r\n                align-items: center;\r\n                flex: 0 0 auto;\r\n            }\r\n\r\n            .tab-item {\r\n                &:hover,\r\n                &.active {\r\n                    color: #313238;\r\n\r\n                    .group-nums {\r\n                        color: #63656e;\r\n                    }\r\n                }\r\n\r\n                &.active {\r\n                    background: #fff;\r\n                    border-color: #dcdee5;\r\n                    border-bottom-color: #fff;\r\n                }\r\n            }\r\n\r\n            .tab-more {\r\n                justify-content: flex-end;\r\n            }\r\n\r\n            .group-name {\r\n                max-width: 225px;\r\n                overflow: hidden;\r\n                text-overflow: ellipsis;\r\n                white-space: nowrap;\r\n            }\r\n\r\n            .group-nums {\r\n                display: inline-block;\r\n                height: 16px;\r\n                min-width: 16px;\r\n                padding: 0 4px;\r\n                margin-left: 8px;\r\n                font-size: 12px;\r\n                font-weight: 500;\r\n                line-height: 16px;\r\n                color: #979ba5;\r\n                text-align: center;\r\n                background: #e6e7eb;\r\n                border-radius: 8px;\r\n            }\r\n\r\n            .max-length-info {\r\n                font-size: 16px;\r\n                color: #ea3636;\r\n            }\r\n        }\r\n\r\n        .group-toggle {\r\n            position: relative;\r\n            z-index: 999;\r\n\r\n            &:hover,\r\n            &.active {\r\n                .tab-more {\r\n                    color: #3a84ff;\r\n                }\r\n            }\r\n\r\n            &:hover {\r\n                .toggle-flag {\r\n                    transform: rotateZ(90deg);\r\n                }\r\n\r\n                .dropdown-menu {\r\n                    opacity: 100%;\r\n                    visibility: visible;\r\n                    transform: translateY(0);\r\n                }\r\n            }\r\n\r\n            .tab-more {\r\n                position: relative;\r\n                z-index: 99;\r\n                width: 124px;\r\n            }\r\n\r\n            .dropdown-menu {\r\n                position: absolute;\r\n                top: 50px;\r\n                right: 0;\r\n                width: 280px;\r\n                max-height: 300px;\r\n                padding: 6px 0;\r\n                overflow-y: scroll;\r\n                font-size: 12px;\r\n                background: #fff;\r\n                border: 1px solid #dcdee5;\r\n                opacity: 0%;\r\n                visibility: hidden;\r\n                transform: translateY(-15px);\r\n                transition: all 0.15s;\r\n\r\n                @mixin scroller;\r\n\r\n                &::before {\r\n                    position: absolute;\r\n                    top: -5px;\r\n                    right: 0;\r\n                    width: 124px;\r\n                    height: 8px;\r\n                    content: \"\";\r\n                }\r\n\r\n                .group-nums {\r\n                    margin-left: auto;\r\n                }\r\n            }\r\n\r\n            .dropdowm-item {\r\n                display: flex;\r\n                height: 32px;\r\n                padding: 0 10px;\r\n                cursor: pointer;\r\n                align-items: center;\r\n\r\n                &:hover,\r\n                &.active {\r\n                    color: #3a84ff;\r\n\r\n                    .group-nums {\r\n                        color: #fff;\r\n                        background: #3a84ff;\r\n                    }\r\n                }\r\n\r\n                &:hover {\r\n                    background: #f4f6fa;\r\n                }\r\n\r\n                &.active {\r\n                    background: #eaf3ff;\r\n                }\r\n            }\r\n\r\n            .toggle-flag {\r\n                margin-left: 2px;\r\n                transition: transform 0.15s;\r\n            }\r\n        }\r\n\r\n        .group-holder {\r\n            height: 19px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n            word-break: break-all;\r\n            white-space: nowrap;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"step-execute-host-list\" :style=\"styles\">\r\n        <list-head\r\n            class=\"ip-list-head\"\r\n            :columns=\"columnList\"\r\n            :show-columns=\"allShowColumn\"\r\n            @on-sort=\"handleSort\"\r\n            @on-copy=\"handleCopyIP\"\r\n            @on-show-setting=\"handleShowSetting\" />\r\n        <div ref=\"list\" class=\"ip-list-body\">\r\n            <scroll-faker @on-scroll=\"handleScroll\">\r\n                <list-body\r\n                    :columns=\"columnList\"\r\n                    :show-columns=\"allShowColumn\"\r\n                    :data=\"list\"\r\n                    @on-row-select=\"handleSelect\" />\r\n                <div v-if=\"hasMore\" ref=\"loading\" class=\"list-loading\">\r\n                    <div class=\"loading-flag\">\r\n                        <Icon type=\"loading-circle\" />\r\n                    </div>\r\n                    <div>{{ '加载中' }}</div>\r\n                </div>\r\n                <template v-if=\"list.length < 1 && !listLoading\">\r\n                    <Empty v-if=\"!searchValue\" style=\"height: 100%;\" />\r\n                    <Empty v-else type=\"search\" style=\"height: 100%;\">\r\n                        <div>\r\n                            <div style=\"font-size: 14px; color: #63656e;\">{{ '搜索结果为空' }}</div>\r\n                            <div style=\"margin-top: 8px; font-size: 12px; line-height: 16px; color: #979ba5;\">\r\n                                <span>{{ '可以尝试调整关键词' }}</span>\r\n                                <template>\r\n                                    <span>{{ '或' }}</span>\r\n                                    <bk-button\r\n                                        text\r\n                                        @click=\"handleClearSearch\">\r\n                                        {{ '清空搜索条件' }}\r\n                                    </bk-button>\r\n                                </template>\r\n                            </div>\r\n                        </div>\r\n                    </Empty>\r\n                </template>\r\n            </scroll-faker>\r\n        </div>\r\n        <div\r\n            v-show=\"isSetting\"\r\n            class=\"list-column-select\">\r\n            <div class=\"select-body\">\r\n                <div class=\"title\">{{ '字段显示设置' }}</div>\r\n                <bk-checkbox\r\n                    @click.native=\"handleToggleAll\"\r\n                    :indeterminate=\"isIndeterminate\"\r\n                    :checked=\"isAllColumn\">\r\n                    {{ '全选' }}\r\n                </bk-checkbox>\r\n                <bk-checkbox-group v-model=\"tempAllShowColumn\">\r\n                    <bk-checkbox\r\n                        class=\"select-column\"\r\n                        v-for=\"item in columnList\"\r\n                        :key=\"item.name\"\r\n                        :checked=\"item.checked\"\r\n                        \r\n                        :value=\"item.name\">\r\n                        {{ item.label }}\r\n                    </bk-checkbox>\r\n                </bk-checkbox-group>\r\n            </div>\r\n            <div class=\"select-footer\">\r\n                <bk-button\r\n                    theme=\"primary\"\r\n                    @click=\"handleSubmitSetting\">\r\n                    {{ '确定' }}\r\n                </bk-button>\r\n                <bk-button @click=\"handleHideSetting\">\r\n                    {{ '取消' }}\r\n                </bk-button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n       import {\r\n        getOffset,\r\n    } from '@utils/assist';\r\n    import Empty from '@components/empty';\r\n    import ListHead from './list-head';\r\n    import ListBody from './list-body';\r\n\r\n    const COLUMN_CACHE_KEY = 'STEP_EXECUTE_IP_COLUMN';\r\n    const LIST_ROW_HEIGHT = 40; // 每列高度\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            Empty,\r\n            ListHead,\r\n            ListBody,\r\n        },\r\n        props: {\r\n            name: {\r\n                type: [\r\n                    String,\r\n                    Number,\r\n                ],\r\n                required: true,\r\n            },\r\n            data: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n            listLoading: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n            paginationLoading: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n            total: {\r\n                type: Number,\r\n                default: 0,\r\n            },\r\n            searchValue: String,\r\n        },\r\n        data () {\r\n            let allShowColumn = [\r\n                'displayIp',\r\n                'totalTime',\r\n                'cloudAreaName',\r\n                'exitCode',\r\n            ];\r\n            if (localStorage.getItem(COLUMN_CACHE_KEY)) {\r\n                allShowColumn = JSON.parse(localStorage.getItem(COLUMN_CACHE_KEY));\r\n            }\r\n            return {\r\n                list: [{},{},{}],\r\n                columnList: Object.freeze([\r\n                    {\r\n                        label: 'IP',\r\n                        name: 'displayIp',\r\n                        width: '140',\r\n                        checked: true,\r\n                        disabled: true,\r\n                    },\r\n                    {\r\n                        label: '耗时(s)',\r\n                        name: 'totalTime',\r\n                        orderField: 'totalTime',\r\n                        order: '',\r\n                        width: '120',\r\n                        checked: true,\r\n                    },\r\n                    {\r\n                        label: '云区域',\r\n                        name: 'cloudAreaName',\r\n                        orderField: 'cloudAreaId',\r\n                        order: '',\r\n                        width: '',\r\n                        checked: true,\r\n                    },\r\n                    {\r\n                        label: '返回码',\r\n                        name: 'exitCode',\r\n                        orderField: 'exitCode',\r\n                        order: '',\r\n                        width: '114',\r\n                        checked: true,\r\n                    },\r\n                ]),\r\n                page: 1,\r\n                pageSize: 0,\r\n                isSetting: false,\r\n                allShowColumn,\r\n                tempAllShowColumn: allShowColumn,\r\n            };\r\n        },\r\n        computed: {\r\n            /**\r\n             * @desc 列选择是否半选状态\r\n             * @return {Boolean}\r\n             */\r\n            isIndeterminate () {\r\n                return this.tempAllShowColumn.length !== this.columnList.length;\r\n            },\r\n            /**\r\n             * @desc 列选择是否全选状态\r\n             * @return {Boolean}\r\n             */\r\n            isAllColumn () {\r\n                return this.tempAllShowColumn.length === this.columnList.length;\r\n            },\r\n            /**\r\n             * @desc IP 列表样式判断\r\n             * @return {Object}\r\n             */\r\n            styles () {\r\n                const width = 217 + (this.allShowColumn.length - 1) * 94;\r\n                return {\r\n                    width: `${width}px`,\r\n                };\r\n            },\r\n            /**\r\n             * @desc 列选择是否半选状态\r\n             * @return {Boolean}\r\n             */\r\n            hasMore () {\r\n                return this.page * this.pageSize < this.total;\r\n            },\r\n        },\r\n        \r\n        watch: {\r\n            /**\r\n             * @desc IP 列表名称变化时重置翻页\r\n             */\r\n            name () {\r\n                this.page = 1;\r\n            },\r\n            data: {\r\n                handler (data) {\r\n                    this.list = Object.freeze(data);\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        mounted () {\r\n            this.calcPageSize();\r\n            window.addEventListener('resize', this.handleScroll);\r\n            this.$once('hook:beforeDestroy', () => {\r\n                window.removeEventListener('resize', this.handleScroll);\r\n            });\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 根据屏幕高度计算单页 pageSize\r\n             */\r\n            calcPageSize () {\r\n                const { top } = getOffset(this.$refs.list);\r\n                const windowHeight = window.innerHeight;\r\n                const listHeight = windowHeight - top - 20;\r\n                this.pageSize = parseInt(listHeight / LIST_ROW_HEIGHT + 6, 10);\r\n                this.$emit('on-pagination-change', this.pageSize);\r\n            },\r\n            /**\r\n             * @desc 滚动加载\r\n             */\r\n            handleScroll: _.throttle(function () {\r\n                if (!this.hasMore) {\r\n                    return;\r\n                }\r\n                const windowHeight = window.innerHeight;\r\n                const { top } = this.$refs.loading.getBoundingClientRect();\r\n                \r\n                if (top - 80 < windowHeight) {\r\n                    // 增加分页\r\n                    this.page += 1;\r\n                    this.$emit('on-pagination-change', this.page * this.pageSize);\r\n                }\r\n            }, 80),\r\n            /**\r\n             * @desc 复制ip\r\n             */\r\n            handleCopyIP () {\r\n                this.$emit('on-copy');\r\n            },\r\n            /**\r\n             * @desc 显示列配置面板\r\n             */\r\n            handleShowSetting () {\r\n                this.isSetting = true;\r\n            },\r\n            /**\r\n             * @desc 隐藏列配置面板\r\n             */\r\n            handleHideSetting () {\r\n                this.isSetting = false;\r\n            },\r\n            /**\r\n             * @desc 列配置面板全选状态切换\r\n             */\r\n            handleToggleAll () {\r\n                if (this.isAllColumn) {\r\n                    this.tempAllShowColumn = this.columnList.reduce((result, item) => {\r\n                        if (item.disabled) {\r\n                            result.push(item.name);\r\n                        }\r\n                        return result;\r\n                    }, []);\r\n                } else {\r\n                    this.tempAllShowColumn = this.columnList.map(item => item.name);\r\n                }\r\n            },\r\n            /**\r\n             * @desc 保存列配置\r\n             */\r\n            handleSubmitSetting () {\r\n                this.allShowColumn = [\r\n                    ...this.tempAllShowColumn,\r\n                ];\r\n                this.isSetting = false;\r\n                localStorage.setItem(COLUMN_CACHE_KEY, JSON.stringify(this.allShowColumn));\r\n            },\r\n            /**\r\n             * @desc 表格排序\r\n             * @param {Object} column 操作列数据\r\n             */\r\n            handleSort (column) {\r\n                const {\r\n                    orderField,\r\n                    order,\r\n                } = column;\r\n                const newOrder = order === 1 ? 0 : 1;\r\n                column.order = newOrder;\r\n                \r\n                this.columnList = Object.freeze(this.columnList.map((item) => {\r\n                    item.order = '';\r\n                    if (item.orderField === orderField) {\r\n                        item.order = newOrder;\r\n                    }\r\n                    return { ...item };\r\n                }));\r\n                this.$emit('on-sort', {\r\n                    orderField,\r\n                    order: newOrder,\r\n                });\r\n                this.$emit('on-pagination-change', this.pageSize);\r\n            },\r\n            /**\r\n             * @desc 选择表格一行数据\r\n             * @param {Object} row 选择数据\r\n             */\r\n            handleSelect (row) {\r\n                this.$emit('on-change', row);\r\n            },\r\n            /**\r\n             * @desc 清空搜索\r\n             */\r\n            handleClearSearch () {\r\n                this.$emit('on-clear-search');\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    @keyframes list-loading-ani {\r\n        0% {\r\n            transform: rotateZ(0);\r\n        }\r\n\r\n        100% {\r\n            transform: rotateZ(360deg);\r\n        }\r\n    }\r\n\r\n    .step-execute-host-list {\r\n        position: relative;\r\n        width: 287px;\r\n        height: 100%;\r\n        max-height: 100%;\r\n        min-height: 100%;\r\n        transition: all 0.3s;\r\n\r\n        .ip-list-body {\r\n            height: calc(100% - 41px);\r\n        }\r\n\r\n        .ip-table {\r\n            width: 100%;\r\n\r\n            th,\r\n            td {\r\n                height: 40px;\r\n                padding-left: 26px;\r\n                line-height: 40px;\r\n                text-align: left;\r\n                white-space: nowrap;\r\n                border-bottom: 1px solid #dcdee5;\r\n            }\r\n\r\n            th {\r\n                position: relative;\r\n                font-weight: normal;\r\n                color: #313238;\r\n\r\n                &.sort {\r\n                    cursor: pointer;\r\n                }\r\n\r\n                .sort-box {\r\n                    position: absolute;\r\n                    top: 0;\r\n                    display: inline-flex;\r\n                    height: 100%;\r\n                    margin-left: 9px;\r\n                    font-size: 6px;\r\n                    color: #c4c6cc;\r\n                    justify-content: center;\r\n                    flex-direction: column;\r\n\r\n                    .top,\r\n                    .bottom {\r\n                        width: 0;\r\n                        height: 0;\r\n                        margin: 1px 0;\r\n                        border: 5px solid transparent;\r\n\r\n                        &.active {\r\n                            color: #3a84ff;\r\n                        }\r\n                    }\r\n\r\n                    .top {\r\n                        border-bottom-color: currentcolor;\r\n                    }\r\n\r\n                    .bottom {\r\n                        border-top-color: currentcolor;\r\n                    }\r\n                }\r\n            }\r\n\r\n            td {\r\n                color: #63656e;\r\n                cursor: pointer;\r\n            }\r\n\r\n            tbody {\r\n                tr {\r\n                    &.active {\r\n                        background: #f0f1f5;\r\n\r\n                        .active-flag {\r\n                            font-size: 14px;\r\n                        }\r\n                    }\r\n\r\n                    .active-flag {\r\n                        padding: 0;\r\n                        font-size: 0;\r\n                        color: #979ba5;\r\n                        text-align: center;\r\n                    }\r\n                }\r\n            }\r\n\r\n            .copy-ip-btn {\r\n                margin-left: 8px;\r\n                font-size: 12px;\r\n                font-weight: normal;\r\n                color: #3a84ff;\r\n                cursor: pointer;\r\n            }\r\n\r\n            .list-action {\r\n                width: 40px;\r\n                height: 40px;\r\n                padding: 0;\r\n                font-size: 14px;\r\n                color: #979ba5;\r\n                text-align: center;\r\n                cursor: pointer;\r\n                border-left: 1px solid #dcdee5;\r\n            }\r\n\r\n            .success,\r\n            .fail,\r\n            .running,\r\n            .waiting {\r\n                &::before {\r\n                    display: inline-block;\r\n                    width: 3px;\r\n                    height: 12px;\r\n                    margin-right: 1em;\r\n                    margin-left: -3px;\r\n                    background: #2dc89d;\r\n                    content: \"\";\r\n                }\r\n            }\r\n\r\n            .fail {\r\n                &::before {\r\n                    background: #ea3636;\r\n                }\r\n            }\r\n\r\n            .running {\r\n                &::before {\r\n                    background: #699df4;\r\n                }\r\n            }\r\n\r\n            .waiting {\r\n                &::before {\r\n                    background: #dcdee5;\r\n                }\r\n            }\r\n        }\r\n\r\n        .list-loading {\r\n            display: flex;\r\n            height: 40px;\r\n            font-size: 12px;\r\n            color: #979ba5;\r\n            text-align: center;\r\n            align-items: center;\r\n            justify-content: center;\r\n\r\n            .loading-flag {\r\n                display: flex;\r\n                width: 20px;\r\n                height: 20px;\r\n                animation: list-loading-ani 1s linear infinite;\r\n                align-items: center;\r\n                justify-content: center;\r\n                transform-origin: center center;\r\n            }\r\n        }\r\n\r\n        .list-column-select {\r\n            position: absolute;\r\n            top: 45px;\r\n            left: 0;\r\n            z-index: 1;\r\n            width: 100%;\r\n            background: #fff;\r\n            box-shadow: 1px 1px 5px 0 #dcdee5;\r\n        }\r\n\r\n        .select-body {\r\n            padding: 15px 22px 30px;\r\n\r\n            .title {\r\n                margin-bottom: 22px;\r\n                font-size: 16px;\r\n                color: #313238;\r\n            }\r\n        }\r\n\r\n        .select-column {\r\n            margin-top: 20px;\r\n            margin-right: 36px;\r\n\r\n            &:last-child {\r\n                margin-right: 0;\r\n            }\r\n        }\r\n\r\n        .select-footer {\r\n            display: flex;\r\n            height: 50px;\r\n            background: #fafbfd;\r\n            border-top: 1px solid #dbdde4;\r\n            align-items: center;\r\n            justify-content: center;\r\n\r\n            .bk-button {\r\n                margin: 0 5px;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div\r\n        class=\"step-execute-script-log\"\r\n        v-bkloading=\"{\r\n            isLoading, opacity: .1,\r\n        }\">\r\n        <div class=\"log-wraper\">\r\n            <div v-once id=\"executeScriptLog\" style=\"height: 100%;\" />\r\n        </div>\r\n        <div class=\"log-status\" v-if=\"ip && isRunning\">\r\n            <div class=\"log-loading\">{{ '执行中' }}</div>\r\n        </div>\r\n        <div class=\"log-action-box\">\r\n            <div class=\"action-item\" v-bk-tooltips=\"backTopTips\" @click=\"handleScrollTop\">\r\n                <Icon type=\"up-to-top\" />\r\n            </div>\r\n            <div class=\"action-item action-bottom\" v-bk-tooltips=\"backBottomTips\" @click=\"handleScrollBottom\">\r\n                <Icon type=\"up-to-top\" />\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n    import ace from 'ace/ace';\r\n    import 'ace/mode-text';\r\n    import 'ace/theme-monokai';\r\n    import 'ace/ext-searchbox';\r\n       import TaskExecuteService from '@service/task-execute';\r\n    import mixins from '../../mixins';\r\n\r\n    export default {\r\n        mixins: [\r\n            mixins,\r\n        ],\r\n        props: {\r\n            name: String,\r\n            stepInstanceId: {\r\n                type: Number,\r\n                required: true,\r\n            },\r\n            ip: {\r\n                type: String,\r\n            },\r\n            retryCount: {\r\n                type: Number,\r\n                required: true,\r\n            },\r\n            logFilter: {\r\n                type: String,\r\n                default: '',\r\n            },\r\n            fontSize: {\r\n                type: Number,\r\n                default: 12,\r\n            },\r\n            lineFeed: {\r\n                type: Boolean,\r\n                default: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                // 日志loading，切换主机的时候才显示\r\n                isLoading: true,\r\n                // 是否执行中\r\n                isRunning: false,\r\n                // 自动动滚动到底部\r\n                isWillAutoScroll: true,\r\n            };\r\n        },\r\n        watch: {\r\n            /**\r\n             * @desc 查看的日志目标改变，重新获取日志\r\n             *\r\n             * 日志目标改变，重置页面操作的数据\r\n             */\r\n            name: {\r\n                handler () {\r\n                    // 日志自动滚动\r\n                    this.isLoading = true;\r\n                    this.autoScrollTimeout();\r\n                    this.fetchLogContent();\r\n                },\r\n                immediate: true,\r\n            },\r\n            /**\r\n             * @desc 字体大小改变时虚拟滚动重新计算\r\n             */\r\n            fontSize: {\r\n                handler (fontSize) {\r\n                    this.editor.setFontSize(fontSize);\r\n                },\r\n            },\r\n            lineFeed: {\r\n                handler (lineFeed) {\r\n                    setTimeout(() => {\r\n                        this.editor && this.editor.setOptions({\r\n                            wrap: lineFeed ? 'free' : 'none',\r\n                        });\r\n                    });\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        created () {\r\n            this.backTopTips = {\r\n                content: '回到顶部',\r\n                placements: [\r\n                    'top',\r\n                ],\r\n                theme: 'light',\r\n            };\r\n            this.backBottomTips = {\r\n                content: '前往底部',\r\n                placements: [\r\n                    'top',\r\n                ],\r\n                theme: 'light',\r\n            };\r\n        },\r\n        mounted () {\r\n            this.initEditor();\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 获取脚本日志\r\n             */\r\n            fetchLogContent () {\r\n                if (!this.ip) {\r\n                    this.isLoading = false;\r\n                    if (this.editor) {\r\n                        this.editor.setValue('');\r\n                        this.editor.clearSelection();\r\n                    }\r\n                    return;\r\n                }\r\n                TaskExecuteService.fetchLogContentOfIp({\r\n                    stepInstanceId: this.stepInstanceId,\r\n                    retryCount: this.retryCount,\r\n                    ip: this.ip,\r\n                })\r\n                    .then(({\r\n                        finished,\r\n                        logContent,\r\n                    }) => {\r\n                        this.isRunning = !finished;\r\n                        this.$nextTick(() => {\r\n                            this.editor.setValue(_.trim(logContent || '', '\\n'));\r\n                            this.editor.clearSelection();\r\n                        });\r\n                        // 当前主机执行结束\r\n                        if (!finished) {\r\n                            this.$pollingQueueRun(this.fetchLogContent);\r\n                        }\r\n                    })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            initEditor () {\r\n                const editor = ace.edit('executeScriptLog');\r\n                editor.getSession().setMode('ace/mode/text');\r\n                editor.setTheme('ace/theme/monokai');\r\n                editor.setOptions({\r\n                    fontSize: this.fontSize,\r\n                    wrapBehavioursEnabled: true,\r\n                    copyWithEmptySelection: true,\r\n                    useElasticTabstops: true,\r\n                    printMarginColumn: false,\r\n                    printMargin: 80,\r\n                    showPrintMargin: false,\r\n                    scrollPastEnd: 0.05,\r\n                    fixedWidthGutter: true,\r\n                });\r\n                editor.$blockScrolling = Infinity;\r\n                editor.setReadOnly(true);\r\n                const editorSession = editor.getSession();\r\n                // 自动换行时不添加缩进\r\n                editorSession.$indentedSoftWrap = false;\r\n                editorSession.on('changeScrollTop', (scrollTop) => {\r\n                    const {\r\n                        height,\r\n                        maxHeight,\r\n                    } = editor.renderer.layerConfig;\r\n                    this.isWillAutoScroll = height + scrollTop + 30 >= maxHeight;\r\n                });\r\n                this.editor = editor;\r\n                this.$once('hook:beforeDestroy', () => {\r\n                    editor.destroy();\r\n                    editor.container.remove();\r\n                });\r\n            },\r\n            /**\r\n             * @desc 外部调用\r\n             */\r\n            resize () {\r\n                this.$nextTick(() => {\r\n                    this.editor.resize();\r\n                });\r\n            },\r\n            /**\r\n             * @desc 日志滚动定时器\r\n             */\r\n            autoScrollTimeout () {\r\n                if (this.isWillAutoScroll && !this.isLoading) {\r\n                    this.handleScrollBottom();\r\n                }\r\n                setTimeout(() => {\r\n                    this.autoScrollTimer = this.autoScrollTimeout();\r\n                }, 1000);\r\n            },\r\n            /**\r\n             * @desc 回到日志顶部\r\n             */\r\n            handleScrollTop () {\r\n                this.editor.scrollToLine(0);\r\n            },\r\n            /**\r\n             * @desc 回到日志底部\r\n             */\r\n            handleScrollBottom () {\r\n                this.isWillAutoScroll = true;\r\n                this.editor.scrollToLine(Infinity);\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    @keyframes script-execute-loading {\r\n        0% {\r\n            content: \".\";\r\n        }\r\n\r\n        30% {\r\n            content: \"..\";\r\n        }\r\n\r\n        60% {\r\n            content: \"...\";\r\n        }\r\n    }\r\n\r\n    .step-execute-script-log {\r\n        position: relative;\r\n        height: 100%;\r\n        max-height: 100%;\r\n        min-height: 100%;\r\n\r\n        .log-wraper {\r\n            position: absolute;\r\n            top: 0;\r\n            bottom: 20px;\r\n            left: 0;\r\n            width: 100%;\r\n            padding-right: 20px;\r\n            /* stylelint-disable selector-class-pattern */\r\n            .ace_editor {\r\n                overflow: unset;\r\n                line-height: 1.6;\r\n                color: #c4c6cc;\r\n                background: #1d1d1d;\r\n\r\n                .ace_gutter {\r\n                    padding-top: 4px;\r\n                    margin-bottom: -4px;\r\n                    color: #63656e;\r\n                    background: #292929;\r\n                }\r\n\r\n                .ace_scroller {\r\n                    padding-top: 4px;\r\n                    margin-bottom: -4px;\r\n                }\r\n\r\n                .ace_hidden-cursors .ace_cursor {\r\n                    opacity: 0% !important;\r\n                }\r\n\r\n                .ace_selected-word {\r\n                    background: rgb(135 139 145 / 25%);\r\n                }\r\n\r\n                .ace_scrollbar-v,\r\n                .ace_scrollbar-h {\r\n                    &::-webkit-scrollbar-thumb {\r\n                        background-color: #3b3c42;\r\n                        border: 1px solid #63656e;\r\n                    }\r\n\r\n                    &::-webkit-scrollbar-corner {\r\n                        background-color: transparent;\r\n                    }\r\n                }\r\n\r\n                .ace_scrollbar-v {\r\n                    margin-right: -20px;\r\n\r\n                    &::-webkit-scrollbar {\r\n                        width: 14px;\r\n                    }\r\n                }\r\n\r\n                .ace_scrollbar-h {\r\n                    margin-bottom: -20px;\r\n\r\n                    &::-webkit-scrollbar {\r\n                        height: 14px;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        .log-status {\r\n            position: absolute;\r\n            bottom: 0;\r\n            left: 0;\r\n            padding-left: 20px;\r\n            color: #fff;\r\n        }\r\n\r\n        .log-loading {\r\n            &::after {\r\n                display: inline-block;\r\n                content: \".\";\r\n                animation: script-execute-loading 2s linear infinite;\r\n            }\r\n        }\r\n\r\n        .keyword {\r\n            color: #212124;\r\n            background: #f0dc73;\r\n        }\r\n\r\n        .log-action-box {\r\n            position: absolute;\r\n            right: 20px;\r\n            bottom: 20px;\r\n            z-index: 10;\r\n            display: flex;\r\n\r\n            .action-item {\r\n                position: relative;\r\n                display: flex;\r\n                width: 32px;\r\n                height: 32px;\r\n                margin-left: 12px;\r\n                font-size: 18px;\r\n                color: #000;\r\n                cursor: pointer;\r\n                background: rgb(255 255 255 / 80%);\r\n                border-radius: 50%;\r\n                align-items: center;\r\n                justify-content: center;\r\n\r\n                &:hover {\r\n                    background: rgb(255 255 255);\r\n                }\r\n\r\n                &.action-bottom {\r\n                    transform: rotateZ(180deg);\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<script>\r\n    const statusMap = {\r\n        1: 'waiting',\r\n        2: 'uploading',\r\n        3: 'downloading',\r\n        4: 'finished',\r\n        5: 'failed',\r\n    };\r\n\r\n    export default {\r\n        functional: true,\r\n        render (h, context) {\r\n            const { props, listeners, parent } = context;\r\n            const {\r\n                data,\r\n                openMemo,\r\n                renderContentMap,\r\n                isContentLoading,\r\n            } = props;\r\n            const isContentOpen = Boolean(openMemo[data.taskId]);\r\n\r\n            const classes = {\r\n                'step-detail-file-log-block': true,\r\n                [statusMap[data.status]]: true,\r\n                toggle: isContentOpen,\r\n            };\r\n            // 异步获取日志的loading状态\r\n            const logContent = renderContentMap[data.taskId] || data.logContent;\r\n            if (isContentLoading && !logContent) {\r\n                classes['content-loading'] = true;\r\n            }\r\n            const renderProgress = () => {\r\n                const wholeProgress = '*******************************************************************************************';\r\n                const process = parseInt(data.progress, 10) / 100;\r\n                return wholeProgress.slice(0, Math.floor(process * wholeProgress.length) || 1);\r\n            };\r\n            const handleToggle = () => {\r\n                listeners['on-toggle'](data.taskId, !isContentOpen);\r\n            };\r\n            return (\r\n            <div class={classes}>\r\n                <div class=\"log-header\" onClick={handleToggle}>\r\n                    <i class=\"job-icon job-icon-down-small log-toggle\" />\r\n                    <span>{'文件名' }：{ data.fileName }</span>\r\n                    <span>{'文件大小' }：{ data.fileSize }</span>\r\n                    <span>{'状态'}：<span class=\"status\">{ data.statusDesc }</span></span>\r\n                    <span>{'源服务器 IP' }：{ data.srcIp }</span>\r\n                    <span>{'速率' }：{ data.speed }</span>\r\n                    <span>{'进度' }：{ data.progress }</span>\r\n                </div>\r\n                {\r\n                    isContentOpen && (\r\n                        <div class=\"log-body\">\r\n                            <div class=\"log-content\">{ logContent }</div>\r\n                            <div class=\"log-process\">{ renderProgress() }</div>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n            );\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    @keyframes file-loading-ani {\r\n        0% {\r\n            content: \"*\";\r\n        }\r\n\r\n        30% {\r\n            content: \"**\";\r\n        }\r\n\r\n        60% {\r\n            content: \"***\";\r\n        }\r\n    }\r\n\r\n    .step-detail-file-log-block {\r\n        padding-left: 48px;\r\n        margin-top: 10px;\r\n        font-size: 13px;\r\n        line-height: 18px;\r\n        color: #dcdee5;\r\n\r\n        &.toggle {\r\n            .log-body {\r\n                display: block;\r\n            }\r\n\r\n            .log-toggle {\r\n                transform: rotateZ(0);\r\n            }\r\n        }\r\n\r\n        &.waiting,\r\n        &.uploading,\r\n        &.downloading &.content-loading {\r\n            .log-process {\r\n                &::after {\r\n                    display: inline-block;\r\n                    content: \"*\";\r\n                    animation: file-loading-ani 2s linear infinite;\r\n                }\r\n            }\r\n        }\r\n\r\n        &.waiting {\r\n            .status {\r\n                color: #dcdee5;\r\n            }\r\n        }\r\n\r\n        &.uploading,\r\n        &.downloading {\r\n            .status {\r\n                color: #3a84ff;\r\n            }\r\n        }\r\n\r\n        &.failed {\r\n            .status {\r\n                color: #ea3636;\r\n            }\r\n        }\r\n\r\n        &.finished {\r\n            .status {\r\n                color: #3fc06d;\r\n            }\r\n        }\r\n\r\n        .log-header {\r\n            position: relative;\r\n            line-height: 24px;\r\n            white-space: nowrap;\r\n            cursor: pointer;\r\n\r\n            & > * {\r\n                margin-right: 40px;\r\n            }\r\n        }\r\n\r\n        .log-toggle {\r\n            position: absolute;\r\n            top: 0;\r\n            left: -34px;\r\n            font-size: 24px;\r\n            transform: rotateZ(-90deg);\r\n            transition: transform 0.15s;\r\n        }\r\n\r\n        .log-body {\r\n            display: none;\r\n        }\r\n\r\n        .log-content {\r\n            margin-top: 2px;\r\n            line-height: 22px;\r\n            color: #979ba5;\r\n            white-space: pre;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div\r\n        ref=\"contentBox\"\r\n        class=\"file-download-log\"\r\n        @scroll=\"handleScroll\"\r\n        v-bkloading=\"{ isLoading, opacity: .1 }\">\r\n        <div>\r\n            <file-item\r\n                v-for=\"(item, index) in renderList\"\r\n                :key=\"index\"\r\n                :index=\"index\"\r\n                :open-memo=\"openMemo\"\r\n                :data=\"item\"\r\n                :render-content-map=\"renderContentMap\"\r\n                :is-content-loading=\"isAsyncContentLoading\"\r\n                @on-toggle=\"handleToggle\" />\r\n        </div>\r\n        <div v-if=\"renderNums < contentList.length\" ref=\"load\" class=\"load-more\">\r\n            <div class=\"loading-flag\">\r\n                <Icon type=\"loading-circle\" />\r\n            </div>\r\n            <div>{{ '加载中' }}</div>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n    import TaskExecuteService from '@service/task-execute';\r\n    import {\r\n        getOffset,\r\n    } from '@utils/assist';\r\n    import mixins from '../../mixins';\r\n    import FileItem from './log-item';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            FileItem,\r\n        },\r\n        mixins: [\r\n            mixins,\r\n        ],\r\n        props: {\r\n            name: String,\r\n            stepInstanceId: {\r\n                type: Number,\r\n                required: true,\r\n            },\r\n            ip: {\r\n                type: String,\r\n            },\r\n            retryCount: {\r\n                type: Number,\r\n                required: true,\r\n            },\r\n            mode: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                // 基础信息loading\r\n                isLoading: true,\r\n                // 异步获取日志内容loading\r\n                isAsyncContentLoading: false,\r\n                // 文件基础信息列表\r\n                contentList: [{},{},{}],\r\n                // 一屏显示最小日志行数\r\n                onePageNums: 0,\r\n                // 前端分页页码\r\n                page: 0,\r\n                pageSize: 10,\r\n                // 被展开的日志记录\r\n                openMemo: {},\r\n                // 被展开的文件具体日志内容\r\n                renderContentMap: {},\r\n            };\r\n        },\r\n        computed: {\r\n            renderNums () {\r\n                return this.onePageNums + this.pageSize * this.page;\r\n            },\r\n            renderList () {\r\n                return this.contentList.slice(0, this.renderNums);\r\n            },\r\n        },\r\n        watch: {\r\n            /**\r\n             * @desc 查看的日志目标改变，重新获取日志\r\n             */\r\n            name: {\r\n                handler () {\r\n                    this.isLoading = true;\r\n                    this.isMemoChange = false;\r\n                    this.page = 0;\r\n\r\n                    this.fetchData();\r\n                    if (this.$refs.contentBox) {\r\n                        this.$refs.contentBox.scrollTop = 0;\r\n                    }\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        created () {\r\n            // 缓存是否有展开日志的操作\r\n            this.isMemoChange = false;\r\n            // 前端分页加载器，控制触发频率\r\n            this.timer = null;\r\n            // 日志列表中是否包含日志内容标记，如果不包含需要异步获取日志内容\r\n            this.includingLogContent = '';\r\n        },\r\n        mounted () {\r\n            this.calcFirstPageNums();\r\n            window.addEventListener('resize', this.handleScroll);\r\n            this.$once('hook:beforeDestroy', () => {\r\n                window.removeEventListener('resize', this.handleScroll);\r\n            });\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 获取文件日志\r\n             *\r\n             * 默认展开第一个文件的日志\r\n             * 如果文件信息里面不包含日志内容，需要异步获取文件内容\r\n             */\r\n            fetchData () {\r\n                if (!this.ip) {\r\n                    this.isLoading = false;\r\n                    this.contentList = [];\r\n                    return;\r\n                }\r\n                TaskExecuteService.fetchFileLogOfIp({\r\n                    stepInstanceId: this.stepInstanceId,\r\n                    retryCount: this.retryCount,\r\n                    ip: this.ip,\r\n                    mode: this.mode,\r\n                }).then((data) => {\r\n                    const {\r\n                        fileDistributionDetails,\r\n                        includingLogContent,\r\n                        finished,\r\n                    } = data;\r\n                    this.contentList = Object.freeze(fileDistributionDetails);\r\n                    this.includingLogContent = includingLogContent;\r\n                    // 初始展开第一个\r\n                    if (this.contentList.length > 0 && !this.isMemoChange) {\r\n                        this.openMemo = {\r\n                            [this.contentList[0].taskId]: true,\r\n                        };\r\n                        this.isMemoChange = true;\r\n                    }\r\n                    // 日志量大异步获取展开的文件\r\n                    this.fetchFileLogOfFile();\r\n                    // 主机还在执行轮询日志\r\n                    if (!finished) {\r\n                        this.$pollingQueueRun(this.fetchData);\r\n                    }\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 异步获取文件内容\r\n             *\r\n             * 如果日志列表中包含日志内容则不用重复获取\r\n             */\r\n            fetchFileLogOfFile: _.throttle(function () {\r\n                if (this.includingLogContent) {\r\n                    return;\r\n                }\r\n                this.isAsyncContentLoading = true;\r\n                TaskExecuteService.fetchFileLogOfFile({\r\n                    stepInstanceId: this.stepInstanceId,\r\n                    retryCount: this.retryCount,\r\n                    taskIds: Object.keys(this.openMemo),\r\n                }).then((data) => {\r\n                    this.renderContentMap = Object.freeze(data.reduce((result, item) => {\r\n                        result[item.taskId] = item.logContent;\r\n                        return result;\r\n                    }, {}));\r\n                })\r\n                    .finally(() => {\r\n                        this.isAsyncContentLoading = false;\r\n                    });\r\n            }, 500),\r\n            /**\r\n             * @desc 外部调用\r\n             */\r\n            resize () {\r\n                this.handleScroll();\r\n            },\r\n            /**\r\n             * @desc 计算首屏需要渲染的文件数\r\n             */\r\n            calcFirstPageNums () {\r\n                const windowHeight = window.innerHeight;\r\n                const { top } = getOffset(this.$refs.contentBox);\r\n                this.onePageNums = Math.ceil((windowHeight - top) / 34) + 3;\r\n            },\r\n            /**\r\n             * @desc 滚动分页加载\r\n             */\r\n            handleScroll: _.throttle(function () {\r\n                if (!this.$refs.load) {\r\n                    return;\r\n                }\r\n                const windowHeight = window.innerHeight;\r\n                const { top } = this.$refs.load.getBoundingClientRect();\r\n                if (windowHeight + 50 > top && !this.timer) {\r\n                    // 本地日志加载器\r\n                    this.timer = setTimeout(() => {\r\n                        this.page += 1;\r\n                        this.timer = 0;\r\n                    }, 350);\r\n                }\r\n            }, 80),\r\n            /**\r\n             * @desc 文件日志展开收起\r\n             *\r\n             * 展开时需要重新获取一次日志\r\n             */\r\n            handleToggle (taskId, toggle) {\r\n                const openMemo = { ...this.openMemo };\r\n                openMemo[taskId] = toggle;\r\n                this.openMemo = Object.freeze(openMemo);\r\n                if (toggle) {\r\n                    this.fetchFileLogOfFile();\r\n                }\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    @keyframes file-log-loading-ani {\r\n        0% {\r\n            transform: rotateZ(0);\r\n        }\r\n\r\n        100% {\r\n            transform: rotateZ(360deg);\r\n        }\r\n    }\r\n\r\n    .file-download-log {\r\n        height: 100%;\r\n        padding-top: 10px;\r\n        overflow-y: scroll;\r\n\r\n        &::-webkit-scrollbar {\r\n            width: 14px;\r\n        }\r\n\r\n        &::-webkit-scrollbar-thumb {\r\n            background-color: #3b3c42;\r\n            border: 1px solid #63656e;\r\n        }\r\n\r\n        &::-webkit-scrollbar-corner {\r\n            background-color: transparent;\r\n        }\r\n\r\n        .load-more {\r\n            display: flex;\r\n            align-items: center;\r\n            height: 20px;\r\n            padding-top: 20px;\r\n            padding-bottom: 24px;\r\n            padding-left: 44px;\r\n            color: #fff;\r\n\r\n            .loading-flag {\r\n                display: flex;\r\n                align-items: center;\r\n                justify-content: center;\r\n                width: 20px;\r\n                height: 20px;\r\n                transform-origin: center center;\r\n                animation: file-log-loading-ani 1s linear infinite;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div\r\n        class=\"step-execute-variable-view\"\r\n        v-bkloading=\"{ isLoading: isLoading, opacity: .1 }\">\r\n        <scroll-faker theme=\"dark\">\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <td style=\"width: 90px;\">{{ '变量名称' }}</td>\r\n                        <td style=\"width: 90px;\">{{ '变量类型' }}</td>\r\n                        <td>{{ '变量值' }}</td>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr v-for=\"(item, index) in variableList\" :key=\"index\">\r\n                        <td>{{ item.name }}</td>\r\n                        <td>{{ item.typeText }}</td>\r\n                        <td class=\"variable-value\">{{ item.value }}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </scroll-faker>\r\n    </div>\r\n</template>\r\n<script>\r\n    import TaskExecuteService from '@service/task-execute';\r\n    \r\n    export default {\r\n        name: '',\r\n        inheritAttrs: false,\r\n        props: {\r\n            name: String,\r\n            stepInstanceId: {\r\n                type: Number,\r\n                required: true,\r\n            },\r\n            ip: {\r\n                type: String,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: true,\r\n                variableList: [{},{},{}],\r\n            };\r\n        },\r\n        watch: {\r\n            name: {\r\n                handler () {\r\n                    this.isLoading = true;\r\n                    this.fetchStepVariables();\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        methods: {\r\n            // 步骤使用的变量\r\n            fetchStepVariables () {\r\n                if (!this.ip) {\r\n                    this.isLoading = false;\r\n                    return;\r\n                }\r\n                TaskExecuteService.fetchStepVariables({\r\n                    id: this.stepInstanceId,\r\n                    ip: this.ip,\r\n                }).then((data) => {\r\n                    this.variableList = Object.freeze(data);\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .step-execute-variable-view {\r\n        height: 100%;\r\n        padding: 0 20px;\r\n        font-family: Monaco, Menlo, \"Ubuntu Mono\", Consolas, source-code-pro, monospace;\r\n        color: #c4c6cc;\r\n        white-space: pre-line;\r\n\r\n        table {\r\n            width: 100%;\r\n        }\r\n\r\n        th,\r\n        td {\r\n            height: 40px;\r\n            padding-right: 10px;\r\n            border-bottom: 1px solid #3b3c42;\r\n        }\r\n\r\n        th {\r\n            color: #ccc;\r\n        }\r\n\r\n        td {\r\n            color: #979ba5;\r\n\r\n            &:first-child {\r\n                white-space: pre;\r\n            }\r\n\r\n            &.variable-value {\r\n                word-break: break-word;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div ref=\"infoBox\" class=\"step-execution-info-box\" :style=\"boxStyles\">\r\n        <div class=\"tab-container\">\r\n            <div class=\"tab-title\" :class=\"host.result\">\r\n                <span class=\"host-ip\">{{ host.displayIp || '--' }}</span>\r\n            </div>\r\n            <div class=\"split-line\" />\r\n            <div\r\n                v-if=\"!isFile\"\r\n                class=\"tab-item\"\r\n                :class=\"{ active: activePanel === 'scriptLog' }\"\r\n                @click=\"handleTogglePanel('scriptLog')\">\r\n                {{ '执行日志' }}\r\n            </div>\r\n            <template v-if=\"isFile\">\r\n                <div\r\n                    class=\"tab-item\"\r\n                    :class=\"{ active: activePanel === 'download' }\"\r\n                    @click=\"handleTogglePanel('download')\">\r\n                    {{ '下载信息' }}\r\n                </div>\r\n                <div\r\n                    class=\"tab-item\"\r\n                    :class=\"{ active: activePanel === 'upload' }\"\r\n                    @click=\"handleTogglePanel('upload')\">\r\n                    {{ '上传源信息' }}\r\n                </div>\r\n            </template>\r\n            <div\r\n                v-if=\"isTask && !isFile\"\r\n                class=\"tab-item\"\r\n                :class=\"{ active: activePanel === 'variable' }\"\r\n                @click=\"handleTogglePanel('variable')\">\r\n                {{ '变量明细' }}\r\n            </div>\r\n            <div class=\"extend-box\">\r\n                <div\r\n                    v-if=\"activePanel === 'scriptLog'\"\r\n                    class=\"extend-item\"\r\n                    v-bk-tooltips=\"'下载日志'\"\r\n                    @click=\"handleDownload\">\r\n                    <Icon type=\"download\" />\r\n                </div>\r\n                <div\r\n                    v-if=\"activePanel === 'scriptLog'\"\r\n                    class=\"extend-item\"\r\n                    @mouseenter=\"handleShowSetFont\"\r\n                    @mouseleave=\"handleHideSetFont\">Aa</div>\r\n                <div\r\n                    v-if=\"!isFullscreen\"\r\n                    class=\"extend-item\"\r\n                    v-bk-tooltips=\"'全屏'\"\r\n                    @click=\"handleFullscreen\">\r\n                    <Icon type=\"full-screen\" />\r\n                </div>\r\n                <div\r\n                    v-if=\"isFullscreen\"\r\n                    class=\"extend-item\"\r\n                    v-bk-tooltips=\"'还原'\"\r\n                    @click=\"handleExitFullscreen\">\r\n                    <Icon type=\"un-full-screen\" />\r\n                </div>\r\n                <div\r\n                    v-if=\"activePanel === 'scriptLog'\"\r\n                    class=\"extend-item\"\r\n                    style=\"padding-left: 16px; border-left: 1px solid #262626;\">\r\n                    <bk-switcher\r\n                        :value=\"isScriptLogLineFeed\"\r\n                        theme=\"primary\"\r\n                        size=\"small\"\r\n                        @change=\"handleScriptLogLineFeedChange\" />\r\n                    <span style=\"padding-left: 7px; font-size: 12px; color: #979ba5;\">{{ '自动换行' }}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"tab-content-wraper\" :style=\"contentStyles\">\r\n            <component\r\n                ref=\"view\"\r\n                :key=\"activePanel\"\r\n                :is=\"renderCom\"\r\n                :name=\"`${stepInstanceId}_${host.ip}_${retryCount}`\"\r\n                :step-instance-id=\"stepInstanceId\"\r\n                :ip=\"host.ip\"\r\n                :retry-count=\"retryCount\"\r\n                :font-size=\"fontSize\"\r\n                :mode=\"activePanel\"\r\n                :line-feed=\"isScriptLogLineFeed\"\r\n                v-bind=\"$attrs\"\r\n                v-on=\"$listeners\" />\r\n        </div>\r\n        <div\r\n            class=\"font-setting\"\r\n            :class=\"{ active: isFontSet }\"\r\n            @mouseenter=\"handleShowSetFont\"\r\n            @mouseleave=\"handleHideSetFont\">\r\n            <div class=\"font-setting-wraper\">\r\n                <div\r\n                    class=\"font-item\"\r\n                    :class=\"{ active: fontSize === 12 }\"\r\n                    style=\"font-size: 12px;\"\r\n                    @click=\"handleFontChange(12)\">Aa</div>\r\n                <div class=\"line\" />\r\n                <div\r\n                    class=\"font-item\"\r\n                    :class=\"{ active: fontSize === 13 }\"\r\n                    style=\"font-size: 13px;\"\r\n                    @click=\"handleFontChange(13)\">Aa</div>\r\n                <div class=\"line\" />\r\n                <div\r\n                    class=\"font-item\"\r\n                    :class=\"{ active: fontSize === 14 }\"\r\n                    style=\"font-size: 14px;\"\r\n                    @click=\"handleFontChange(14)\">Aa</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n       import TaskExecuteService from '@service/task-execute';\r\n    import ScriptLog from './script-log';\r\n    import FileLog from './file-log';\r\n    import VariableView from './variable-view';\r\n\r\n    const STEP_FONT_SIZE_KEY = 'step_execution_font_size';\r\n    const SCRIPT_LOG_AUTO_LINE_FEED = 'script_log_line_feed';\r\n\r\n    export default {\r\n        name: '',\r\n        inheritAttrs: false,\r\n        props: {\r\n            name: String,\r\n            host: {\r\n                type: Object,\r\n                required: true,\r\n            },\r\n            stepInstanceId: {\r\n                type: Number,\r\n            },\r\n            retryCount: {\r\n                type: Number,\r\n                required: true,\r\n            },\r\n            isTask: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n            isFile: {\r\n                type: Boolean,\r\n                default: false, // 展示文件日志\r\n            },\r\n        },\r\n        data () {\r\n            let fontSize = parseInt(localStorage.getItem(STEP_FONT_SIZE_KEY), 10);\r\n            if (!fontSize || fontSize < 12) {\r\n                fontSize = 12;\r\n            } else if (fontSize > 14) {\r\n                fontSize = 14;\r\n            }\r\n\r\n            return {\r\n                activePanel: '',\r\n                isFullscreen: false,\r\n                isFontSet: false,\r\n                fontSize,\r\n                isScriptLogLineFeed: Boolean(localStorage.getItem(SCRIPT_LOG_AUTO_LINE_FEED)),\r\n            };\r\n        },\r\n        computed: {\r\n            renderCom () {\r\n                const comMap = {\r\n                    scriptLog: ScriptLog,\r\n                    download: FileLog,\r\n                    upload: FileLog,\r\n                    variable: VariableView,\r\n                };\r\n                return comMap[this.activePanel];\r\n            },\r\n            boxStyles () {\r\n                if (this.isFullscreen) {\r\n                    return {\r\n                        position: 'fixed',\r\n                        top: 0,\r\n                        right: 0,\r\n                        bottom: 0,\r\n                        left: 0,\r\n                        zIndex: window.__bk_zIndex_manager.nextZIndex(), // eslint-disable-line no-underscore-dangle\r\n                    };\r\n                }\r\n                return {};\r\n            },\r\n            contentStyles () {\r\n                const lineHeightMap = {\r\n                    12: 20,\r\n                    13: 21,\r\n                    14: 22,\r\n                };\r\n                return {\r\n                    fontSize: `${this.fontSize}px`,\r\n                    lineHeight: `${lineHeightMap[this.fontSize]}px`,\r\n                };\r\n            },\r\n        },\r\n        watch: {\r\n            isFile: {\r\n                handler (isFile) {\r\n                    this.activePanel = isFile ? 'download' : 'scriptLog';\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        beforeDestroy () {\r\n            this.handleExitFullscreen();\r\n        },\r\n        mounted () {\r\n            window.addEventListener('keyup', this.handleExitByESC);\r\n            this.$once('hook:beforeDestroy', () => {\r\n                window.removeEventListener('keyup', this.handleExitByESC);\r\n            });\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 切换面板\r\n             * @param {String} panel 选中的面板\r\n             */\r\n            handleTogglePanel (panel) {\r\n                this.activePanel = panel;\r\n            },\r\n            /**\r\n             * @desc 下载主机日志\r\n             */\r\n            handleDownload () {\r\n                TaskExecuteService.fetchStepExecutionLogFile({\r\n                    id: this.stepInstanceId,\r\n                    ip: this.host.ip,\r\n                }).then(() => {\r\n                    this.$bkMessage({\r\n                        theme: 'success',\r\n                        message: '导出日志操作成功',\r\n                    });\r\n                });\r\n            },\r\n            /**\r\n             * @desc 显示字体大小设置面板\r\n             */\r\n            handleShowSetFont () {\r\n                this.isFontSet = true;\r\n            },\r\n            /**\r\n             * @desc 隐藏字体大小设置面板\r\n             */\r\n            handleHideSetFont () {\r\n                this.isFontSet = false;\r\n            },\r\n            /**\r\n             * @desc 更新日志字体大小\r\n             */\r\n            handleFontChange (fontSize) {\r\n                this.fontSize = fontSize;\r\n                localStorage.setItem(STEP_FONT_SIZE_KEY, fontSize);\r\n            },\r\n            /**\r\n             * @desc 日志全屏\r\n             */\r\n            handleFullscreen () {\r\n                this.isFullscreen = true;\r\n                this.messageInfo('按 Esc 即可退出全屏模式');\r\n                this.infoBoxParentNode = this.$refs.infoBox.parentNode;\r\n                document.body.appendChild(this.$refs.infoBox);\r\n                this.$refs.view && this.$refs.view.resize();\r\n            },\r\n            /**\r\n             * @desc 退出日志全屏\r\n             */\r\n            handleExitFullscreen (event) {\r\n                this.isFullscreen = false;\r\n                if (this.infoBoxParentNode) {\r\n                    this.infoBoxParentNode.appendChild(this.$refs.infoBox);\r\n                    this.infoBoxParentNode = null;\r\n                }\r\n                setTimeout(() => {\r\n                    this.$refs.view && this.$refs.view.resize();\r\n                });\r\n            },\r\n            /**\r\n             * @desc esc键退出日志全屏\r\n             */\r\n            handleExitByESC (event) {\r\n                if (event.keyCode === 27) {\r\n                    this.handleExitFullscreen();\r\n                }\r\n            },\r\n            /**\r\n             * @desc 脚本日志自动换行\r\n             * @param {Boolean} lineFeed\r\n             */\r\n            handleScriptLogLineFeedChange  (lineFeed) {\r\n                this.isScriptLogLineFeed = lineFeed;\r\n                if (lineFeed) {\r\n                    localStorage.setItem(SCRIPT_LOG_AUTO_LINE_FEED, true);\r\n                } else {\r\n                    localStorage.removeItem(SCRIPT_LOG_AUTO_LINE_FEED);\r\n                }\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .step-execution-info-box {\r\n        position: relative;\r\n        height: 100%;\r\n\r\n        .tab-container {\r\n            position: relative;\r\n            z-index: 1;\r\n            display: flex;\r\n            font-size: 13px;\r\n            line-height: 42px;\r\n            color: #c4c6cc;\r\n            background: #2f3033;\r\n            box-shadow: 0 2px 4px 0 #000;\r\n            align-items: center;\r\n\r\n            .tab-title {\r\n                width: 166px;\r\n                font-size: 14px;\r\n                color: #dcdee5;\r\n                cursor: default;\r\n\r\n                &.success,\r\n                &.fail,\r\n                &.running,\r\n                &.waiting {\r\n                    &::before {\r\n                        display: inline-block;\r\n                        width: 3px;\r\n                        height: 12px;\r\n                        background: #2dc89d;\r\n                        content: \"\";\r\n                    }\r\n                }\r\n\r\n                &.fail {\r\n                    &::before {\r\n                        background: #ea3636;\r\n                    }\r\n                }\r\n\r\n                &.running {\r\n                    &::before {\r\n                        background: #699df4;\r\n                    }\r\n                }\r\n\r\n                &.waiting {\r\n                    &::before {\r\n                        background: #dcdee5;\r\n                    }\r\n                }\r\n\r\n                .host-ip {\r\n                    margin-left: 13px;\r\n                }\r\n            }\r\n\r\n            .split-line {\r\n                width: 1px;\r\n                height: 20px;\r\n                margin-right: -1px;\r\n                background: #63656e;\r\n            }\r\n\r\n            .tab-item {\r\n                position: relative;\r\n                height: 42px;\r\n                padding: 0 20px;\r\n                cursor: pointer;\r\n                user-select: none;\r\n\r\n                &.active {\r\n                    z-index: 1;\r\n                    color: #fff;\r\n                    background: #212124;\r\n\r\n                    &::before {\r\n                        position: absolute;\r\n                        top: 0;\r\n                        left: 0;\r\n                        width: 100%;\r\n                        height: 2px;\r\n                        background: #3a84ff;\r\n                        content: \"\";\r\n                    }\r\n                }\r\n            }\r\n\r\n            .extend-box {\r\n                display: flex;\r\n                margin-left: auto;\r\n                font-size: 18px;\r\n\r\n                .extend-item {\r\n                    display: flex;\r\n                    height: 42px;\r\n                    padding: 0 10px;\r\n                    margin-left: 2px;\r\n                    cursor: pointer;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                }\r\n            }\r\n        }\r\n\r\n        .tab-content-wraper {\r\n            flex: 1;\r\n            height: calc(100% - 42px);\r\n            background: #1d1d1d;\r\n        }\r\n\r\n        .font-setting {\r\n            position: absolute;\r\n            top: 55px;\r\n            right: 94px;\r\n            z-index: 1;\r\n            width: 160px;\r\n            color: #979ba5;\r\n            background: #2f3033;\r\n            border: 1px solid;\r\n            border-radius: 2px;\r\n            opacity: 0%;\r\n            visibility: hidden;\r\n            transform: translateY(-15px);\r\n            box-shadow: 0 2px 4px 0 rgb(0 0 0 / 50%);\r\n            transition: all 0.15s;\r\n            border-image-source: linear-gradient(#3b3c42, #292a2e);\r\n            border-image-slice: 1;\r\n            border-image-width: 1px;\r\n\r\n            &.active {\r\n                opacity: 100%;\r\n                visibility: visible;\r\n                transform: translateY(0);\r\n            }\r\n\r\n            .font-setting-wraper {\r\n                position: relative;\r\n                z-index: 1;\r\n                display: flex;\r\n                background: inherit;\r\n                align-items: center;\r\n            }\r\n\r\n            &::before {\r\n                position: absolute;\r\n                top: -20px;\r\n                right: 38px;\r\n                width: 42px;\r\n                height: 25px;\r\n                cursor: pointer;\r\n                content: \"\";\r\n            }\r\n\r\n            &::after {\r\n                position: absolute;\r\n                top: -5px;\r\n                left: 50%;\r\n                width: 11px;\r\n                height: 11px;\r\n                background: inherit;\r\n                border: 1px solid #3b3c42;\r\n                border-bottom: none;\r\n                border-left: none;\r\n                content: \"\";\r\n                transform: translateX(-50%) rotateZ(-45deg);\r\n            }\r\n\r\n            .font-item {\r\n                display: flex;\r\n                height: 42px;\r\n                cursor: pointer;\r\n                transition: all 0.15s;\r\n                align-items: center;\r\n                flex: 1;\r\n                justify-content: center;\r\n\r\n                &:hover,\r\n                &.active {\r\n                    color: #fafbfd;\r\n                }\r\n            }\r\n\r\n            .line {\r\n                width: 1px;\r\n                height: 18px;\r\n                background: #63656e;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div\r\n        ref=\"download\"\r\n        class=\"step-execute-log-export\"\r\n        :tippy-tips=\"isFile ? '分发文件步骤不支持日志导出' : ''\"\r\n        @click=\"handleShow\">\r\n        <div>{{ '导出日志' }}</div>\r\n        <div v-if=\"isShowThumProcess\" class=\"thum-precess-bar\" :class=\"boxClass\">\r\n            <div class=\"thum-precess\" :style=\"{ width: `${process * 100}%` }\" />\r\n        </div>\r\n        <div style=\"display: none;\">\r\n            <div ref=\"progress\" class=\"step-execute-log-package\" :class=\"boxClass\">\r\n                <div class=\"package-baseinfo\">\r\n                    <div class=\"package-size\">{{ '文件大小' }}: {{ fileSize | formFileSize }}</div>\r\n                    <div class=\"package-result\">\r\n                        <span v-if=\"packageStatus === 1\">{{ '打包中' }}…</span>\r\n                        <span v-if=\"packageStatus === 2\">{{ '打包中' }}…</span>\r\n                        <span v-if=\"packageStatus === 3\">\r\n                            <span>{{ '打包失败，' }}</span>\r\n                            <a @click=\"handleGetLogFilePackageResult\">{{ '重试' }}</a>\r\n                        </span>\r\n                        <span v-if=\"packageStatus === 4\">{{ '准备就绪' }}</span>\r\n                    </div>\r\n                </div>\r\n                <bk-progress\r\n                    :key=\"resetKey\"\r\n                    class=\"package-process\"\r\n                    size=\"small\"\r\n                    theme=\"primary\"\r\n                    :percent=\"process\"\r\n                    :show-text=\"false\" />\r\n                <div v-if=\"packageStatus === 1\" class=\"package-result-tips\">\r\n                    {{ '温馨提示：打包耗时会受到总的日志内容大小影响，请耐心等待' }}\r\n                </div>\r\n                <div v-if=\"packageStatus === 2\" class=\"package-result-tips\">\r\n                    {{ '温馨提示：文件打包中请勿关闭浏览器，以免导致任务中断' }}\r\n                </div>\r\n                <div v-if=\"packageStatus === 3\" class=\"package-result-tips\">\r\n                    {{ '日志文件打包超时，可能因为日志量过大，请选择单台日志下载' }}\r\n                </div>\r\n                <div v-if=\"packageStatus === 4\" class=\"package-result-tips\">\r\n                    <!-- eslint-disable-next-line max-len -->\r\n                    <span>{{ '日志压缩包已准备就绪，' }}{{ '是否' }}<a @click=\"handleDownload\">{{ '直接下载' }}</a></span>\r\n                    <bk-button\r\n                        style=\"margin-top: -5px; margin-left: auto;\"\r\n                        @click=\"handleGetLogFilePackageResult\"\r\n                        theme=\"primary\">\r\n                        {{ '重新打包' }}\r\n                    </bk-button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import TaskExecuteService from '@service/task-execute';\r\n    import {\r\n        bytePretty,\r\n    } from '@utils/assist';\r\n\r\n    export default {\r\n        name: '',\r\n        filters: {\r\n            /**\r\n             * @desc 格式化文件大小显示\r\n             */\r\n            formFileSize (value) {\r\n                if (Number(value) < 1) {\r\n                    return '--';\r\n                }\r\n                return bytePretty(value);\r\n            },\r\n        },\r\n        props: {\r\n            isFile: Boolean,\r\n            stepInstanceId: {\r\n                type: Number,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                // 弹层显示状态标记\r\n                isPopoverShowFlag: false,\r\n                // 是否已经下载日志\r\n                isLogDownloaded: false,\r\n                fileSize: 0,\r\n                // 日志打包状态\r\n                packageStatus: 1,\r\n                // 打包进度，本地模拟\r\n                process: 0,\r\n            };\r\n        },\r\n        computed: {\r\n            boxClass () {\r\n                const classMap = {\r\n                    1: 'normal',\r\n                    2: 'packageing',\r\n                    3: 'failed',\r\n                    4: 'success',\r\n                };\r\n                return classMap[this.packageStatus];\r\n            },\r\n            /**\r\n             * @desc 日志文件打包完成但没有下载，并且弹层是关闭状态显示进度条缩略图\r\n             */\r\n            isShowThumProcess () {\r\n                return !this.isPopoverShowFlag && !this.isLogDownloaded && this.isPackageing;\r\n            },\r\n        },\r\n        created () {\r\n            this.isPackageing = false;\r\n            // api 标记重新打包\r\n            this.repackage = false;\r\n            // 用于重置 bk-progress\r\n            this.resetKey = 1;\r\n        },\r\n        mounted () {\r\n            this.initPopover();\r\n            this.taskQueue = [];\r\n        },\r\n        beforeDestroy () {\r\n            this.stopQueueRun();\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 获取日志打包结果\r\n             *\r\n             * 打包过程没结束一直轮询状态\r\n             */\r\n            fetchLogFilePackageResult () {\r\n                TaskExecuteService.fetchLogFilePackageResult({\r\n                    stepInstanceId: this.stepInstanceId,\r\n                    repackage: this.repackage,\r\n                }).then((data) => {\r\n                    this.fileSize = data.fileSize || 0;\r\n                    this.packageStatus = data.status;\r\n                    if (this.packageStatus === 1 || this.packageStatus === 2) {\r\n                        this.pushQueue(this.fetchLogFilePackageResult);\r\n                    } else {\r\n                        this.stopQueueRun();\r\n                        // 打包成功完成任务进度条\r\n                        // 自动下载日志\r\n                        if (this.packageStatus === 4) {\r\n                            this.endProgress();\r\n                            this.handleDownload();\r\n                        }\r\n                    }\r\n                })\r\n                    .catch(() => {\r\n                        // 接口报错终止任务轮询\r\n                        this.stopQueueRun();\r\n                    })\r\n                    .finally(() => {\r\n                        this.repackage = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 弹层初始化\r\n             */\r\n            initPopover () {\r\n                this.popperInstance = this.$bkPopover(this.$refs.download, {\r\n                    arrow: true,\r\n                    placement: 'bottom',\r\n                    interactive: true,\r\n                    trigger: 'click',\r\n                    theme: 'light',\r\n                    animation: 'slide-toggle',\r\n                    distance: 30,\r\n                    content: this.$refs.progress,\r\n                    zIndex: window.__bk_zIndex_manager.nextZIndex(), // eslint-disable-line no-underscore-dangle\r\n                    onShow: () => {\r\n                        this.isPopoverShowFlag = true;\r\n                    },\r\n                    onHidden: () => {\r\n                        this.isPopoverShowFlag = false;\r\n                    },\r\n                });\r\n            },\r\n            /**\r\n             * @desc 推入轮询任务队列\r\n             */\r\n            pushQueue (task) {\r\n                if (!this.taskQueue) {\r\n                    this.taskQueue = [];\r\n                }\r\n                this.taskQueue.push(task);\r\n            },\r\n            /**\r\n             * @desc 开始轮询\r\n             */\r\n            startQueueRun () {\r\n                const nextTask = this.taskQueue.shift();\r\n                if (nextTask) {\r\n                    nextTask();\r\n                }\r\n                this.timer = setTimeout(() => {\r\n                    this.startQueueRun();\r\n                }, 1000);\r\n            },\r\n            /**\r\n             * @desc 终止轮询\r\n             */\r\n            stopQueueRun () {\r\n                this.stopQueueRunning = true;\r\n                clearTimeout(this.timer);\r\n            },\r\n            /**\r\n             * @desc 开始模拟任务进度\r\n             */\r\n            startProgress () {\r\n                if (this.process > 0.85) {\r\n                    return;\r\n                }\r\n                this.process += 0.05;\r\n                setTimeout(() => {\r\n                    this.startProgress();\r\n                }, 30);\r\n            },\r\n            /**\r\n             * @desc 任务进度完成\r\n             */\r\n            endProgress () {\r\n                this.process = 1;\r\n            },\r\n            /**\r\n             * @desc 显示弹层\r\n             *\r\n             * 如果没有开始打包过程则开始日志文件的打包\r\n             */\r\n            handleShow () {\r\n                if (!this.isPackageing) {\r\n                    this.isPackageing = true;\r\n                    this.handleGetLogFilePackageResult();\r\n                }\r\n            },\r\n            /**\r\n             * @desc 重新打包日志文件\r\n             *\r\n             * 重置打包状态\r\n             */\r\n            handleGetLogFilePackageResult () {\r\n                this.fileSize = 0;\r\n                this.packageStatus = 1;\r\n                this.process = 0;\r\n                this.resetKey += 1;\r\n                this.isLogDownloaded = false;\r\n                this.startQueueRun();\r\n                this.startProgress();\r\n                setTimeout(() => {\r\n                    this.repackage = true;\r\n                    this.fetchLogFilePackageResult();\r\n                }, 300);\r\n            },\r\n            /**\r\n             * @desc 下载日志打包文件\r\n             */\r\n            handleDownload () {\r\n                this.isLogDownloaded = true;\r\n                TaskExecuteService.fetchStepExecutionLogFile({\r\n                    id: this.stepInstanceId,\r\n                });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .step-execute-log-export {\r\n        position: relative;\r\n        height: 32px;\r\n        padding: 0 15px;\r\n        margin-left: 10px;\r\n        font-size: 14px;\r\n        line-height: 32px;\r\n        color: #63656e;\r\n        cursor: pointer;\r\n        background: #fafbfd;\r\n        border: 1px solid #c4c6cc;\r\n        border-radius: 2px;\r\n        user-select: none;\r\n        flex: 0 0 auto;\r\n\r\n        .thum-precess-bar {\r\n            position: absolute;\r\n            right: 0;\r\n            bottom: -1px;\r\n            left: 0;\r\n            height: 2px;\r\n            background: #dcdee5;\r\n            border-radius: 1px;\r\n\r\n            &.normal,\r\n            &.packageing {\r\n                .thum-precess {\r\n                    background: #3a84ff;\r\n                }\r\n            }\r\n\r\n            &.failed {\r\n                .thum-precess {\r\n                    background: #ea3636;\r\n                }\r\n            }\r\n\r\n            &.success {\r\n                .thum-precess {\r\n                    background: #2dcb56;\r\n                }\r\n            }\r\n\r\n            .thum-precess {\r\n                width: 50%;\r\n                height: 100%;\r\n                background: #3a84ff;\r\n                border-radius: 1px;\r\n            }\r\n        }\r\n    }\r\n\r\n    .step-execute-log-package {\r\n        position: relative;\r\n        width: 390px;\r\n        padding: 14px 17px;\r\n        font-size: 12px;\r\n        line-height: 16px;\r\n\r\n        &.failed {\r\n            .package-result,\r\n            .package-result-tips {\r\n                color: #ea3636;\r\n            }\r\n\r\n            .bk-progress .progress-inner {\r\n                background: #ea3636;\r\n            }\r\n        }\r\n\r\n        &.success {\r\n            .package-result {\r\n                color: #63656e;\r\n            }\r\n\r\n            .bk-progress .progress-inner {\r\n                background: #2dcb56;\r\n            }\r\n        }\r\n\r\n        .package-baseinfo {\r\n            display: flex;\r\n\r\n            .package-size {\r\n                margin-right: auto;\r\n            }\r\n\r\n            .package-result {\r\n                color: #979ba5;\r\n            }\r\n        }\r\n\r\n        .package-process {\r\n            margin-top: 10px;\r\n        }\r\n\r\n        .package-result-tips {\r\n            display: flex;\r\n            align-items: center;\r\n            margin-top: 13px;\r\n        }\r\n    }\r\n</style>\r\n","\r\n<template>\r\n    <div class=\"executive-history-step\">\r\n        task-status\r\n        <task-status ref=\"taskStatus\" @on-init=\"handleTaskInit\">\r\n            <div class=\"step-info-header\">\r\n                <div class=\"step-info-wraper\">\r\n                    <div class=\"step-type-text\">{{ stepTypeText }}</div>\r\n                    <div class=\"step-name-box\">\r\n                        <div class=\"step-name-text\">{{ data.name }}</div>\r\n                        <execution-history-select\r\n                            ref=\"executionHistorySelect\"\r\n                            :step-instance-id=\"params.id\"\r\n                            :retry-count=\"params.retryCount\"\r\n                            @on-change=\"handleRetryCountChange\" />\r\n                    </div>\r\n                </div>\r\n                步骤执行操作\r\n                <div class=\"step-action-box\">\r\n                    <step-action\r\n                        v-for=\"action in data.actions\"\r\n                        :name=\"action\"\r\n                        :key=\"action\"\r\n                        display-style=\"step-detail\"\r\n                        :confirm-handler=\"operationCode => handleStatusUpdate(operationCode)\" />\r\n                </div>\r\n                <div class=\"log-search-box\">\r\n                    <compose-form-item>\r\n                        <bk-select v-model=\"searchModel\" :clearable=\"false\" style=\"width: 100px;\">\r\n                            <bk-option id=\"log\" :name=\"'搜索日志'\" />\r\n                            <bk-option id=\"ip\" :name=\"'搜索 IP'\" />\r\n                        </bk-select>\r\n                        <bk-input\r\n                            :value=\"params.keyword\"\r\n                            key=\"log\"\r\n                            \r\n                            :tippy-tips=\"isFile ? '分发文件步骤不支持日志搜索' : ''\"\r\n                            right-icon=\"bk-icon icon-search\"\r\n                            style=\"width: 292px;\"\r\n                            @keyup=\"handleLogSearch\" />\r\n                        <bk-input\r\n                            :value=\"params.searchIp\"\r\n                            key=\"ip\"\r\n                            right-icon=\"bk-icon icon-search\"\r\n                            style=\"width: 292px;\"\r\n                            @keyup=\"handleIPSearch\" />\r\n                    </compose-form-item>\r\n                    <div v-if=\"isLogSearching\" class=\"search-loading\">\r\n                        <Icon class=\"loading-flag\" type=\"loading\" />\r\n                    </div>\r\n                    <div v-if=\"isIPSearching\" class=\"search-loading\">\r\n                        <Icon class=\"loading-flag\" type=\"loading\" />\r\n                    </div>\r\n                </div>\r\n                <export-log :step-instance-id=\"params.id\" :is-file=\"isFile\" />\r\n                <div class=\"task-instance-action\">\r\n                    <view-global-variable :task-instance-id=\"taskInstanceId\" />\r\n                    <view-operation-record :task-instance-id=\"taskInstanceId\" />\r\n                    <view-step-info :task-instance-id=\"taskInstanceId\" :step-instance-id=\"params.id\" />\r\n                </div>\r\n            </div>\r\n            主机分组\r\n            <group-tab\r\n                :data=\"data.resultGroups\"\r\n                @on-change=\"handelGroupChange\" />\r\n            <div class=\"detail-container\">\r\n                <div class=\"container-left\" v-bkloading=\"{ isLoading: isHostLoading }\">\r\n                    <!-- 主机列表 -->\r\n                    <!-- eslint-disable max-len -->\r\n                    <ip-list\r\n                        :name=\"`${data.stepInstanceId}_${dispalyGroup.groupName}_${params.retryCount}_${params.keyword}_${params.searchIp}`\"\r\n                        :total=\"dispalyGroup.agentTaskSize\"\r\n                        :list-loading=\"isLoading\"\r\n                        :pagination-loading=\"paginationChangeLoading\"\r\n                        :data=\"dispalyGroup.agentTaskExecutionDetail\"\r\n                        :search-value=\"`${params.keyword}_${params.searchIp}`\"\r\n                        @on-pagination-change=\"handlePaginationChange\"\r\n                        @on-copy=\"handleCopyHost\"\r\n                        @on-sort=\"handleSort\"\r\n                        @on-clear-search=\"handleClearSearch\"\r\n                        @on-change=\"handleHostChange\" />\r\n                </div>\r\n                <div class=\"container-right\">\r\n                    <!-- 执行日志 -->\r\n                    <execution-info\r\n                        :name=\"`${params.id}_${params.retryCount}_${dispalyGroup.groupName}_${currentHost.ip}_${params.keyword}`\"\r\n                        :step-instance-id=\"data.stepInstanceId\"\r\n                        :retry-count=\"params.retryCount\"\r\n                        :host=\"currentHost\"\r\n                        :log-filter=\"params.keyword\"\r\n                        :is-file=\"isFile\"\r\n                        :is-task=\"isTask\"\r\n                        @on-search=\"handleLogSearch\" />\r\n                </div>\r\n            </div>\r\n        </task-status>\r\n        步骤执行操作——强制终止\r\n        <execution-status-bar type=\"step\" :data=\"data\">\r\n            step-action\r\n            <step-action\r\n                name=\"forced\"\r\n                display-style=\"step-detail\"\r\n                key=\"forced\"\r\n                :confirm-handler=\"handleForceTask\"\r\n                @on-cancel=\"handleCancelForceTask\"\r\n                @on-show=\"handleStartForceTask\" />\r\n        </execution-status-bar>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n       import TaskExecuteService from '@service/task-execute';\r\n    import {\r\n        execCopy,\r\n    } from '@utils/assist';\r\n    import ComposeFormItem from '@components/compose-form-item';\r\n    import ExecutionStatusBar from '../common/execution-status-bar';\r\n    import StepAction from '../common/step-action';\r\n    import TaskStatus from './components/task-status';\r\n    import ExecutionHistorySelect from './components/execution-history-select';\r\n    import GroupTab from './components/group-tab';\r\n    import IpList from './components/ip-list';\r\n    import ExecutionInfo from './components/execution-info';\r\n    import ExportLog from './components/export-log';\r\n    import ViewGlobalVariable from './components/view-global-variable';\r\n    import ViewOperationRecord from './components/view-operation-record';\r\n    import ViewStepInfo from './components/view-step-info';\r\n    import mixins from './components/mixins';\r\n\r\n    export default {\r\n        name: 'StepExecuteDetail',\r\n        components: {\r\n            ComposeFormItem,\r\n            ExecutionStatusBar,\r\n            StepAction,\r\n            TaskStatus,\r\n            ExecutionHistorySelect,\r\n            GroupTab,\r\n            IpList,\r\n            ExecutionInfo,\r\n            ExportLog,\r\n            ViewGlobalVariable,\r\n            ViewOperationRecord,\r\n            ViewStepInfo,\r\n            \r\n        },\r\n        mixins: [\r\n            mixins,\r\n        ],\r\n        data () {\r\n            return {\r\n                isLoading: !true,\r\n                isLogSearching: false,\r\n                isIPSearching: false,\r\n                // 搜索模式\r\n                searchModel: 'log',\r\n                // 步骤所属作业的所有步骤列表\r\n                taskStepList: [{}, {}],\r\n                // 任务信息\r\n                data: {\r\n                    finished: false,\r\n                    resultGroups: [{}, {}],\r\n                    actions: [{}, {}],\r\n                    isForcedEnable: false,\r\n                },\r\n                // 接口参数\r\n                params: {\r\n                    id: 0,\r\n                    retryCount: '',\r\n                    maxIpsPerResultGroup: 0,\r\n                    keyword: '', // 日志的筛选值\r\n                    searchIp: '', // ip的筛选值\r\n                    orderField: '', // 排序字段\r\n                    order: '', // 排序字段，当前支持totalTime|cloudAreaId|exitCode\r\n                },\r\n                // 选中的分组信息\r\n                currentGroup: {\r\n                    resultType: '',\r\n                    tag: '',\r\n                },\r\n                // 选中的主机信息\r\n                currentHost: {\r\n                    ip: '',\r\n                    retryCount: 0,\r\n                },\r\n                // 作业执行步骤\r\n                isTask: false,\r\n                // 分发文件类型的步骤\r\n                isFile: false,\r\n                // 主机分页加载\r\n                paginationChangeLoading: false,\r\n            };\r\n        },\r\n        computed: {\r\n            /**\r\n             * @desc 骨架屏loading\r\n             */\r\n            isSkeletonLoading () {\r\n                return this.isLoading;\r\n            },\r\n            /**\r\n             * @desc 步骤类型描述\r\n             *\r\n             * 对作业里面的步骤需要显示当前步骤在作业中的索引\r\n             */\r\n            stepTypeText () {\r\n                let text = '';\r\n                if (this.isTask) {\r\n                    const index = _.findIndex(this.taskStepList, _ => _.stepInstanceId === this.params.id);\r\n                    if (index > -1) {\r\n                        text += `Step ${index + 1}/${this.taskStepList.length}`;\r\n                    }\r\n                }\r\n                if (this.isFile) {\r\n                    text = `${text} ${'分发文件'}`;\r\n                } else {\r\n                    text = `${text} ${'脚本执行'}`;\r\n                }\r\n                \r\n                return text;\r\n            },\r\n            /**\r\n             * @desc 如果任务已经结束重新获取任务详情时加上主机loading效果\r\n             *\r\n             * 主要用于任务结束后切换分组的场景\r\n             */\r\n            isHostLoading () {\r\n                return this.data.finished ? this.isLoading : false;\r\n            },\r\n            /**\r\n             * @desc 展示被选中的分组信息\r\n             */\r\n            dispalyGroup () {\r\n                const targetGroup = _.find(this.data.resultGroups, _ => _.groupName === this.currentGroup.groupName);\r\n                if (targetGroup) {\r\n                    return targetGroup;\r\n                }\r\n                return {\r\n                    agentTaskExecutionDetail: [],\r\n                    groupName: '',\r\n                };\r\n            },\r\n        },\r\n        created () {\r\n            this.taskInstanceId = 0;\r\n            this.isForceing = false;\r\n            this.$Progress.start();\r\n        },\r\n        beforeDestroy () {\r\n            this.$Progress.finish();\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 步骤执行详情\r\n             *\r\n             * 1，任务没结束一直轮询\r\n             * 2，分组信息在执行过程中会变，如果已选中的分组不存在了自动选中第一个分组\r\n             */\r\n            fetchStep: _.debounce(function () {\r\n                if (this.params.id < 1 || this.params.maxIpsPerResultGroup < 1) {\r\n                    return;\r\n                }\r\n                \r\n                this.isLoading = true;\r\n                TaskExecuteService.fetchStepExecutionResult({\r\n                    ...this.params,\r\n                    resultType: this.currentGroup.resultType,\r\n                    tag: this.currentGroup.tag,\r\n                }).then((data) => {\r\n                    if (this.isForceing) {\r\n                        return;\r\n                    }\r\n                    this.data = Object.freeze(data);\r\n\r\n                    this.isFile = data.isFile;\r\n                    //  已选中的分组不存在了——默认选中第一个分组\r\n                    const { resultGroups } = data;\r\n                    if (!_.find(resultGroups, group => group.resultType === this.currentGroup.resultType\r\n                        && group.tag === this.currentGroup.tag)) {\r\n                        /* eslint-disable prefer-destructuring */\r\n                        this.currentGroup = resultGroups[0];\r\n                    }\r\n                    if (data.finished) {\r\n                        this.$Progress.finish();\r\n                        return;\r\n                    }\r\n                    \r\n                    this.$pollingQueueRun(this.fetchStep);\r\n                })\r\n                    .catch((error) => {\r\n                        if ([\r\n                            400,\r\n                            1244007,\r\n                        ].includes(error.code)) {\r\n                            setTimeout(() => {\r\n                                this.$router.push({\r\n                                    name: 'historyList',\r\n                                });\r\n                            }, 3000);\r\n                        }\r\n                    })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                        this.isLogSearching = false;\r\n                        this.isIPSearching = false;\r\n                        this.paginationChangeLoading = false;\r\n                    });\r\n            }, 30),\r\n            \r\n            /**\r\n             * @desc 步骤所属作业初始化\r\n             * @param {Object} payload 步骤信息\r\n             *\r\n             * 前置获取步骤关联的作业执行详情\r\n             */\r\n            handleTaskInit (payload) {\r\n                this.params = {\r\n                    ...this.params,\r\n                    id: payload.stepInstanceId,\r\n                    retryCount: payload.retryCount,\r\n                };\r\n                this.taskInstanceId = payload.taskInstanceId;\r\n                this.isTask = payload.isTask;\r\n                this.taskStepList = Object.freeze(payload.taskStepList);\r\n                this.fetchStep();\r\n            },\r\n            /**\r\n             * @desc 执行历史\r\n             * @param {Number} retryCount 重试次数\r\n             *\r\n             * 刷新步骤执行详情\r\n             */\r\n            handleRetryCountChange (retryCount) {\r\n                this.params = {\r\n                    ...this.params,\r\n                    retryCount,\r\n                };\r\n                this.fetchStep();\r\n            },\r\n            /**\r\n             * @desc 分组切换\r\n             * @param group [Number] 选中的分组\r\n             *\r\n             * 刷新步骤执行详情\r\n             *\r\n             */\r\n            handelGroupChange (group) {\r\n                this.currentGroup = group;\r\n                this.fetchStep();\r\n            },\r\n            /**\r\n             * @desc 选中主机\r\n             * @param {Object} host 选中的主机\r\n             */\r\n            handleHostChange (host) {\r\n                this.currentHost = Object.freeze(host);\r\n            },\r\n            /**\r\n             * @desc 组件列表分页\r\n             * @param {Number} pageSize 每页条数\r\n             */\r\n            handlePaginationChange (pageSize) {\r\n                this.params.maxIpsPerResultGroup = pageSize;\r\n                this.paginationChangeLoading = true;\r\n                this.fetchStep();\r\n            },\r\n            /**\r\n             * @desc 主机排序\r\n             * @param {Object} payload 排序信息\r\n             */\r\n            handleSort (payload) {\r\n                this.params = Object.assign({}, this.params, payload);\r\n                this.fetchStep();\r\n            },\r\n            /**\r\n             * @desc 清空搜索条件\r\n             */\r\n            handleClearSearch () {\r\n                this.params.keyword = '';\r\n                this.params.searchIp = '';\r\n                this.isLogSearching = true;\r\n                this.fetchStep();\r\n            },\r\n            /**\r\n             * @desc 复制所有主机IP\r\n             *\r\n             * 主机列表是分页加载，复制全部主机时需要全量请求一次\r\n             */\r\n            handleCopyHost () {\r\n                TaskExecuteService.fetchStepGroupHost({\r\n                    ...this.params,\r\n                    resultType: this.currentGroup.resultType,\r\n                    tag: this.currentGroup.tag,\r\n                }).then((data) => {\r\n                    if (data.length < 1) {\r\n                        this.$bkMessage({\r\n                            theme: 'warning',\r\n                            message: '暂无可复制IP',\r\n                            limit: 1,\r\n                        });\r\n                        return;\r\n                    }\r\n                    const ipText = data.map(item => item.ip).join('\\n');\r\n                    const successMessage = `${'复制成功'}（${data.length} ${'个'}IP）`;\r\n                    execCopy(ipText, successMessage);\r\n                });\r\n            },\r\n            /**\r\n             * @desc 导出脚本执行日志\r\n             */\r\n            handleExportExecutionLog () {\r\n                TaskExecuteService.fetchStepExecutionLogFile({\r\n                    id: this.params.id,\r\n                }).then(() => {\r\n                    this.$bkMessage({\r\n                        theme: 'success',\r\n                        message: '导出日志操作成功',\r\n                    });\r\n                });\r\n            },\r\n            /**\r\n             * @desc 开始强制终止\r\n             */\r\n            handleStartForceTask () {\r\n                this.isForceing = true;\r\n                this.$Progress.start();\r\n            },\r\n            /**\r\n             * @desc 取消强制终止\r\n             */\r\n            handleCancelForceTask () {\r\n                this.isForceing = false;\r\n                this.$Progress.start();\r\n                this.fetchStep();\r\n            },\r\n            /**\r\n             * @desc 强制终止任务\r\n             *\r\n             * 强制终止成功需要刷新作业的状态和执行历史记录\r\n             */\r\n            handleForceTask () {\r\n                this.$Progress.start();\r\n                return TaskExecuteService.updateTaskExecutionStepOperateTerminate({\r\n                    taskInstanceId: this.taskInstanceId,\r\n                }).then(() => {\r\n                    this.messageSuccess('操作成功');\r\n                    this.$refs.taskStatus.reLoading();\r\n                    this.$refs.executionHistorySelect.reLoading();\r\n                    this.fetchStep();\r\n                    return true;\r\n                });\r\n            },\r\n            /**\r\n             * @desc 更新步骤执行状态\r\n             * @param {Number} operationCode 状态码\r\n             *\r\n             * 强制终止成功需要刷新作业的状态和执行历史记录\r\n             */\r\n            handleStatusUpdate (operationCode) {\r\n                this.$Progress.start();\r\n                return TaskExecuteService.updateTaskExecutionStepOperate({\r\n                    id: this.params.id,\r\n                    operationCode,\r\n                }).then((data) => {\r\n                    this.params.retryCount = data.retryCount;\r\n                    this.$refs.taskStatus.reLoading();\r\n                    this.$refs.executionHistorySelect.reLoading();\r\n                    this.$bkMessage({\r\n                        limit: 1,\r\n                        theme: 'success',\r\n                        message: '操作成功',\r\n                    });\r\n                    this.fetchStep();\r\n                    return true;\r\n                });\r\n            },\r\n            /**\r\n             * @desc ip搜索\r\n             * @param {String} value 搜索值，支持模糊搜索\r\n             * @param {Object} event input交互事件\r\n             *\r\n             * 1，与日志搜索互斥\r\n             * 2，enter建触发搜索\r\n             * 3，重置页码（ip-list组件处理）\r\n             */\r\n            handleIPSearch (value, event) {\r\n                if (event.isComposing) {\r\n                    // 跳过输入法复合事件\r\n                    return;\r\n                }\r\n\r\n                // 输入框的值被清空直接触发搜索\r\n                // enter键开始搜索\r\n                if ((value === '' && value !== this.params.searchIp)\r\n                    || event.keyCode === 13) {\r\n                    this.params.keyword = '';\r\n                    this.params.searchIp = value;\r\n                    this.isIPSearching = true;\r\n                    this.fetchStep();\r\n                }\r\n            },\r\n            /**\r\n             * @desc 日志搜索\r\n             * @param {String} value 搜索值，支持模糊搜索\r\n             * @param {Object} event input交互事件\r\n             *\r\n             * 1，与ip搜索互斥\r\n             * 2，enter建触发搜索\r\n             * 3，重置页码（ip-list组件处理）\r\n             */\r\n            handleLogSearch (value, event) {\r\n                if (event.isComposing) {\r\n                    // 跳过输入法复合事件\r\n                    return;\r\n                }\r\n\r\n                // 输入框的值被清空直接触发搜索\r\n                // enter键开始搜索\r\n                if ((value === '' && value !== this.params.keyword)\r\n                    || event.keyCode === 13\r\n                    || event.type === 'click') {\r\n                    this.params.keyword = value;\r\n                    this.params.searchIp = '';\r\n                    this.isLogSearching = true;\r\n                    this.searchModel = 'log';\r\n                    this.fetchStep();\r\n                }\r\n            },\r\n            /**\r\n             * @desc 路由回退\r\n             */\r\n            routerBack () {\r\n                const { from } = this.$route.query;\r\n                if (from === 'historyTask') {\r\n                    this.$router.push({\r\n                        name: 'historyTask',\r\n                        params: {\r\n                            id: this.taskInstanceId,\r\n                        },\r\n                    });\r\n                    return;\r\n                }\r\n                if (from === 'plan') {\r\n                    // 保留执行方案到步骤详情的操作路径\r\n                    this.$router.push({\r\n                        name: 'historyTask',\r\n                        params: {\r\n                            id: this.taskInstanceId,\r\n                        },\r\n                        query: {\r\n                            from: 'plan',\r\n                        },\r\n                    });\r\n                    return;\r\n                }\r\n                if (from === 'fastExecuteScript') {\r\n                    this.$router.push({\r\n                        name: 'fastExecuteScript',\r\n                        query: {\r\n                            from: 'historyStep',\r\n                        },\r\n                    });\r\n                    return;\r\n                }\r\n                if (from === 'fastPushFile') {\r\n                    this.$router.push({\r\n                        name: 'fastPushFile',\r\n                        query: {\r\n                            from: 'historyStep',\r\n                        },\r\n                    });\r\n                    return;\r\n                }\r\n                this.$router.push({\r\n                    name: 'historyList',\r\n                });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    @import \"@/css/mixins/media\";\r\n\r\n    @keyframes search-loading {\r\n        0% {\r\n            transform: rotateZ(0);\r\n        }\r\n\r\n        100% {\r\n            transform: rotateZ(360deg);\r\n        }\r\n    }\r\n\r\n    .executive-history-step {\r\n        .step-info-header {\r\n            display: flex;\r\n            padding: 45px 24px 12px;\r\n            background: #f5f6fa;\r\n\r\n            .step-info-wraper {\r\n                flex: 1;\r\n                margin-top: -25px;\r\n\r\n                .step-type-text {\r\n                    font-size: 12px;\r\n                    line-height: 16px;\r\n                    color: #979ba5;\r\n                }\r\n\r\n                .step-name-box {\r\n                    display: flex;\r\n                    align-items: center;\r\n                    margin-top: 10px;\r\n                }\r\n\r\n                .step-name-text {\r\n                    height: 24px;\r\n                    max-width: calc(100% - 65px);\r\n                    overflow: hidden;\r\n                    font-size: 18px;\r\n                    line-height: 24px;\r\n                    color: #313238;\r\n                    text-overflow: ellipsis;\r\n                    white-space: nowrap;\r\n                }\r\n            }\r\n\r\n            .step-action-box {\r\n                display: flex;\r\n                flex: 0 0 auto;\r\n                justify-content: flex-end;\r\n                max-width: 360px;\r\n\r\n                .step-instance-action {\r\n                    border-radius: 2px;\r\n\r\n                    i {\r\n                        display: none;\r\n                    }\r\n                }\r\n            }\r\n\r\n            .log-search-box {\r\n                position: relative;\r\n                display: flex;\r\n                flex: 0 0 391px;\r\n                background: #fff;\r\n\r\n                .search-loading {\r\n                    position: absolute;\r\n                    top: 1px;\r\n                    right: 13px;\r\n                    bottom: 1px;\r\n                    display: flex;\r\n                    align-items: center;\r\n                    color: #c4c6cc;\r\n                    background: #fff;\r\n\r\n                    .loading-flag {\r\n                        animation: list-loading-ani 1s linear infinite;\r\n                    }\r\n                }\r\n            }\r\n\r\n            .task-instance-action {\r\n                display: flex;\r\n\r\n                .action-btn {\r\n                    display: flex;\r\n                    width: 32px;\r\n                    height: 32px;\r\n                    margin-left: 8px;\r\n                    font-size: 16px;\r\n                    color: #979ba5;\r\n                    cursor: pointer;\r\n                    background: #fff;\r\n                    border: 1px solid #c4c6cc;\r\n                    border-radius: 2px;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                }\r\n            }\r\n        }\r\n\r\n        .detail-container {\r\n            display: flex;\r\n            height: calc(100vh - 234px);\r\n            padding: 20px 24px;\r\n\r\n            .container-left {\r\n                height: 100%;\r\n                overflow: hidden;\r\n                background: #fff;\r\n                border: 1px solid #dcdee5;\r\n                border-bottom-left-radius: 2px;\r\n                border-top-left-radius: 2px;\r\n            }\r\n\r\n            .container-right {\r\n                display: flex;\r\n                width: 0;\r\n                height: 100%;\r\n                overflow: hidden;\r\n                flex-direction: column;\r\n                flex: 1;\r\n            }\r\n        }\r\n\r\n        .step-action {\r\n            display: flex;\r\n            align-items: center;\r\n\r\n            .action-btn {\r\n                display: flex;\r\n                height: 32px;\r\n                padding: 0 7px;\r\n                margin-left: 10px;\r\n                font-size: 19px;\r\n                color: #979ba5;\r\n                cursor: pointer;\r\n                background: #fff;\r\n                border-radius: 16px;\r\n                align-items: center;\r\n                justify-content: center;\r\n\r\n                &:hover {\r\n                    color: #3a84ff;\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>\r\n"],"names":[],"sourceRoot":""}