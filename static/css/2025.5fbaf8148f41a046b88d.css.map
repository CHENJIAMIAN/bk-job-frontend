{"version":3,"file":"static/css/2025.5fbaf8148f41a046b88d.css","mappings":"AAgNA,oDACA,MACA,CAEA,0DACA,UACA","sources":["webpack://job/./src/views/file-manage/file-list/index.vue"],"sourcesContent":["<template>\n    <div class=\"file-node-list-page\">\n        <list-action-layout>\n            <jb-breadcrumb\n                class=\"list-breadcrumb\"\n                @on-last=\"handleBackLast\"\n                :key=\"`${fileSourceInfo.alias}_${path}`\">\n                <jb-breadcrumb-item>\n                    <Icon type=\"folder-open\" style=\"font-size: 20px;\" />\n                    <span @click=\"handleGoFileSource\">{{ '文件源列表' }}</span>\n                </jb-breadcrumb-item>\n                <jb-breadcrumb-item>\n                    <span @click=\"handlePathLocation('')\">{{ fileSourceInfo.alias }}</span>\n                </jb-breadcrumb-item>\n                <jb-breadcrumb-item\n                    v-for=\"(item) in pathStack\"\n                    role=\"path\"\n                    :key=\"item.path\">\n                    <span @click=\"handlePathLocation(item.path)\">{{ item.name }}</span>\n                </jb-breadcrumb-item>\n            </jb-breadcrumb>\n            <template #right>\n                <jb-input\n                    :placeholder=\"'搜索关键字'\"\n                    :value=\"name\"\n                    enter-trigger\n                    style=\"width: 480px;\"\n                    @submit=\"handleSearch\" />\n            </template>\n        </list-action-layout>\n        <render-list\n            ref=\"list\"\n            :data-source=\"getBucketList\"\n            @on-refresh=\"handleListRefresh\">\n            <template v-for=\"(column, index) in renderColumns\">\n                <render-file-list-column\n                    :column=\"column\"\n                    :key=\"`${path}_${index}`\"\n                    :file-source-id=\"fileSourceId\"\n                    :link-handler=\"handleLink\"\n                    :action-handler=\"handleAction\"\n                    @on-link=\"handleLink\"\n                    @on-action=\"handleAction\" />\n            </template>\n        </render-list>\n    </div>\n</template>\n<script>\n    import _ from 'lodash';\n       import FileService from '@service/file';\n    import ListActionLayout from '@components/list-action-layout';\n    import RenderList from '@components/render-list';\n    import RenderFileListColumn from '@components/render-file-list-column';\n\n    export default {\n        name: 'FileList',\n        components: {\n            ListActionLayout,\n            RenderList,\n            RenderFileListColumn,\n        },\n        data () {\n            return {\n                renderColumns: [],\n                path: 'a/b/c/d',\n                fileSourceInfo: { alias: 'alias' },\n            };\n        },\n        computed: {\n            isSkeletonLoading () {\n                return this.$refs.list.isLoading;\n            },\n            /**\n             * @desc 面包屑路径\n             * @return {Array}\n             */\n            pathStack () {\n                return this.path.split('/').reduce((result, item) => {\n                    if (item) {\n                        const last = result.length > 0 ? result[result.length - 1].path : '';\n                         \n                        result.push({\n                            path: `${last}${item}/`,\n                            name: item,\n                        });\n                    }\n                    return result;\n                }, []);\n            },\n        },\n        created () {\n            this.parseUrl();\n            this.getBucketList = FileService.fetchgetListFileNode;\n        },\n        mounted () {\n            this.fetchData();\n        },\n        methods: {\n            /**\n             * @desc 获取bucket储存桶数据\n             */\n            fetchData () {\n                this.$refs.list.$emit('onFetch', {\n                    fileSourceId: this.fileSourceId,\n                    path: this.path,\n                    name: this.name,\n                });\n            },\n            /**\n             * @desc 解析url参数\n             */\n            parseUrl () {\n                const {\n                    fileSourceId = '',\n                    path = '',\n                    name = '',\n                } = this.$route.query;\n\n                this.fileSourceId = fileSourceId;\n                this.path = path;\n                this.name = name;\n            },\n            /**\n             * @desc 文件路径返回上一级\n             */\n            handleBackLast () {\n                const lastPath = this.pathStack[this.pathStack.length - 2];\n                this.handlePathLocation(lastPath.path);\n            },\n            /**\n             * @desc 表格数据刷新回调\n             * @param {Object} data 用户输入的过滤数据\n             *\n             * 重新拉取数据\n             */\n            handleListRefresh (data) {\n                // 过滤掉 checkbox 列\n                this.renderColumns = Object.freeze(data.metaData.properties.filter(_ => _.type !== 'checkbox'));\n                this.fileSourceInfo = Object.freeze(data.fileSourceInfo);\n            },\n            /**\n             * @desc 搜索\n             * @param {String} name 搜索文件名\n             *\n             * 重新拉取数据\n             */\n            handleSearch (name) {\n                this.name = name;\n                this.fetchData();\n            },\n            /**\n             * @desc 跳转到文件源列表\n             */\n            handleGoFileSource () {\n                this.$router.push({\n                    name: 'sourceFileList',\n                });\n            },\n            /**\n             * @desc 面包屑切换列表\n             * @param {String} path 文件路径\n             */\n            handlePathLocation (path) {\n                if (_.trim(path, '/') === _.trim(this.path, '/')) {\n                    return;\n                }\n                this.name = '';\n                this.path = path;\n                this.fetchData();\n            },\n            /**\n             * @desc 行数据跳转链接\n             * @param {String} path 文件路径\n             */\n            handleLink (path) {\n                this.name = '';\n                this.path = path;\n                this.fetchData();\n            },\n            /**\n             * @desc 行数据执行操作\n             * @param {String} actionCode 操作类型code\n             * @param {Object} params 操作所需参数\n             */\n            handleAction (actionCode, params) {\n                return FileService.executeAction({\n                    fileSourceId: this.fileSourceId,\n                    actionCode,\n                    params,\n                }).then(() => {\n                    this.messageSuccess('操作成功');\n                    this.fetchData();\n                });\n            },\n            /**\n             * @desc 跳转到文件源列表页面\n             */\n            routerBack () {\n                this.$router.push({\n                    name: 'sourceFileList',\n                });\n            },\n        },\n    };\n</script>\n<style lang=\"postcss\">\n    .file-node-list-page {\n        .list-action-layout {\n            .right-box {\n                flex: 1;\n            }\n\n            .list-breadcrumb {\n                width: 100%;\n            }\n        }\n    }\n</style>\n"],"names":[],"sourceRoot":""}