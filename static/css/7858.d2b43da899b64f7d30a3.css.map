{"version":3,"file":"static/css/7858.d2b43da899b64f7d30a3.css","mappings":"AA+XA,mBACA,mBAcA,CAZA,8CACA,kBACA,SACA,CAEA,uCACA,WAKA,CAHA,6DACA,UACA","sources":["webpack://job/./src/views/account-manage/index/components/operation.vue"],"sourcesContent":["<template>\n    <div class=\"operation-account\" v-bkloading=\"{ isLoading }\">\n        <jb-form\n            ref=\"operateAccountForm\"\n            :model=\"formData\"\n            :rules=\"rules\"\n            :key=\"`${formData.category}_${formData.type}`\"\n            form-type=\"vertical\"\n            v-test=\"{ type: 'form', value: 'createAccount' }\">\n            <jb-form-item :label=\"'用途'\" required style=\"margin-bottom: 20px;\">\n                <div class=\"radio-button-group-wraper\">\n                    <bk-radio-group\n                        :value=\"formData.category\"\n                        @change=\"handleCategoryChange\">\n                        <bk-radio-button\n                            v-for=\"item in categoryList\"\n                            :key=\"item.value\"\n                            :value=\"item.value\"\n                            \n                            class=\"account-type-radio\">\n                            {{ item.name }}\n                        </bk-radio-button>\n                    </bk-radio-group>\n                </div>\n            </jb-form-item>\n            <component\n                :is=\"accountCom\"\n                :key=\"formData.category\"\n                :form-data=\"formData\"\n                :is-edit=\"isEdit\"\n                :name-placeholder=\"namePlaceholder\"\n                :change=\"handleFieldChange\" />\n        </jb-form>\n    </div>\n</template>\n<script>\n    import QueryGlobalSettingService from '@service/query-global-setting';\n    import AccountManageService from '@service/account-manage';\n    import AccountModel from '@model/account';\n    import { accountAliasNameRule } from '@utils/validator';\n    import JbInput from '@components/jb-input';\n    import AccountSelect from '@components/account-select';\n    import AccountDatabase from './account-strategy/database-account';\n    import AccountOS from './account-strategy/os-account';\n\n    const generatorDefault = () => ({\n        id: '',\n        account: '',\n        alias: '',\n        category: AccountModel.OS,\n        dbPassword: '',\n        dbPort: '',\n        dbSystemAccountId: '',\n        grantees: [],\n        os: '',\n        password: '',\n        remark: '',\n        type: AccountModel.TYPE_LINUX,\n        rePassword: '',\n    });\n\n    export default {\n        name: 'OperationAccount',\n        components: {\n            JbInput,\n            AccountSelect,\n        },\n        props: {\n            data: {\n                type: Object,\n                default: () => ({}),\n            },\n        },\n        data () {\n            return {\n                isLoading: true,\n                isEdit: false,\n                isRulesLoadingError: false,\n                formData: generatorDefault(),\n                currentRules: Object.freeze({\n                    linux: {\n                        expression: '.',\n                    },\n                    windows: {\n                        expression: '.',\n                    },\n                    db: {\n                        expression: '.',\n                    },\n                }),\n            };\n        },\n        computed: {\n            /**\n             * @desc 账号分类对应的表单\n             * @returns { Object }\n             */\n            accountCom () {\n                const comMap = {\n                    [AccountModel.OS]: AccountOS,\n                    [AccountModel.DB]: AccountDatabase,\n                };\n                return comMap[this.formData.category];\n            },\n            /**\n             * @desc 账号名称 Input 输入框的placeholder, 读账号名称规则的配置\n             * @returns { Boolean }\n             */\n            namePlaceholder () {\n                if (this.isLoading) {\n                    return '';\n                }\n                // DB 账号的命名规则\n                if (this.formData.category === AccountModel.DB) {\n                    return this.currentRules.db.description;\n                }\n                // linux 账号的命名规则\n                if (this.formData.type === AccountModel.TYPE_LINUX) {\n                    return this.currentRules.linux.description;\n                }\n                // windows 账号的命名规则\n                return this.currentRules.windows.description;\n            },\n            rules () {\n                if (this.isLoading) {\n                    return {};\n                }\n                const baseRule = {\n                    account: [\n                        {\n                            required: true,\n                            message: '名称必填',\n                            trigger: 'blur',\n                        },\n                        \n                    ],\n                    alias: [\n                        {\n                            required: true,\n                            message: '别名必填',\n                            trigger: 'blur',\n                        },\n                        {\n                            validator: accountAliasNameRule.validator,\n                            message: accountAliasNameRule.message,\n                            trigger: 'blur',\n                        },\n                    ],\n                };\n                // db账号\n                if (this.formData.category === AccountModel.DB) {\n                    // DB 账号管理员配置规则\n                    baseRule.account.push({\n                        validator: (value) => {\n                            const regx = new RegExp(this.currentRules.db.expression);\n                            return regx.test(value);\n                        },\n                        message: this.currentRules.db.description,\n                        trigger: 'blur',\n                    });\n                    return {\n                        ...baseRule,\n                        dbPassword: [\n                            {\n                                validator: value => !/[\\u4e00-\\u9fa5]/.test(value),\n                                message: '密码不支持中文',\n                                trigger: 'blur',\n                            },\n                        ],\n                        rePassword: [\n                            {\n                                validator: value => this.formData.rePassword === this.formData.dbPassword,\n                                message: '密码不一致',\n                                trigger: 'blur',\n                            },\n                        ],\n                        dbPort: [\n                            {\n                                required: true,\n                                message: '端口必填',\n                                trigger: 'blur',\n                            },\n                        ],\n                        dbSystemAccountId: [\n                            {\n                                required: true,\n                                message: '依赖系统账号必填',\n                                trigger: 'blur',\n                            },\n                        ],\n                    };\n                }\n                // Linux系统账号不需要密码\n                if (this.formData.type === AccountModel.TYPE_LINUX) {\n                    // linux 管理源配置账号规则\n                    baseRule.account.push({\n                        validator: (value) => {\n                            const regx = new RegExp(this.currentRules.linux.expression);\n                            return regx.test(value);\n                        },\n                        message: this.currentRules.linux.description,\n                        trigger: 'blur',\n                    });\n                    return baseRule;\n                }\n\n                // windows 系统管理员配置规则\n                baseRule.account.push({\n                    validator: (value) => {\n                        const regx = new RegExp(this.currentRules.windows.expression);\n                        return regx.test(value);\n                    },\n                    message: this.currentRules.windows.description,\n                    trigger: 'blur',\n                });\n                return {\n                    ...baseRule,\n                    password: [\n                        {\n                            required: true,\n                            message: '密码必填',\n                            trigger: 'blur',\n                        },\n                        {\n                            validator: value => !/[\\u4e00-\\u9fa5]/.test(value),\n                            message: '密码不支持中文',\n                            trigger: 'blur',\n                        },\n                    ],\n                    rePassword: [\n                        {\n                            validator: value => value === this.formData.password,\n                            message: '密码不一致',\n                            trigger: 'blur',\n                        },\n                    ],\n                };\n            },\n        },\n        created () {\n            this.fetchRules();\n            \n            this.categoryList = [\n                {\n                    value: AccountModel.OS,\n                    name: '系统账号',\n                },\n                {\n                    value: AccountModel.DB,\n                    name: '数据库账号',\n                },\n            ];\n\n            if (this.data.id) {\n                this.isEdit = true;\n                const {\n                    id,\n                    account,\n                    alias,\n                    category,\n                    dbPassword,\n                    dbPort,\n                    dbSystemAccountId,\n                    grantees,\n                    os,\n                    password,\n                    remark,\n                    type,\n                } = this.data;\n                // 确认密码字段，优先判断 password 字段优先级高，然后是 dbPassword\n                let rePassword = dbPassword;\n                if (password) {\n                    rePassword = password;\n                }\n                this.formData = {\n                    id,\n                    account,\n                    alias,\n                    category,\n                    dbPassword,\n                    dbPort,\n                    dbSystemAccountId,\n                    grantees,\n                    os,\n                    password,\n                    remark,\n                    type,\n                    rePassword,\n                };\n            }\n        },\n        methods: {\n            /**\n             * @desc 获取管理员配置的账号命名规则\n             */\n            fetchRules () {\n                if (this.data.id) {\n                    this.isLoading = false;\n                    return Promise.resolve();\n                }\n                return QueryGlobalSettingService.fetchAllNameRule()\n                    .then((data) => {\n                        const { currentRules } = data;\n                        this.currentRules = Object.freeze(currentRules.reduce((result, item) => {\n                            result[item.osTypeKey] = item;\n                            return result;\n                        }, {}));\n                    })\n                    .catch(() => {\n                        this.isRulesLoadingError = false;\n                    })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            },\n            /**\n             * @desc 提交新建账号\n             */\n            createAccount () {\n                const params = { ...this.formData };\n                delete params.rePassword;\n                return AccountManageService.createAccount(params)\n                    .then(() => {\n                        this.messageSuccess('新建账号成功');\n                        this.$emit('on-change');\n                    });\n            },\n            /**\n             * @desc 提交编辑账号\n             */\n            updateAccount () {\n                const params = { ...this.formData };\n                delete params.rePassword;\n                return AccountManageService.updateAccount(params)\n                    .then(() => {\n                        this.messageSuccess('编辑账号成功');\n                        this.$emit('on-change');\n                    });\n            },\n            /**\n             * @desc 账号分类切换\n             * @param { Number } category\n             *\n             * 切换账号分类重置表单验证\n             */\n            handleCategoryChange (category) {\n                this.formData = generatorDefault();\n                this.formData.category = category;\n                const defaultType = {\n                    [AccountModel.OS]: AccountModel.TYPE_LINUX,\n                    [AccountModel.DB]: AccountModel.TYPE_MYSQL,\n                };\n                this.formData.type = defaultType[category];\n                this.$refs.operateAccountForm.clearError();\n            },\n            /**\n             * @desc 表单字段更新\n             * @param { String } key\n             * @param { Any } value\n             */\n            handleFieldChange (key, value) {\n                this.formData[key] = value;\n            },\n            /**\n             * @desc 表单提交\n             */\n            submit () {\n                if (this.isRulesLoadingError) {\n                    this.messageWarn('命名规则请求失败无法执行当前操作，请刷新页面');\n                    return Promise.reject(Error('rule error'));\n                }\n                return this.$refs.operateAccountForm.validate()\n                    .then(() => {\n                        if (this.formData.id) {\n                            return this.updateAccount();\n                        }\n                        return this.createAccount();\n                    });\n            },\n        },\n    };\n</script>\n<style lang=\"postcss\">\n    .operation-account {\n        margin-bottom: -20px;\n\n        .radio-button-group-wraper {\n            position: relative;\n            z-index: 1;\n        }\n\n        .account-type-radio {\n            width: 120px;\n\n            .bk-radio-button-text {\n                width: 100%;\n            }\n        }\n    }\n</style>\n"],"names":[],"sourceRoot":""}