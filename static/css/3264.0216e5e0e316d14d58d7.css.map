{"version":3,"file":"static/css/3264.0216e5e0e316d14d58d7.css","mappings":"AA6pBA,2CAGA,cADA,eADA,iBAkBA,CAdA,iDAIA,wBACA,UAHA,kBACA,oBAFA,UAKA,CAEA,2DAGA,SACA,iBAHA,kBACA,OAGA","sources":["webpack://job/./src/views/executive-history/list/index.vue"],"sourcesContent":["\n<template>\n    <div class=\"executive-history-page\">\n        <list-action-layout>\n            <jb-search-select\n                ref=\"search\"\n                @on-change=\"handleSearch\"\n                :data=\"searchSelect\"\n                :placeholder=\"'搜索任务ID，任务名称，执行方式，任务类型，任务状态，执行人...'\"\n                style=\"width: 600px;\" />\n            <template #right>\n                <bk-date-picker\n                    ref=\"datePicker\"\n                    :value=\"defaultDateTime\"\n                    :placeholder=\"'选择日期'\"\n                    :shortcuts=\"shortcuts\"\n                    type=\"datetimerange\"\n                    :shortcut-close=\"true\"\n                    :use-shortcut-text=\"true\"\n                    :clearable=\"false\"\n                    up-to-now\n                    @change=\"handleDateChange\" />\n            </template>\n        </list-action-layout>\n        <render-list\n            ref=\"list\"\n            :size=\"tableSize\"\n            :data-source=\"fetchExecutionHistoryList\"\n            :search-control=\"() => $refs.search\"\n            class=\"executive-history-table\"\n            v-test=\"{ type: 'list', value: 'execHistory' }\">\n            <bk-table-column\n                v-if=\"allRenderColumnMap.id\"\n                label=\"ID\"\n                prop=\"id\"\n                key=\"id\"\n                width=\"130\"\n                align=\"left\">\n                <template slot-scope=\"{ row }\">\n                    <auth-button\n                        :permission=\"row.canView\"\n                        auth=\"task_instance/view\"\n                        :resource-id=\"row.id\"\n                        text\n                        @click=\"handleGoDetail(row)\">\n                        {{ row.id }}\n                    </auth-button>\n                </template>\n            </bk-table-column>\n            <bk-table-column\n                v-if=\"allRenderColumnMap.name\"\n                :label=\"'任务名称'\"\n                prop=\"name\"\n                key=\"name\"\n                min-width=\"200\"\n                align=\"left\"\n                show-overflow-tooltip />\n            <bk-table-column\n                v-if=\"allRenderColumnMap.startupModeDesc\"\n                :label=\"'执行方式'\"\n                prop=\"startupModeDesc\"\n                key=\"startupModeDesc\"\n                width=\"120\"\n                align=\"left\" />\n            <bk-table-column\n                v-if=\"allRenderColumnMap.typeDesc\"\n                :label=\"'任务类型'\"\n                prop=\"typeDesc\"\n                key=\"typeDesc\"\n                width=\"140\"\n                align=\"left\" />\n            <bk-table-column\n                v-if=\"allRenderColumnMap.statusDesc\"\n                :label=\"'任务状态'\"\n                prop=\"statusDesc\"\n                key=\"statusDesc\"\n                width=\"140\"\n                align=\"left\">\n                <template slot-scope=\"{ row }\">\n                    <Icon\n                        svg\n                        :type=\"row.statusIconType\"\n                        :class=\"{\n                            'rotate-loading': row.isDoing,\n                        }\"\n                        style=\"font-size: 16px; color: #3a84ff; vertical-align: middle;\" />\n                    <span style=\"vertical-align: middle;\">{{ row.statusDesc }}</span>\n                </template>\n            </bk-table-column>\n            <bk-table-column\n                v-if=\"allRenderColumnMap.operator\"\n                :label=\"'执行人'\"\n                prop=\"operator\"\n                key=\"operator\"\n                width=\"140\"\n                align=\"left\" />\n            <bk-table-column\n                v-if=\"allRenderColumnMap.createTime\"\n                :label=\"'开始时间'\"\n                prop=\"createTime\"\n                key=\"createTime\"\n                width=\"180\"\n                align=\"left\" />\n            <bk-table-column\n                v-if=\"allRenderColumnMap.totalTimeText\"\n                :label=\"'耗时时长'\"\n                prop=\"totalTimeText\"\n                key=\"totalTimeText\"\n                width=\"130\"\n                align=\"right\" />\n            <bk-table-column\n                :label=\"'操作'\"\n                width=\"150\"\n                key=\"action\"\n                fixed=\"right\"\n                align=\"left\">\n                <template slot-scope=\"{ row }\">\n                    <auth-button\n                        :permission=\"row.canView\"\n                        auth=\"task_instance/view\"\n                        :resource-id=\"row.id\"\n                        text\n                        @click=\"handleGoDetail(row)\">\n                        {{ '查看详情' }}\n                    </auth-button>\n                    <auth-button\n                        v-if=\"!redoRequestMap[row.id]\"\n                        :permission=\"row.canExecute\"\n                        auth=\"task_instance/redo\"\n                        :resource-id=\"row.id\"\n                        text\n                        @click=\"handleGoRetry(row)\">\n                        {{ '去重做' }}\n                    </auth-button>\n                    <span\n                        v-else\n                        class=\"task-redo-loading ml10\"\n                        :data-text=\"'去重做'\">\n                        <Icon\n                            svg\n                            type=\"sync-pending\"\n                            class=\"rotate-loading\" />\n                    </span>\n                </template>\n            </bk-table-column>\n            <bk-table-column type=\"setting\">\n                <bk-table-setting-content\n                    :fields=\"tableColumn\"\n                    :selected=\"selectedTableColumn\"\n                    :size=\"tableSize\"\n                    @setting-change=\"handleSettingChange\" />\n            </bk-table-column>\n        </render-list>\n    </div>\n</template>\n<script>\n       import TaskExecuteService from '@service/task-execute';\n    import NotifyService from '@service/notify';\n    import { prettyDateTimeFormat } from '@utils/assist';\n    import { listColumnsCache } from '@utils/cache-helper';\n    import { IPRule } from '@utils/validator';\n    import ListActionLayout from '@components/list-action-layout';\n    import RenderList from '@components/render-list';\n    import JbSearchSelect from '@components/jb-search-select';\n\n    const TABLE_COLUMN_CACHE = 'execute_history_list_columns';\n\n    export default {\n        name: '',\n        components: {\n            ListActionLayout,\n            RenderList,\n            JbSearchSelect,\n        },\n        data () {\n            return {\n                showOperation: false,\n                searchParams: {\n                    startTime: '',\n                    endTime: '',\n                },\n                defaultDateTime: [\n                    '', '',\n                ],\n                selectedTableColumn: [],\n                tableSize: 'small',\n                redoRequestMap: {},\n            };\n        },\n        computed: {\n            isSkeletonLoading () {\n                return this.$refs.list.isLoading;\n            },\n            searchInfoEnable () {\n                return !!this.searchParams.taskInstanceId;\n            },\n            allRenderColumnMap () {\n                return this.selectedTableColumn.reduce((result, item) => {\n                    result[item.id] = true;\n                    return result;\n                }, {});\n            },\n        },\n        created () {\n            this.parseDefaultDateTime();\n            this.fetchExecutionHistoryList = TaskExecuteService.fetchExecutionHistoryList;\n            this.searchSelect = [\n                {\n                    name: 'ID',\n                    id: 'taskInstanceId',\n                    description: '将覆盖其它条件',\n                    validate (values, item) {\n                        const validate = values.every(_ => /^(\\d*)$/.test(_.name));\n                        return !validate ? 'ID只支持数字' : true;\n                    },\n                },\n                {\n                    name: '任务名称',\n                    id: 'taskName',\n                    default: true,\n                },\n                {\n                    name: '目标 IP',\n                    id: 'ip',\n                    validate (values, item) {\n                        const validate = values.every(_ => IPRule.validator(_.name));\n                        return !validate ? IPRule.message : true;\n                    },\n                },\n                {\n                    name: '执行耗时',\n                    id: 'totalTimeType',\n                    children: [\n                        {\n                            name: '≤ 60s',\n                            id: 'LESS_THAN_ONE_MINUTE',\n                        },\n                        {\n                            name: '＞60s and ≤ 600s',\n                            id: 'ONE_MINUTE_TO_TEN_MINUTES',\n                        },\n                        {\n                            name: '＞ 600s',\n                            id: 'MORE_THAN_TEN_MINUTES',\n                        },\n                    ],\n                },\n                {\n                    name: '执行方式',\n                    id: 'startupModes',\n                    children: [\n                        {\n                            name: '页面执行',\n                            id: 1,\n                        },\n                        {\n                            name: '定时执行',\n                            id: 3,\n                        },\n                        {\n                            name: 'API调用',\n                            id: 2,\n                        },\n                    ],\n                },\n                {\n                    name: '任务类型',\n                    id: 'taskType',\n                    children: [\n                        {\n                            name: '作业执行',\n                            id: 0,\n                        },\n                        {\n                            name: '脚本执行',\n                            id: 1,\n                        },\n                        {\n                            name: '文件分发',\n                            id: 2,\n                        },\n                    ],\n                },\n                {\n                    name: '任务状态',\n                    id: 'status',\n                    children: [\n                        {\n                            name: '等待执行',\n                            id: 1,\n                        },\n                        {\n                            name: '正在执行',\n                            id: 2,\n                        },\n                        {\n                            name: '执行成功',\n                            id: 3,\n                        },\n                        {\n                            name: '执行失败',\n                            id: 4,\n                        },\n                        {\n                            name: '等待确认',\n                            id: 7,\n                        },\n                        {\n                            name: '强制终止中',\n                            id: 10,\n                        },\n                        {\n                            name: '强制终止成功',\n                            id: 11,\n                        },\n                        {\n                            name: '确认终止',\n                            id: 13,\n                        },\n                        {\n                            name: '被丢弃',\n                            id: 14,\n                        },\n                    ],\n                },\n                {\n                    name: '执行人',\n                    id: 'operator',\n                    remoteMethod: NotifyService.fetchUsersOfSearch,\n                    inputInclude: true,\n                },\n            ];\n            this.shortcuts = [\n                {\n                    text: '近1小时',\n                    value () {\n                        const end = new Date();\n                        const start = new Date();\n                        start.setTime(start.getTime() - 3600000);\n                        return [\n                            start, end,\n                        ];\n                    },\n                },\n                {\n                    text: '近12小时',\n                    value () {\n                        const end = new Date();\n                        const start = new Date();\n                        start.setTime(start.getTime() - 43200000);\n                        return [\n                            start, end,\n                        ];\n                    },\n                },\n                {\n                    text: '近1天',\n                    value () {\n                        const end = new Date();\n                        const start = new Date();\n                        start.setTime(start.getTime() - 86400000);\n                        return [\n                            start, end,\n                        ];\n                    },\n                },\n                {\n                    text: '近7天',\n                    value () {\n                        const end = new Date();\n                        const start = new Date();\n                        start.setTime(start.getTime() - 604800000);\n                        return [\n                            start, end,\n                        ];\n                    },\n                },\n            ];\n            this.tableColumn = [\n                {\n                    id: 'id',\n                    label: '任务 ID',\n                    disabled: true,\n                },\n                {\n                    id: 'name',\n                    label: '任务名称',\n                    disabled: true,\n                },\n                {\n                    id: 'startupModeDesc',\n                    label: '执行方式',\n                    disabled: true,\n                },\n                {\n                    id: 'typeDesc',\n                    label: '任务类型',\n                },\n                {\n                    id: 'statusDesc',\n                    label: '任务状态',\n                    disabled: true,\n                },\n                {\n                    id: 'operator',\n                    label: '执行人',\n                },\n                {\n                    id: 'createTime',\n                    label: '开始时间',\n                },\n                {\n                    id: 'totalTimeText',\n                    label: '耗时时长',\n                },\n            ];\n            const columnsCache = listColumnsCache.getItem(TABLE_COLUMN_CACHE);\n            if (columnsCache) {\n                this.selectedTableColumn = Object.freeze(columnsCache.columns);\n                this.tableSize = columnsCache.size;\n            } else {\n                this.selectedTableColumn = Object.freeze([\n                    { id: 'id' },\n                    { id: 'name' },\n                    { id: 'startupModeDesc' },\n                    { id: 'typeDesc' },\n                    { id: 'statusDesc' },\n                    { id: 'operator' },\n                    { id: 'createTime' },\n                    { id: 'totalTimeText' },\n                ]);\n            }\n        },\n        methods: {\n            /**\n             * @desc 获取列表数据\n             */\n            fetchData () {\n                this.$refs.list.$emit('onFetch', this.searchParams);\n            },\n            /**\n             * @desc 重做任务\n             */\n            redoTask (taskInstanceId) {\n                TaskExecuteService.redoTask({\n                    taskInstanceId,\n                    taskVariables: [],\n                }).then(({ taskInstanceId }) => {\n                    this.$bkMessage({\n                        theme: 'success',\n                        message: '执行成功',\n                    });\n                    this.$router.push({\n                        name: 'historyTask',\n                        params: {\n                            id: taskInstanceId,\n                        },\n                    });\n                });\n            },\n            /**\n             * @desc 列表默认的执行时间筛选值\n             */\n            parseDefaultDateTime () {\n                const defaultDateTime = [\n                    '', '',\n                ];\n                const searchParams = {\n                    startTime: '',\n                    endTime: '',\n                };\n                \n                const currentTime = new Date().getTime();\n                \n                if (Object.prototype.hasOwnProperty.call(this.$route.query, 'startTime')) {\n                    defaultDateTime[0] = this.$route.query.startTime;\n                } else {\n                    defaultDateTime[0] = prettyDateTimeFormat(currentTime - 86400000);\n                }\n                \n                searchParams.startTime = defaultDateTime[0]; // eslint-disable-line prefer-destructuring\n\n                if (Object.prototype.hasOwnProperty.call(this.$route.query, 'endTime')) {\n                    defaultDateTime[1] = this.$route.query.endTime;\n                    searchParams.endTime = this.$route.query.endTime;\n                } else {\n                    defaultDateTime[1] = prettyDateTimeFormat(currentTime);\n                    searchParams.endTime = '';\n                }\n                this.defaultDateTime = defaultDateTime;\n                this.searchParams = searchParams;\n                if (!searchParams.endTime) {\n                    setTimeout(() => {\n                        this.setToNowText(this.defaultDateTime);\n                    });\n                }\n            },\n            /**\n             * @desc 自定义表格显示\n             */\n            handleSettingChange ({ fields, size }) {\n                this.selectedTableColumn = Object.freeze(fields);\n                this.tableSize = size;\n                listColumnsCache.setItem(TABLE_COLUMN_CACHE, {\n                    columns: fields,\n                    size,\n                });\n            },\n            /**\n             * @desc 自定义表格显示\n             * @param {Object} params 筛选值\n             */\n            handleSearch (params) {\n                const { startTime, endTime } = this.searchParams;\n                this.searchParams = {\n                    ...params,\n                    startTime,\n                    endTime,\n                };\n                this.fetchData();\n            },\n            /**\n             * @desc 筛选时间\n             * @param {Array} date 时间值\n             * @param {String} type 选择类型\n             */\n            handleDateChange (date, type) {\n                if (type === 'upToNow') {\n                    this.setToNowText(date);\n                }\n                this.searchParams.startTime = date[0];// eslint-disable-line prefer-destructuring\n                this.searchParams.endTime = type === 'upToNow' ? '' : date[1];\n                this.fetchData();\n            },\n            /**\n             * @desc 日期值显示为至今\n             * @param {Array} date 日期值\n             */\n            setToNowText (date) {\n                this.$refs.datePicker.shortcut = {\n                    text: `${date[0]} ${'至今'}`,\n                };\n            },\n            /**\n             * @desc 调整执行详情页面\n             * @param {Object} taskInstance 任务详情\n             *\n             * 如果作业类型的跳转到作业执行详情，如果不是则跳到步骤执行详情\n             */\n            handleGoDetail (taskInstance) {\n                if (!taskInstance.isTask) {\n                    this.$router.push({\n                        name: 'historyTask',\n                        params: {\n                            id: 1 || taskInstance.id,\n                        },\n                    });\n                    return;\n                }\n                this.$router.push({\n                    name: 'historyStep',\n                    params: {\n                        taskInstanceId: 1 || taskInstance.id,\n                    },\n                    query: {\n                        from: 'historyList',\n                    },\n                });\n            },\n            /**\n             * @desc 重做执行任务\n             * @param {Object} taskInstance 任务详情\n             *\n             * 1，作业执行\n             *  —— 有变量需要先去变量设置页面设置变量值\n             *  —— 没有变量直接重做\n             * 2，快速执行脚本\n             *  —— 跳转到快速执行脚本页面\n             * 3，快速分发文件\n             *  —— 跳转到快速分发文件页面\n             */\n            handleGoRetry (taskInstance) {\n                // 作业执行\n                if (!taskInstance.isTask) {\n                    // 当重做接口比较慢时页面可能存在多个重做请求，避免重复操作需要禁用正在重做的任务操作\n                    this.redoRequestMap = {\n                        ...this.redoRequestMap,\n                        [taskInstance.id]: true,\n                    };\n\n                    // 历史作业任务详情\n                    // TaskExecuteService.fetchTaskInstance({\n                    //     id: taskInstance.id,\n                    // }).then(({ variables }) => {\n                    const variables = [1];\n                    // 有变量，去设置变量\n                    if (variables.length > 0) {\n                        this.redoRequestMap[taskInstance.id] = false;\n                        this.$router.push({\n                            name: 'redoTask',\n                            params: {\n                                taskInstanceId: taskInstance.id,\n                            },\n                        });\n                        return;\n                    }\n                    // 没有变量直接执行\n                    this.$bkInfo({\n                        title: '确认执行？',\n                        subTitle: '该方案未设置全局变量，点击确认将直接执行。',\n                        confirmFn: () => {\n                            TaskExecuteService.redoTask({\n                                taskInstanceId: taskInstance.id,\n                                taskVariables: [],\n                            }).then(({ taskInstanceId }) => {\n                                this.$bkMessage({\n                                    theme: 'success',\n                                    message: '执行成功',\n                                });\n                                this.$router.push({\n                                    name: 'historyTask',\n                                    params: {\n                                        id: taskInstanceId,\n                                    },\n                                });\n                            })\n                                .finally(() => {\n                                    this.redoRequestMap[taskInstance.id] = false;\n                                });\n                        },\n                    });\n                    // })\n                    // .catch(() => {\n                    //     this.redoRequestMap[taskInstance.id] = false;\n                    // });\n                }\n                // 快速执行脚本\n                // 去快速执行脚本页面重做\n                if (taskInstance.isScript) {\n                    this.$router.push({\n                        name: 'fastExecuteScript',\n                        params: {\n                            taskInstanceId: taskInstance.id,\n                        },\n                        query: {\n                            from: 'executiveHistory',\n                        },\n                    });\n                    return;\n                }\n                // 快速分发文件\n                // 去快速执行分发文件页面重做\n                if (taskInstance.isFile) {\n                    this.$router.push({\n                        name: 'fastPushFile',\n                        params: {\n                            taskInstanceId: taskInstance.id,\n                        },\n                        query: {\n                            from: 'executiveHistory',\n                        },\n                    });\n                }\n            },\n        },\n    };\n</script>\n<style lang=\"postcss\">\n    .executive-history-page {\n        .task-redo-loading {\n            position: relative;\n            font-size: 14px;\n            color: #3a84ff;\n\n            &::after {\n                z-index: -1;\n                text-align: center;\n                word-break: keep-all;\n                content: attr(data-text);\n                opacity: 0%;\n            }\n\n            .rotate-loading {\n                position: absolute;\n                top: 2px;\n                left: 50%;\n                margin-left: -9px;\n            }\n        }\n    }\n</style>\n"],"names":[],"sourceRoot":""}