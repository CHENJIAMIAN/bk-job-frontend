{"version":3,"file":"static/css/4435.e9528c07dc727caf85f3.css","mappings":"AAiZA,gCACA,eACA,uBACA,CAIA,8CACA,kBAyBA,CAvBA,yDACA,eACA,CAEA,iEACA,WAiBA,CAfA,0BAHA,iEAIA,WAcA,CAbA,CAEA,0BAPA,iEAQA,WAUA,CATA,CAEA,0BAXA,iEAYA,WAMA,CALA,CAEA,0BAfA,iEAgBA,WAEA,CADA,CAIA,qCAQA,mBACA,8BAFA,cAFA,eACA,iBALA,eAEA,QADA,UAQA,2BACA,oBACA,+DARA,UA8DA,CApDA,4CACA,uBAKA,CAHA,yDACA,wBACA,CAGA,iDAWA,mBAEA,8BADA,+BAEA,2BANA,cAEA,eANA,aAWA,sBATA,YAUA,uBAbA,WAIA,iBANA,kBAQA,kBAPA,MAGA,UAkBA,CALA,8DAEA,cADA,kBAEA,kBACA,CAGA,sDACA,aAGA,sBACA,uBAHA,gBACA,cAGA,CAEA,2CAGA,eADA,kBADA,mBAGA,mBAMA,CAJA,iDAEA,mBADA,UAEA","sources":["webpack://job/./src/views/fast-execution/exec-script/index.vue"],"sourcesContent":["\r\n\r\n<template>\r\n    <div class=\"exec-script-page\" v-bkloading=\"{ isLoading }\">\r\n        <smart-action offset-target=\"bk-form-content\">\r\n            <jb-form\r\n                class=\"fast-execution-script-form\"\r\n                ref=\"execScriptForm\"\r\n                v-test=\"{ type: 'form', value: 'executeScript' }\"\r\n                :model=\"formData\">\r\n                <item-factory\r\n                    name=\"scriptName\"\r\n                    field=\"name\"\r\n                    :label=\"$t('execution.脚本名称')\"\r\n                    :placeholder=\"$t('execution.取一个便于记忆的任务名，方便后续在历史记录中快速定位...')\"\r\n                    :form-data=\"formData\"\r\n                    @on-change=\"handleChange\" />\r\n                <item-factory\r\n                    name=\"scriptSourceOfExecution\"\r\n                    script-source-field=\"scriptSource\"\r\n                    content-field=\"content\"\r\n                    language-field=\"scriptLanguage\"\r\n                    script-id-field=\"scriptId\"\r\n                    script-version-id-field=\"scriptVersionId\"\r\n                    :form-data=\"formData\"\r\n                    @on-reset=\"handleReset\" />\r\n                <item-factory\r\n                    :key=\"reset\"\r\n                    name=\"scriptContent\"\r\n                    script-source-field=\"scriptSource\"\r\n                    content-field=\"content\"\r\n                    language-field=\"scriptLanguage\"\r\n                    :form-data=\"formData\"\r\n                    @on-change=\"handleChange\" />\r\n                <item-factory\r\n                    name=\"scriptParam\"\r\n                    param-field=\"scriptParam\"\r\n                    secure-field=\"secureParam\"\r\n                    :form-data=\"formData\"\r\n                    @on-change=\"handleChange\" />\r\n                <item-factory\r\n                    name=\"scriptTimeout\"\r\n                    field=\"timeout\"\r\n                    :form-data=\"formData\"\r\n                    @on-change=\"handleChange\" />\r\n                <item-factory\r\n                    name=\"scriptAccount\"\r\n                    field=\"account\"\r\n                    script-language-field=\"scriptLanguage\"\r\n                    :form-data=\"formData\"\r\n                    @on-change=\"handleChange\" />\r\n                <item-factory\r\n                    name=\"executeTargetOfExecution\"\r\n                    field=\"targetServers\"\r\n                    :form-data=\"formData\"\r\n                    @on-change=\"handleChange\" />\r\n            </jb-form>\r\n            <template #action>\r\n                <div style=\"display: flex;\">\r\n                    <bk-button\r\n                        class=\"w120 mr10\"\r\n                        :loading=\"isSubmiting\"\r\n                        theme=\"primary\"\r\n                        @click=\"handleSubmit\"\r\n                        v-test=\"{ type: 'button', value: 'fastExecuteScriptSubmit' }\">\r\n                        {{ $t('execution.执行') }}\r\n                    </bk-button>\r\n                    <bk-button\r\n                        @click=\"handleCancel\"\r\n                        v-test=\"{ type: 'button', value: 'fastExecuteScriptCancel' }\">\r\n                        {{ $t('execution.重置') }}\r\n                    </bk-button>\r\n                </div>\r\n            </template>\r\n        </smart-action>\r\n        <div v-if=\"historyList.length > 0\" class=\"execution-history\" :class=\"{ active: isShowHistory }\">\r\n            <div class=\"toggle-btn\" @click=\"handleShowHistory\">\r\n                <Icon class=\"toggle-flag\" type=\"angle-double-left\" />\r\n                <div class=\"recent-result\">{{ $t('execution.最近结果') }}</div>\r\n            </div>\r\n            <div class=\"history-content\">\r\n                <div\r\n                    v-for=\"item in historyList\"\r\n                    class=\"item\"\r\n                    :key=\"item.id\"\r\n                    @click=\"handleGoHistoryDetail(item)\">\r\n                    {{ item.name }}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n    import I18n from '@/i18n';\r\n    import TaskExecuteService from '@service/task-execute';\r\n    import TaskStepModel from '@model/task/task-step';\r\n    import TaskHostNodeModel from '@model/task-host-node';\r\n    import ItemFactory from '@components/task-step/script/item-factory';\r\n    import {\r\n        genDefaultName,\r\n        scriptErrorAlert,\r\n    } from '@utils/assist';\r\n    import {\r\n        execScriptHistory,\r\n        debugScriptCache,\r\n    } from '@utils/cache-helper';\r\n\r\n    const getDefaultData = () => ({\r\n        isScriptContentLoading: false,\r\n        // 快速执行name\r\n        name: genDefaultName(I18n.t('execution.快速执行脚本')),\r\n        // 脚本来源\r\n        scriptSource: TaskStepModel.scriptStep.TYPE_SOURCE_LOCAL,\r\n        // 脚本类型，默认shell\r\n        scriptLanguage: 1,\r\n        // 引用脚本的id\r\n        scriptId: '',\r\n        // 引用脚本的版本id\r\n        scriptVersionId: '',\r\n        // 脚本内容\r\n        content: '',\r\n        // 脚本参数\r\n        scriptParam: '',\r\n        // 敏感参数 0-关闭 1-开启\r\n        secureParam: 0,\r\n        // 超时\r\n        timeout: 7200,\r\n        // 账号\r\n        account: '',\r\n        // 目标服务器\r\n        targetServers: new TaskHostNodeModel({}),\r\n    });\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            ItemFactory,\r\n        },\r\n        data () {\r\n            return {\r\n                reset: 0,\r\n                isLoading: false,\r\n                formData: getDefaultData(),\r\n                historyList: [],\r\n                isSubmiting: false,\r\n                isShowHistory: false,\r\n            };\r\n        },\r\n        created () {\r\n            this.parseUrlParams();\r\n        },\r\n        mounted () {\r\n            window.IPInputScope = 'SCRIPT_EXECUTE';\r\n            this.$once('hook:beforeDestroy', () => {\r\n                window.IPInputScope = '';\r\n            });\r\n        },\r\n        /**\r\n         * @desc 销毁时清空脚本调试的数据\r\n         */\r\n        beforeDestroy () {\r\n            debugScriptCache.clearItem();\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 重做时获取任务详细信息\r\n             */\r\n            fetchData () {\r\n                this.$request(TaskExecuteService.fetchTaskInstance({\r\n                    id: this.taskInstanceId,\r\n                }), () => {\r\n                    this.isLoading = true;\r\n                }).then((data) => {\r\n                    const {\r\n                        account,\r\n                        content,\r\n                        ignoreError,\r\n                        scriptId,\r\n                        scriptLanguage,\r\n                        scriptParam,\r\n                        scriptSource,\r\n                        scriptVersionId,\r\n                        secureParam,\r\n                        timeout,\r\n                        executeTarget,\r\n                    } = data.stepInfo.scriptStepInfo;\r\n\r\n                    this.formData = {\r\n                        ...this.formData,\r\n                        name: data.stepInfo.name,\r\n                        account,\r\n                        content,\r\n                        ignoreError,\r\n                        scriptId,\r\n                        scriptLanguage,\r\n                        scriptParam,\r\n                        scriptSource,\r\n                        scriptVersionId,\r\n                        secureParam,\r\n                        timeout,\r\n                        targetServers: executeTarget,\r\n                    };\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 解析url参数\r\n             *\r\n             * 有多种类型的url风格\r\n             * 1，脚本管理，调试脚本内容\r\n             * 2，从步骤执行详情页面回退，回填执行的任务数据\r\n             * 3，执行列表重做任务\r\n             * 4，脚本管理，执行指定版本脚本\r\n             */\r\n            parseUrlParams () {\r\n                const { model } = this.$route.query;\r\n                // 调试脚本模式\r\n                if (model === 'debugScript') {\r\n                    const debugScriptContent = debugScriptCache.getItem();\r\n                    if (debugScriptContent) {\r\n                        this.formData.content = debugScriptContent;\r\n                    }\r\n                    return;\r\n                }\r\n                this.taskInstanceId = parseInt(this.$route.params.taskInstanceId, 10);\r\n                this.scriptVersionId = parseInt(this.$route.params.scriptVersionId, 10);\r\n                const { from } = this.$route.query;\r\n                \r\n                this.timeTravel();\r\n\r\n                // 步骤执行详情历史编辑——从历史缓存数据中查找对应数据的formData\r\n                if (from === 'historyStep') {\r\n                    let historyRecord = null;\r\n                    if (this.taskInstanceId) {\r\n                        // 有指定taskInstanceId\r\n                        historyRecord = _.find(this.historyList, _ => _.taskInstanceId === this.taskInstanceId);\r\n                    } else {\r\n                        // 没有指定taskInstanceId，默认取第一个\r\n                        historyRecord = _.head(this.historyList);\r\n                    }\r\n                    // 历史缓存中有数据使用缓存数据\r\n                    if (historyRecord) {\r\n                        this.formData = historyRecord.formData;\r\n                        return;\r\n                    }\r\n                }\r\n                // 执行历史——通过taskInstanceId重做\r\n                if (this.taskInstanceId > 0) {\r\n                    this.fetchData();\r\n                    return;\r\n                }\r\n                \r\n                // 执行指定版本的脚本\r\n                if (this.scriptVersionId > 0) {\r\n                    this.formData.scriptVersionId = this.scriptVersionId;\r\n                    this.formData.scriptSource = TaskStepModel.scriptStep.TYPE_SOURCE_PUBLIC;\r\n                }\r\n            },\r\n            /**\r\n             * @desc 读取执行历史\r\n             */\r\n            timeTravel () {\r\n                this.historyList = Object.freeze(execScriptHistory.getItem());\r\n            },\r\n            /**\r\n             * @desc 缓存执行历史\r\n             */\r\n            pushLocalStorage (history) {\r\n                const historyList = execScriptHistory.getItem();\r\n                historyList.unshift(history);\r\n                execScriptHistory.setItem(historyList);\r\n            },\r\n            /**\r\n             * @desc 展开执行历史面板\r\n             */\r\n            handleShowHistory () {\r\n                this.isShowHistory = !this.isShowHistory;\r\n            },\r\n            /**\r\n             * @desc 定位到历史执行任务详情\r\n             * @param {Object} task 历史执行任务数据\r\n             */\r\n            handleGoHistoryDetail (task) {\r\n                this.$router.push({\r\n                    name: 'historyStep',\r\n                    params: {\r\n                        taskInstanceId: task.taskInstanceId,\r\n                    },\r\n                    query: {\r\n                        stepInstanceId: task.stepInstanceId,\r\n                        from: 'fastExecuteScript',\r\n                    },\r\n                });\r\n            },\r\n            /**\r\n             * @desc 表单字段更新\r\n             * @param {String} field 字段名\r\n             * @param {Any} value 字段值\r\n             */\r\n            handleChange (field, value) {\r\n                this.formData[field] = value;\r\n            },\r\n            /**\r\n             * @desc 批量更新字段\r\n             * @param {Object} payload 将要更新的字段值\r\n             */\r\n            handleReset (payload) {\r\n                this.formData = {\r\n                    ...this.formData,\r\n                    ...payload,\r\n                };\r\n            },\r\n            /**\r\n             * @desc 执行任务\r\n             */\r\n            handleSubmit () {\r\n                this.isSubmiting = true;\r\n                this.$refs.execScriptForm.validate()\r\n                    .then(() => {\r\n                        if (this.$store.state.scriptCheckError) {\r\n                            scriptErrorAlert();\r\n                            return;\r\n                        }\r\n                        const {\r\n                            name,\r\n                            scriptSource,\r\n                            scriptId,\r\n                            scriptVersionId,\r\n                            scriptLanguage,\r\n                            content,\r\n                            scriptParam,\r\n                            secureParam,\r\n                            timeout,\r\n                            account,\r\n                            targetServers,\r\n                        } = this.formData;\r\n\r\n                        const params = {\r\n                            name,\r\n                            scriptSource,\r\n                            scriptId,\r\n                            scriptVersionId,\r\n                            scriptLanguage,\r\n                            content,\r\n                            scriptParam,\r\n                            secureParam,\r\n                            timeout,\r\n                            account,\r\n                            targetServers,\r\n                        };\r\n                        // 重做时需要带上taskInstanceId，主要处理敏感参数\r\n                        // 标记是重做任务\r\n                        if (this.taskInstanceId) {\r\n                            params.taskInstanceId = this.taskInstanceId;\r\n                            params.isRedoTask = true;\r\n                        }\r\n                        \r\n                        return TaskExecuteService.executeScript(params)\r\n                            .then((data) => {\r\n                                window.changeAlert = false;\r\n                                this.$router.push({\r\n                                    name: 'historyStep',\r\n                                    params: {\r\n                                        taskInstanceId: data.taskInstanceId,\r\n                                    },\r\n                                    query: {\r\n                                        stepInstanceId: data.stepInstanceId,\r\n                                        from: 'fastExecuteScript',\r\n                                    },\r\n                                });\r\n                                this.pushLocalStorage({\r\n                                    id: Date.now(),\r\n                                    name,\r\n                                    taskInstanceId: data.taskInstanceId,\r\n                                    stepInstanceId: data.stepInstanceId,\r\n                                    formData: this.formData,\r\n                                });\r\n                            });\r\n                    })\r\n                    .catch(() => {\r\n                        this.isSubmiting = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 取消、重置操作数据\r\n             */\r\n            handleCancel () {\r\n                this.$refs.execScriptForm.clearError();\r\n                this.formData = getDefaultData();\r\n                this.reset += 1;\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    @import \"@/css/mixins/media\";\r\n\r\n    html[lang=\"en-US\"] {\r\n        .recent-result {\r\n            margin-top: 6px;\r\n            transform: rotate(90deg);\r\n        }\r\n    }\r\n\r\n    .exec-script-page {\r\n        .fast-execution-script-form {\r\n            margin-bottom: 10px;\r\n\r\n            .bk-select {\r\n                background: #fff;\r\n            }\r\n\r\n            .form-item-content {\r\n                width: 500px;\r\n\r\n                @media (--small-viewports) {\r\n                    width: 500px;\r\n                }\r\n\r\n                @media (--medium-viewports) {\r\n                    width: 560px;\r\n                }\r\n\r\n                @media (--large-viewports) {\r\n                    width: 620px;\r\n                }\r\n\r\n                @media (--huge-viewports) {\r\n                    width: 680px;\r\n                }\r\n            }\r\n        }\r\n\r\n        .execution-history {\r\n            position: fixed;\r\n            top: 127px;\r\n            right: 0;\r\n            z-index: 99;\r\n            font-size: 12px;\r\n            line-height: 30px;\r\n            color: #c4c6cc;\r\n            background: #63656e;\r\n            border-bottom-left-radius: 2px;\r\n            transform: translateX(100%);\r\n            transition: all 0.35s;\r\n            user-select: none;\r\n\r\n            &.active {\r\n                transform: translateX(0);\r\n\r\n                .toggle-flag {\r\n                    transform: rotateZ(180deg);\r\n                }\r\n            }\r\n\r\n            .toggle-btn {\r\n                position: absolute;\r\n                top: 0;\r\n                left: -22px;\r\n                display: flex;\r\n                width: 22px;\r\n                height: 88px;\r\n                line-height: 13px;\r\n                color: #dcdee5;\r\n                text-align: center;\r\n                cursor: pointer;\r\n                background: #63656e;\r\n                border-right: 1px solid #757783;\r\n                border-bottom-left-radius: 8px;\r\n                border-top-left-radius: 8px;\r\n                flex-direction: column;\r\n                justify-content: center;\r\n\r\n                .toggle-flag {\r\n                    margin-bottom: 5px;\r\n                    color: #979ba5;\r\n                    transition: all 0.2s;\r\n                }\r\n            }\r\n\r\n            .history-content {\r\n                display: flex;\r\n                min-height: 90px;\r\n                padding: 12px 0;\r\n                flex-direction: column;\r\n                justify-content: center;\r\n            }\r\n\r\n            .item {\r\n                padding-right: 16px;\r\n                padding-left: 16px;\r\n                cursor: pointer;\r\n                transition: all 0.15s;\r\n\r\n                &:hover {\r\n                    color: #fff;\r\n                    background: #4f515a;\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>\r\n"],"names":[],"sourceRoot":""}