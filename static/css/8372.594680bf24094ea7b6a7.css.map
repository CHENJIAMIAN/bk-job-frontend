{"version":3,"file":"static/css/8372.594680bf24094ea7b6a7.css","mappings":"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","sources":["webpack://job/./src/views/executive-history/task-detail/components/task-step/index.vue","webpack://job/./src/views/executive-history/task-detail/components/execution-process/index.vue","webpack://job/./src/views/executive-history/task-detail/index.vue"],"sourcesContent":["<template>\n    <component\n        :is=\"themeCom\"\n        v-bind=\"$attrs\"\n        :data=\"data\"\n        :choose=\"handleChoose\"\n        :handle-change-status=\"handleChangeStatus\" />\n</template>\n<script>\n       import TaskExecuteService from '@service/task-execute';\n    import ThemeNormal from './theme/normal';\n    import ThemeApproval from './theme/approval';\n    import StepAction from '../../../common/step-action';\n\n    export default {\n        name: 'TaskStep',\n        components: {\n            StepAction,\n        },\n        props: {\n            data: {\n                type: Object,\n                required: true,\n            },\n        },\n        computed: {\n            themeCom () {\n                if (this.data.isApproval && !this.data.isNotStart) {\n                    return ThemeApproval;\n                }\n                return ThemeNormal;\n            },\n        },\n        methods: {\n            handleChoose () {\n                if (this.data.isApproval) {\n                    return;\n                }\n                if (this.data.isNotStart) {\n                    this.$bkMessage({\n                        theme: 'warning',\n                        message: '该步骤还未执行',\n                        limit: 1,\n                    });\n                    return;\n                }\n                \n                this.$emit('on-select', this.data);\n            },\n            handleChangeStatus (operationCode, confirmReason) {\n                return TaskExecuteService.updateTaskExecutionStepOperate({\n                    id: this.data.stepInstanceId,\n                    operationCode,\n                    confirmReason,\n                }).then(() => {\n                    this.$bkMessage({\n                        limit: 1,\n                        theme: 'success',\n                        message: '操作成功',\n                    });\n                    this.$emit('on-update');\n                    return true;\n                });\n            },\n        },\n    };\n</script>\n<style lang=\"postcss\">\n    @keyframes ani-rotate {\n        to {\n            transform: rotateZ(360deg);\n        }\n    }\n\n    .execution-step-box {\n        position: relative;\n        z-index: 1;\n        display: flex;\n        height: 42px;\n        padding: 0 4px;\n        margin: 14px 0;\n        margin-left: 16px;\n        background: #fff;\n        border: 1px solid transparent;\n        border-radius: 21px;\n        box-shadow: 0 2px 6px #ddd;\n        align-items: center;\n\n        &.theme-start,\n        &.theme-end {\n            width: 44px;\n        }\n\n        &.theme-end {\n            &.disabled {\n                background: #f5f7fa;\n                border: 1px solid #dcdee5;\n\n                .step-icon {\n                    color: #f0f1f5;\n                    background-color: #dcdee5;\n                }\n            }\n        }\n\n        &.theme-normal {\n            width: 546px;\n            cursor: pointer;\n\n            .theme-normal-wraper {\n                position: relative;\n                display: flex;\n                height: 100%;\n                align-items: center;\n                flex: 1;\n\n                &:hover {\n                    .step-desc {\n                        color: #3a84ff;\n                    }\n\n                    .step-info {\n                        margin-right: -20px;\n                        opacity: 100%;\n                        visibility: visible;\n                    }\n                }\n\n                .step-status-desc {\n                    margin-right: 30px;\n                    margin-left: auto;\n\n                    .time {\n                        color: #979ba5;\n                    }\n                }\n            }\n\n            .name-text {\n                max-width: 390px;\n                overflow: hidden;\n                text-overflow: ellipsis;\n                white-space: nowrap;\n            }\n\n            .step-info {\n                position: absolute;\n                top: 50%;\n                right: 0;\n                z-index: 99;\n                display: flex;\n                max-width: 390px;\n                padding: 8px 11px;\n                margin-right: 0;\n                font-size: 12px;\n                line-height: 16px;\n                color: #63656e;\n                background: #fff;\n                border: 1px solid #dcdee5;\n                border-radius: 4px;\n                opacity: 0%;\n                visibility: hidden;\n                transform: translate(100%, -50%);\n                box-shadow: 0 0 5px 0 rgb(0 0 0 / 9%);\n                transition: all 0.15s;\n                user-select: none;\n                flex-direction: column;\n\n                &::before {\n                    position: absolute;\n                    top: 50%;\n                    left: -2px;\n                    width: 11px;\n                    height: 11px;\n                    background: #fff;\n                    border-top: 1px solid #dcdee5;\n                    border-left: 1px solid #dcdee5;\n                    content: \"\";\n                    transform: rotateZ(-45deg) translateY(-50%);\n                }\n\n                &::after {\n                    position: absolute;\n                    top: 0;\n                    width: 30px;\n                    height: 100%;\n                    margin-left: -30px;\n                    content: \"\";\n                }\n\n                .jb-detail-layout {\n                    .detail-item {\n                        margin-bottom: 0;\n                        font-size: 12px;\n                        line-height: 16px;\n                    }\n\n                    .detail-content {\n                        word-break: break-all;\n                    }\n                }\n            }\n\n            .step-instance-action {\n                box-shadow: 0 2px 6px 0 rgb(0 0 0 / 6%);\n            }\n        }\n\n        &.theme-approval {\n            display: block;\n            height: auto;\n            padding: 20px;\n            margin-left: 0;\n\n            &.success {\n                .confirm-flag {\n                    display: block;\n                }\n            }\n\n            .step-icon {\n                margin-right: 18px;\n            }\n\n            .step-desc {\n                margin-left: 0;\n                font-size: 18px;\n                color: #313238;\n                align-items: center;\n            }\n\n            .approval-container {\n                padding: 0 52px;\n            }\n\n            .approval-info {\n                display: flex;\n                margin-top: -2px;\n                font-size: 12px;\n                line-height: 20px;\n                color: #b2b5bd;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n\n            .approval-person {\n                display: flex;\n                flex-wrap: wrap;\n\n                .persion-label,\n                .person {\n                    margin-top: 10px;\n                }\n\n                .role-flag {\n                    margin-right: 4px;\n                }\n            }\n\n            .person {\n                display: inline-flex;\n                height: 22px;\n                padding: 0 6px;\n                margin-right: 6px;\n                font-size: 12px;\n                color: #63656e;\n                background: #f0f1f5;\n                border-radius: 2px;\n                align-items: center;\n            }\n\n            .approval-channel {\n                margin-top: 10px;\n            }\n\n            .confirm-reason,\n            .confirm-reason-text {\n                margin-top: 20px;\n            }\n\n            .confirm-reason-text {\n                font-size: 14px;\n                line-height: 22px;\n                color: #63656e;\n            }\n\n            .confirm-flag {\n                display: none;\n                height: 18px;\n                padding: 0 5px;\n                margin-left: 8px;\n                font-size: 12px;\n                line-height: 18px;\n                color: #2dcb9d;\n                background: rgb(45 203 157 / 14%);\n                border-radius: 2px;\n            }\n\n            .step-message {\n                padding-top: 14px;\n                font-size: 14px;\n                line-height: 26px;\n                color: #63656e;\n            }\n\n            .step-action {\n                position: relative;\n                left: unset;\n                height: auto;\n                margin-top: 20px;\n                justify-content: flex-end;\n\n                .step-instance-action {\n                    margin-right: 0;\n                    margin-left: 10px;\n                    border: 1px solid #c4c6cc;\n\n                    &:hover {\n                        border-color: currentColor;\n                    }\n                }\n            }\n\n            .step-process {\n                left: 36px;\n            }\n        }\n\n        &.loading {\n            color: #63656e;\n\n            .step-icon {\n                background: #3a84ff;\n            }\n\n            .step-desc {\n                .time {\n                    color: #3a84ff;\n                }\n            }\n\n            .loading-progress {\n                display: block;\n                animation: \"ani-rotate\" 2s linear infinite;\n            }\n        }\n\n        &.ingore {\n            .step-icon {\n                background: #abd88a;\n            }\n        }\n\n        &.disabled {\n            color: #c4c6cc;\n            cursor: default;\n            background: #f5f7fa;\n            border-color: #dcdee5;\n            box-shadow: none;\n            user-select: none;\n\n            &:hover {\n                .step-desc {\n                    color: #c4c6cc !important;\n                }\n            }\n\n            .step-desc {\n                color: #c4c6cc;\n            }\n\n            .step-icon {\n                background: #dcdee5;\n            }\n        }\n\n        &.fail,\n        &.forced,\n        &.confirm-forced {\n            color: #979ba5;\n\n            .theme-normal-wraper {\n                &:hover {\n                    .step-desc {\n                        .time {\n                            display: block;\n                        }\n                    }\n\n                    .step-error-flag {\n                        display: none;\n                    }\n                }\n            }\n\n            .step-icon {\n                background: #ff5656;\n            }\n\n            .step-desc {\n                .time {\n                    display: none;\n                }\n            }\n\n            .step-error-flag {\n                font-size: 18px;\n                color: #ff5656;\n            }\n        }\n\n        &.confirm {\n            color: #979ba5;\n\n            .step-icon {\n                background: #ff9c01;\n            }\n        }\n\n        .step-icon {\n            display: flex;\n            height: 34px;\n            font-size: 14px;\n            font-weight: 600;\n            color: #fff;\n            background: #2dcb9d;\n            border-radius: 50%;\n            align-items: center;\n            justify-content: center;\n            flex: 0 0 34px;\n        }\n\n        .step-desc {\n            display: flex;\n            margin-left: 18px;\n            font-size: 14px;\n            color: #979ba5;\n            flex: 1;\n        }\n\n        .step-process {\n            position: absolute;\n            bottom: -28px;\n            left: 21px;\n            z-index: 1;\n            font-size: 31px;\n            color: #c4c6cc;\n            transform: translateX(-50%);\n\n            &.step-pending {\n                bottom: -31px;\n                left: 20px;\n                z-index: -1;\n            }\n        }\n\n        .loading-progress {\n            position: absolute;\n            top: 0;\n            left: 1px;\n            width: 40px;\n            height: 40px;\n        }\n\n        .step-action {\n            position: absolute;\n            left: 566px;\n            display: flex;\n            height: 100%;\n            white-space: pre;\n            align-items: center;\n        }\n    }\n</style>\n","<template>\n    <div\n        v-bk-tooltips=\"'定位到当前步骤'\"\n        class=\"task-exeution-process\"\n        @click=\"handleScrollToCurrentStep\">\n        {{ current }} / {{ total }}\n    </div>\n</template>\n<script>\n    import {\n        scrollTopSmooth,\n        getOffset,\n    } from '@utils/assist';\n\n    export default {\n        name: '',\n        props: {\n            total: {\n                type: Number,\n                required: true,\n            },\n            current: {\n                type: Number,\n                required: true,\n            },\n        },\n        mounted () {\n            this.timer = setTimeout(() => {\n                this.handleScrollToCurrentStep();\n            }, 1000);\n        },\n        beforeDestroy () {\n            clearTimeout(this.timer);\n        },\n        methods: {\n            handleScrollToCurrentStep () {\n                const $srollContainer = document.querySelector('.container-content');\n                if (!$srollContainer) {\n                    return;\n                }\n                const $currentStep = document.querySelectorAll('.execution-step-box')[this.current];\n                const { top } = getOffset($currentStep);\n                const windowHeight = window.innerHeight;\n                const targetHieght = $currentStep.getBoundingClientRect().height;\n                const offset = (windowHeight - targetHieght) / 2;\n                scrollTopSmooth($srollContainer, top - offset);\n            },\n        },\n    };\n</script>\n<style lang='postcss'>\n    .task-exeution-process {\n        width: 100px;\n        height: 28px;\n        margin-left: 10px;\n        font-size: 14px;\n        line-height: 28px;\n        color: #fff;\n        text-align: center;\n        cursor: pointer;\n        background: rgb(0 0 0 / 25%);\n        border-radius: 14px;\n\n        &:hover {\n            background: rgb(0 0 0 / 40%);\n        }\n    }\n</style>\n","\n<template>\n    <div\n        class=\"executive-history-task\"\n        v-bkloading=\"{ isLoading }\"\n        :key=\"taskInstanceId\">\n        <div class=\"step-list\">\n            step-list\n            <task-step-start key=\"start\" />\n            <task-step\n                v-for=\"(step, index) in formData.stepExecution\"\n                :key=\"index\"\n                :data=\"step\"\n                @on-select=\"handleSelectStep\"\n                @on-update=\"handleUpdateStepStatus\" />\n            <task-step-end key=\"end\" :finished=\"formData.taskExecution.isSuccess\" />\n        </div>\n        <div class=\"step-list-action\">\n            step-list-action\n            <back-top size=\"small\" :fixed=\"false\" />\n            <execution-process\n                class=\"execution-process\"\n                :total=\"formData.totalStep\"\n                :current=\"formData.currentStepRunningOrder\" />\n        </div>\n        <div class=\"task-action\">\n            task-action\n            <auth-component\n                auth=\"task_instance/redo\"\n                :resource-id=\"taskInstanceId\">\n                <div\n                    v-bk-tooltips.bottom=\"'去重做'\"\n                    class=\"action-btn\"\n                    @click=\"handleGoRetry\">\n                    <Icon type=\"redo\" />\n                </div>\n                <div slot=\"forbid\" class=\"action-btn\">\n                    <Icon type=\"redo\" />\n                </div>\n            </auth-component>\n            <div\n                v-bk-tooltips.bottom=\"'全局变量'\"\n                class=\"action-btn\"\n                @click=\"handleShowGlobalVariable\">\n                <Icon type=\"global-var\" />\n            </div>\n            <div\n                v-bk-tooltips.bottom=\"'执行方案'\"\n                class=\"action-btn\"\n                @click=\"handleGoPlan\">\n                <Icon type=\"flow\" />\n            </div>\n            <div\n                v-bk-tooltips.bottom=\"'操作记录'\"\n                class=\"action-btn\"\n                @click=\"handleShowOperationRecord\">\n                <Icon type=\"clock\" />\n            </div>\n        </div>\n        <execution-status-bar type=\"task\" :data=\"formData.taskExecution\">\n            execution-status-bar\n            <step-action\n                name=\"forced\"\n                @on-cancel=\"handleCancelForceTask\"\n                @on-show=\"handleStartForceTask\"\n                :confirm-handler=\"handleForceTask\" />\n        </execution-status-bar>\n        <jb-sideslider\n            :is-show.sync=\"isShowGlobalVariable\"\n            :show-footer=\"false\"\n            :quick-close=\"true\"\n            :title=\"'全局变量'\"\n            :width=\"960\">\n            <global-variable :id=\"taskInstanceId\" />\n        </jb-sideslider>\n        <jb-sideslider\n            :is-show.sync=\"isShowOperationRecord\"\n            :show-footer=\"false\"\n            :quick-close=\"true\"\n            :title=\"'操作记录'\"\n            :width=\"900\">\n            <operation-record\n                :id=\"taskInstanceId\"\n                from=\"historyTask\" />\n        </jb-sideslider>\n    </div>\n</template>\n<script>\n       import TaskExecuteService from '@service/task-execute';\n    import BackTop from '@components/back-top';\n    import TaskStep from './components/task-step';\n    import ExecutionProcess from './components/execution-process';\n    import TaskStepStart from './components/task-step/theme/start';\n    import TaskStepEnd from './components/task-step/theme/end';\n    import GlobalVariable from '../common/global-variable';\n    import OperationRecord from '../common/operation-record';\n    import StepAction from '../common/step-action';\n    import ExecutionStatusBar from '../common/execution-status-bar';\n\n    export default {\n        name: '',\n        components: {\n            BackTop,\n            TaskStep,\n            ExecutionProcess,\n            GlobalVariable,\n            OperationRecord,\n            StepAction,\n            TaskStepStart,\n            TaskStepEnd,\n            ExecutionStatusBar,\n        },\n        data () {\n            return {\n                isLoading: !true,\n                taskInstanceId: 0,\n                isShowGlobalVariable: false,\n                isShowOperationRecord: false,\n                formData: {\n                    finished: true,\n                    totalStep: 0,\n                    currentStepRunningOrder: 0,\n                    taskExecution: {},\n                    stepExecution: [{\n                                        name: 'name',\n                                        startTime: 'startTime',\n                                        endTime: 'endTime',\n                                    },\n                                    {}, {}, {}],\n                },\n            };\n        },\n        computed: {\n            isSkeletonLoading () {\n                return this.isLoading;\n            },\n        },\n        created () {\n            this.timer = '';\n            this.taskPollingQueue = [];\n            this.taskInstanceId = this.$route.params.id;\n            this.isForceing = false;\n            this.fetchData();\n            this.startTimer();\n            this.$once('hook:beforeDestroy', () => {\n                this.clearTimer();\n            });\n        },\n        \n        methods: {\n            fetchData (isFirst = true) {\n                if (isFirst) {\n                    this.isLoading = true;\n                }\n                \n                TaskExecuteService.fetchTaskExecutionResult({\n                    id: this.taskInstanceId,\n                }, {\n                    permission: 'page',\n                }).then((data) => {\n                    if (this.isForceing) {\n                        return;\n                    }\n                    this.formData = data;\n                    if (data.finished) {\n                        this.taskPollingQueue = [];\n                        return;\n                    }\n                    this.taskPollingQueue.push(() => this.fetchData(false));\n                })\n                    .catch((error) => {\n                        this.taskPollingQueue = [];\n                        if ([400, 1244006].includes(error.code)) {\n                            setTimeout(() => {\n                                this.$router.push({\n                                    name: 'historyList',\n                                });\n                            }, 3000);\n                        }\n                    })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            },\n            startTimer () {\n                if (this.timerClear) {\n                    return;\n                }\n                if (this.taskPollingQueue.length > 0) {\n                    const nextTask = this.taskPollingQueue.shift();\n                    nextTask();\n                }\n                setTimeout(() => {\n                    this.startTimer();\n                }, 1000);\n            },\n            clearTimer () {\n                this.timerClear = true;\n                this.taskPollingQueue = [];\n            },\n            handleSelectStep (stepInstance) {\n                this.$router.push({\n                    name: 'historyStep',\n                    params: {\n                        taskInstanceId: this.taskInstanceId,\n                    },\n                    query: {\n                        stepInstanceId: stepInstance.stepInstanceId,\n                        retryCount: stepInstance.retryCount,\n                        from: this.$route.query.from || 'historyTask',\n                    },\n                });\n            },\n            handleStartForceTask () {\n                this.isForceing = true;\n            },\n            handleCancelForceTask () {\n                this.isForceing = false;\n                this.fetchData();\n            },\n            handleForceTask () {\n                return TaskExecuteService.updateTaskExecutionStepOperateTerminate({\n                    taskInstanceId: this.taskInstanceId,\n                }).then(() => {\n                    this.isForceing = false;\n                    this.fetchData();\n                    this.messageSuccess('操作成功');\n                    return true;\n                });\n            },\n            handleUpdateStepStatus () {\n                this.fetchData();\n            },\n            handleGoRetry () {\n                this.isLoading = true;\n                TaskExecuteService.fetchTaskInstance({\n                    id: this.taskInstanceId,\n                }).then(({ variables }) => {\n                    if (variables.length > 0) {\n                        // 有变量，去设置变量\n                        this.$router.push({\n                            name: 'redoTask',\n                            params: {\n                                taskInstanceId: this.taskInstanceId,\n                            },\n                        });\n                        return;\n                    }\n                    // 没有变量直接执行\n                    this.$bkInfo({\n                        title: '确认执行？',\n                        subTitle: '该方案未设置全局变量，点击确认将直接执行。',\n                        confirmFn: () => {\n                            this.isLoading = true;\n                            TaskExecuteService.redoTask({\n                                taskInstanceId: this.taskInstanceId,\n                                taskVariables: [],\n                            }).then(({ taskInstanceId }) => {\n                                this.$bkMessage({\n                                    theme: 'success',\n                                    message: '执行成功',\n                                });\n                                this.$router.push({\n                                    name: 'historyTask',\n                                    params: {\n                                        id: taskInstanceId,\n                                    },\n                                });\n                                this.taskInstanceId = taskInstanceId;\n                            // this.fetchData()\n                            })\n                                .finally(() => {\n                                    this.isLoading = false;\n                                });\n                        },\n                    });\n                })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            },\n            handleShowGlobalVariable () {\n                this.isShowGlobalVariable = true;\n            },\n            handleShowOperationRecord () {\n                this.isShowOperationRecord = true;\n            },\n            handleGoPlan () {\n                let router = {};\n                if (this.formData.taskExecution.debugTask) {\n                    router = this.$router.resolve({\n                        name: 'debugPlan',\n                        params: {\n                            id: this.formData.taskExecution.templateId,\n                        },\n                        query: {\n                            from: 'historyTask',\n                        },\n                    });\n                } else {\n                    router = this.$router.resolve({\n                        name: 'viewPlan',\n                        params: {\n                            templateId: this.formData.taskExecution.templateId,\n                        },\n                        query: {\n                            from: 'historyTask',\n                            viewPlanId: this.formData.taskExecution.taskId,\n                            taskInstanceId: this.taskInstanceId,\n                        },\n                    });\n                }\n                window.open(router.href);\n            },\n            routerBack () {\n                const { from } = this.$route.query;\n                if (from === 'viewPlan') {\n                    this.$router.push({\n                        name: 'viewPlan',\n                        params: {\n                            templateId: this.formData.taskExecution.templateId,\n                        },\n                        query: {\n                            viewPlanId: this.formData.taskExecution.taskId,\n                        },\n                    });\n                    return;\n                }\n                if (from === 'planList') {\n                    this.$router.push({\n                        name: 'planList',\n                        query: {\n                            viewTemplateId: this.formData.taskExecution.templateId,\n                            viewPlanId: this.formData.taskExecution.taskId,\n                        },\n                    });\n                    return;\n                }\n                \n                this.$router.push({\n                    name: 'historyList',\n                });\n            },\n        },\n    };\n</script>\n<style lang='postcss'>\n    .executive-history-task {\n        position: relative;\n        top: 0;\n        right: 0;\n        padding-top: 13px;\n        padding-bottom: 53px;\n\n        .step-list {\n            display: flex;\n            flex-direction: column;\n            width: 578px;\n            margin: 0 auto;\n        }\n\n        .step-list-action {\n            position: fixed;\n            bottom: 18px;\n            left: 50%;\n            z-index: 9;\n            display: flex;\n            transform: translateX(-50%);\n            user-select: none;\n\n            .execution-process {\n                margin-left: 10px;\n            }\n        }\n\n        .task-action {\n            position: fixed;\n            top: 126px;\n            right: 22px;\n            display: flex;\n\n            .action-btn {\n                display: flex;\n                width: 32px;\n                height: 32px;\n                padding: 0 7px;\n                margin-left: 10px;\n                font-size: 19px;\n                color: #979ba5;\n                cursor: pointer;\n                background: #fff;\n                border-radius: 50%;\n                box-shadow: 0 2px 6px 0 rgb(0 0 0 / 6%);\n                align-items: center;\n                justify-content: center;\n\n                &:hover {\n                    color: #3a84ff;\n                }\n            }\n        }\n    }\n</style>\n"],"names":[],"sourceRoot":""}