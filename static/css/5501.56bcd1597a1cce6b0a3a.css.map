{"version":3,"file":"static/css/5501.56bcd1597a1cce6b0a3a.css","mappings":"AAsCA,+CAIA,gCADA,cAFA,eACA,eAGA,CAEA,kEACA,gBACA,qBACA,CC+CA,0CAEA,mBADA,YAWA,CARA,qDACA,cACA,iBACA,CAEA,sDACA,aACA,CCiCA,4DACA,gBACA,CAEA,+BACA,WACA,CAEA,0CACA,gBACA,wBAqBA,CAnBA,0FAMA,8BAFA,eAFA,YACA,kBAEA,eAEA,CAEA,6CAGA,mBADA,cADA,eAGA,CAEA,6CAEA,6BADA,aAEA,CCfA,sCACA,kBAKA,CAHA,mDACA,kBACA","sources":["webpack://job/./src/views/notify-manage/index/components/notify-collapse-item.vue","webpack://job/./src/views/notify-manage/index/components/trigger-setting/components/render-notify-way.vue","webpack://job/./src/views/notify-manage/index/components/trigger-setting/index.vue","webpack://job/./src/views/notify-manage/index/index.vue"],"sourcesContent":["\r\n\r\n<template>\r\n    <div class=\"notify-collapse-item\">\r\n        <bk-collapse-item ref=\"collapseItem\" v-bind=\"$attrs\" v-on=\"$listeners\" hide-arrow>\r\n            <template #default>\r\n                <Icon :type=\"iconType\" style=\"color: #979ba5;\" />\r\n                <span style=\"display: none;\">{{ iconType }}</span>\r\n                <slot />\r\n            </template>\r\n            <template #content>\r\n                <slot name=\"content\" />\r\n            </template>\r\n        </bk-collapse-item>\r\n    </div>\r\n</template>\r\n<script>\r\n    export default {\r\n        inject: ['collapse'],\r\n        data () {\r\n            return {\r\n                iconType: 'arrow-full-right',\r\n            };\r\n        },\r\n        mounted () {\r\n            const unwatch = this.$watch(() => this.$refs.collapseItem.isActive, (newValue) => {\r\n                this.iconType = newValue ? 'arrow-full-down' : 'arrow-full-right';\r\n            }, {\r\n                immediate: true,\r\n            });\r\n            this.$once('hook:beforeDestroy', () => {\r\n                unwatch();\r\n            });\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .notify-collapse-item {\r\n        .bk-collapse-item-header {\r\n            font-size: 14px;\r\n            font-weight: 600;\r\n            color: #313238;\r\n            border-bottom: 1px solid #dcdee5;\r\n        }\r\n\r\n        .bk-collapse-item .bk-collapse-item-content {\r\n            min-height: 42px;\r\n            padding: 40px 0 0 84px;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"render-notify-way-check\">\r\n        <bk-checkbox\r\n            class=\"check-all\"\r\n            v-bind=\"allCheckStatus\"\r\n            @click.native=\"handleCheckToggle\">\r\n            {{ $t('notify.全选') }}\r\n        </bk-checkbox>\r\n        <bk-checkbox-group\r\n            class=\"check-item\"\r\n            :value=\"localValue\"\r\n            @change=\"handleChange\">\r\n            <bk-checkbox\r\n                v-for=\"(channelItem) in channelList\"\r\n                :key=\"channelItem.code\"\r\n                :value=\"channelItem.code\">\r\n                {{ channelItem.name }}\r\n            </bk-checkbox>\r\n        </bk-checkbox-group>\r\n    </div>\r\n</template>\r\n<script>\r\n    export default {\r\n        name: '',\r\n        props: {\r\n            channelList: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n            value: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                localValue: [],\r\n            };\r\n        },\r\n        computed: {\r\n            /**\r\n             * @desc 全选状态\r\n             * @returns { Object }\r\n             */\r\n            allCheckStatus () {\r\n                if (this.localValue.length < 1) {\r\n                    return {\r\n                        checked: false,\r\n                        indeterminate: false,\r\n                    };\r\n                }\r\n                const allChannelList = this.channelList.map(({ code }) => code);\r\n                let checked = true;\r\n                let indeterminate = false;\r\n                allChannelList.forEach((item) => {\r\n                    if (!this.localValue.includes(item)) {\r\n                        checked = false;\r\n                    }\r\n                });\r\n                indeterminate = !checked;\r\n                if (allChannelList.length < 1) {\r\n                    checked = false;\r\n                    indeterminate = false;\r\n                }\r\n                return {\r\n                    checked,\r\n                    indeterminate,\r\n                };\r\n            },\r\n        },\r\n        watch: {\r\n            value: {\r\n                handler (value) {\r\n                    this.localValue = value;\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        methods: {\r\n            handleCheckToggle () {\r\n                if (this.allCheckStatus.checked) {\r\n                    this.handleChange([]);\r\n                } else {\r\n                    const allChannelCode = this.channelList.map(({ code }) => code);\r\n                    this.handleChange(allChannelCode);\r\n                }\r\n            },\r\n            handleChange (value) {\r\n                this.localValue = value;\r\n                this.$emit('on-change', this.localValue);\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\" scoped>\r\n    .render-notify-way-check {\r\n        display: flex;\r\n        align-items: center;\r\n\r\n        .check-all {\r\n            flex: 0 0 auto;\r\n            margin-right: 25px;\r\n        }\r\n\r\n        .check-item {\r\n            flex: 0 0 auto;\r\n        }\r\n    }\r\n</style>\r\n","\r\n<template>\r\n    <jb-form class=\"notify-trigger-setting\">\r\n        <jb-form-item :label=\"$t('notify.操作类型')\">\r\n            <bk-checkbox-group\r\n                class=\"input\"\r\n                :value=\"localValue.resourceTypeList\"\r\n                @change=\"handleResourceTypeChange\">\r\n                <bk-checkbox\r\n                    v-for=\"(item) in [{},{},{}]\"\r\n                    :key=\"item.code\"\r\n                    :value=\"item.code\">\r\n                    {{ item.name }}\r\n                </bk-checkbox>\r\n            </bk-checkbox-group>\r\n        </jb-form-item>\r\n        <jb-form-item :label=\"$t('notify.通知对象')\">\r\n            <jb-user-selector\r\n                class=\"input\"\r\n                :placeholder=\"$t('notify.请输入')\"\r\n                :user=\"localValue.extraObserverList\"\r\n                :role=\"localValue.roleList\"\r\n                :filter-list=\"['JOB_EXTRA_OBSERVER']\"\r\n                @on-change=\"handleUserChange\" />\r\n        </jb-form-item>\r\n        <jb-form-item :label=\"$t('notify.通知方式')\">\r\n            <table class=\"notify-way-table input\">\r\n                <thead>\r\n                    <th style=\"width: 95px;\">{{ $t('notify.状态') }}</th>\r\n                    <th>{{ $t('notify.通知方式') }}</th>\r\n                </thead>\r\n                <tbody>\r\n                    <tr v-for=\"(executeStatus, index) in [{},{},{}]\" :key=\"index\">\r\n                        <td>{{ executeStatus.name }}</td>\r\n                        <td>\r\n                            <render-notify-way\r\n                                :channel-list=\"templateData.availableNotifyChannelList\"\r\n                                :value=\"[]\"\r\n                                @on-change=\"value => handleNotifyWayChange(executeStatus.code, value)\" />\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </jb-form-item>\r\n    </jb-form>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n    import JbUserSelector from '@components/jb-user-selector';\r\n    import RenderNotifyWay from './components/render-notify-way';\r\n\r\n    export default {\r\n        components: {\r\n            JbUserSelector,\r\n            RenderNotifyWay,\r\n        },\r\n        props: {\r\n            type: {\r\n                type: String,\r\n                require: true,\r\n            },\r\n            data: {\r\n                type: Object,\r\n                default: () => ({}),\r\n            },\r\n            templateData: {\r\n                type: Object,\r\n                default: () => ({}),\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                localValue: _.cloneDeep(this.data),\r\n            };\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 外部调用——重置用户输入\r\n             */\r\n            reset () {\r\n                this.localValue = _.cloneDeep(this.data);\r\n            },\r\n            /**\r\n             * @desc 外部调用——获取用户输入\r\n             * @returns {Object} 通知策略配置\r\n             */\r\n            getValue () {\r\n                const {\r\n                    resourceTypeList,\r\n                    extraObserverList,\r\n                    roleList,\r\n                    resourceStatusChannelMap,\r\n                } = this.localValue;\r\n                return {\r\n                    triggerType: this.type,\r\n                    resourceTypeList,\r\n                    roleList,\r\n                    extraObserverList,\r\n                    resourceStatusChannelList: Object.keys(resourceStatusChannelMap).reduce((result, executeStatus) => {\r\n                        result.push({\r\n                            executeStatus,\r\n                            channelList: resourceStatusChannelMap[executeStatus],\r\n                        });\r\n                        return result;\r\n                    }, []),\r\n                };\r\n            },\r\n            /**\r\n             * @desc 设置操作类型\r\n             * @param { Array } resourceTypeList\r\n             */\r\n            handleResourceTypeChange (resourceTypeList) {\r\n                this.localValue.resourceTypeList = resourceTypeList;\r\n            },\r\n            /**\r\n             * @desc 设置通知对象\r\n             * @param { Array } usextraObserverLister 额外通知人\r\n             * @param { Array } role 通知角色\r\n             */\r\n            handleUserChange (extraObserverList, roleList) {\r\n                if (extraObserverList.length > 0) {\r\n                    roleList.push('JOB_EXTRA_OBSERVER');\r\n                }\r\n                this.localValue.extraObserverList = extraObserverList;\r\n                this.localValue.roleList = roleList;\r\n            },\r\n            /**\r\n             * @desc 设置通知方式\r\n             * @param { String } executeStatus 执行状态\r\n             * @param { Array } channelList 通知渠道\r\n             */\r\n            handleNotifyWayChange (executeStatus, channelList) {\r\n                this.localValue.resourceStatusChannelMap[executeStatus] = channelList;\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .notify-trigger-setting {\r\n        .bk-form-checkbox ~ .bk-form-checkbox {\r\n            margin-left: 25px;\r\n        }\r\n\r\n        .input {\r\n            width: 716px;\r\n        }\r\n\r\n        .notify-way-table {\r\n            background: #fff;\r\n            border: 1px solid #dcdee5;\r\n\r\n            th,\r\n            td {\r\n                height: 42px;\r\n                padding-left: 16px;\r\n                font-size: 12px;\r\n                text-align: left;\r\n                border-left: 1px solid #dcdee5;\r\n            }\r\n\r\n            th {\r\n                font-weight: normal;\r\n                color: #313238;\r\n                background: #fafbfd;\r\n            }\r\n\r\n            td {\r\n                color: #63656e;\r\n                border-top: 1px solid #dcdee5;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","\r\n<template>\r\n    <smart-action offset-target=\"bk-form-content\">\r\n        <div class=\"notify-message-page\">\r\n            <bk-collapse v-if=\"!isLoading\" :value=\"'1'\">\r\n                <notify-collapse-item\r\n                    v-for=\"item in triggerTypeList\"\r\n                    :key=\"item.code\"\r\n                    :name=\"item.code\"\r\n                    :active=\"'1'\"\r\n                >\r\n                    trigger-title\r\n                    <span class=\"trigger-title\">{{ item.name }}</span>\r\n                    <trigger-setting\r\n                        slot=\"content\"\r\n                        ref=\"setting\"\r\n                        :type=\"item.code\"\r\n                        :data=\"formData[item.code]\"\r\n                        :template-data=\"templateData\" />\r\n                </notify-collapse-item>\r\n            </bk-collapse>\r\n        </div>\r\n        <template #action>\r\n            <div class=\"action-wrapper\">\r\n                <bk-button\r\n                    class=\"w120 mr10\"\r\n                    theme=\"primary\"\r\n                    \r\n                    :loading=\"isSubmiting\"\r\n                    @click=\"handleSave\">\r\n                    {{ $t('notify.保存') }}\r\n                </bk-button>\r\n                <bk-button\r\n                    \r\n                    @click=\"handleCancel\">\r\n                    {{ $t('notify.重置') }}\r\n                </bk-button>\r\n            </div>\r\n        </template>\r\n    </smart-action>\r\n</template>\r\n<script>\r\n    import I18n from '@/i18n';\r\n    import NotifyService from '@service/notify';\r\n    import NotifyCollapseItem from './components/notify-collapse-item';\r\n    import TriggerSetting from './components/trigger-setting';\r\n\r\n    export default {\r\n        components: {\r\n            NotifyCollapseItem,\r\n            TriggerSetting,\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: true,\r\n                isSubmiting: false,\r\n                activeResult: [],\r\n                templateData: {},\r\n                formData: {},\r\n            };\r\n        },\r\n        computed: {\r\n            /**\r\n             * @desc 页面输入骨架片 loading\r\n             * @returns { Boolean }\r\n             */\r\n            isSkeletonLoading () {\r\n                return this.isLoading;\r\n            },\r\n        },\r\n        created () {\r\n            this.isLoading = true;\r\n            Promise.all([\r\n                this.fetchPageTemplate(),\r\n                this.fetchPoliciesList(),\r\n            ]).finally(() => {\r\n                this.isLoading = false;\r\n            });\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 获取页面数据\r\n             */\r\n            fetchPageTemplate () {\r\n                // return NotifyService.fetchPageTemplate()\r\n                //     .then((data) => {\r\n                const {\r\n                    triggerTypeList = [{}, {}, {}],\r\n                    availableNotifyChannelList = [{}, {}, {}],\r\n                    executeStatusList = [{}, {}, {}],\r\n                    resourceTypeList = [{}, {}, {}],\r\n                    roleList = [{}, {}, {}],\r\n                } = {};\r\n                this.triggerTypeList = Object.freeze(triggerTypeList);\r\n                this.templateData = Object.freeze({\r\n                    availableNotifyChannelList,\r\n                    executeStatusList,\r\n                    resourceTypeList,\r\n                    roleList,\r\n                });\r\n                this.activeResult = triggerTypeList.map(({ code }) => code);\r\n                // });\r\n            },\r\n            /**\r\n             * @desc 获取消息通知配置的值\r\n             */\r\n            fetchPoliciesList () {\r\n                // return NotifyService.fetchPoliciesList()\r\n                //     .then((data) => {\r\n                const triggerPoliciesData = [].reduce((result, item) => {\r\n                    const {\r\n                        extraObserverList = [],\r\n                        resourceStatusChannelMap = [],\r\n                        resourceTypeList = [],\r\n                        roleList = [],\r\n                        triggerType = [],\r\n                    } = item;\r\n                    result[triggerType] = {\r\n                        extraObserverList,\r\n                        resourceStatusChannelMap,\r\n                        resourceTypeList,\r\n                        roleList,\r\n                    };\r\n                    return result;\r\n                }, {});\r\n                this.formData = Object.freeze(triggerPoliciesData);\r\n                // });\r\n            },\r\n            /**\r\n             * @desc 保存\r\n             */\r\n            handleSave () {\r\n                this.isSubmiting = true;\r\n                const triggerPoliciesList = this.$refs.setting.map(settingItem => settingItem.getValue());\r\n                NotifyService.defaultPoliciesUpdate({\r\n                    triggerPoliciesList,\r\n                }).then(() => {\r\n                    this.messageSuccess(I18n.t('notify.保存成功'));\r\n                    return this.fetchPoliciesList();\r\n                })\r\n                    .finally(() => {\r\n                        this.isSubmiting = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 重置\r\n             */\r\n            handleCancel () {\r\n                this.$refs.setting.forEach(item => item.reset());\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\" scoped>\r\n    .notify-message-page {\r\n        margin-bottom: 24px;\r\n\r\n        .bk-collapse {\r\n            border-bottom: none;\r\n        }\r\n    }\r\n</style>\r\n"],"names":[],"sourceRoot":""}