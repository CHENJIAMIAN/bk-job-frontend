{"version":3,"file":"static/css/1852.10f4b0297eaa0ac471da.css","mappings":"AAkLA,kCAEA,UADA,oBAEA,sBA0DA,CAxDA,6CACA,SACA,CAEA,yCASA,mBADA,gCADA,WANA,aAGA,eACA,gBACA,iBAHA,mBADA,cAmCA,CA1BA,sJASA,kBAHA,eAFA,YAGA,iBAFA,gBAGA,kBALA,UAOA,CAEA,kDAEA,gCADA,aAEA,CAEA,kDAEA,sCADA,aAEA,CAEA,kDAEA,+BADA,aAEA,CAGA,0DACA,aACA,eAMA,CAJA,yEAEA,uBADA,kBAEA,CAGA,6CACA,gBACA,CC1EA,0BAEA,gBADA,YA0DA,CAvDA,uCAKA,mBAFA,eACA,2BAHA,kBACA,YA+CA,CA1CA,6CAMA,mBACA,WAFA,YAJA,kBAEA,QADA,MAEA,SAIA,CAEA,qDAMA,gCAFA,cACA,eAFA,eAFA,kBACA,SA6BA,CAvBA,oEAIA,mBAHA,aACA,YACA,qBAEA,CAEA,4DACA,eACA,CAEA,+DACA,iBACA,CAEA,gEAEA,cADA,cAEA,CAEA,iEACA,gBACA,CAIA,wCACA,OACA,0BACA,CC5IA,6DACA,SACA,CAEA,6FACA,QACA,CAEA,+DACA,YACA,CAGA,+CACA,gBACA,CAEA,+EAEA,YACA,CC4mBA,4BACA,GACA,mBACA,CAEA,GACA,uBACA,CACA,CAGA,0CASA,mBAHA,mBAEA,4CAHA,cAJA,aAGA,eAFA,YACA,cA6BA,CArBA,qDACA,eAKA,CAHA,4DACA,aACA,CAGA,uDACA,gBAWA,CATA,sIAGA,gBADA,iBAEA,CAEA,kEACA,aACA,CAKA,+CAEA,yBADA,yBAEA,CAIA,uFACA,SACA,CAIA,uDACA,kBACA,CAEA,sDACA,eACA,SACA,CAGA,2DACA,iCACA,CAGA,0DAEA,mBADA,YA6BA,CA1BA,uEACA,gBAkBA,CAhBA,oFACA,aACA,CAEA,oFAEA,8CADA,aAEA,CAEA,oFACA,aACA,CAEA,mFACA,aACA,CAGA,2EAGA,iCADA,eADA,kBAGA,CAIA,sCAMA,mBACA,kBAFA,cAFA,eAFA,YAGA,iBAFA,aAWA,CAJA,gDAEA,mBADA,aAEA,CAGA,6CAEA,8CADA,aAEA,CAEA,wCAOA,mBAGA,gBAPA,SAQA,wCANA,aAGA,YAFA,yBAFA,OAKA,mBARA,eACA,OAUA","sources":["webpack://job/./src/views/task-manage/common/plan/confirm-cron/cron-detail.vue","webpack://job/./src/views/task-manage/common/plan/confirm-cron/index.vue","webpack://job/./src/views/task-manage/sync-plan-batch/components/confirm-cron.vue","webpack://job/./src/views/task-manage/sync-plan-batch/index.vue"],"sourcesContent":["<template>\n    <permission-section>\n        <smart-action offset-target=\"variable-value\">\n            <div\n                class=\"cron-job-detail\"\n                :class=\"{\n                    'is-loading': isLoading,\n                }\"\n                v-bkloading=\"{ isLoading }\">\n                <bk-alert :title=\"'同步执行方案需要重新确认定时任务的全局变量，不使用的定时任务可以直接停用。'\" />\n                <div class=\"title\">\n                    <span>「{{ info.name }}」{{ '的全局变量' }}</span>\n                    <span v-if=\"!data.enable\" class=\"disable\">{{ '已停用' }}</span>\n                    <span v-else-if=\"data.hasConfirm\" class=\"confirm\">{{ '已确认' }}</span>\n                    <span v-else class=\"waiting\">{{ '待确认' }}</span>\n                </div>\n                <div>\n                    <global-variable-layout v-if=\"!isLoading\">\n                        <global-variable\n                            v-for=\"variable in info.variableValue\"\n                            ref=\"variable\"\n                            :type=\"variable.type\"\n                            :key=\"variable.id\"\n                            :readonly=\"readonly\"\n                            :data=\"variable\" />\n                    </global-variable-layout>\n                    <empty v-if=\"isEmpty\">\n                        <p>{{ '无关联的全局变量' }}</p>\n                        <p style=\"margin-top: 8px;\">{{ '已直接确认' }}</p>\n                    </empty>\n                </div>\n            </div>\n            <template v-if=\"!isLoading && !isEmpty\" #action>\n                <bk-button\n                    v-if=\"isEditing\"\n                    theme=\"primary\"\n                    class=\"mr10\"\n                    \n                    @click=\"handleSubmit\">\n                    {{ '确认' }}\n                </bk-button>\n                <bk-button\n                    v-if=\"isEditing\"\n                    class=\"mr10\"\n                    \n                    @click=\"handleReset\">\n                    {{ '重置' }}\n                </bk-button>\n                <bk-button\n                    v-else\n                    theme=\"primary\"\n                    class=\"mr10\"\n                    \n                    @click=\"handleToggleEdit\">\n                    {{ '编辑' }}\n                </bk-button>\n            </template>\n        </smart-action>\n    </permission-section>\n</template>\n<script>\n    import _ from 'lodash';\n       import TimeTaskService from '@service/time-task';\n    import PermissionSection from '@components/apply-permission/apply-section';\n    import GlobalVariableLayout from '@components/global-variable/layout';\n    import GlobalVariable from '@components/global-variable/edit';\n    import Empty from '@components/empty';\n\n    export default {\n        name: '',\n        components: {\n            PermissionSection,\n            GlobalVariableLayout,\n            GlobalVariable,\n            Empty,\n        },\n        props: {\n            data: {\n                type: Object,\n                default: () => ({}),\n            },\n            variableList: {\n                type: Array,\n                required: true,\n            },\n        },\n        data () {\n            return {\n                isLoading: false,\n                isEmpty: false,\n                isEditing: false,\n                isSubmiting: false,\n                info: {\n                    name: '',\n                    enable: true,\n                    hasConfirm: false,\n                    variableValue: [],\n                },\n            };\n        },\n        computed: {\n            readonly () {\n                if (!this.data.enable) {\n                    return true;\n                }\n                return this.isEditing ? false : this.info.hasConfirm;\n            },\n        },\n        created () {\n            if (!this.data.id) {\n                return;\n            }\n            this.info = { ...this.data };\n            this.isEditing = !this.info.hasConfirm;\n            // 没有确认的定时任务，通过接口获取定时任务的name和变量\n            // 默认展示模板的变量\n            if (!this.info.hasConfirm) {\n                this.info.variableValue = Object.freeze(_.cloneDeep(this.variableList));\n                this.fetchData();\n            }\n        },\n        methods: {\n            /**\n             * @desc 获取定时任务详情\n             */\n            fetchData () {\n                this.isLoading = true;\n                TimeTaskService.getDetail({\n                    id: this.data.id,\n                }, {\n                    permission: 'catch',\n                }).then(({ name, variableValue }) => {\n                    this.info.name = name;\n                    // 作业模板中没有变量\n                    if (this.variableList.length < 1) {\n                        this.isEmpty = true;\n                        this.$emit('on-change', []);\n                    }\n                    // 同步作业模板中变量到定时任务\n                    // 作业模板和定时任务相同的变量——保留定时任务中的变量值\n                    const crontabVariableMap = variableValue.reduce((result, item) => {\n                        result[item.id] = item;\n                        return result;\n                    }, {});\n                    this.info.variableValue.forEach((variable) => {\n                        if (crontabVariableMap[variable.id]) {\n                            const { value, targetValue } = crontabVariableMap[variable.id];\n                            variable.defaultValue = value;\n                            variable.defaultTargetValue = targetValue;\n                        }\n                    });\n                })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            },\n            handleToggleEdit () {\n                this.isEditing = true;\n                this.$emit('on-update-confirm', false);\n            },\n            handleSubmit () {\n                Promise.all(this.$refs.variable.map(item => item.validate()))\n                    .then((variableValue) => {\n                        window.changeAlert = false;\n                        this.isEditing = false;\n                        this.info.hasConfirm = true;\n                        this.info.variableValue = Object.freeze(variableValue);\n                        this.messageSuccess('定时任务确认成功');\n                        this.$emit('on-change', Object.freeze(variableValue));\n                    });\n            },\n            handleReset () {\n                this.$refs.variable.forEach(item => item.reset());\n            },\n        },\n    };\n</script>\n<style lang='postcss' scoped>\n    .cron-job-detail {\n        padding: 20px 40px 0;\n        opacity: 100%;\n        transition: opacity 0.1s;\n\n        &.is-loading {\n            opacity: 0%;\n        }\n\n        .title {\n            display: flex;\n            margin-top: 2px;\n            margin-bottom: 30px;\n            font-size: 18px;\n            font-weight: bold;\n            line-height: 54px;\n            color: #000;\n            border-bottom: 1px solid #f0f1f5;\n            align-items: center;\n\n            .disable,\n            .confirm,\n            .waiting {\n                width: 42px;\n                height: 17px;\n                margin-left: 8px;\n                font-size: 11px;\n                line-height: 17px;\n                text-align: center;\n                border-radius: 2px;\n            }\n\n            .disable {\n                color: #63656e;\n                background: rgb(99 101 110 / 14%);\n            }\n\n            .confirm {\n                color: rgb(45 203 157);\n                background-color: rgb(45 203 157 / 14%);\n            }\n\n            .waiting {\n                color: #ff9c01;\n                background: rgb(255 156 1 / 14%);\n            }\n        }\n\n        .global-variable-action {\n            display: flex;\n            margin-top: 10px;\n\n            .variable-name {\n                padding-right: 28px;\n                box-sizing: content-box;\n            }\n        }\n\n        .job-empty {\n            margin-top: 140px;\n        }\n    }\n</style>\n","<template>\n    <div class=\"plan-manage-confirm-cron\" :empty=\"isEmpty\" :loading=\"isLoading\">\n        <div class=\"layout-left\">\n            <scroll-faker>\n                <div\n                    class=\"cron-job-tab\"\n                    v-for=\"cronJobItem in timeTaskList\"\n                    :class=\"{ active: cronJobItem.id === currentTaskId }\"\n                    :key=\"cronJobItem.id\">\n                    <auth-component\n                        :permission=\"cronJobItem.canManage\"\n                        auth=\"cron/view\"\n                        :resource-id=\"cronJobItem.id\">\n                        <div class=\"tab-container\" @click=\"handleTabChange(cronJobItem.id)\">\n                            <span class=\"job-name\">{{ cronJobItem.name }}</span>\n                            <Icon v-if=\"cronJobItem.hasConfirm\" type=\"check\" class=\"job-check\" />\n                            <div @click.stop=\"\">\n                                <bk-switcher\n                                    :value=\"cronJobItem.enable\"\n                                    class=\"job-switch\"\n                                    size=\"small\"\n                                    theme=\"primary\"\n                                    @change=\"value => handleEnableChange(cronJobItem.id, value)\" />\n                            </div>\n                        </div>\n                        <div slot=\"forbid\" class=\"tab-container\">\n                            <span class=\"job-name\">{{ cronJobItem.name }}</span>\n                            <Icon v-if=\"cronJobItem.hasConfirm\" type=\"check\" class=\"job-check\" />\n                            <div @click.stop=\"\">\n                                <bk-switcher\n                                    :value=\"cronJobItem.enable\"\n                                    class=\"job-switch\"\n                                    size=\"small\"\n                                    disabled\n                                    theme=\"primary\"\n                                    @change=\"value => handleEnableChange(cronJobItem.id, value)\" />\n                            </div>\n                        </div>\n                    </auth-component>\n                </div>\n            </scroll-faker>\n        </div>\n        <div class=\"layout-right\">\n            <scroll-faker>\n                <cron-detail\n                    :data=\"detailInfo\"\n                    :variable-list=\"templateVariableList\"\n                    :key=\"detailInfo.id\"\n                    @on-change=\"handleVariableChange\"\n                    @on-update-confirm=\"handleUpdateConfirm\" />\n            </scroll-faker>\n        </div>\n    </div>\n</template>\n<script>\n    import TimeTaskService from '@service/time-task';\n    import ScrollFaker from '@components/scroll-faker';\n    import CronDetail from './cron-detail';\n\n    const generatorData = ({ id, name, enable }) => ({\n        id,\n        name,\n        enable,\n        hasConfirm: false,\n        variableValue: [],\n    });\n\n    export default {\n        name: '',\n        components: {\n            ScrollFaker,\n            CronDetail,\n        },\n        props: {\n            templateInfo: {\n                type: Object,\n                required: true,\n            },\n            planId: {\n                type: Number,\n                required: true,\n            },\n            cronJobList: {\n                type: Array,\n                default: () => [],\n            },\n        },\n        data () {\n            return {\n                isLoading: true,\n                isEmpty: false,\n                timeTaskList: [{},{},{}],\n                currentTaskId: 0,\n            };\n        },\n        computed: {\n            detailInfo () {\n                return this.timeTaskList.find(item => item.id === this.currentTaskId) || {};\n            },\n        },\n        created () {\n            this.templateId = this.templateInfo.id;\n            this.templateVariableList = this.templateInfo.variables;\n            this.fetchTimeTaskList();\n        },\n        methods: {\n            fetchTimeTaskList () {\n                if (this.cronJobList.length > 0) {\n                    this.timeTaskList = this.cronJobList;\n                    this.currentTaskId = this.cronJobList[0].id;\n                    return;\n                }\n                this.isLoading = true;\n                TimeTaskService.fetchTaskOfPlan({\n                    id: this.planId,\n                }).then((data) => {\n                    if (data.length < 1) {\n                        this.isEmpty = true;\n                        return;\n                    }\n                    this.timeTaskList = data.map(item => generatorData(item));\n                    if (data.length > 0) {\n                        this.currentTaskId = data[0].id;\n                    }\n                })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            },\n            trigger () {\n                const cronJob = this.timeTaskList.reduce((result, item) => {\n                    // 关闭的定时任务传全局变量\n                    result.push({\n                        ...item,\n                        variableValue: item.enable ? item.variableValue : [],\n                    });\n                    return result;\n                }, []);\n                this.$emit('on-change', cronJob);\n            },\n            handleTabChange (id) {\n                this.currentTaskId = id;\n            },\n            handleEnableChange (id, enable) {\n                const timeTask = this.timeTaskList.find(item => item.id === id);\n                timeTask.enable = enable;\n                timeTask.hasConfirm = false;\n                this.trigger();\n            },\n            handleVariableChange (payload) {\n                const timeTask = this.timeTaskList.find(item => item.id === this.currentTaskId);\n                timeTask.variableValue = Object.freeze(payload);\n                timeTask.hasConfirm = true;\n                this.trigger();\n            },\n            handleUpdateConfirm (payload) {\n                const timeTask = this.timeTaskList.find(item => item.id === this.currentTaskId);\n                timeTask.hasConfirm = payload;\n                this.trigger();\n            },\n        },\n    };\n</script>\n<style lang='postcss'>\n    .plan-manage-confirm-cron {\n        display: flex;\n        background: #fff;\n\n        .layout-left {\n            position: relative;\n            z-index: 1000;\n            flex: 0 0 320px;\n            height: calc(100vh - 154px);\n            background: #fafbfd;\n\n            &::after {\n                position: absolute;\n                top: 0;\n                right: 0;\n                width: 1px;\n                height: 100%;\n                background: #ecedf3;\n                content: \"\";\n            }\n\n            .cron-job-tab {\n                position: relative;\n                z-index: 1;\n                font-size: 14px;\n                color: #63656e;\n                cursor: pointer;\n                border-bottom: 1px solid #ecedf3;\n\n                .tab-container {\n                    display: flex;\n                    height: 40px;\n                    padding: 0 13px 0 24px;\n                    align-items: center;\n                }\n\n                &.active {\n                    background: #fff;\n                }\n\n                .job-name {\n                    margin-right: auto;\n                }\n\n                .job-check {\n                    font-size: 24px;\n                    color: #2dcb56;\n                }\n\n                .job-switch {\n                    margin-left: 20px;\n                }\n            }\n        }\n\n        .layout-right {\n            flex: 1;\n            height: calc(100vh - 154px);\n        }\n    }\n</style>\n","<template>\n    <jb-dialog\n        :value=\"isShow\"\n        fullscreen\n        class=\"plan-confirm-cron-dialog\"\n        @cancel=\"handleClose\">\n        <div class=\"confirm-cron-wraper\" v-bkloading=\"{ isLoading }\" @keyup.esc=\"handleClose\">\n            <confirm-cron\n                v-if=\"!isLoading\"\n                :template-info=\"templateInfo\"\n                :plan-id=\"planId\"\n                :cron-job-list=\"cronJobInfoList\"\n                @on-change=\"handleConfirmCron\" />\n        </div>\n    </jb-dialog>\n</template>\n<script>\n    import TaskManageService from '@service/task-manage';\n    import ConfirmCron from '../../common/plan/confirm-cron';\n\n    export default {\n        name: '',\n        components: {\n            ConfirmCron,\n        },\n        props: {\n            isShow: {\n                type: Boolean,\n                default: false,\n            },\n            templateId: {\n                type: Number,\n                required: true,\n            },\n            planId: {\n                type: Number,\n                required: true,\n            },\n            cronJobInfoList: {\n                type: Array,\n                default: () => [],\n            },\n        },\n        data () {\n            return {\n                isShowDialog: false,\n                isLoading: true,\n                templateInfo: {},\n            };\n        },\n        watch: {\n            templateId (templateId) {\n                if (templateId < 0) {\n                    return;\n                }\n                this.fetchData();\n            },\n        },\n        methods: {\n            fetchData () {\n                this.isLoading = true;\n                TaskManageService.taskDetail({\n                    id: this.templateId,\n                }).then((data) => {\n                    this.templateInfo = Object.freeze(data);\n                })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            },\n            handleClose () {\n                this.$emit('on-close');\n            },\n            handleConfirmCron (cronJonList) {\n                this.$emit('on-change', cronJonList);\n            },\n        },\n    };\n</script>\n<style lang='postcss'>\n    .plan-confirm-cron-dialog {\n        .bk-dialog-wrapper {\n            .bk-dialog-body {\n                padding: 0;\n            }\n\n            .bk-dialog.bk-dialog-fullscreen .bk-dialog-body {\n                bottom: 0;\n            }\n\n            .bk-dialog-footer {\n                display: none;\n            }\n        }\n\n        .confirm-cron-wraper {\n            min-height: 100vh;\n        }\n\n        .layout-left,\n        .layout-right {\n            height: 100vh;\n        }\n    }\n</style>\n","<template>\n    <div class=\"sync-plan-batch-page\">\n        <list-action-layout>\n            <template #right>\n                <bk-button\n                    theme=\"primary\"\n                    :loading=\"isConfirmLoading || isCronJobLoading\"\n                    \n                    @click=\"handleConfirmAll\">\n                    {{ '全部确认' }}\n                </bk-button>\n            </template>\n        </list-action-layout>\n        <div class=\"render-list-header\">\n            <div class=\"list-name\">\n                <span>{{ '同步执行方案' }}</span>\n                <span class=\"total\">（{{ '共' }} {{ data.length }} {{ '个'}}）</span>\n            </div>\n            <div class=\"item-status\">\n                <template v-if=\"isCronJobLoading\">\n                    <Icon type=\"sync-pending\" svg class=\"plan-cron-job-loading\" />\n                </template>\n                <template v-else>\n                    <span class=\"confirmed\">{{ planConfirmInfo.confirmed }}</span>{{ '个已就绪' }} ，\n                    <span class=\"unconfirmed\">{{ planConfirmInfo.unconfirmed }}</span>{{ '个未就绪' }}\n                </template>\n            </div>\n        </div>\n        <div ref=\"list\">\n            <bk-table\n                v-if=\"tableHeight\"\n                class=\"sync-plan-list\"\n                :data=\"data\"\n                :max-height=\"tableHeight\"\n                :row-class-name=\"calcRowClass\"\n                selectable>\n                <bk-table-column\n                    :label=\"'执行方案'\"\n                    prop=\"name\"\n                    key=\"name\"\n                    align=\"left\">\n                    <template slot-scope=\"{ row }\">\n                        <auth-router-link\n                            :permission=\"row.canView\"\n                            auth=\"job_plan/view\"\n                            :resource-id=\"row.id\"\n                            target=\"_blank\"\n                            :to=\"{\n                                name: 'viewPlan',\n                                params: {\n                                    templateid: 4 || row.templateId,\n                                },\n                                query: {\n                                    viewPlanId: 4 || row.id,\n                                },\n                            }\">\n                            {{ row.name }}\n                            <Icon type=\"edit\" class=\"open-link-flag\" />\n                        </auth-router-link>\n                    </template>\n                </bk-table-column>\n                <bk-table-column\n                    :label=\"'所属作业模板'\"\n                    prop=\"templateName\"\n                    key=\"templateName\"\n                    align=\"left\">\n                    <template slot-scope=\"{ row }\">\n                        <router-link\n                            target=\"_blank\"\n                            :to=\"{\n                                name: 'templateDetail',\n                                params: {\n                                    id: 4 || row.templateId,\n                                },\n                            }\">\n                            {{ row.templateName }}\n                            <Icon type=\"edit\" class=\"open-link-flag\" />\n                        </router-link>\n                    </template>\n                </bk-table-column>\n                <bk-table-column\n                    :label=\"'状态'\"\n                    prop=\"statusText\"\n                    key=\"statusText2\"\n                    class-name=\"status-column\"\n                    align=\"left\">\n                    <template slot-scope=\"{ row }\">\n                        <div class=\"confirm-status-box\">\n                            <Icon :type=\"row.statusIcon\" svg class=\"status-flag\" :class=\"row.statusIcon\" />\n                            <span v-html=\"row.statusHtml\" />\n                            <bk-button\n                                v-if=\"row.isRetryEnable\"\n                                text\n                                class=\"ml10\"\n                                @click=\"handleSyncRetry(row)\">\n                                {{ '重试' }}\n                            </bk-button>\n                        </div>\n                    </template>\n                </bk-table-column>\n                <bk-table-column\n                    :resizable=\"false\"\n                    :label=\"'操作'\"\n                    width=\"280\"\n                    key=\"action\"\n                    align=\"left\">\n                    <template slot-scope=\"{ row }\">\n                        <span :tippy-tips=\"row.disableDiffTips\" class=\"mr10\">\n                            <bk-button\n                                \n                                text\n                                @click=\"handleGoDiff(row)\">\n                                {{ '查看差异' }}\n                            </bk-button>\n                        </span>\n                        <!-- 定时任务加载中 -->\n                        <template v-if=\"row.isCronJobLoading\">\n                            <Icon type=\"sync-pending\" svg class=\"plan-cron-job-loading\" />\n                        </template>\n                        <template v-else>\n                            <span :tippy-tips=\"row.disableConfirmTips\" class=\"mr10\">\n                                <bk-button\n                                    text\n                                    :loading=\"row.isCronJobLoading\"\n                                    \n                                    @click=\"handleConfirmCron(row)\">\n                                    {{ '确认定时任务' }}\n                                </bk-button>\n                            </span>\n                            <div\n                                class=\"confirm-status\"\n                                :class=\"{ confirmed: row.isConfirmed }\">\n                                {{ row.confirmProcessText }}\n                            </div>\n                        </template>\n                    </template>\n                </bk-table-column>\n            </bk-table>\n        </div>\n        <div class=\"sync-plan-action\">\n            <bk-button v-if=\"isFinished\" class=\"w120\" theme=\"primary\" @click=\"handleFinish\">\n                {{ '完成' }}\n            </bk-button>\n            <template v-else>\n                <bk-button class=\"mr10\" @click=\"handleCancle\">\n                    {{ '取消' }}\n                </bk-button>\n                <span :tippy-tips=\"syncSubmitInvalid ? '所有方案均已同步至最新版' : ''\">\n                    <bk-button\n                        class=\"w120\"\n                        theme=\"primary\"\n                        :loading=\"isSyncLoading || isCronJobLoading\"\n                        \n                        @click=\"handleSubmitSync\">\n                        {{ '立即同步' }}\n                    </bk-button>\n                </span>\n            </template>\n        </div>\n        <confirm-cron\n            :is-show=\"isShowConfirmCron\"\n            v-bind=\"selectPlanInfo\"\n            @on-change=\"handleSelectPlanConfirmChange\"\n            @on-close=\"hanndleSelectPlanConfirmClose\" />\n    </div>\n</template>\n<script>\n    import _ from 'lodash';\n       import TaskManageService from '@service/task-manage';\n    import TaskPlanService from '@service/task-plan';\n    import TimeTaskService from '@service/time-task';\n    import SyncPlanVO from '@domain/variable-object/sync-plan';\n    import ListActionLayout from '@components/list-action-layout';\n    import {\n        getOffset,\n        leaveConfirm,\n    } from '@utils/assist';\n    import ConfirmCron from './components/confirm-cron';\n\n    const runStepByStep = (data, callback, finishCallback = () => {}) => {\n        let startIndex = 0;\n        const next = () => {\n            startIndex += 1;\n            if (startIndex >= data.length) {\n                finishCallback();\n                return;\n            }\n            callback(data[startIndex], next);\n        };\n        callback(data[startIndex], next);\n    };\n\n    export default {\n        name: '',\n        components: {\n            ListActionLayout,\n            ConfirmCron,\n        },\n        data () {\n            return {\n                isLoading: true,\n                data: [{},{},{}],\n                tableHeight: '',\n                isCronJobLoading: false,\n                isConfirmLoading: false,\n                isComfirmAllFinished: false,\n                isSyncLoading: false,\n                isShowConfirmCron: false,\n                isFinished: false,\n                syncValueMemoMap: {},\n                selectPlanInfo: {\n                    templateId: -1,\n                    planId: -1,\n                    cronJobInfoList: [{},{},{}],\n                },\n            };\n        },\n        computed: {\n            isSkeletonLoading () {\n                return this.isLoading;\n            },\n            planConfirmInfo () {\n                let confirmed = 0;\n                let unconfirmed = 0;\n                \n                this.data.forEach((currentPlan) => {\n                    if (currentPlan.isConfirmed) {\n                        confirmed += 1;\n                    } else {\n                        unconfirmed += 1;\n                    }\n                });\n                return {\n                    confirmed,\n                    unconfirmed,\n                };\n            },\n            syncSubmitInvalid () {\n                // eslint-disable-next-line no-plusplus\n                for (let i = 0; i < this.data.length; i++) {\n                    const currentPlan = this.data[i];\n                    // 需要确认定时任务\n                    if (currentPlan.needUpdate) {\n                        return false;\n                    }\n                }\n                return true;\n            },\n        },\n        created () {\n            const { planIds = '' } = this.$route.query;\n            this.planIds = planIds;\n            // 如果是从作业模板的执行方案列表过来同步的\n            // 所有执行方案的templateId相同，保留下来，路由回退时需要\n            this.lastOnePlanTemplateId = '';\n            this.fetchData();\n        },\n        mounted () {\n            this.calcTableHeight();\n        },\n        methods: {\n            /**\n             * @desc 获取要同步的执行方案基本信息\n             *\n             * 初始化同步执行方案的状态\n             */\n            fetchData () {\n                this.isLoading = true;\n                TaskPlanService.fetchBatchPlan({\n                    planIds: this.planIds,\n                }).then((data) => {\n                    const planData = [];\n                    const needCheckCronJobStatusPlanMap = {};\n                    \n                    data.forEach((_) => {\n                        const currentSyncPlan = new SyncPlanVO(_);\n                        planData.push(currentSyncPlan);\n                        this.lastOnePlanTemplateId = _.templateId;\n                        // 执行方案有关联定时任务\n                        // 执行方案的状态设置为加载定时任务中（SyncPlanVO.STATUS_CRON_JOB_LOADING）\n                        // 缓存该执行方案id用于下一步获取关联定时任务\n                        if (currentSyncPlan.cronJobCount > 0) {\n                            currentSyncPlan.status = SyncPlanVO.STATUS_CRON_JOB_LOADING;\n                            needCheckCronJobStatusPlanMap[currentSyncPlan.id] = currentSyncPlan;\n                        }\n                    });\n                    this.data = planData;\n\n                    // 有执行方案需要获取关联定时任务\n                    // 页面操作状态设置定时任务任务获取中（isCronJobLoading），其它操作失效\n                    const needCheckCronJobStatusPlanIds = Object.keys(needCheckCronJobStatusPlanMap);\n                    if (needCheckCronJobStatusPlanIds.length > 0) {\n                        this.isCronJobLoading = true;\n                        TimeTaskService.fetchTaskOfPlanBatch({\n                            planIds: needCheckCronJobStatusPlanIds.join(','),\n                        }).then((data) => {\n                            for (const planId in data) {\n                                const currentCronJobList = data[planId];\n                                if (currentCronJobList.some(_ => _.enable)) {\n                                    // 执行方案关联的定时任务[有开启状态]——同步状态设置为未就绪\n                                    needCheckCronJobStatusPlanMap[planId].status = SyncPlanVO.STATUS_DEFAULT;\n                                } else {\n                                    // 执行方案关联的定时任务[全部是关闭状态]——同步状态设置为已就绪\n                                    needCheckCronJobStatusPlanMap[planId].status = SyncPlanVO.STATUS_CONFIRMED;\n                                }\n                            }\n                        })\n                            .finally(() => {\n                                this.isCronJobLoading = false;\n                            });\n                    }\n                    \n                    if (this.data.length > 0) {\n                        window.changeAlert = true;\n                    }\n                })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            },\n\n            /**\n             * @desc 计算页面高度，实现表格内部滚动\n             */\n            calcTableHeight () {\n                const { top } = getOffset(this.$refs.list);\n                const windowHeight = window.innerHeight;\n                this.tableHeight = windowHeight - top - 77;\n            },\n            /**\n             * @desc 计算表格行的样式\n             */\n            calcRowClass ({ row }) {\n                let className = 'template-plan-sync-record';\n                if (!row.canEdit) {\n                    className = `${className} sync-permission`;\n                }\n                return className;\n            },\n            /**\n             * @desc 全部确认操作\n             *\n             * 一条条数据串联同步\n             */\n            handleConfirmAll () {\n                window.changeAlert = true;\n                this.isConfirmLoading = true;\n                const syncValueMemoMap = { ...this.syncValueMemoMap };\n                this.data.forEach((item) => {\n                    if (syncValueMemoMap[item.id]) {\n                        return;\n                    }\n                    item.status = SyncPlanVO.STATUS_CONFIRM_QUEUE;\n                });\n                let errorNums = 0;\n                const confirmOnePlan = (plan, next) => {\n                    const currentSyncPlan = plan;\n                    const syncValue = {\n                        planId: currentSyncPlan.id,\n                        templateId: currentSyncPlan.templateId,\n                        templateVersion: currentSyncPlan.templateVersion,\n                        cronJobInfoList: [{},{},{}],\n                    };\n                    \n                    // 执行方案没有查看和编辑权限——跳过\n                    if (!currentSyncPlan.canView || !currentSyncPlan.canEdit) {\n                        next();\n                        return;\n                    }\n                    // 已确认——跳过\n                    if (currentSyncPlan.isConfirmed) {\n                        next();\n                        return;\n                    }\n                    // 没有定时任务——跳过\n                    if (currentSyncPlan.isPassConfirm) {\n                        syncValueMemoMap[currentSyncPlan.id] = syncValue;\n                        next();\n                        return;\n                    }\n                    \n                    // 定时任务确认中\n                    currentSyncPlan.status = SyncPlanVO.STATUS_CONFIRM_PENDGING;\n                    Promise.all([\n                        TaskManageService.taskDetail({\n                            id: currentSyncPlan.templateId,\n                        }),\n                        TimeTaskService.fetchTaskOfPlan({\n                            id: currentSyncPlan.id,\n                        }),\n                    ]).then(([\n                        template,\n                        cronJobList,\n                    ]) => {\n                        // 作业模板中的变量\n                        const currentTemplateVariableList = template.variables;\n\n                        // 必填变量没有赋值\n                        let isRequiredError = false;\n                        let isPermissionError = false;\n\n                        // 确认定时任务的变量值\n                        // 1，将模板中的变量同步到定时任务中\n                        // 2，作业模板和定时任务同名的变量保留定时任务中的变量值\n                        // 3，作业模板中新增的变量为必填但值为空则同步失败\n                        const cronJobInfoList = [];\n                        // eslint-disable-next-line no-plusplus\n                        for (let i = 0; i < cronJobList.length; i++) {\n                            const currentCronJob = cronJobList[i];\n\n                            const currentCronJobInfo = {\n                                id: currentCronJob.id,\n                                name: currentCronJob.name,\n                                enable: currentCronJob.enable,\n                                hasConfirm: false,\n                                variableValue: [],\n                            };\n                            // 没有定时任务的管理权限——跳过处理\n                            if (!currentCronJob.canManage) {\n                                isPermissionError = true;\n                                cronJobInfoList.push(currentCronJobInfo);\n                                continue;\n                            }\n                            // 当前定时任务未被开启——跳过处理\n                            if (!currentCronJob.enable) {\n                                cronJobInfoList.push(currentCronJobInfo);\n                                continue;\n                            }\n\n                            // 同步作业模板中变量到定时任务\n                            // 作业模板和定时任务同名的变量——保留定时任务中的变量值\n                            const currentCronJobVariableMap = currentCronJob.variableValue.reduce((result, item) => {\n                                result[item.id] = item;\n                                return result;\n                            }, {});\n                            const newCronJobVariableList = [];\n                            // eslint-disable-next-line no-plusplus\n                            for (let j = 0; j < currentTemplateVariableList.length; j++) {\n                                const newVariableFromTemplate = _.cloneDeep(currentTemplateVariableList[j]);\n                                \n                                if (currentCronJobVariableMap[newVariableFromTemplate.id]) {\n                                    const {\n                                        value,\n                                        targetValue,\n                                    } = currentCronJobVariableMap[newVariableFromTemplate.id];\n                                    newVariableFromTemplate.defaultValue = value;\n                                    newVariableFromTemplate.defaultTargetValue = targetValue;\n                                }\n                                // 必填变量不能为空\n                                if (newVariableFromTemplate.isRequired && newVariableFromTemplate.isEmpty) {\n                                    isRequiredError = true;\n                                }\n                                const { id, name, type, defaultValue, defaultTargetValue } = newVariableFromTemplate;\n                                // 定时任务中的变量需要赋值操作\n                                newCronJobVariableList.push({\n                                    id,\n                                    name,\n                                    type,\n                                    defaultValue,\n                                    defaultTargetValue,\n                                    value: defaultValue,\n                                    targetValue: defaultTargetValue,\n                                });\n                            }\n\n                            // 有必填变量没有被赋值，确实失败\n                            currentCronJobInfo.hasConfirm = !isRequiredError;\n                            currentCronJobInfo.variableValue = newCronJobVariableList;\n                            cronJobInfoList.push(currentCronJobInfo);\n                        }\n                        \n                        // 手动确认过——继续使用手动确认的结果\n                        if (!syncValueMemoMap[currentSyncPlan.id]) {\n                            syncValue.cronJobInfoList = cronJobInfoList;\n                            syncValueMemoMap[currentSyncPlan.id] = syncValue;\n                        }\n\n                        // 定时任务确认完成\n                        currentSyncPlan.cronJobInfoList = cronJobInfoList;\n                        if (isRequiredError) {\n                            currentSyncPlan.status = SyncPlanVO.STATUS_CONFIRM_FAILED;\n                            currentSyncPlan.error = '定时任务中必填变量未赋值';\n                            errorNums += 1;\n                        } else if (isPermissionError) {\n                            currentSyncPlan.status = SyncPlanVO.STATUS_CONFIRM_FAILED;\n                            currentSyncPlan.error = '没有定时任务管理权限，请手动确认';\n                            errorNums += 1;\n                        } else {\n                            currentSyncPlan.status = SyncPlanVO.STATUS_CONFIRMED;\n                        }\n                    })\n                        .catch(() => {\n                            // 定时任务确认失败\n                            currentSyncPlan.status = SyncPlanVO.STATUS_CONFIRM_FAILED;\n                            currentSyncPlan.error = '自动确认定时任务失败，请手动确认';\n                            errorNums += 1;\n                        })\n                        .finally(() => {\n                            next();\n                        });\n                };\n                \n                runStepByStep(this.data, confirmOnePlan, () => {\n                    this.isConfirmLoading = false;\n                    this.syncValueMemoMap = Object.freeze(syncValueMemoMap);\n                    this.isComfirmAllFinished = true;\n                    if (errorNums > 0) {\n                        this.messageError(`${errorNums} ${'项执行方案的确认出现问题，请逐个确认'}`);\n                    }\n                });\n            },\n            /**\n             * @desc 查看同步差异\n             */\n            handleGoDiff (plan) {\n                const router = this.$router.resolve({\n                    name: 'syncPlan',\n                    params: {\n                        id: plan.id,\n                        templateId: plan.templateId,\n                    },\n                    query: {\n                        mode: 'view',\n                    },\n                });\n                window.open(router.href);\n            },\n            /**\n             * @desc 打开手动确认弹框\n             * @param {Object} plan 要确认的执行方案\n             */\n            handleConfirmCron (plan) {\n                let cronJobInfoList = [];\n                if (this.syncValueMemoMap[plan.id]) {\n                    /* eslint-disable prefer-destructuring */\n                    cronJobInfoList = this.syncValueMemoMap[plan.id].cronJobInfoList;\n                }\n                this.isShowConfirmCron = true;\n                this.selectPlanInfo = {\n                    templateId: plan.templateId,\n                    planId: plan.id,\n                    cronJobInfoList,\n                };\n            },\n            /**\n             * @desc 关闭手动确认弹框\n             */\n            hanndleSelectPlanConfirmClose () {\n                this.isShowConfirmCron = false;\n                this.selectPlanInfo = {\n                    templateId: -1,\n                    planId: -1,\n                    cronJobInfoList: [{},{},{}],\n                };\n            },\n            /**\n             * @desc 提交手动确认的定任务信息\n             * @param {Array} cronJobInfoList 执行方案关联的定时任务变量信息\n             */\n            handleSelectPlanConfirmChange (cronJobInfoList) {\n                window.changeAlert = true;\n\n                const syncValueMemoMap = { ...this.syncValueMemoMap };\n                \n                syncValueMemoMap[this.selectPlanInfo.planId] = {\n                    templateId: this.selectPlanInfo.templateId,\n                    id: this.selectPlanInfo.planId,\n                    cronJobInfoList,\n                };\n                this.syncValueMemoMap = Object.freeze(syncValueMemoMap);\n\n                const currentPlan = _.find(this.data, _ => _.id === this.selectPlanInfo.planId);\n                // 定时任务全部确认完成\n                if (cronJobInfoList.every(_ => _.hasConfirm || !_.enable)) {\n                    currentPlan.status = SyncPlanVO.STATUS_CONFIRMED;\n                }\n                currentPlan.cronJobInfoList = cronJobInfoList;\n                this.data = [\n                    ...this.data,\n                ];\n            },\n            /**\n             * @desc 提交同步\n             *\n             * 一条一条数据串联同步\n             */\n            handleSubmitSync () {\n                this.isSyncLoading = true;\n                this.data.forEach((item) => {\n                    // 进入同步队列\n                    if (item.needUpdate) {\n                        item.status = SyncPlanVO.STATUS_SYNC_QUEUE;\n                    }\n                });\n                \n                const syncOnePlan = (plan, next) => {\n                    const currentSyncPlan = plan;\n                    // 需要同步的执行方案才会变更同步状态\n                    if (!currentSyncPlan.needUpdate) {\n                        currentSyncPlan.status = SyncPlanVO.STATUS_SYNCED;\n                        next();\n                        return;\n                    }\n                    \n                    // 同步中\n                    currentSyncPlan.status = SyncPlanVO.STATUS_SYNC_PENDING;\n\n                    TaskPlanService.planSyncInfo({\n                        planId: currentSyncPlan.id,\n                        templateId: currentSyncPlan.templateId,\n                        templateVersion: currentSyncPlan.templateVersion,\n                    }).then(() => {\n                        // 有定时任务才会执行同步定时任务\n                        if (this.syncValueMemoMap[currentSyncPlan.id]\n                            && this.syncValueMemoMap[currentSyncPlan.id].cronJobInfoList.length > 0) {\n                            return TimeTaskService.updatePlanTask({\n                                cronJobInfoList: this.syncValueMemoMap[currentSyncPlan.id].cronJobInfoList,\n                            });\n                        }\n                        // 不需要同步定时任务\n                        return Promise.resolve();\n                    })\n                        .then(() => {\n                            // 同步成功\n                            currentSyncPlan.status = SyncPlanVO.STATUS_SYNCED;\n                        })\n                        .catch(() => {\n                            // 同步失败\n                            currentSyncPlan.status = SyncPlanVO.STATUS_SYNC_FAILED;\n                        })\n                        .finally(() => {\n                            next();\n                        });\n                };\n\n                runStepByStep(this.data, syncOnePlan, () => {\n                    this.isSyncLoading = false;\n                    this.isFinished = true;\n                    window.changeAlert = false;\n                });\n            },\n            /**\n             * @desc 同步失败重试\n             * @param {Object} plan 重试的执行方案\n             */\n            handleSyncRetry (plan) {\n                plan.status = SyncPlanVO.STATUS_SYNC_PENDING;\n                TaskPlanService.planSyncInfo({\n                    planId: plan.id,\n                    templateId: plan.templateId,\n                    templateVersion: plan.templateVersion,\n                }).then(() => TimeTaskService.updatePlanTask({\n                    cronJobInfoList: this.syncValueMemoMap[plan.id].cronJobList,\n                }))\n                    .then(() => {\n                        // 同步成功\n                        plan.status = SyncPlanVO.STATUS_SYNCED;\n                    })\n                    .catch(() => {\n                        // 同步失败\n                        plan.error = '同步请求失败，请重试';\n                        plan.status = SyncPlanVO.STATUS_SYNC_FAILED;\n                    });\n            },\n            /**\n             * @desc 取消批量同步\n             *\n             * 需要确认页面的编辑状态\n             */\n            handleCancle () {\n                leaveConfirm()\n                    .then(() => {\n                        this.routerBack();\n                    });\n            },\n            /**\n             * @desc 完成批量同步\n             */\n            handleFinish () {\n                window.changeAlert = false;\n                this.routerBack();\n            },\n            /**\n             * @desc 路由回退\n             */\n            routerBack () {\n                const { from } = this.$route.query;\n                if (from === 'viewPlan') {\n                    this.$router.push({\n                        name: 'viewPlan',\n                        params: {\n                            templateId: this.lastOnePlanTemplateId,\n                        },\n                    });\n                } else if (from === 'planList') {\n                    this.$router.push({\n                        name: 'planList',\n                    });\n                } else if (from === 'templateDetail') {\n                    this.$router.push({\n                        name: 'templateDetail',\n                        params: {\n                            id: this.lastOnePlanTemplateId,\n                        },\n                    });\n                } else if (from === 'templateEdit') {\n                    this.$router.push({\n                        name: 'viewPlan',\n                        params: {\n                            templateId: this.lastOnePlanTemplateId,\n                        },\n                    });\n                } else {\n                    this.$router.push({\n                        name: 'planList',\n                    });\n                }\n            },\n        },\n    };\n</script>\n<style lang='postcss'>\n    @keyframes sync-loading-ani {\n        from {\n            transform: rotateZ(0);\n        }\n\n        to {\n            transform: rotateZ(360deg);\n        }\n    }\n\n    .sync-plan-batch-page {\n        .render-list-header {\n            display: flex;\n            height: 42px;\n            padding: 0 15px;\n            font-size: 12px;\n            color: #63656e;\n            background: #f0f1f5;\n            border: 1px solid #dcdee5;\n            border-bottom: none;\n            align-items: center;\n\n            .list-name {\n                font-weight: bold;\n\n                .total {\n                    color: #979ba5;\n                }\n            }\n\n            .item-status {\n                margin-left: auto;\n\n                .confirmed,\n                .unconfirmed {\n                    padding-right: 4px;\n                    font-weight: bold;\n                }\n\n                .confirmed {\n                    color: #3a84ff;\n                }\n            }\n        }\n\n        .sync-plan-list {\n            &.bk-table {\n                border-top-right-radius: 0;\n                border-top-left-radius: 0;\n            }\n\n            .template-plan-sync-record {\n                &:hover {\n                    .open-link-flag {\n                        opacity: 100%;\n                    }\n                }\n            }\n\n            .sync-permission {\n                background: #fafbfd;\n            }\n\n            .open-link-flag {\n                font-size: 12px;\n                opacity: 0%;\n            }\n\n            .status-column {\n                .cell {\n                    overflow: unset;\n                }\n            }\n\n            .confirm-status-box {\n                display: flex;\n                align-items: center;\n\n                .status-flag {\n                    margin-right: 4px;\n\n                    &.sync-default {\n                        color: #c4c6cc;\n                    }\n\n                    &.sync-pending {\n                        color: #3a84ff;\n                        animation: sync-loading-ani 1s linear infinite;\n                    }\n\n                    &.sync-success {\n                        color: #3fc06d;\n                    }\n\n                    &.sync-failed {\n                        color: #ea3636;\n                    }\n                }\n\n                span[tippy-tips] {\n                    padding-bottom: 2px;\n                    cursor: pointer;\n                    border-bottom: 1px dashed #c4c6cc;\n                }\n            }\n        }\n\n        .confirm-status {\n            height: 16px;\n            padding: 0 5px;\n            font-size: 12px;\n            line-height: 16px;\n            color: #979ba5;\n            background: #f0f1f5;\n            border-radius: 8px;\n\n            &.confirmed {\n                color: #3a84ff;\n                background: #e1ecff;\n            }\n        }\n\n        .plan-cron-job-loading {\n            color: #3a84ff;\n            animation: sync-loading-ani 1s linear infinite;\n        }\n\n        .sync-plan-action {\n            position: fixed;\n            right: 0;\n            bottom: 0;\n            left: 0;\n            display: flex;\n            justify-content: flex-end;\n            align-items: center;\n            height: 52px;\n            padding-right: 24px;\n            background: #fff;\n            box-shadow: 0 -2px 4px 0 rgb(0 0 0 / 6%);\n        }\n    }\n</style>\n"],"names":[],"sourceRoot":""}