{"version":3,"file":"static/css/twice.9814b621986eeafbbf87.css","mappings":"AAEA,qBAEI,cAAe,CADf,WAoNJ,CAjNI,yCAMI,wBAAyB,CACzB,iBAAkB,CAClB,qBAAsB,CAHtB,aAAc,CAHd,YAAa,CACb,eAAgB,CAChB,eAAgB,CAHhB,iBAAkB,CAQlB,4BA8KJ,CA5KI,wDAII,kBAAmB,CAHnB,YAAa,CAEb,aAAc,CADd,WAGJ,CAEA,2DAII,WAAY,CACZ,aAAc,CAHd,eAAgB,CAChB,aAAc,CAFd,iBAAkB,CAKlB,kDACJ,CAEA,2DAUI,WAAY,CAFZ,aAAc,CANd,oBAAqB,CAIrB,cAAe,CACf,gBAAiB,CAFjB,cAAe,CADf,eAAgB,CADhB,cAAe,CAFf,iBAAkB,CAQlB,qBAoBJ,CAjBI,sEAUI,sBAAuB,CACvB,WAAY,CAFZ,aAAc,CAFd,iBAAkB,CAFlB,WAAY,CAFZ,MAAO,CAKP,mBAAoB,CAIpB,YAAa,CANb,SAAU,CALV,iBAAkB,CAYlB,WAAY,CAXZ,KAAM,CAEN,UAYJ,CAIA,qEACI,mBAAoB,CACpB,kBA6BJ,CA3BI,gFACI,mBACJ,CAEA,gFAEI,cAAe,CADf,oBAEJ,CAEA,qFASI,sBAAuB,CACvB,WAAY,CAFZ,aAAc,CAFd,iBAAkB,CAFlB,WAAY,CAGZ,mBAAoB,CAIpB,YAAa,CANb,SAAU,CAJV,iBAAkB,CAWlB,WAAW,CAVX,KAAM,CACN,UAcJ,CAHI,gGACI,kBACJ,CAIR,iEACI,4BAKJ,CAHI,6EACI,eACJ,CAGJ,oEAOI,aAAc,CAEd,cAAe,CALf,oBAAqB,CACrB,cAAe,CACf,kBAAmB,CALnB,iBAAkB,CAElB,SAAU,CAKV,iBAAkB,CANlB,OAQJ,CAGJ,+DACI,aACJ,CAEA,wHAUI,kBAAmB,CACnB,iBAAiB,CAHjB,aAAc,CALd,oBAAqB,CAGrB,cAAe,CACf,gBAAiB,CAFjB,kBAAmB,CADnB,gBAAiB,CAFjB,iBAAkB,CAOlB,qBAWJ,CAPI,oIACI,kBAKJ,CAHI,0JACI,aACJ,CAIR,yDAMI,aAAc,CAHd,iBAAkB,CAElB,OAAQ,CADR,OA4BJ,CAxBI,uEAKI,aAAa,CADb,cAAe,CAFf,WAAY,CACZ,gBAAiB,CAFjB,UAUJ,CAJI,6EACI,aAAc,CACd,cACJ,CAGJ,8EAEI,cAAe,CADf,gBAAiB,CAEjB,2BAOJ,CALI,uFAEI,yBAA2B,CAC3B,8BAAgC,CAFhC,aAGJ,CAIR,4DAEI,UAAW,CADX,SAEJ,CAEA,kEACI,kBAAmB,CACnB,kBAAmB,CACnB,0CACJ,CAIA,iDAGI,yBAA2B,CAC3B,8BAAgC,CAFhC,aAAc,CADd,eAIJ,CAGJ,qCAMI,kBAAmB,CADnB,aAAc,CAJd,YAAa,CAEb,cAAe,CACf,gBAAiB,CAFjB,cAYJ,CANI,kDAII,cAAe,CAFf,WAAY,CACZ,gBAAiB,CAFjB,UAIJ,CCnNR,mBASI,wBAAyB,CACzB,iBAAkB,CAHlB,aAAc,CAFd,cAAe,CACf,gBAAiB,CAFjB,oBAAuB,CAFvB,eAAgB,CAShB,YAAa,CARb,aAAc,CAKd,kBAAmB,CAPnB,iBAAkB,CAWlB,WAwMJ,CAtMI,qCAGI,+BAA+B,CAF/B,qBAAsB,CACtB,mBAQJ,CALI,2CAGI,qCAAwC,CAFxC,aAAc,CACd,cAEJ,CAGJ,gCAII,QAAS,CAHT,gBAAiB,CACjB,eAAgB,CAGhB,iBAAkB,CAClB,eAAgB,CAHhB,SAAU,CAIV,kBA2DJ,CAvDI,0CACI,+BACJ,CAEA,kDAQI,kBAAmB,CAPnB,YAAa,CAMb,aAAc,CAEd,0BAA0B,CAN1B,eAAgB,CADhB,qBAAsB,CAItB,mBAAoB,CAFpB,sBAAuB,CACvB,kBA6CJ,CAvCI,8DACI,aAAc,CACd,kBACJ,CAEA,6DACI,YAAa,CAEb,MAAM,CADN,gBAOJ,CAJI,oEAEI,aAAc,CADd,oBAEJ,CAGJ,oEAII,aAAc,CADd,cAAe,CADf,gBAAiB,CADjB,iBAIJ,CAEA,6DAGI,aAAc,CAFd,cAAe,CACf,eAEJ,CAEA,0EAGI,wBAAyB,CAFzB,aAAc,CACd,cAEJ,CAEA,yDAEI,kBAAmB,CADnB,aAEJ,CAIR,mCAEI,gBAAiB,CADjB,cAAe,CAEf,iBACJ,CAEA,kCAEI,eAAiB,CACjB,gBAAiB,CAFjB,qBAGJ,CAEA,uCAOI,kBAAmB,CANnB,YAAa,CAIb,kBAAmB,CACnB,4BAA6B,CAH7B,gBAAiB,CADjB,kBAAmB,CAEnB,mBA0BJ,CArBI,mDAGI,4BAA6B,CAC7B,MAAM,CAFN,mBAAoB,CADpB,iBAmBJ,CAdI,yDAGI,qCAAwC,CAFxC,aAAc,CACd,cAEJ,CAEA,+DACI,8BACJ,CAEA,4DACI,aAAc,CACd,kBACJ,CAIR,qCACI,aACJ,CAEA,+CAEI,gBAAiB,CADjB,eAAgB,CAEhB,eAAgB,CAChB,iBAAkB,CAClB,eAgEJ,CA5DI,yEAOI,wBAAyB,CACzB,gBAAiB,CAFjB,aAAc,CAHd,cAAe,CACf,gBAAiB,CACjB,gBAAiB,CAHjB,cAAe,CADf,UA0DJ,CAjDI,mGAII,cAAc,CAHd,WAAY,CACZ,eAAgB,CAChB,kBAQJ,CALI,mNAGI,kBAAmB,CADnB,aAEJ,CAGJ,wMAEI,eAAgB,CAChB,kBACJ,CAEA,oGAGI,eAAiB,CADjB,iBAAkB,CAElB,gBAAiB,CACjB,kBAAmB,CAJnB,UAKJ,CAEA,oGACI,YAAa,CACb,eAAgB,CAEhB,eAAgB,CADhB,kBAkBJ,CAfI,gHAII,MAAO,CAHP,eAAgB,CAChB,sBAAuB,CACvB,kBAEJ,CAEA,sHAII,aAAc,CAEd,aAAc,CAHd,cAAe,CADf,gBAAiB,CADjB,gBAAiB,CAIjB,gBAEJ,CAOZ,4CACI,iBAAkB,CAClB,qCACJ,CCwSJ,6CACA,eACA,CAIA,oEACA,YACA,CAIA,6BAGA,mBADA,aADA,iBAiCA,CA7BA,6CAOA,sBACA,yBACA,kBAHA,eAJA,qBAEA,YAHA,kBAIA,sBAFA,UAoBA,CAZA,mDAMA,yBAEA,cADA,aAEA,WAJA,WAFA,SAFA,kBACA,QAQA,wBANA,SAOA,CAGA,+CAEA,eADA,eAEA,CAGA,sCAEA,mBAGA,mBAJA,aAGA,YADA,sBAYA,CARA,8CACA,aACA,CAEA,oDACA,cACA,cACA,CAGA,sCAEA,gBADA,WAEA,CAIA,0CACA,SAsBA,CApBA,gEACA,aAkBA,CAhBA,sEAIA,eAFA,eACA,iBAFA,cAcA,CATA,4EAEA,yBADA,aAEA,CAEA,kFAEA,yBADA,aAEA,CCzVA,kBAEA,gBADA,WAQA,CAJA,sDACA,aACA,CAFA,iDACA,aACA,CAFA,kDACA,aACA,CAFA,wCACA,aACA,CCnIA,oCACA,SACA,CAGA,oCACA,eACA,CCuFA,uBAKA,yBAHA,iBADA,kCAEA,mBACA,oBAMA,CAHA,oCACA,gBACA,CAKA,4BACA,GACA,uBACA,CACA,CAEA,aAIA,kBADA,eADA,YADA,iBA2FA,CAtFA,6BACA,kBAKA,CAHA,mDACA,YACA,CAIA,yEAEA,aACA,UACA,kBACA,CAGA,+BAKA,mBAJA,aACA,YAEA,iBADA,gBAGA,CAEA,yBACA,gBACA,uBACA,kBACA,CAEA,6DAOA,mBAFA,cAHA,aACA,YACA,eAEA,SAEA,CAEA,gCAIA,cADA,eADA,iBADA,iBAgBA,CAXA,2CACA,eACA,CAEA,sDACA,kBAKA,CAHA,8DACA,aACA,CAIA,6BACA,eACA,mBAEA,6BADA,eAWA,CARA,0CAEA,eADA,wBAMA,CAHA,gDACA,aACA,CAIA,+BAIA,gDAHA,kBAEA,WADA,OAGA,CAEA,6BACA,UACA,CCrRA,kKAEA,UACA,uBACA,CAKA,uEACA,UACA,2BACA,CAGA,gBASA,mBALA,SAGA,aAGA,uBALA,OAGA,gBAPA,eAEA,QADA,MAIA,YA2EA,CArEA,2BAMA,gBAHA,aAIA,sBAFA,aAJA,kBAGA,aAFA,SAMA,CAEA,4BAMA,mBADA,gCAHA,aACA,YACA,mBAHA,iBAsBA,CAfA,wCAOA,mBADA,mBAFA,WACA,eAJA,aAEA,YAKA,uBANA,UAOA,CAEA,sCACA,eACA,wBACA,CAGA,2BAIA,cAHA,aAIA,OAFA,eADA,iBAQA,CAHA,iCACA,gBACA,CAGA,6BACA,yBACA,CAEA,4BAKA,mBADA,mBAHA,aACA,YAIA,yBAHA,kBAIA,CAEA,0BAOA,0BAHA,SAEA,eADA,OAJA,kBAEA,QADA,KAMA,CAIA,kCAMA,aACA,yBAHA,OAIA,gBAPA,kBAEA,QADA,MAGA,SAsBA,CAjBA,uCACA,QACA,CAEA,6CACA,WACA,CAEA,0HAEA,uBACA,CAUA,0NACA,0BACA,CChEA,+CACA,WACA,CAGA,4BAeA,mBAHA,kBAFA,cACA,eANA,aAGA,eACA,gBAFA,YASA,uBAfA,kBAEA,WADA,QAWA,2BACA,+DARA,WAFA,SAoBA,CANA,2EAIA,mBADA,cADA,UAGA,CAGA,0CACA,mBAyBA,CAvBA,uDACA,YACA,CAEA,wEAKA,gBACA,yBACA,4CAHA,cAFA,eACA,iBAFA,UAiBA,CATA,qFAEA,eADA,iBAOA,CAJA,2FAEA,mBADA,aAEA,CC4DA,qBAGA,eADA,kBADA,iBAkBA,CAdA,uCACA,iBAKA,CAHA,6CACA,kBACA,CAGA,sCACA,kBAEA,WADA,MAEA,UACA,CAGA,iCAEA,aACA,YAEA,gBADA,eAHA,iBAYA,CALA,oDACA,UACA,kBACA,CAIA,2BAEA,iBADA,gBAEA,uBACA,kBACA,CAEA,gCAEA,mBAIA,cALA,aAIA,eADA,kBADA,cAwBA,CAnBA,6CAEA,eACA,UAFA,sBAGA,mBAEA,6BADA,eAMA,CAHA,mDACA,aACA,CAGA,8CAIA,4CADA,gBAFA,kBACA,OAGA,CAGA,+BAGA,YAFA,kBACA,UAyBA,CArBA,yDACA,8BACA,CAGA,gDAOA,mBAHA,SAMA,cAJA,aAGA,eADA,eAPA,kBAEA,QADA,MAGA,SAMA,CAEA,8CACA,WACA,CChSA,wBACA,aACA,qBAWA,CARA,2DACA,qBACA,CAEA,gDACA,eACA,CCqBA,YAQA,gBADA,eAHA,eAFA,YAGA,gBAFA,eAFA,kBAKA,oBA+BA,CA3BA,6BAWA,mBACA,yBACA,kBAHA,cADA,eALA,OACA,iBACA,gBAQA,aANA,kBADA,iBANA,kBAEA,QADA,KAaA,CAEA,oCAQA,mBAJA,WAGA,cAFA,SACA,iBALA,kBAEA,UADA,OAOA,CCgBA,4BAEA,mBADA,aAEA,sBACA,gBAKA,CAHA,uCACA,eACA,CAGA,4BAEA,cACA,mBAFA,UA2EA,CArEA,yDACA,WACA,CAIA,8DAQA,gCAJA,eACA,gBAHA,YAIA,iBAHA,eAIA,eAMA,CAHA,sFACA,iBACA,CAGA,+BAGA,mBAFA,cACA,kBAEA,CAEA,+BACA,oBACA,CAEA,wCACA,iBAyBA,CAvBA,iGAUA,kBAHA,eAHA,YAIA,iBAFA,iBADA,cAHA,kBAOA,kBANA,SAQA,2BACA,CAEA,gDAEA,mBADA,UAEA,CAEA,iDAEA,mBADA,aAEA,CAGA,uCAOA,4BACA,qBANA,oBACA,gBACA,uBAEA,mBADA,oBAIA,CAGA,sCACA,cACA,CAEA,qCAEA,mBACA,iBAFA,UAGA,CAEA,sCAIA,4CAFA,cADA,eAEA,qBAEA,CAEA,iCAOA,6BAHA,cAEA,eAJA,eADA,YAEA,iBAEA,iBAGA,CCzMA,4BAEA,mBAEA,eAHA,oBAEA,cAEA,CAEA,0CACA,mBA2BA,CAzBA,uDACA,YACA,CAEA,wEAOA,gBACA,yBACA,4CAJA,cAFA,eACA,iBAFA,eAIA,kBALA,UAmBA,CATA,4FACA,cAOA,CALA,qMAGA,mBADA,aAEA,CCkbA,6BACA,aACA,YACA,gBAuFA,CArFA,4CAIA,+BACA,aAHA,YACA,gBAFA,iBA2CA,CArCA,kEAGA,oBAFA,kBACA,SAEA,CAEA,gEACA,wBAqBA,CAnBA,wEAEA,iBADA,kBAEA,CAKA,0LACA,cACA,CAEA,wFAIA,cAHA,gBACA,uBACA,kBAEA,CAIA,4DAIA,SACA,OAJA,kBAEA,QADA,KAIA,CAGA,wCACA,OACA,cAoCA,CA/BA,0HACA,iBACA,CAMA,2EACA,aACA,CAIA,qDACA,kBACA,CAEA,oDAEA,cADA,cAEA,CAEA,oDAEA,cADA,cAEA,CAEA,kDACA,cACA,CChVA,qCAEA,YACA,eAFA,iBA4BA,CAxBA,kDAGA,iBAFA,kBACA,SAEA,CAEA,yDACA,yBACA,eACA,CAGA,2DACA,yBACA,CAGA,qDAGA,OAEA,gBAJA,kBACA,QAEA,UAEA,CC5CA,yBACA,gBACA,iBA4BA,CA1BA,sCACA,iBACA,iBACA,CAEA,qCACA,gBAUA,CALA,oHACA,iBACA,CAKA,qCAEA,cADA,cAEA,CAEA,oCACA,cACA,CChBA,2BACA,iBA2CA,CAvCA,4DAEA,gBADA,aAEA,CAIA,yCAEA,mBADA,aAEA,eACA,CAEA,wCAGA,cAFA,aACA,iBAYA,CATA,sDAEA,cACA,eAFA,cAOA,CAHA,4DACA,aACA,CAIA,uCACA,gBAQA,CALA,wEAEA,gBADA,aAEA,CAKA,gDAEA,wBACA,CAEA,qBAGA,qBACA,YAHA,kBAIA,yDAHA,cAIA,CAEA,2BASA,mBACA,kBAHA,WANA,qBAIA,eAHA,YAIA,iBAHA,eACA,cAIA,kBAGA,0DACA,CChUA,iBAIA,cAHA,aACA,eACA,eAmBA,CAhBA,yBACA,aACA,CAEA,wBACA,aACA,CAEA,0BACA,aACA,CAEA,yBAEA,gBADA,aAEA,CCwCA,uDACA,yCACA,CClDA,aACA,+BACA,CAIA,oEACA,2BACA,CAGA,2CAKA,mBAEA,yDAJA,eACA,gBAFA,kCADA,iBAOA,CAEA,8DAGA,8BADA,+BADA,SAGA,CCiSA,mCAMA,+BADA,cAJA,wBACA,YACA,gBACA,4BAGA,CC5QA,mDACA,yCACA,CCiDA,qBAEA,yBADA,aAsBA,CAnBA,oCAQA,mBACA,gCAFA,cAHA,eACA,gBAHA,YAIA,iBAHA,kBAFA,iBASA,CAEA,gCACA,4BACA,CAEA,mCACA,YACA,CC8JA,cAIA,gBAHA,kBAEA,WADA,SA6EA,CAxEA,gDACA,YACA,CAGA,uCAEA,mBADA,aAEA,iBAKA,CAHA,oDACA,iBACA,CAGA,oCACA,WACA,CAIA,6CACA,eACA,CAIA,qDACA,aACA,CAKA,sEACA,kBACA,CAQA,gDACA,wBACA,4BACA,CAIA,0DACA,iBAiBA,CAfA,iEAUA,mBACA,kBAHA,WAIA,cANA,eAFA,YAGA,iBAFA,kBAJA,kBAQA,kBAPA,QAWA,2BAVA,UAWA,CC7QA,gBASA,gBALA,SAGA,aACA,sBAHA,OAJA,kBAEA,QADA,MAIA,SAiCA,CA5BA,gCAEA,mBAOA,gCADA,WAPA,aAEA,cAIA,eAHA,YAEA,mBADA,iBAaA,CAPA,oDAKA,cAFA,eACA,gBAFA,iBADA,eAKA,CAGA,gCAEA,mBAIA,mBALA,aAGA,YADA,yBAEA,kBAEA,CCgTA,mBACA,GACA,UACA,CAEA,GACA,SACA,CACA,CAEA,6BACA,GACA,oBACA,CAEA,IACA,oBACA,CAEA,IACA,oBACA,CAEA,IACA,oBACA,CAEA,GACA,kBACA,CACA,CAGA,qCAGA,kBADA,oBADA,iBAGA,iBAaA,CAXA,wDACA,OACA,CAEA,2CAKA,WAJA,qBAEA,YACA,sBAFA,OAIA,CAGA,6BACA,qBACA,YACA,gBACA,qBAkBA,CAhBA,6CACA,YACA,CAEA,gDACA,yBACA,CAEA,6CACA,SACA,CAEA,+CACA,aACA,wBACA,CAIA,mDAGA,aACA,sBAHA,kBACA,SAwBA,CApBA,kEAEA,mBADA,YAEA,CAEA,6DAOA,mBAFA,gCADA,+BADA,eAFA,aAKA,OAJA,YAMA,sBAMA,CAJA,oEACA,gBACA,+BACA,CAOA,sEAEA,mBADA,UAEA,CAIA,4BAEA,mBADA,YA0BA,CAvBA,yCAQA,8BADA,cAFA,eAJA,WAKA,gBAFA,iBADA,kBADA,iBAOA,8DACA,CAEA,wCASA,mBAFA,mBACA,kBAFA,cALA,aAIA,eAHA,YAEA,iBADA,aAOA,CAGA,iCAUA,yBACA,kBAFA,eAPA,qBAIA,YAFA,YAGA,iBAFA,gBAJA,kBAOA,sBALA,UAuBA,CAbA,uCAMA,yBAEA,cADA,aAEA,WAJA,WAFA,SAFA,kBACA,QAQA,kCACA,wBAPA,SAQA,CAGA,mCAEA,yBADA,sBAEA,2BAUA,CARA,2CACA,aACA,CAEA,+CACA,cACA,cACA,CAGA,iCASA,kBAFA,cACA,eAPA,aAIA,eAHA,YAIA,iBAFA,kBADA,aA6BA,CArBA,uCACA,kBACA,CAeA,2JACA,gCACA,CAIA,4BAGA,cADA,eADA,iBAGA,CAEA,2BACA,4BACA,CC1hBA,uDACA,eACA,CClDA,0BACA,aACA,OACA,kBAmDA,CAhDA,2DACA,kBAYA,CAVA,sEACA,kBAQA,CANA,4EAGA,cACA,YAFA,iBADA,UAIA,CAKA,yCAMA,uBAFA,WAFA,eACA,iBAFA,mBAIA,gBAMA,CAHA,oDACA,kBACA,CAGA,0CACA,OACA,eACA,CAGA,+DAEA,qBADA,aAEA,CAGA,0CAKA,cAFA,eACA,cAFA,mBADA,cAKA,CAIA,oCACA,gBACA,kBACA,CC7HA,yCAEA,mBAKA,kBAFA,cACA,eALA,aAGA,eADA,YAKA,8DAMA,CAJA,8CAEA,mBADA,gBAEA,CAGA,+CAEA,eADA,gBAEA,CCtDA,2BAIA,gBACA,yBAJA,sBAKA,CAEA,6BAKA,cAHA,eACA,gBACA,cAHA,kBAKA,CCmBA,qBAEA,mBADA,aAEA,WAKA,CAHA,uCACA,gCACA,CCeA,6CACA,WACA,CAGA,2BAeA,mBAHA,kBAFA,cACA,eANA,aAGA,eACA,gBAFA,YASA,uBAfA,kBAEA,WADA,QAWA,2BACA,+DARA,WAFA,SAoBA,CANA,yEAIA,mBADA,cADA,UAGA,CAGA,yCACA,mBAyBA,CAvBA,sDACA,YACA,CAEA,qEAKA,gBACA,yBACA,4CAHA,cAFA,eACA,iBAFA,UAiBA,CATA,kFAEA,eADA,iBAOA,CAJA,wFAEA,mBADA,aAEA,CC1GA,oBAEA,mBADA,aAEA,kBAkBA,CAhBA,+BACA,YAKA,CAHA,iCACA,gBACA,CAGA,8BACA,aACA,gBAKA,CAHA,gCACA,eACA,CC8CA,oDAIA,mBACA,gCAJA,aAEA,wBADA,mBA0DA,CArDA,8DAgBA,mBANA,mBAEA,4CAEA,2BADA,4BALA,cACA,eARA,aAKA,eAJA,YAKA,iBAFA,mBADA,kBADA,eAYA,mBAiBA,CAdA,qEAEA,gBACA,qBAFA,cAYA,CARA,+EAEA,mBADA,aAEA,CAEA,mFACA,UACA,CAIA,8DACA,gBACA,CAEA,8DAMA,mBACA,kBAFA,cAFA,eAFA,YAGA,iBAFA,cAMA,mBACA,CAEA,kEAEA,gDADA,aAEA,CCvFA,uBASA,uBACA,kBAJA,cAEA,eAPA,qBAEA,YAEA,iBADA,kBAGA,kBALA,UAqBA,CAXA,6BACA,cACA,CAEA,6BACA,kBAKA,CAHA,mCACA,aACA,CAIA,+BACA,aACA,qBAkBA,CAhBA,4CAGA,cAEA,eAJA,eACA,iBAEA,iBAWA,CARA,kDACA,aACA,CAEA,qDACA,cACA,kBACA,CC/BA,wCAEA,mBADA,aAEA,YACA,gBAeA,CAbA,mDAIA,sBACA,kBACA,uCAHA,iBADA,aADA,WAMA,CAEA,gDACA,qBACA,iBACA,CCPA,8DACA,WACA,CAKA,oBAIA,gBACA,8BAFA,YAFA,kBACA,WAuIA,CAlIA,4BAKA,mBACA,gCAFA,cADA,eADA,kBADA,gBAkCA,CA3BA,2CACA,aACA,eAwBA,CAtBA,qDAUA,mBAEA,4CAEA,2BADA,4BANA,cAEA,eAJA,eAHA,YAIA,iBAFA,mBADA,iBAKA,kBAOA,mBAdA,UAoBA,CAJA,4DAEA,gBADA,aAEA,CAKA,6BAIA,cADA,iBADA,gBADA,iBAyEA,CApEA,gCAEA,eACA,gBAFA,eAGA,CAEA,+BACA,cACA,CAEA,kCAKA,gBACA,yBACA,kBAJA,cADA,eADA,cAGA,kBAIA,CAGA,sCAUA,mBACA,YAJA,cANA,cAKA,iBAFA,gBACA,gBAFA,iBAKA,gBACA,gBAPA,UAUA,CAIA,mCAGA,cADA,kBADA,iBAoBA,CAhBA,0CAQA,mBACA,kBACA,WALA,WAFA,OAGA,iBALA,kBACA,QAKA,sBAHA,SAOA,CAEA,kDACA,eACA,CAIA,gCACA,aACA,CAEA,gCACA,cACA,CAGA,+BAWA,kBAHA,cAEA,eAJA,eADA,YAEA,iBANA,kBAEA,WAMA,kBAPA,SAEA,UAYA,CAHA,qCACA,wBACA,CC3GA,oDAEA,iCADA,kBAEA,CCuCA,oCACA,eACA,CCJA,0DAEA,iCADA,kBAEA,CC3FA,oCACA,aACA,CAIA,yCACA,0BACA,CAEA,wCAEA,oBADA,qBAEA,CC/CA,8BAKA,uBADA,cAHA,aACA,eAIA,yBAHA,gBAgBA,CAXA,uDACA,4BACA,CAEA,qDACA,+BAKA,CAHA,qEACA,UACA,CAIA,+BAOA,mBAJA,cAFA,aAQA,cADA,yBANA,kBAEA,iBAEA,gBADA,mBAKA,CAEA,iCAEA,cADA,OAEA,oBACA,CC+OA,mCACA,iBA0FA,CAxFA,yCAEA,eADA,iBAsBA,CAnBA,oHAEA,iBACA,CAEA,2DACA,iBAKA,CAHA,iEACA,kBACA,CAGA,0DACA,kBAEA,WADA,MAEA,UACA,CAGA,qDAGA,mBADA,aAGA,gBADA,eAEA,cALA,iBAoBA,CAZA,wEACA,UACA,kBACA,CAGA,iEACA,cAEA,eACA,+DAFA,kBAGA,CAGA,oDAGA,iBADA,gBADA,kBAGA,oBACA,CAEA,oDAEA,mBACA,sBAFA,aAKA,eAFA,YACA,iBAuBA,CApBA,iEAEA,cACA,eACA,UAHA,yBAIA,mBAEA,6BADA,eAMA,CAHA,uEACA,aACA,CAGA,kEAIA,4CADA,gBAFA,kBACA,OAGA,CAGA,mDACA,UACA,CC7KA,oBAEA,eADA,iBAmBA,CAhBA,sCAGA,kBADA,kBADA,eAOA,CAHA,4CACA,kBACA,CAGA,qCACA,kBAEA,WADA,MAEA,UACA,CAGA,gCAEA,aAEA,gBADA,eAFA,iBAWA,CALA,mDACA,UACA,kBACA,CAIA,0BACA,iBACA,eACA,CAEA,+BAEA,mBAIA,cALA,aAIA,eADA,kBADA,cAwBA,CAnBA,4CAEA,eACA,UAFA,sBAGA,mBAEA,6BADA,eAMA,CAHA,kDACA,aACA,CAGA,6CAIA,4CADA,gBAFA,kBACA,OAGA,CAGA,oCAGA,YAFA,kBACA,UAqBA,CAjBA,8DACA,8BACA,CAGA,qDAOA,mBAHA,SAMA,cAJA,aAGA,eADA,eAPA,kBAEA,QADA,MAGA,SAMA,CC5DA,yCACA,iBACA,CAEA,uCAGA,mBACA,6BAHA,YACA,gBAcA,CAVA,6CACA,kBACA,CAEA,uDACA,YAGA,iBADA,kBADA,kBAGA,CAIA,0DAGA,mBACA,6BAHA,YACA,gBAOA,CAHA,gEACA,kBACA,CAKA,6DACA,mBACA,4BAKA,CAHA,mEACA,kBACA,CAIA,0CAQA,mBAFA,mBACA,kBAFA,eAJA,aAGA,eAFA,YAOA,uBANA,cAWA,CAHA,gDACA,kBACA,CAKA,sEACA,oBACA,CAIA,+CACA,iBAeA,CAbA,4DAOA,mBAHA,SAMA,cACA,eALA,aAGA,eADA,eAPA,kBAEA,QADA,MAGA,SAOA,CAGA,6CACA,cACA,UACA,CCnLA,uCAKA,yBACA,kBAFA,cAFA,eACA,iBAIA,mBANA,UAyDA,CAjDA,6CACA,kBACA,CAEA,oFAEA,YAEA,kBADA,kBAEA,eACA,CAEA,0CAEA,cADA,eAEA,CAEA,0CAGA,6BADA,mBADA,eAGA,CAEA,mDAEA,iCADA,kBAEA,CAGA,2DAKA,cAEA,YANA,qBAEA,eADA,WAEA,cAEA,qBAEA,CAGA,mDACA,8DAOA,CALA,+DAEA,cACA,eAFA,cAGA,CAIA,4CAUA,mBAHA,mBACA,0BACA,kBAJA,cACA,eALA,aAGA,eAFA,YASA,uBARA,cAwBA,CAdA,8CAGA,cADA,eADA,gBAGA,CAEA,kDAEA,qBADA,aAMA,CAHA,oDACA,aACA,CCpLA,sCAGA,cADA,eADA,mBA0BA,CAtBA,kDAEA,iBADA,UAQA,CALA,qDAGA,yBADA,mBADA,eAGA,CAGA,kDAGA,cADA,mBAEA,iBAHA,WAIA,CAEA,kDACA,kBACA,oBACA,CCmBA,oCACA,eACA,CCEA,kBACA,kBACA,SAOA,CCQA,gGACA,WACA,CCtBA,gCACA,yBACA,kBACA,oCAoEA,CAjEA,4DAEA,WADA,WAEA,CAGA,uCAMA,gBACA,yBAGA,qCAFA,WAHA,YAFA,UAFA,kBACA,SAOA,wBALA,UAOA,CAEA,wCAGA,gBACA,kBAFA,kBADA,iBA4CA,CAvCA,gDAKA,gCADA,cADA,eADA,kBADA,kBAgBA,CAVA,qDAOA,yBACA,kBAFA,cALA,qBAGA,eAFA,YAGA,iBAFA,aAMA,CAGA,qDAEA,eACA,iBAFA,eAGA,CAEA,sDACA,aACA,CAEA,wDAOA,4BACA,qBANA,oBACA,gBACA,gBACA,uBACA,oBAGA,CCwQA,2CAGA,mBAFA,aACA,eAEA,gBAiPA,CA/OA,mEAIA,qBADA,eADA,kBADA,eAgBA,CAVA,qGACA,oBACA,CAIA,+FACA,kBACA,CAIA,oEAWA,mBALA,gBACA,yBACA,kBACA,sBAPA,aAEA,YACA,eAJA,kBASA,oBAPA,WAoBA,CAVA,0EACA,mBACA,oBAOA,CALA,+FACA,UAEA,mBADA,kBAEA,CAIA,0DAQA,mBAFA,mBACA,kBAFA,WAJA,aASA,cANA,eADA,YAMA,uBAEA,oBATA,UAUA,CAEA,gEAUA,mBACA,kBAHA,WACA,eAHA,eADA,YAEA,iBAKA,UAXA,kBAEA,WADA,SAYA,oBACA,oBAFA,kBATA,UAYA,CAEA,0DAKA,cAJA,aAKA,sBAHA,eACA,cAFA,iBAwBA,CAlBA,yEAMA,cADA,eAJA,YAEA,kBADA,gBAEA,gBAGA,uBACA,kBACA,CAEA,gFACA,YACA,gBACA,gBACA,uBACA,kBACA,CAGA,gEAGA,gBAFA,kBACA,WAgDA,CA7CA,oJAEA,cAWA,CATA,kUAGA,qBADA,aAMA,CAHA,0UACA,aACA,CAIA,yEASA,mBAHA,0BACA,kBACA,sBAHA,cAJA,aAGA,eADA,YAOA,uBARA,UAcA,CAJA,sFAEA,cADA,gBAEA,CAGA,2EASA,mBAFA,cAHA,aAEA,eAEA,uBAPA,kBAEA,YADA,QAQA,2BALA,UAMA,CAKA,0BAFA,oIAGA,WAcA,CAbA,CAEA,0BANA,oIAOA,WAUA,CATA,CAEA,0BAVA,oIAWA,WAMA,CALA,CAEA,0BAdA,oIAeA,WAEA,CADA,CAGA,2DACA,cA8DA,CA5DA,iEAMA,WADA,YAFA,OAFA,kBACA,MAEA,UAGA,CAGA,yFACA,oBAKA,CAHA,wGACA,kBACA,CAIA,8FAUA,mBAFA,WAGA,cALA,eADA,YAEA,iBANA,kBAEA,WAMA,kBAPA,SAEA,UAQA,CAGA,sLAGA,qBADA,iBAMA,CAHA,oNACA,kBACA,CAGA,2FACA,oBAaA,CAXA,0GACA,kBACA,CAGA,yPAEA,cACA,4BACA,CCpjBA,iCAGA,mBACA,eAHA,aACA,cAwBA,CApBA,yCACA,aACA,CAEA,wCACA,aACA,CAEA,0CACA,aACA,CAEA,yCAEA,gBADA,aAEA,CAEA,yCACA,iBACA,CAKA,6CACA,YACA,CAEA,8FAIA,gBAFA,kBACA,aAEA,CAEA,+CACA,SACA,CAEA,0FAEA,WADA,eAEA,eACA,CAEA,gEACA,SAaA,CAXA,8EACA,WASA,CAPA,0FACA,eACA,CAEA,gGACA,gBACA,CAIA,6CACA,aAGA,gBAFA,iBACA,gBAEA,CAEA,iDACA,YACA,CAEA,6CAUA,gCAFA,WAFA,eAJA,YAKA,iBAHA,iBACA,kBAFA,cAFA,kBAQA,eAEA,CAEA,2DAKA,cACA,eAFA,eAHA,kBAEA,QADA,MAKA,mBAKA,CAHA,iEACA,uBACA,CCrHA,iBAQA,gBADA,eAHA,eAFA,YAGA,iBAFA,eAFA,kBAKA,oBA0CA,CAtCA,uCAaA,mBACA,yBACA,kBAHA,cADA,eALA,OACA,iBACA,gBAQA,aANA,kBADA,iBANA,kBAEA,QADA,KAkBA,CAJA,6CACA,0BACA,kCACA,CAGA,8CAYA,uBARA,WAKA,cAHA,YADA,SAGA,gBADA,iBANA,kBAEA,UAOA,uBARA,QASA,kBAEA,CCgBA,kBAMA,kBAJA,aAGA,eADA,kBAHA,kBAEA,UAgFA,CAxEA,wIACA,oBACA,CAIA,6BAIA,uCACA,kBAFA,eADA,iBADA,UA0BA,CApBA,mCACA,kBACA,CAEA,sFAEA,aACA,qBACA,CAEA,4CAEA,YAGA,iBAFA,eACA,gBAEA,uBAEA,mBAPA,WAMA,mBAEA,CAGA,sEAEA,UAMA,CAJA,kHAEA,yBADA,eAEA,CAGA,kCAGA,OAFA,kBACA,KAEA,CAEA,oCACA,kBAKA,CAHA,0CACA,kBACA,CAGA,8BAMA,mBAIA,cACA,eANA,aAIA,eAFA,YACA,cAPA,kBAEA,QADA,MAEA,YAQA,CC+CA,kDAEA,6BACA,kBAFA,iBAqBA,CAjBA,8DACA,oBACA,CAEA,8DAWA,mBAFA,cACA,eALA,aAGA,eAFA,YACA,cANA,kBAEA,QADA,MAEA,YAQA,CAOA,wQACA,aACA,CAGA,qHACA,aACA,cACA,CAGA,8HAGA,iBACA,CAEA,oHAIA,kBADA,cAMA,CAHA,sIACA,kBACA,CAGA,6EAEA,YACA,gBACA,CAEA,uCAGA,iBAFA,gBACA,gBAEA,CAEA,sCAQA,mBAFA,mBACA,kBAFA,eAJA,aAGA,eAFA,YACA,iBA8BA,CAvBA,0DACA,aACA,CAEA,4CAEA,mBACA,aAFA,WAGA,CAEA,2DACA,MACA,CAEA,uDAMA,mBAFA,kBAHA,aAIA,OAFA,eADA,YAKA,sBACA,CAGA,gDAQA,mBAFA,mBACA,kBAFA,eAJA,aAGA,eAFA,YAOA,uBANA,cAiBA,CATA,sDAEA,mBADA,aAEA,CAEA,0DAEA,kBADA,gBAEA,CAKA,gDACA,4BACA,CAIA,iCAGA,YAFA,YACA,gBAaA,CAVA,uCACA,kBACA,CAEA,iDACA,YAGA,iBADA,kBADA,kBAGA,CCxTA,oBACA,gBAKA,CAHA,wCACA,kBACA,CCmMA,eACA,gBAKA,CAHA,mCACA,kBACA,CCpLA,iCASA,sBACA,mBAHA,cANA,qBAIA,eACA,iBAHA,gBADA,eAEA,cAIA,iBAGA,CAEA,oCACA,YACA,CCzHA,yBACA,cAaA,CAXA,oCACA,SACA,CAEA,+BACA,uBAKA,CAHA,0CACA,SACA,CCtBA,yBAEA,kBADA,gBAMA,CAHA,+BACA,kBACA,CCwLA,2BACA,MA6GA,CA3GA,iCAEA,gBACA,mBAFA,UAoDA,CA/CA,sDACA,4BACA,CAGA,wEAMA,sBAFA,eAFA,YACA,iBAEA,eAwBA,CArBA,gGAEA,kBADA,SAEA,CAEA,kGACA,SACA,CAEA,kGACA,SACA,CAEA,8FAEA,gBADA,qBAMA,CAHA,8JACA,gBACA,CAIA,oCAGA,gCADA,cADA,eAGA,CAEA,oCAEA,cADA,iBAEA,oBACA,CAKA,mEAEA,uBADA,qBAEA,CAEA,+DACA,YACA,CAGA,mDACA,kBACA,WACA,CAEA,4JAGA,eACA,CAMA,wGACA,SACA,CAGA,qDACA,kBACA,WACA,CAGA,yDACA,WACA,CAIA,iDACA,YACA,CAEA,iFAEA,cACA,CCnEA,mCACA,eACA,CAEA,mCAGA,cAFA,eACA,gBAkBA,CAfA,wCAEA,kBADA,iBAaA,CAVA,+CAMA,wBACA,kBACA,WAHA,WAFA,OAFA,kBACA,QAEA,SAKA,CAIA,mCAEA,cADA,cASA,CANA,8CAGA,cACA,eAFA,eADA,eAIA,CCrGA,mCAGA,cAFA,eACA,gBAmEA,CAhEA,wCAGA,kBADA,kBADA,iBAcA,CAVA,+CAMA,wBACA,kBACA,WAHA,WAFA,OAFA,kBACA,QAEA,SAKA,CAGA,qDAEA,eADA,UA6CA,CA1CA,gHAIA,gCAFA,YACA,cAEA,CAEA,wDACA,wBACA,CAEA,+DASA,kBADA,eAPA,aAEA,YAIA,iBAFA,eACA,gBAFA,eAFA,WA4BA,CAnBA,qEACA,kBAKA,CAHA,gFACA,aACA,CAGA,2EACA,gBACA,uBACA,kBACA,CAEA,0EACA,aAEA,cADA,gBAEA,CClMA,gCAEA,mBADA,aAEA,WAsBA,CApBA,6CACA,cACA,UAWA,CARA,2EACA,gBACA,CAGA,4DACA,gCACA,CAGA,8CACA,OAEA,iBADA,eAEA,CC1GA,mBACI,oBA4EJ,CA1EI,kTASI,UAAW,CAEX,gBAAiB,CADjB,UAEJ,CAEA,2WAUI,eACJ,CAEA,waAUI,SAAa,CADb,SAEJ,CAGI,0pBAYI,6BAA8B,CAC9B,0BAA2B,CAF3B,aAGJ,CAIA,+oBAYI,8BAA+B,CAD/B,2BAEJ,CCmQR,sEAEA,kBADA,WAEA,CAGA,8CAEA,aADA,iBAoCA,CAjCA,mEAMA,mBAFA,SAMA,cACA,eANA,aAIA,eAFA,uBANA,kBAEA,YADA,MAMA,UAIA,CAEA,iEACA,WAiBA,CAfA,0BAHA,iEAIA,WAcA,CAbA,CAEA,0BAPA,iEAQA,WAUA,CATA,CAEA,0BAXA,iEAYA,WAMA,CALA,CAEA,0BAfA,iEAgBA,WAEA,CADA,CCxBA,mEACA,WACA,CAGA,4BACA,WACA,CAGA,uCACA,WACA,CAMA,+CACA,WACA,CAGA,qCACA,wBACA,CAEA,uCACA,cACA,CAEA,6CACA,eACA,CAEA,qCACA,cAEA,iBADA,WAEA,CAGA,4EACA,WACA,CAIA,2BACA,8DASA,CANA,uCAGA,mCAFA,wBACA,kBAEA,CCvUA,4BACA,kBACA,CAEA,sCAEA,mBADA,aAEA,0BACA,CAEA,uCAEA,mBADA,aAEA,WACA,CAEA,qCAEA,iBADA,wBAEA,CAEA,6BAIA,cACA,eAHA,eACA,iBAFA,eAKA,CAGA,kBAGA,cAFA,eACA,gBAkBA,CAfA,uBAEA,kBADA,iBAaA,CAVA,8BAMA,wBACA,kBACA,WAHA,WAFA,OAFA,kBACA,QAEA,SAKA,CCqOA,4BAEA,kBADA,cAMA,CAHA,wCACA,iBACA,CC2EA,qEAEA,kBADA,WAEA,CAGA,wCAEA,cADA,eAEA,CAEA,8CAGA,mBADA,aADA,iBAaA,CATA,mEAEA,mBAIA,cACA,eANA,aAIA,eAFA,uBACA,eAIA,CChJA,kBACA,UASA,CAPA,2BACA,WACA,CAEA,iCACA,UACA,CAGA,4BACA,iBAgBA,CAdA,sCAEA,cADA,cAEA,CAEA,kCACA,qBAEA,gBADA,gBAEA,gBACA,uBAEA,mBADA,kBAEA,CAGA,8BAIA,mBAFA,aACA,kBAFA,iBA0CA,CArCA,0CACA,mBACA,8DAMA,CAJA,qGAEA,aACA,CAGA,mCAEA,kBADA,UAEA,CAEA,yCAEA,cADA,cAEA,CAEA,oCAKA,cAJA,qBAEA,gBADA,gBAEA,gBAEA,uBAEA,mBADA,kBAEA,CAEA,2CAIA,eADA,gBAFA,kBACA,OAGA,CCnTA,wBACA,aACA,OACA,eACA,gBAkBA,CAhBA,iCACA,qBACA,CAEA,uCAKA,uBAHA,cADA,kBAEA,iBACA,kBAEA,CAEA,wCAEA,cADA,QAEA,CC3EA,gDACA,wBAKA,CAHA,sDACA,oBACA,CCqCA,qBAGA,cAFA,OACA,eAEA,kBAgFA,CA5EA,wFACA,aACA,CAIA,0CACA,aACA,CAIA,yCACA,aACA,CAKA,mFACA,aACA,CAIA,0CACA,aACA,CAIA,0CACA,aACA,CAGA,4BAEA,mBADA,aAGA,eADA,iBAMA,CAHA,wCACA,WACA,CAGA,iCAMA,mBAHA,SAEA,aAEA,uBAHA,SAHA,kBACA,MAOA,2BADA,WAEA,CAEA,6BACA,iBACA,CAEA,2BACA,gBACA,kBAMA,CAJA,kCAEA,cADA,oBAEA,CAGA,2CACA,cACA,CClBA,qBACA,mBACA,CAEA,sBAUA,mBAFA,gBACA,mBAHA,cACA,eANA,aAIA,eAHA,YASA,uBAPA,kBADA,oBA+CA,CApCA,8BACA,kBACA,CAGA,kCACA,yBACA,CAEA,kCACA,wBACA,CAIA,4EAEA,qBADA,aAEA,CAOA,wIAEA,qBADA,aAEA,CAGA,wBAGA,cADA,eADA,gBAGA,CC7GA,0CACA,8BACA,CAEA,wBACA,gBACA,CCQA,oBACA,8BAKA,CAHA,2BACA,gBACA,CCzDA,sBAEA,kBADA,gBAMA,CAHA,4BACA,kBACA,CAGA,sBAEA,iBADA,gBAEA,eACA,eAeA,CAXA,2BACA,oBACA,CAEA,2BAIA,wBACA,kBAJA,qBAEA,WADA,SAIA,CCoBA,oDACA,YACA,CAEA,4GAIA,gBAFA,kBACA,aAEA,CAEA,sDACA,SACA,CAEA,iGAEA,WADA,eAEA,eACA,CAEA,uEACA,SAaA,CAXA,qFACA,WASA,CAPA,iGACA,eACA,CAEA,uGACA,gBACA,CAIA,oDACA,aAGA,gBAFA,iBACA,gBAEA,CAEA,wDACA,YACA,CAEA,oDAUA,gCAFA,WAFA,eAJA,YAKA,iBAHA,iBACA,kBAFA,cAFA,kBAQA,eAEA,CAEA,kEAKA,cACA,eAFA,eAHA,kBAEA,QADA,MAKA,mBAKA,CAHA,wEACA,uBACA,CC6iBA,eAEA,aACA,sBAFA,kBAGA,UA4DA,CA1DA,2BAGA,oDADA,eADA,kBAgDA,CA1CA,0IACA,yBACA,wBACA,CAEA,4IACA,4BACA,CAIA,+DACA,UACA,CAIA,+DACA,WACA,CAIA,mKAIA,0BADA,oBAEA,CAEA,qDACA,g6BACA,CAEA,wDACA,gqBACA,CAEA,sDACA,w4BACA,CAIA,yBACA,8DAKA,CAHA,2CACA,cACA,CAIA,cAIA,mBACA,4CAFA,WAFA,aACA,cAoBA,CAfA,gCAOA,mBAFA,iCAFA,cACA,eAHA,aACA,eAIA,8DAQA,CALA,uCAEA,mBACA,6BAFA,UAGA,CAIA,aAEA,mBADA,YAWA,CARA,+BACA,OACA,eACA,CAEA,yBACA,yCACA,CAGA,eAMA,mBAIA,cALA,aAGA,eACA,cAFA,kBANA,kBAEA,QADA,MAEA,SAYA,CAJA,yBAEA,eADA,gBAEA,CAGA,sBAKA,gBACA,kBALA,kBAEA,WADA,SAKA,+DAHA,WAuEA,CAlEA,6BAMA,mBACA,WAFA,YAJA,kBAEA,WADA,SAMA,yBAJA,UAKA,CAEA,oCAEA,mBAKA,gCADA,cALA,aAIA,eAFA,YACA,cAkBA,CAbA,8CAUA,mBAHA,gBACA,yBACA,kBAJA,cACA,eALA,aAEA,YAQA,uBAPA,iBAFA,UAUA,CAGA,kCAKA,mBADA,cAFA,2BACA,eAFA,iBAwBA,CAlBA,wCAGA,mBAFA,aACA,WAEA,CAEA,gDAEA,gBACA,uBACA,mBAHA,WAIA,CAEA,kDAEA,cACA,eAFA,gBAGA,CAGA,qCAEA,oBADA,gBAEA,CCz1BA,8BAIA,mBAFA,aACA,gBAFA,iBAmJA,CA9IA,6CAEA,mBAKA,gBACA,uCAFA,cALA,aAIA,eAFA,YACA,iBAmBA,CAbA,yDAMA,mBALA,aAIA,eAHA,YAEA,iBADA,kBASA,CAJA,2DAEA,eADA,gBAEA,CAIA,gDAGA,aAFA,kBACA,SAoBA,CAjBA,sDAIA,mBADA,kBAFA,kBACA,WAUA,CANA,4DAIA,SAHA,kBAEA,QADA,KAGA,CAGA,uDACA,MACA,CAGA,6CAOA,mBADA,mBAEA,6BACA,wCANA,aACA,YACA,eAJA,kBACA,SAQA,CAEA,wCAMA,cAFA,eAHA,YAIA,iBAFA,kBADA,eASA,CAHA,uDACA,gBACA,CAGA,6FAIA,6BACA,+BAFA,wBADA,cAaA,CARA,iHACA,0BACA,8BACA,CAEA,mJACA,aACA,CAFA,yIACA,aACA,CAFA,2IACA,aACA,CAFA,uHACA,aACA,CAIA,oDAEA,uBACA,qBAFA,cAGA,mBAWA,CATA,0DAEA,qBADA,aAEA,CAEA,gEAEA,qBADA,aAEA,CAQA,8HACA,kBACA,CAGA,4DACA,YACA,CAEA,mEAEA,WADA,KAEA,CAGA,0CACA,mCACA,CAEA,uDAEA,6BADA,uBAEA,CAEA,2DAEA,6BADA,uBAEA,CCuLA,uCAQA,qBAJA,aAKA,uBAPA,SAIA,iBALA,kBAMA,2BAFA,YAFA,SAyBA,CAjBA,yDAOA,mBAvBA,cAoBA,eAxBA,aA0BA,eAvBA,eADA,YA0BA,uBALA,eAEA,mBAxBA,UAmCA,CANA,gEAEA,mBAEA,2BADA,4BAFA,aAIA,CAIA,2CACA,aAEA,OADA,qBAEA,CAEA,8CAMA,cAFA,eAHA,YAIA,iBAFA,gBADA,kBAKA,oBAGA,CCzXA,WACA,aACA,UAYA,CAVA,qBACA,MACA,CAEA,0BAEA,mBADA,aAEA,cACA,gBACA,CCuHA,wCAEA,mBADA,aAEA,YACA,kBAWA,CATA,0DACA,aACA,cACA,iBACA,CAEA,qDACA,YACA,CAGA,wBACA,WACA,CChCA,4BAEA,mBADA,8BA8BA,CA3BA,kCACA,kBACA,SAeA,CAbA,6CACA,kBACA,CAEA,qDACA,WACA,CAEA,sDACA,kBAEA,WADA,SAEA,CAGA,mCAMA,yBALA,kBAEA,QADA,MAGA,YADA,SAGA,CNvCA,4CAMA,gBADA,eAJA,oBACA,YAEA,cADA,kBA4BA,CAvBA,kDASA,mBAJA,mBACA,8BACA,2BAHA,WAHA,aAOA,cALA,eADA,YAQA,sBACA,CAEA,kDAQA,mBAHA,yBAEA,+BAFA,iBACA,4BALA,aACA,eACA,kBAMA,COxIA,oBAIA,eADA,kBAFA,gBACA,WAiBA,CAbA,0BACA,kBACA,CAEA,uCACA,eAOA,CAJA,4DACA,UACA,CAMA,gDACA,YACA,CAEA,oGAIA,gBAFA,kBACA,aAEA,CAEA,kDACA,SACA,CAEA,6FAEA,WADA,eAEA,eACA,CAEA,mEACA,SAaA,CAXA,iFACA,WASA,CAPA,6FACA,eACA,CAEA,mGACA,gBACA,CAIA,gDACA,aAGA,gBAFA,iBACA,gBAEA,CAEA,oDACA,YACA,CAEA,gDAUA,gCAFA,WAFA,eAJA,YAKA,iBAHA,iBACA,kBAFA,cAFA,kBAQA,eAEA,CAEA,qDAKA,cACA,eAFA,eAHA,kBAEA,QADA,MAKA,mBAKA,CAHA,2DACA,uBACA,CC0EA,oBACA,MAgGA,CA9FA,6CAEA,mBADA,aAEA,iBAKA,CAHA,6DACA,iBACA,CAGA,0BAGA,gBADA,iBADA,UAyCA,CApCA,+CACA,4BACA,CAGA,0DAMA,eAJA,YAEA,mBACA,kBAFA,gBAIA,eAKA,CAHA,kFACA,iBACA,CAGA,6BAGA,gCADA,cADA,eAGA,CAEA,6BACA,aASA,CAPA,wCACA,qBACA,eACA,gBACA,uBACA,kBACA,CAIA,uCACA,cASA,CAPA,6CACA,uBAKA,CAHA,+DACA,cACA,CAQA,gFACA,YACA,CAEA,0CAEA,iBADA,gBAEA,eACA,eAeA,CAXA,+CACA,oBACA,CAEA,+CAIA,wBACA,kBAJA,qBAEA,WADA,SAIA,CC5OA,2CACA,0BACA,CAEA,gDACA,eACA,CC4GA,0BACA,0BACA,CAEA,+BACA,eACA,CAEA,iCACA,cACA,cACA,CAEA,sCACA,oBAKA,CAHA,qDACA,aACA,CC1HA,+CACA,eACA,CAEA,mDAEA,mBADA,aAEA,eAEA,gBADA,eAmBA,CAhBA,yDAUA,mBAFA,mBACA,kBAFA,cANA,aAKA,eAJA,YAGA,kBADA,gBADA,aAQA,CAEA,kEACA,gBACA,CC9DA,qDACA,eACA,CCgCA,cAQA,mBAFA,2BACA,kBAHA,WACA,eAJA,aAEA,YAMA,uBAPA,UAwBA,CAfA,oBACA,yBACA,CAEA,2BAGA,eADA,YADA,UAGA,CAEA,0BAGA,eADA,YADA,UAGA,CC8YA,sCACA,aACA,sBACA,WA6CA,CA3CA,0BALA,sCAMA,WA0CA,CAzCA,CAEA,0BATA,sCAUA,WAsCA,CArCA,CAEA,0BAbA,sCAcA,WAkCA,CAjCA,CAEA,0BAjBA,sCAkBA,WA8BA,CA7BA,CApCA,yTAEA,mBACA,qBAFA,aAGA,CAEA,gTAEA,mBACA,mCAFA,aAGA,CAEA,+TACA,aACA,CAwCA,6JAIA,mBACA,kBACA,WALA,cACA,YACA,eAIA,CAMA,gCACA,iBAwBA,CAnBA,mIACA,mBACA,CAMA,kEAEA,mBACA,qBAFA,aAGA,CAIA,+CACA,eACA,CAGA,sCAEA,eADA,iBAiHA,CA9GA,6CAUA,mBACA,yBACA,kBAHA,cAHA,eACA,gBAHA,YADA,UAKA,iBAHA,cAJA,kBACA,MAWA,2BACA,CAEA,qDAEA,mBADA,WAUA,CAPA,4DACA,sBACA,CAEA,uEACA,YACA,CAIA,mHAEA,oBACA,CAEA,wDAEA,mBADA,aAEA,CAEA,0DAMA,mBAFA,SACA,aAGA,kBADA,mBANA,kBAEA,QADA,KAyCA,CAjCA,iEAKA,mBACA,WAHA,YACA,kBAHA,kBACA,SAKA,CAEA,0EAKA,mBACA,yBACA,kBALA,cAEA,YAHA,kBAEA,UAoBA,CAdA,gFAMA,sBAEA,cADA,aAEA,WAJA,WAFA,SAFA,kBACA,QAQA,iCAEA,wBADA,oBAPA,SASA,CAMA,4DAEA,mBACA,qBAFA,aAGA,CAEA,+DAEA,uBACA,qBAFA,aAGA,CAGA,8EACA,uBACA,oBAKA,CAHA,oFACA,kBACA,CAMA,mCACA,iBAiKA,CA9JA,yDACA,YACA,CAEA,6DACA,YACA,CA5NA,uDAEA,mBACA,qBAFA,aAGA,CAEA,oDAEA,mBACA,mCAFA,aAGA,CAEA,yDACA,aACA,CAmNA,iDAIA,gBACA,yBACA,kBACA,sBAJA,cAFA,aACA,WAgBA,CATA,wDACA,mBACA,oBAMA,CAJA,mEACA,mBACA,wBACA,CAIA,8CAMA,mBAFA,mBACA,+BAJA,aAOA,cALA,eADA,YAKA,sBAEA,CAEA,mDAMA,cAFA,aACA,eAJA,kBAEA,QADA,QAKA,0BACA,CAEA,8CAGA,mBADA,aAEA,iBAHA,iBAgBA,CAXA,8DAGA,eAFA,gBACA,gBAEA,uBACA,kBACA,CAEA,oDACA,aACA,CAGA,gDAKA,mBACA,kBAFA,WAHA,kBACA,YACA,SAIA,CAEA,mDAKA,mBAIA,cALA,aAIA,eAFA,YACA,kBANA,kBAEA,QADA,QAQA,2CAWA,CATA,8DAEA,eADA,uBAOA,CAJA,yIAEA,aACA,CAIA,gDACA,YACA,CAEA,kDAYA,mBAFA,mBACA,kBAHA,WAJA,aAGA,eADA,YAOA,uBAZA,kBAEA,WAMA,kBAPA,SAGA,UASA,CAEA,uDAUA,gBADA,cAFA,eAHA,YAIA,iBAFA,mBADA,cAJA,kBAEA,QADA,QASA,2CAuBA,CArBA,8DAMA,qDACA,WAJA,SACA,kBAHA,kBACA,OAMA,CAEA,6DAMA,gBACA,kBACA,WAHA,WAFA,UAFA,kBACA,QAOA,2BALA,SAMA,CAIA,kCASA,mBADA,0BAFA,cACA,eANA,aAIA,eAFA,YAOA,uBANA,gBAFA,UAuBA,CAbA,wCAEA,qBADA,aAMA,CAHA,qDACA,aACA,CAGA,+CAEA,cADA,gBAEA,CAIA,iCACA,cA+EA,CA7EA,uCAMA,WADA,YAFA,OAFA,kBACA,MAEA,UAGA,CAIA,6DAUA,mBAFA,WAGA,cALA,eADA,YAEA,iBANA,kBAEA,WAMA,kBAPA,SAEA,UAQA,CAGA,4KAGA,iBAWA,CATA,sNACA,oBACA,CAEA,6MAEA,mBACA,2BAFA,aAGA,CAIA,wEAEA,qBADA,aAEA,CAEA,qEAEA,mBACA,2BAFA,aAGA,CAEA,0EACA,4BACA,CAIA,6CAMA,eADA,kBAJA,kBAEA,QADA,QAKA,+BAHA,UAYA,CAPA,2DACA,aACA,CAEA,2DACA,aACA,CC9zBA,qCAKA,gBADA,gBADA,kBADA,mBADA,iBAkEA,CA5DA,qDASA,gBAHA,YAHA,OAOA,UAFA,kBADA,iBANA,kBACA,MASA,mBANA,WADA,WAkBA,CATA,oEACA,UAEA,oDADA,iBAEA,CAEA,sEACA,WACA,CAGA,mDAKA,gCADA,WAHA,aAEA,oBADA,gBAcA,CATA,+DAEA,eACA,cAFA,mBAGA,CAEA,8DACA,gBACA,CAGA,qDAGA,iBACA,gBAFA,mBADA,gBAMA,CAEA,oDAOA,mBADA,gBAJA,aACA,YAEA,kBADA,mBAHA,iBAOA,CClLA,yCAEA,mBAGA,cACA,eALA,aAEA,eACA,iBAGA,8DACA,CAEA,+CAEA,eADA,gBAEA,CCgIA,iBAEA,cAmCA,CAjCA,6CAHA,iBAuBA,CAjBA,2CACA,cACA,CAGA,+DACA,qCACA,CAGA,8CAKA,eAJA,kBAEA,UADA,QAEA,UAEA,CAGA,uBAGA,cAFA,eACA,gBAQA,CALA,iCAEA,cACA,eAFA,cAGA,CC6JA,iDAGA,mBADA,aADA,MAuBA,CAnBA,+DAaA,mBAJA,mBACA,kBAHA,WACA,eAPA,oBACA,aAIA,eAHA,YASA,uBAPA,iBADA,cAOA,8DAGA,CAEA,8DACA,YACA,CAGA,iDACA,aACA,WAiBA,CAfA,0BAJA,iDAKA,WAcA,CAbA,CAEA,0BARA,iDASA,WAUA,CATA,CAEA,0BAZA,iDAaA,WAMA,CALA,CAEA,0BAhBA,iDAiBA,WAEA,CADA,CAGA,oDACA,iBAYA,CAVA,iEAOA,gBACA,sBAFA,cAFA,eACA,cAJA,kBAEA,YADA,SAOA,CAGA,iDACA,gBACA,CAGA,uDAEA,mBACA,yBAFA,UAGA,CClGA,2CACA,YACA,CAEA,kCAEA,0CADA,0BAeA,CAXA,6DAEA,cADA,cAEA,CAEA,kEAEA,oBACA,eAFA,eAGA,CAIA,mCAGA,cAFA,eACA,gBAEA,CAEA,yCACA,aAEA,YACA,mBAFA,WAuBA,CAnBA,0BANA,yCAOA,WAkBA,CAjBA,CAEA,0BAVA,yCAWA,WAcA,CAbA,CAEA,0BAdA,yCAeA,WAUA,CATA,CAEA,0BAlBA,yCAmBA,WAMA,CALA,CAEA,qDACA,gBACA,CCpEA,6CACA,YACA,CAEA,oCAEA,0CADA,0BAeA,CAXA,+DAEA,cADA,cAEA,CAEA,oEAEA,oBACA,eAFA,eAGA,CAIA,qCAGA,cAFA,eACA,gBAEA,CAEA,2CAMA,cALA,aAGA,eACA,iBAFA,mBADA,WAyBA,CAnBA,0BARA,2CASA,WAkBA,CAjBA,CAEA,0BAZA,2CAaA,WAcA,CAbA,CAEA,0BAhBA,2CAiBA,WAUA,CATA,CAEA,0BApBA,2CAqBA,WAMA,CALA,CAEA,uDACA,gBACA,CCnSA,uBACA,YAqGA,CAnGA,+BACA,iBAeA,CAbA,4CACA,iBACA,CAGA,4DACA,wBACA,CAGA,6CACA,gBACA,CAGA,oCAGA,gBACA,yBAEA,cALA,kBAIA,oBAHA,SAuCA,CAjCA,iDACA,kBACA,CAEA,qDACA,aACA,CAEA,mDAcA,mBAJA,mBAEA,+BADA,4BAHA,WACA,eALA,aAGA,eADA,YASA,uBAdA,kBAEA,YADA,QAWA,2BARA,UAeA,CAHA,yDACA,kBACA,CAGA,kDACA,uBACA,CAGA,qCAIA,gBACA,yBACA,kBAEA,OALA,iBAFA,kBAMA,oBALA,SAmCA,CA3BA,mDACA,UACA,kBAKA,CAHA,0DACA,SACA,CAGA,gDAWA,mBADA,kBAFA,cACA,eALA,aAGA,eADA,YAMA,uBAXA,kBAEA,UADA,QAGA,UAYA,CAHA,sDACA,wBACA,CC9DA,0CACA,0BACA,CAEA,iDACA,yBACA,CCtDA,kCAYA,mBAJA,gBACA,yBACA,kBAJA,cACA,eANA,aAIA,eAFA,YACA,gBAOA,mBATA,WA4CA,CAhCA,6CASA,mBAFA,mBADA,WALA,aAIA,eAFA,YAOA,uBANA,kBAIA,mBANA,UASA,CAEA,6CAIA,cADA,eADA,iBADA,iBAIA,SACA,CAEA,wCACA,oBASA,CAPA,mDACA,kBACA,CAEA,mDACA,SACA,CCrFA,mCACA,kBA8BA,CA5BA,8CACA,eACA,CAEA,gDAIA,cACA,eAJA,aAEA,eADA,0BAQA,CAHA,sDACA,aACA,CAIA,sDACA,cACA,CAGA,yCAIA,cAFA,eACA,iBAFA,kBAIA,CC6IA,qDAKA,cAJA,aAEA,eACA,iBAFA,gBAaA,CARA,4DACA,aACA,CAEA,oEAEA,gBADA,UAEA,CAGA,uDACA,aACA,eAEA,cADA,eAmFA,CAhFA,sEAeA,mBAHA,yBACA,kBAHA,cACA,eATA,aAEA,YAIA,gBADA,iBADA,gBAGA,gBAJA,mBAJA,kBAaA,mBAXA,WAkEA,CApDA,qFAEA,mBAOA,mBADA,WAPA,aAGA,cAGA,eAFA,YAFA,uBAGA,iBAIA,kBACA,CAEA,sFAOA,gBACA,yBACA,kBALA,SAEA,YALA,kBAEA,UADA,QAGA,UAKA,CAEA,6EACA,oBAyBA,CAvBA,4FACA,kBACA,CAEA,6FACA,mBACA,oBAgBA,CAdA,mGAMA,sBAEA,cADA,aAEA,WAJA,WAFA,SAFA,kBACA,QAQA,iCAEA,wBADA,mBAPA,SASA,CAKA,sEAOA,mBADA,cAHA,eADA,gBADA,iBAGA,uBACA,kBAGA,CAGA,wDACA,eACA,CCnPA,yCAEA,kBADA,eAsEA,CAnEA,iDAOA,mBADA,mBAFA,cACA,eAJA,aACA,YACA,cAyBA,CAnBA,8DAKA,mBAJA,aAGA,eADA,YAGA,uBAJA,UAKA,CAEA,uDACA,cACA,CAEA,uDAIA,cAFA,eACA,gBAFA,gBAIA,CAGA,+CAGA,yBACA,kBAFA,cADA,UAmCA,CA9BA,qDACA,kBACA,CAEA,oGAEA,YACA,eACA,eACA,CAEA,kDAEA,cADA,eAEA,CAEA,kDACA,4BACA,CAEA,0DAOA,4BACA,qBANA,oBACA,gBACA,uBAEA,mBADA,oBAIA,CC7DA,oCACA,eACA,CCwLA,6CAEA,mBAIA,mBALA,aAGA,YADA,uBAEA,oBAEA,CCmsBA,8FACA,oBACA,CAMA,4CACA,kBACA,CAGA,gDAEA,mBAKA,gCADA,cALA,aAEA,YAEA,iBADA,iBAiBA,CAZA,uDACA,kBACA,CAEA,0DAIA,eAFA,iBADA,gBAEA,gBAEA,uBACA,kBACA,CAKA,gEACA,aACA,CAGA,+CACA,cACA,CAEA,wDAIA,mBAEA,eAJA,aACA,OAEA,YAJA,iBAMA,CAEA,sDAEA,mBADA,aAIA,gBADA,kBADA,UAGA,CAEA,oDAOA,mBALA,cAGA,eACA,cALA,gBAEA,uBACA,kBAIA,CAEA,uDASA,mBADA,eAJA,aAUA,CAEA,6GAHA,mBAHA,kBAHA,WALA,oBADA,cAKA,eAHA,YASA,uBAPA,gBAMA,8DAkBA,CAbA,sDAQA,mBALA,UAUA,CAEA,0DAMA,cAHA,aAEA,eAHA,WAEA,aAHA,iBAWA,CAJA,kEAEA,cADA,oBAEA,CAGA,sDAEA,cADA,gBAEA","sources":["webpack://job/./src/components/jb-search-select/search-select/styles/search-select.css","webpack://job/./src/components/jb-search-select/search-select/styles/search-select-menu.css","webpack://job/./src/components/render-list/index.vue","webpack://job/./src/components/jb-search-select/index.vue","webpack://job/./src/components/jb-tag-select/index.vue","webpack://job/./src/components/jb-edit/tag.vue","webpack://job/./src/components/choose-ip/components/sideslider-box.vue","webpack://job/./src/components/choose-ip/components/action-extend.vue","webpack://job/./src/components/jb-edit/input.vue","webpack://job/./src/components/global-variable/layout.vue","webpack://job/./src/components/choose-ip/components/mult-input.vue","webpack://job/./src/components/choose-ip/components/host-table.vue","webpack://job/./src/components/choose-ip/components/dropdown-menu.vue","webpack://job/./src/components/choose-ip/components/render-business-topology.vue","webpack://job/./src/components/choose-ip/components/render-dynamic-business-topology.vue","webpack://job/./src/components/choose-ip/components/render-dynamic-group.vue","webpack://job/./src/components/choose-ip/components/render-ip-input.vue","webpack://job/./src/components/choose-ip/components/statistics-text.vue","webpack://job/./src/components/choose-ip/components/preview-group.vue","webpack://job/./src/components/jb-collapse-item/index.vue","webpack://job/./src/components/choose-ip/view/node.vue","webpack://job/./src/components/choose-ip/view/host-detail.vue","webpack://job/./src/components/choose-ip/view/host-search.vue","webpack://job/./src/components/choose-ip/server-panel.vue","webpack://job/./src/components/choose-ip/preview.vue","webpack://job/./src/components/choose-ip/index.vue","webpack://job/./src/components/global-variable/edit/host.vue","webpack://job/./src/components/global-variable/edit/index.vue","webpack://job/./src/components/global-variable/toggle-display.vue","webpack://job/./src/components/task-step/file/card-layout.vue","webpack://job/./src/components/task-step/common/error-handle.vue","webpack://job/./src/components/task-step/common/source-file/components/action-extend.vue","webpack://job/./src/components/list-action-layout/index.vue","webpack://job/./src/views/script-manage/common/script-related-info/index.vue","webpack://job/./src/components/list-operation-extend/index.vue","webpack://job/./src/components/apply-permission/apply-section.vue","webpack://job/./src/views/task-manage/common/variable-use-guide/index.vue","webpack://job/./src/views/task-manage/common/render-global-var/operation/string.vue","webpack://job/./src/views/task-manage/common/render-global-var/operation/host.vue","webpack://job/./src/views/task-manage/common/render-global-var/operation/array.vue","webpack://job/./src/components/detail-layout/index.vue","webpack://job/./src/components/detail-layout/item.vue","webpack://job/./src/components/jb-edit/textarea.vue","webpack://job/./src/components/jb-edit/host.vue","webpack://job/./src/views/task-manage/common/render-global-var/batch-operation/create-table-row.vue","webpack://job/./src/views/task-manage/common/render-global-var/batch-operation/index.vue","webpack://job/./src/views/task-manage/common/render-global-var/detail/index.vue","webpack://job/./src/views/task-manage/common/render-global-var/edit-of-plan/host.vue","webpack://job/./src/views/task-manage/common/render-global-var/edit-of-plan/array.vue","webpack://job/./src/views/task-manage/common/render-global-var/edit-of-plan/index.vue","webpack://job/./src/views/task-manage/common/render-global-var/popover-detail.vue","webpack://job/./src/views/task-manage/common/render-global-var/index.vue","webpack://job/./src/components/render-server-agent/index.vue","webpack://job/./src/components/smart-input/index.vue","webpack://job/./src/components/task-step/common/source-file/components/edit-file-path.vue","webpack://job/./src/components/task-step/common/source-file/view/server/index.vue","webpack://job/./src/components/task-step/common/source-file/view/source/components/choose-source-file/select-file-source.vue","webpack://job/./src/components/task-step/common/source-file/view/source/components/choose-source-file/select-file.vue","webpack://job/./src/components/task-step/common/source-file/view/source/components/choose-source-file/index.vue","webpack://job/./src/components/task-step/common/source-file/view/source/components/render-source-name.vue","webpack://job/./src/components/task-step/common/source-file/view/source/components/render-file-name.vue","webpack://job/./src/components/task-step/common/source-file/view/index.vue","webpack://job/./src/components/task-step/common/source-file/index.vue","webpack://job/./src/components/task-step/file/strategy/target-path.vue","webpack://job/./src/components/task-step/file/strategy/transfer-mode.vue","webpack://job/./src/components/compose-form-item/styles.css","webpack://job/./src/components/task-step/script/strategy/script-source-of-execution.vue","webpack://job/./src/components/task-step/common/execute-target/index.vue","webpack://job/./src/components/task-step/file/strategy/speed-limit.vue","webpack://job/./src/views/task-manage/common/render-task-step/task-step/components/distro-file.vue","webpack://job/./src/components/task-step/script/strategy/script-source-of-template.vue","webpack://job/./src/components/jb-user-selector/index.vue","webpack://job/./src/components/global-variable/view/index.vue","webpack://job/./src/views/executive-history/common/execution-status-bar/task.vue","webpack://job/./src/views/executive-history/common/execution-status-bar/index.vue","webpack://job/./src/views/executive-history/common/step-action/index.vue","webpack://job/./src/views/executive-history/common/global-variable.vue","webpack://job/./src/views/executive-history/common/operation-record.vue","webpack://job/./src/views/task-manage/common/render-task-step/task-step-view/components/render-file-path.vue","webpack://job/./src/views/task-manage/common/render-task-step/task-step-view/components/render-global-variable.vue","webpack://job/./src/components/ace-editor/index.vue","webpack://job/./src/views/script-manage/common/components/layout.vue","webpack://job/./src/views/script-manage/common/detail/index.vue","webpack://job/./src/components/task-step/script/strategy/script-param.vue","webpack://job/./src/views/task-manage/common/render-task-step/task-step/components/artificial.vue","webpack://job/./src/views/task-manage/common/render-task-step/task-step/index.vue","webpack://job/./src/views/task-manage/common/render-task-step/task-step-view/components/render-file-server.vue","webpack://job/./src/views/task-manage/common/render-task-step/task-step-view/components/render-source-file.vue","webpack://job/./src/views/task-manage/common/render-task-step/task-step-view/distro-file.vue","webpack://job/./src/views/task-manage/common/render-task-step/task-step-view/exec-script.vue","webpack://job/./src/views/task-manage/common/render-task-step/task-step-view/artificial.vue","webpack://job/./src/views/task-manage/common/render-task-step/task-step-view/index.vue","webpack://job/./src/components/back-top/index.vue","webpack://job/./src/views/task-manage/common/render-task-step/index.vue","webpack://job/./src/views/task-manage/common/plan/components/layout.vue","webpack://job/./src/views/task-manage/common/plan/components/toggle-display.vue","webpack://job/./src/views/task-manage/common/plan/components/edit-title.vue","webpack://job/./src/views/task-manage/common/plan/detail.vue","webpack://job/./src/views/task-manage/common/plan/edit.vue","webpack://job/./src/views/task-manage/common/plan/create.vue","webpack://job/./src/views/task-manage/common/plan/list/components/layout.vue","webpack://job/./src/views/task-manage/common/plan/list/components/template-select.vue","webpack://job/./src/views/task-manage/common/plan/list/components/batch-edit-gobal-variable/edit-value/components/render-global-variable/host.vue","webpack://job/./src/views/task-manage/common/plan/list/components/batch-edit-gobal-variable/edit-value/components/render-global-variable/index.vue","webpack://job/./src/views/task-manage/common/plan/list/components/batch-edit-gobal-variable/edit-value/index.vue","webpack://job/./src/views/task-manage/common/plan/list/components/batch-edit-gobal-variable/edit-preview/components/render-related-info.vue","webpack://job/./src/views/task-manage/common/plan/list/components/batch-edit-gobal-variable/edit-preview/index.vue","webpack://job/./src/views/task-manage/common/plan/list/components/batch-edit-gobal-variable/index.vue","webpack://job/./src/views/task-manage/common/plan/list/index.vue"],"sourcesContent":["@import \"@/css/mixins/scroll\";\r\n\r\n.jb-bk-search-select {\r\n    height: 32px;\r\n    font-size: 12px;\r\n\r\n    .search-select-wrap {\r\n        position: relative;\r\n        height: unset;\r\n        min-height: 32px;\r\n        overflow: hidden;\r\n        color: #63656e;\r\n        border: 1px solid #c4c6cc;\r\n        border-radius: 2px;\r\n        box-sizing: border-box;\r\n        transition: border 0.2s linear;\r\n\r\n        .search-prefix {\r\n            display: flex;\r\n            height: 100%;\r\n            flex: 0 0 auto;\r\n            align-items: center;\r\n        }\r\n\r\n        .search-tag-group {\r\n            position: relative;\r\n            min-height: 26px;\r\n            padding: 0 6px;\r\n            font-size: 0;\r\n            line-height: 0;\r\n            transition: max-height 0.15s cubic-bezier(0.4, 0, 0.2, 1);\r\n        }\r\n\r\n        .search-input-box {\r\n            position: relative;\r\n            display: inline-block;\r\n            min-width: 40px;\r\n            min-height: 22px;\r\n            margin-top: 4px;\r\n            font-size: 12px;\r\n            line-height: 22px;\r\n            color: #63656e;\r\n            vertical-align: middle;\r\n            border: none;\r\n\r\n            .input-box {\r\n                position: absolute;\r\n                top: 0;\r\n                left: 0;\r\n                width: 100%;\r\n                height: 100%;\r\n                padding: 0;\r\n                font-size: inherit;\r\n                line-height: inherit;\r\n                color: inherit;\r\n                background: transparent;\r\n                border: none;\r\n                outline: none;\r\n                resize: none;\r\n\r\n                @mixin scroller;\r\n            }\r\n        }\r\n\r\n        .search-tag-box {\r\n            .search-tag {\r\n                display: inline-flex;\r\n                padding-right: 20px;\r\n\r\n                .tag-label {\r\n                    word-break: keep-all;\r\n                }\r\n\r\n                .tag-value {\r\n                    word-break: break-all;\r\n                    cursor: pointer;\r\n                }\r\n\r\n                .tag-value-edit {\r\n                    position: absolute;\r\n                    top: 0;\r\n                    width: 100%;\r\n                    height: 100%;\r\n                    padding: 0;\r\n                    font-size: inherit;\r\n                    line-height: inherit;\r\n                    color: inherit;\r\n                    background: transparent;\r\n                    border: none;\r\n                    outline: none;\r\n                    resize: none;\r\n\r\n                    &::selection {\r\n                        background: #e1ecff;\r\n                    }\r\n                }\r\n            }\r\n\r\n            &.focused {\r\n                background: inherit !important;\r\n\r\n                .search-tag {\r\n                    padding-right: 0;\r\n                }\r\n            }\r\n\r\n            .tag-clear {\r\n                position: absolute;\r\n                top: 4px;\r\n                right: 3px;\r\n                display: inline-block;\r\n                font-size: 14px;\r\n                line-height: normal;\r\n                color: #979ba5;\r\n                text-align: center;\r\n                cursor: pointer;\r\n            }\r\n        }\r\n\r\n        .mult-tag-placeholder {\r\n            padding: 0 8px;\r\n        }\r\n\r\n        .search-tag-box,\r\n        .mult-tag-placeholder {\r\n            position: relative;\r\n            display: inline-block;\r\n            padding-left: 8px;\r\n            margin: 4px 6px 0 0;\r\n            font-size: 12px;\r\n            line-height: 22px;\r\n            color: #63656e;\r\n            vertical-align: middle;\r\n            background: #f0f1f5;\r\n            border-radius: 2px;\r\n\r\n            &:hover {\r\n                background: #dcdee5;\r\n\r\n                .tag-clear {\r\n                    color: #63656e;\r\n                }\r\n            }\r\n        }\r\n\r\n        .search-nextfix {\r\n            @extend .search-prefix;\r\n\r\n            position: absolute;\r\n            top: 6px;\r\n            right: 0;\r\n            color: #c4c6cc;\r\n\r\n            .search-clear {\r\n                width: 12px;\r\n                height: 12px;\r\n                margin-right: 6px;\r\n                font-size: 14px;\r\n                color: #c4c6cc;\r\n\r\n                &:hover {\r\n                    color: #979ba5;\r\n                    cursor: pointer;\r\n                }\r\n            }\r\n\r\n            .search-nextfix-icon {\r\n                margin-right: 8px;\r\n                font-size: 16px;\r\n                transition: color 0.2s linear;\r\n\r\n                &.is-focus {\r\n                    color: #3c96ff;\r\n                    background: #fff !important;\r\n                    border-color: #3c96ff !important;\r\n                }\r\n            }\r\n        }\r\n\r\n        &::-webkit-scrollbar {\r\n            width: 3px;\r\n            height: 5px;\r\n        }\r\n\r\n        &::-webkit-scrollbar-thumb {\r\n            background: #e6e9ea;\r\n            border-radius: 20px;\r\n            box-shadow: inset 0 0 6px rgb(204 204 204 / 30%);\r\n        }\r\n    }\r\n\r\n    &.focused {\r\n        .search-select-wrap {\r\n            overflow-y: auto;\r\n            color: #3c96ff;\r\n            background: #fff !important;\r\n            border-color: #3c96ff !important;\r\n        }\r\n    }\r\n\r\n    .bk-select-tips {\r\n        display: flex;\r\n        margin-top: 5px;\r\n        font-size: 12px;\r\n        line-height: 16px;\r\n        color: #ea3636;\r\n        align-items: center;\r\n\r\n        .select-tips {\r\n            width: 16px;\r\n            height: 16px;\r\n            margin-right: 5px;\r\n            font-size: 16px;\r\n        }\r\n    }\r\n}\r\n","@import \"@/css/mixins/scroll\";\r\n\r\n.jb-bk-search-list {\r\n    position: relative;\r\n    min-width: 230px;\r\n    padding: 6px 0;\r\n    margin: -0.3rem -0.6rem;\r\n    font-size: 12px;\r\n    line-height: 32px;\r\n    color: #63656e;\r\n    pointer-events: all;\r\n    border: 1px solid #dcdee5;\r\n    border-radius: 2px;\r\n    outline: none;\r\n    resize: none;\r\n\r\n    .search-condition {\r\n        padding: 0 10px 0 16px;\r\n        pointer-events: auto;\r\n        border-bottom: 1px solid #dcdee5;\r\n\r\n        &:hover {\r\n            color: #3a84ff;\r\n            cursor: pointer;\r\n            background-color: rgb(234 243 255 / 70%);\r\n        }\r\n    }\r\n\r\n    .search-menu {\r\n        max-height: 200px;\r\n        min-height: 32px;\r\n        padding: 0;\r\n        margin: 0;\r\n        overflow-x: hidden;\r\n        overflow-y: auto;\r\n        pointer-events: all;\r\n\r\n        @mixin scroller;\r\n\r\n        .is-group {\r\n            border-bottom: 1px solid #dcdee5;\r\n        }\r\n\r\n        .search-menu-item {\r\n            display: flex;\r\n            padding: 0 10px 0 16px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n            white-space: nowrap;\r\n            pointer-events: auto;\r\n            flex: 1 0 32px;\r\n            align-items: center;\r\n            justify-content: flex-start;\r\n\r\n            &.is-disabled {\r\n                color: #c4c6cc;\r\n                cursor: not-allowed;\r\n            }\r\n\r\n            .item-name {\r\n                display: flex;\r\n                line-height: 32px;\r\n                flex: 1;\r\n\r\n                &-filter {\r\n                    display: inline-block;\r\n                    color: #313238;\r\n                }\r\n            }\r\n\r\n            .item-description {\r\n                padding-left: 10px;\r\n                margin-left: auto;\r\n                font-size: 12px;\r\n                color: #c4c6cc;\r\n            }\r\n\r\n            .item-icon {\r\n                font-size: 14px;\r\n                font-weight: bold;\r\n                color: #3a84ff;\r\n            }\r\n\r\n            &:not(.is-disabled):hover {\r\n                color: #3a84ff;\r\n                cursor: pointer;\r\n                background-color: #eaf3ff;\r\n            }\r\n\r\n            &.active {\r\n                color: #3a84ff;\r\n                background: #f4f6fa;\r\n            }\r\n        }\r\n    }\r\n\r\n    .search-loading {\r\n        padding: 0 16px;\r\n        line-height: 32px;\r\n        text-align: center;\r\n    }\r\n\r\n    .search--error {\r\n        padding: 0 10px 0 16px;\r\n        font-weight: bold;\r\n        line-height: 32px;\r\n    }\r\n\r\n    .search-list-footer {\r\n        display: flex;\r\n        margin-bottom: -6px;\r\n        line-height: 32px;\r\n        pointer-events: auto;\r\n        flex-direction: row;\r\n        justify-content: space-around;\r\n        align-items: center;\r\n\r\n        .footer-btn {\r\n            text-align: center;\r\n            pointer-events: auto;\r\n            border-top: 1px solid #dcdee5;\r\n            flex: 1;\r\n\r\n            &:hover {\r\n                color: #3a84ff;\r\n                cursor: pointer;\r\n                background-color: rgb(234 243 255 / 70%);\r\n            }\r\n\r\n            &:first-child {\r\n                border-right: 1px solid #dcdee5;\r\n            }\r\n\r\n            &.disabled {\r\n                color: #dcdee5;\r\n                cursor: not-allowed;\r\n            }\r\n        }\r\n    }\r\n\r\n    .search-menu-wrap {\r\n        padding: 6px 0;\r\n    }\r\n\r\n    .search-suggest-menu-wraper {\r\n        max-width: 500px;\r\n        max-height: 200px;\r\n        min-height: 32px;\r\n        overflow-x: hidden;\r\n        overflow-y: auto;\r\n\r\n        @mixin scroller;\r\n\r\n        .search-suggest-menu-list {\r\n            width: 100%;\r\n            max-width: 100%;\r\n            font-size: 12px;\r\n            line-height: 32px;\r\n            line-height: 16px;\r\n            color: #63656e;\r\n            border-collapse: collapse;\r\n            border-spacing: 0;\r\n\r\n            .search-suggest-menu-item {\r\n                height: 32px;\r\n                padding-top: 8px;\r\n                vertical-align: top;\r\n                cursor: pointer;\r\n\r\n                &.active,\r\n                &:hover {\r\n                    color: #3a84ff;\r\n                    background: #eaf3ff;\r\n                }\r\n            }\r\n\r\n            .search-suggest-item-label,\r\n            .search-suggest-item-value {\r\n                padding-top: 8px;\r\n                vertical-align: top;\r\n            }\r\n\r\n            .search-suggest-item-label {\r\n                width: 60px;\r\n                padding-left: 12px;\r\n                font-weight: bold;\r\n                text-align: right;\r\n                white-space: nowrap;\r\n            }\r\n\r\n            .search-suggest-item-value {\r\n                display: flex;\r\n                max-width: 300px;\r\n                padding-right: 12px;\r\n                overflow: hidden;\r\n\r\n                .value-text {\r\n                    overflow: hidden;\r\n                    text-overflow: ellipsis;\r\n                    white-space: nowrap;\r\n                    flex: 1;\r\n                }\r\n\r\n                .description-text {\r\n                    padding-left: 8px;\r\n                    margin-left: auto;\r\n                    font-size: 12px;\r\n                    color: #c4c6cc;\r\n                    text-align: right;\r\n                    flex: 0 0 auto;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n.tippy-tooltip {\r\n    &.bk-search-select-theme-theme {\r\n        border-radius: 2px;\r\n        box-shadow: 0 3px 9px 0 rgb(0 0 0 / 10%);\r\n    }\r\n}\r\n","\r\n<template>\r\n    <div\r\n        ref=\"renderList\"\r\n        class=\"jb-render-list\"\r\n        v-test=\"{ type: 'data', value: 'table' }\"\r\n        v-bkloading=\"{ isLoading }\">\r\n        <bk-table\r\n            v-if=\"isRendered\"\r\n            v-bind=\"$attrs\"\r\n            v-on=\"$listeners\"\r\n            :default-sort=\"defaultSort\"\r\n            :data=\"data\"\r\n            :pagination=\"realPagination\"\r\n            :max-height=\"tableMaxHeight\"\r\n            width=\"100%\"\r\n            @sort-change=\"handleSort\"\r\n            @page-change=\"handlePageChange\"\r\n            @page-limit-change=\"handleLimitChange\">\r\n            <template slot=\"prepend\">\r\n                <div v-if=\"selectNums > 0\" class=\"jb-table-select-tips\">\r\n                    <!-- eslint-disable-next-line max-len -->\r\n                    <span>{{ '已选择'}}<span class=\"number strong\">{{ selectNums }}</span>{{ '条'}}</span>\r\n                    <span class=\"action-clear\" @click=\"handleClearAllSelect\">，{{ '清除所有勾选' }}</span>\r\n                </div>\r\n                <slot name=\"prepend\" />\r\n            </template>\r\n            <bk-table-column\r\n                v-if=\"selectable\"\r\n                :render-header=\"renderHeader\"\r\n                key=\"listSelect\"\r\n                width=\"70\">\r\n                <template slot-scope=\"{ row }\">\r\n                    <bk-checkbox\r\n                        :checked=\"!!rowSelectMemo[row[primaryKey]]\"\r\n                        @change=\"value => handleRowSelect(row, value)\" />\r\n                </template>\r\n            </bk-table-column>\r\n            <slot />\r\n            <div v-if=\"isRequesting\" slot=\"empty\" style=\"height: 200px;\" />\r\n            <Empty v-else-if=\"isSearching\" slot=\"empty\" type=\"search\">\r\n                <div>\r\n                    <div style=\"font-size: 14px; color: #63656e;\">{{ '搜索结果为空' }}</div>\r\n                    <div style=\"margin-top: 8px; font-size: 12px; line-height: 16px; color: #979ba5;\">\r\n                        <span>{{ '可以尝试调整关键词' }}</span>\r\n                        <template v-if=\"searchControl\">\r\n                            <span>{{ '或' }}</span>\r\n                            <bk-button\r\n                                text\r\n                                @click=\"handleClearSearch\">\r\n                                {{ '清空搜索条件' }}\r\n                            </bk-button>\r\n                        </template>\r\n                    </div>\r\n                </div>\r\n            </Empty>\r\n        </bk-table>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n       import Empty from '@components/empty';\r\n    import EventBus from '@utils/event-bus';\r\n    import {\r\n        getOffset,\r\n        buildURLParams,\r\n    } from '@utils/assist';\r\n    import { routerCache } from '@utils/cache-helper';\r\n\r\n    export default {\r\n        components: {\r\n            Empty,\r\n        },\r\n        inheritAttrs: false,\r\n        props: {\r\n            // 数据源\r\n            dataSource: {\r\n                type: Function,\r\n                required: true,\r\n            },\r\n            // 指定列表页面的name\r\n            name: String,\r\n            // 是否解析 URL 的 query\r\n            ignoreUrl: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n            // 是否可以选择行\r\n            selectable: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n            // 使用小型分页选择器\r\n            paginationSmall: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n            // data 数据的主键\r\n            primaryKey: {\r\n                type: String,\r\n                default: 'id',\r\n            },\r\n            // 获取列表的联动搜索控件\r\n            searchControl: {\r\n                type: Function,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isRendered: false, // 组件是否已渲染\r\n                isRequesting: false, // api 数据请求中\r\n                isLoading: true, // api 数据加载中 (api 数据请求超过 300ms 才会显示 loading 效果)\r\n                isSearching: false, // 是否有搜索条件\r\n                data: [{},{},{}],\r\n                tableMaxHeight: '',\r\n                rowSelectMemo: Object.create(null),\r\n                selectNums: 0,\r\n                params: {},\r\n                pagination: {\r\n                    count: 0,\r\n                    current: 1,\r\n                    limit: 10,\r\n                },\r\n            };\r\n        },\r\n        computed: {\r\n            /**\r\n             * @desc 列表当前页是否全选\r\n             * @returns {Boolean}\r\n             */\r\n            isPageChecked () {\r\n                if (Object.keys(this.rowSelectMemo).length < 1) {\r\n                    return false;\r\n                }\r\n                let status = true;\r\n                // eslint-disable-next-line no-plusplus\r\n                for (let i = 0; i < this.data.length; i++) {\r\n                    if (!this.rowSelectMemo[this.data[i][this.primaryKey]]) {\r\n                        status = false;\r\n                        break;\r\n                    }\r\n                }\r\n                return status;\r\n            },\r\n            /**\r\n             * @desc 是否全选\r\n             * @returns {Boolean}\r\n             */\r\n            isWholeChecked () {\r\n                return this.selectNums > 0 && this.selectNums >= this.pagination.count;\r\n            },\r\n            /**\r\n             * @desc 列表分页的状态\r\n             * @returns {Object}\r\n             */\r\n            realPagination () {\r\n                return {\r\n                    ...this.pagination,\r\n                    small: this.paginationSmall,\r\n                };\r\n            },\r\n        },\r\n        watch: {\r\n            rowSelectMemo () {\r\n                this.selectNums = Object.keys(this.rowSelectMemo).length;\r\n                this.data = [\r\n                    ...this.data,\r\n                ];\r\n            },\r\n        },\r\n        created () {\r\n            // 页面回退时返回列表选择（url标记listSelectIds）\r\n            const { listSelectIds } = this.$route.query;\r\n            if (listSelectIds) {\r\n                listSelectIds.split(',').forEach((id) => {\r\n                    this.rowSelectMemo[this.primaryKey] = true;\r\n                });\r\n                setTimeout(() => {\r\n                    this.triggerSelectChange();\r\n                });\r\n            }\r\n            // render list内部的筛选参数排序、过滤\r\n            this.defaultSort = {};\r\n            this.requestParamsMemo = {};\r\n            if (!this.ignoreUrl) {\r\n                this.parseURL();\r\n            }\r\n        },\r\n        mounted () {\r\n            this.init();\r\n            this.$on('onFetch', (params) => {\r\n                if (params) {\r\n                    this.params = Object.freeze(params);\r\n                    if (!this.waitingInit) {\r\n                        this.pagination.current = 1;\r\n                    }\r\n                    this.waitingInit = false;\r\n                }\r\n                const pageSize = this.pagination.limit;\r\n                const start = parseInt(this.pagination.current - 1, 10) * pageSize;\r\n                \r\n                const requestParams = {\r\n                    ...this.defaultSortParams,\r\n                    ...this.params,\r\n                    pageSize,\r\n                    start,\r\n                };\r\n                if (!this.ignoreUrl) {\r\n                    // 缓存路由参数在回退时还原\r\n                    routerCache.setItem(this.$route.name, requestParams);\r\n                    window.history.replaceState({}, '', `?${buildURLParams(requestParams)}`);\r\n                }\r\n                \r\n                // 跨页全选时同样需要过滤\r\n                this.requestParamsMemo = requestParams;\r\n                this.isRequesting = true;\r\n                // this.$request(this.dataSource(requestParams, {\r\n                //     permission: 'page',\r\n                // }), () => {\r\n                //     this.isLoading = true;\r\n                // }).then((data) => {\r\n                const data = {\r\n                    data: [{}, {}, {}, {}, {}, {}, {}, {}, {}],\r\n                    total: 100,\r\n                };\r\n                this.pagination = {\r\n                    ...this.pagination,\r\n                    count: data.total || 0,\r\n                };\r\n                this.$emit('on-refresh', data);\r\n                // 延后表格数据的更新，保证 on-refresh 事件逻辑优先执行\r\n                setTimeout(() => {\r\n                    this.data = data.data;\r\n                    this.isSearching = !this.checkSearchEmpty();\r\n                });\r\n\r\n                // 重要！！！（列表 api 返回数据说明）\r\n                // existAny 表示资源总数是否为 0\r\n                // total 表示本次筛选结果数\r\n                if (!this.ignoreUrl\r\n                    && Object.prototype.hasOwnProperty.call(data, 'existAny')\r\n                    && !data.existAny) {\r\n                    // 被page-guide页面接收, 还没内容就显示引导页面\r\n                    EventBus.$emit('page-empty');\r\n                }\r\n                // })\r\n                // .finally(() => {\r\n                this.isLoading = false;\r\n                this.isRequesting = false;\r\n                // });\r\n            });\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 计算默认分页、表格高度\r\n             */\r\n            init () {\r\n                const { top } = getOffset(this.$refs.renderList);\r\n                const windowHeight = window.innerHeight;\r\n                const tableHeadHeight = 42;\r\n                const paginationHeight = 63;\r\n                const windownOffsetBottom = 20;\r\n                const listTotalHeight = windowHeight - top - tableHeadHeight - paginationHeight - windownOffsetBottom;\r\n                const tableRowHeight = 42;\r\n                const limit = Math.floor(listTotalHeight / tableRowHeight);\r\n                const pageLimit = new Set([\r\n                    10, 20, 50, 100, limit,\r\n                ]);\r\n                if (!pageLimit.has(this.pagination.limit)) {\r\n                    pageLimit.add(this.pagination.limit);\r\n                }\r\n                this.pagination.limitList = [\r\n                    ...pageLimit,\r\n                ].sort((a, b) => a - b);\r\n                if (!this.waitingInit) {\r\n                    this.pagination.limit = limit;\r\n                }\r\n                this.tableMaxHeight = tableHeadHeight + tableRowHeight * limit + paginationHeight;\r\n                this.isRendered = true;\r\n            },\r\n            /**\r\n             * @desc 解析url\r\n             */\r\n            parseURL () {\r\n                this.URLQuery = this.$route.query;\r\n                const pageSize = ~~this.URLQuery.pageSize;\r\n                const start = ~~this.URLQuery.start;\r\n                this.waitingInit = false;\r\n                // 解析url的分页信息\r\n                if (pageSize) {\r\n                    this.pagination.current = parseInt(start / pageSize, 10) + 1;\r\n                    this.pagination.limit = pageSize;\r\n                    this.waitingInit = true;\r\n                }\r\n                // 解析url的排序信息\r\n                const { orderField, order } = this.URLQuery;\r\n                \r\n                if (orderField) {\r\n                    // table默认排序设置\r\n                    this.defaultSort.prop = orderField;\r\n                    this.defaultSort.order = ~~order ? 'ascending' : 'descending';\r\n                }\r\n                this.defaultSortParams = {};\r\n                \r\n                if (Object.prototype.hasOwnProperty.call(this.URLQuery, 'orderField')\r\n                    && Object.prototype.hasOwnProperty.call(this.URLQuery, 'order')) {\r\n                    // api默认排序参数\r\n                    this.defaultSortParams = {\r\n                        orderField,\r\n                        order,\r\n                    };\r\n                }\r\n            },\r\n            /**\r\n             * @desc 外部调用，重置 table 的选择状态\r\n             */\r\n            resetSelect () {\r\n                this.handleClearAllSelect();\r\n            },\r\n            /**\r\n             * @desc 跨页全选\r\n             */\r\n            fetchWhole () {\r\n                if (this.isWholeChecked) {\r\n                    return;\r\n                }\r\n                this.$request(this.dataSource({\r\n                    ...this.requestParamsMemo,\r\n                    pageSize: -1,\r\n                    start: -1,\r\n                }), () => {\r\n                    this.isLoading = true;\r\n                }).then((data) => {\r\n                    const rowSelectMemo = {};\r\n                    data.data.forEach((item) => {\r\n                        rowSelectMemo[item[this.primaryKey]] = item;\r\n                    });\r\n                    this.rowSelectMemo = Object.freeze(rowSelectMemo);\r\n                    this.triggerSelectChange();\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 自定义表头\r\n             */\r\n            renderHeader (h) {\r\n                const renderCheckbox = () => {\r\n                    if (this.isWholeChecked) {\r\n                        return (\r\n                        <div class=\"jb-whole-check\" onClick={this.handleClearAllSelect} />\r\n                        );\r\n                    }\r\n                    return (\r\n                    <bk-checkbox checked={this.isPageChecked} nativeOnClick={this.handlePageSelectToggle} />\r\n                    );\r\n                };\r\n                return (\r\n                <div class=\"select-cell\">\r\n                    {renderCheckbox()}\r\n                    <bk-popover\r\n                        placement=\"bottom-start\"\r\n                        theme=\"light jb-table-select-menu\"\r\n                        arrow={ false }\r\n                        size=\"regular\">\r\n                        <icon class=\"select-menu-flag\" type=\"down-small\" />\r\n                        <div slot=\"content\" class=\"jb-table-select-plan\">\r\n                            <div class=\"item\" onClick={this.handlePageSelect}>{'本页全选'}</div>\r\n                            <div class=\"item\" onClick={this.fetchWhole}>{'跨页全选'}</div>\r\n                        </div>\r\n                    </bk-popover>\r\n                </div>\r\n                );\r\n            },\r\n            /**\r\n             * @desc 触发行选中\r\n             */\r\n            triggerSelectChange () {\r\n                const result = [];\r\n                Object.keys(this.rowSelectMemo).forEach((idKey) => {\r\n                    if (_.isObject(this.rowSelectMemo[idKey])) {\r\n                        result.push(this.rowSelectMemo[idKey]);\r\n                    } else {\r\n                        // 如果是通过 url的查询参数listSelectIds还原选中状态\r\n                        // 这个时候没法获取到每一条的详细数据，只能返回基本数据{ id: 1 }\r\n                        result.push({\r\n                            [this.primaryKey]: idKey,\r\n                        });\r\n                    }\r\n                });\r\n                this.$emit('on-selection-change', result);\r\n            },\r\n            /**\r\n             * @desc 触发排序\r\n             * @param {Object} payload 表格行的数据\r\n             */\r\n            handleSort (payload) {\r\n                const sort = {\r\n                    descending: 0,\r\n                    ascending: 1,\r\n                };\r\n                if (payload.prop) {\r\n                    this.params = Object.freeze({\r\n                        ...this.params,\r\n                        orderField: payload.prop,\r\n                        order: sort[payload.order],\r\n                    });\r\n                } else {\r\n                    const params = {\r\n                        ...this.params,\r\n                    };\r\n                    delete params.orderField;\r\n                    delete params.order;\r\n                    this.params = Object.freeze(params);\r\n                }\r\n                \r\n                this.$emit('onFetch');\r\n            },\r\n            /**\r\n             * @desc 翻页\r\n             * @param {Number} value 最新展示页\r\n             */\r\n            handlePageChange (value) {\r\n                this.pagination.current = value;\r\n                this.$emit('onFetch');\r\n            },\r\n            /**\r\n             * @desc 每页条数\r\n             * @param {Number} value 最新每页展示条数\r\n             */\r\n            handleLimitChange (value) {\r\n                this.pagination.current = 1;\r\n                this.pagination.limit = value;\r\n                this.$emit('onFetch');\r\n            },\r\n            /**\r\n             * @desc 列表全选切换\r\n             */\r\n            handlePageSelectToggle () {\r\n                const rowSelectMemo = { ...this.rowSelectMemo };\r\n                this.data.forEach((item) => {\r\n                    if (this.isPageChecked) {\r\n                        delete rowSelectMemo[item[this.primaryKey]];\r\n                    } else {\r\n                        rowSelectMemo[item[this.primaryKey]] = item;\r\n                    }\r\n                });\r\n                this.rowSelectMemo = Object.freeze(rowSelectMemo);\r\n                this.triggerSelectChange();\r\n            },\r\n            /**\r\n             * @desc 列表单页全选切换\r\n             */\r\n            handlePageSelect () {\r\n                if (this.isPageChecked) {\r\n                    return;\r\n                }\r\n                const rowSelectMemo = { ...this.rowSelectMemo };\r\n                this.data.forEach((item) => {\r\n                    rowSelectMemo[item[this.primaryKey]] = item;\r\n                });\r\n                this.rowSelectMemo = Object.freeze(rowSelectMemo);\r\n\r\n                this.triggerSelectChange();\r\n            },\r\n            /**\r\n             * @desc 选择某一行\r\n             * @param {Object} row 表格行数据\r\n             * @param {Boolean} value 行的选中状态\r\n             */\r\n            handleRowSelect (row, value) {\r\n                const rowSelectMemo = { ...this.rowSelectMemo };\r\n                if (value) {\r\n                    rowSelectMemo[row[this.primaryKey]] = row;\r\n                } else {\r\n                    delete rowSelectMemo[row[this.primaryKey]];\r\n                }\r\n                this.rowSelectMemo = Object.freeze(rowSelectMemo);\r\n                this.triggerSelectChange();\r\n            },\r\n            /**\r\n             * @desc 清除选中状态\r\n             */\r\n            handleClearAllSelect () {\r\n                this.rowSelectMemo = Object.create(null);\r\n                this.triggerSelectChange();\r\n            },\r\n            /**\r\n             * @desc 检测搜索条件是否为空\r\n             * @returns {Boolean}\r\n             */\r\n            checkSearchEmpty () {\r\n                if (!this.searchControl || typeof this.searchControl !== 'function') {\r\n                    return false;\r\n                }\r\n                const searchControl = this.searchControl();\r\n                if (!searchControl || typeof searchControl.checkEmpty !== 'function') {\r\n                    return false;\r\n                }\r\n                return searchControl.checkEmpty();\r\n            },\r\n            /**\r\n             * @desc 清除列表筛选参数\r\n             */\r\n            handleClearSearch () {\r\n                const searchControl = this.searchControl();\r\n                if (typeof searchControl.reset === 'function') {\r\n                    searchControl.reset();\r\n                }\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .jb-render-list {\r\n        .bk-table-pagination-wrapper {\r\n            background: #fff;\r\n        }\r\n\r\n        .bk-table-body-wrapper {\r\n            td {\r\n                .bk-table-setting-content {\r\n                    display: none;\r\n                }\r\n            }\r\n        }\r\n\r\n        .select-cell {\r\n            position: relative;\r\n            display: flex;\r\n            align-items: center;\r\n\r\n            .jb-whole-check {\r\n                position: relative;\r\n                display: inline-block;\r\n                width: 16px;\r\n                height: 16px;\r\n                vertical-align: middle;\r\n                cursor: pointer;\r\n                background-color: #fff;\r\n                border: 1px solid #3a84ff;\r\n                border-radius: 2px;\r\n\r\n                &::after {\r\n                    position: absolute;\r\n                    top: 1px;\r\n                    left: 4px;\r\n                    width: 4px;\r\n                    height: 8px;\r\n                    border: 2px solid #3a84ff;\r\n                    border-top: 0;\r\n                    border-left: 0;\r\n                    content: \"\";\r\n                    transform: rotate(45deg);\r\n                }\r\n            }\r\n\r\n            .select-menu-flag {\r\n                margin-left: 4px;\r\n                font-size: 18px;\r\n            }\r\n        }\r\n\r\n        .jb-table-select-tips {\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            height: 30px;\r\n            background: #ebecf0;\r\n\r\n            .strong {\r\n                color: inherit;\r\n            }\r\n\r\n            .action-clear {\r\n                color: #3a84ff;\r\n                cursor: pointer;\r\n            }\r\n        }\r\n\r\n        .bk-table-empty-block {\r\n            height: auto;\r\n            background: #fff;\r\n        }\r\n    }\r\n\r\n    .tippy-tooltip {\r\n        &.jb-table-select-menu-theme {\r\n            padding: 0;\r\n\r\n            .jb-table-select-plan {\r\n                padding: 5px 0;\r\n\r\n                .item {\r\n                    padding: 0 10px;\r\n                    font-size: 12px;\r\n                    line-height: 26px;\r\n                    cursor: pointer;\r\n\r\n                    &:hover {\r\n                        color: #3a84ff;\r\n                        background-color: #eaf3ff;\r\n                    }\r\n\r\n                    &.is-selected {\r\n                        color: #3a84ff;\r\n                        background-color: #f4f6fa;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <search-select\r\n        class=\"jb-search-select\"\r\n        ref=\"searchSelect\"\r\n        v-bind=\"$attrs\"\r\n        v-on=\"$listeners\"\r\n        :placeholder=\"placeholder\"\r\n        :data=\"data\"\r\n        :show-condition=\"false\"\r\n        :values=\"searchValue\"\r\n        @change=\"handleChange\" />\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n    import { userSearchCache } from '@utils/cache-helper';\r\n    import SearchSelect from './search-select';\r\n\r\n    const filterValue = (payload) => {\r\n        // 过滤空值，保证每项只会筛选一次\r\n        const result = _.cloneDeep(payload);\r\n        const valueMap = {};\r\n        const resultIdSet = new Set();\r\n        result.forEach((value) => {\r\n            if (!value) {\r\n                return;\r\n            }\r\n            if (resultIdSet.has(value.id)) {\r\n                // 删除旧的值，同一个ID再次被添加时保持添加顺序\r\n                resultIdSet.delete(value.id);\r\n            }\r\n            resultIdSet.add(value.id);\r\n            valueMap[value.id] = value;\r\n        });\r\n        return [...resultIdSet].map(key => Object.freeze(valueMap[key]));\r\n    };\r\n\r\n    export default {\r\n        name: 'JbSearchSelect',\r\n        components: {\r\n            SearchSelect,\r\n        },\r\n        props: {\r\n            data: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n            placeholder: {\r\n                type: String,\r\n                default: '',\r\n            },\r\n            value: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n            parseUrl: {\r\n                type: Boolean,\r\n                default: true,\r\n            },\r\n            // 外部设置的筛选值添加到已有筛选值后面\r\n            appendValue: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                searchValue: [],\r\n            };\r\n        },\r\n        watch: {\r\n            value: {\r\n                handler (val) {\r\n                    let oldSearchComponentValue = [];\r\n                    if (this.$refs.searchSelect) {\r\n                        oldSearchComponentValue = this.$refs.searchSelect.chipList;\r\n                    }\r\n                    this.searchValue = filterValue([...oldSearchComponentValue, ...val]);\r\n                },\r\n                immediate: true,\r\n            },\r\n            appendValue: {\r\n                handler (appendValue) {\r\n                    setTimeout(() => {\r\n                        if (!this.$refs.searchSelect) {\r\n                            return;\r\n                        }\r\n                        const appendMap = appendValue.reduce((result, item) => {\r\n                            result[item.id] = true;\r\n                            return result;\r\n                        }, {});\r\n                        const value = [];\r\n                        this.$refs.searchSelect.chipList.forEach((currentValue) => {\r\n                            if (!appendMap[currentValue.id]) {\r\n                                value.push(currentValue);\r\n                            }\r\n                        });\r\n\r\n                        this.searchValue = Object.freeze([...value, ...appendValue]);\r\n                    });\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        created () {\r\n            if (this.parseUrl) {\r\n                this.parseURLData();\r\n            }\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 解析 URL 参数\r\n             */\r\n            parseURLData  () {\r\n                this.URLQuery = this.$route.query;\r\n\r\n                const defaultSearchComponentValue = [];\r\n                // 默认筛选数据\r\n                const defaultSearchValue = {};\r\n                const promiseStack = [];\r\n                // eslint-disable-next-line no-plusplus\r\n                for (let i = 0; i < this.data.length; i++) {\r\n                    const currentData = this.data[i];\r\n                    \r\n                    // 只解析存在于搜索配置中的字段\r\n                    if (!Object.prototype.hasOwnProperty.call(this.URLQuery, currentData.id)) {\r\n                        continue;\r\n                    }\r\n                    // 解析url中筛选项的值\r\n                    const currentURLParamValue = this.URLQuery[currentData.id];\r\n                    if (currentData.multiable) {\r\n                        defaultSearchValue[currentData.id] = currentURLParamValue.split(',');\r\n                    } else {\r\n                        defaultSearchValue[currentData.id] = currentURLParamValue;\r\n                    }\r\n\r\n                    let remoteHandler = Promise.resolve();\r\n                    \r\n                    if (currentData.remoteMethod) {\r\n                        remoteHandler = currentData.remoteMethod();\r\n                    } else if (currentData.children) {\r\n                        remoteHandler = Promise.resolve(currentData.children);\r\n                    } else {\r\n                        remoteHandler = Promise.resolve(currentURLParamValue);\r\n                    }\r\n\r\n                    const { id, name } = currentData;\r\n                    const urlSearchValue = this.URLQuery[id];\r\n\r\n                    remoteHandler.then((data) => {\r\n                        let currentSearchComponentValue = {};\r\n                        let searchValueArr = [];\r\n                        if (currentData.multiable) {\r\n                            searchValueArr = urlSearchValue.split(',');\r\n                        } else {\r\n                            searchValueArr = [urlSearchValue];\r\n                        }\r\n                        if (_.isArray(data)) {\r\n                            // 远程备选列表；本地备选列表\r\n                            const valueStack = [];\r\n                            searchValueArr.forEach((item) => {\r\n                                // 兼容筛选值已经被删掉的场景\r\n                                const childItem = data.find(_ => `${_.id}` === `${item}`);\r\n                                if (childItem) {\r\n                                    valueStack.push({\r\n                                        id: childItem.id,\r\n                                        name: childItem.name,\r\n                                    });\r\n                                }\r\n                            });\r\n                            if (valueStack.length < 1) {\r\n                                return;\r\n                            }\r\n                            \r\n                            currentSearchComponentValue = {\r\n                                id,\r\n                                name,\r\n                                values: valueStack,\r\n                            };\r\n                        } else {\r\n                            // 本地直接输入\r\n                            const valueStack = [];\r\n                            searchValueArr.forEach((item) => {\r\n                                // 兼容空值的情况\r\n                                if (item) {\r\n                                    valueStack.push({\r\n                                        id: item,\r\n                                        name: item,\r\n                                    });\r\n                                }\r\n                            });\r\n                            if (valueStack.length < 1) {\r\n                                return;\r\n                            }\r\n                            currentSearchComponentValue = {\r\n                                id,\r\n                                name,\r\n                                values: valueStack,\r\n                            };\r\n                        }\r\n                        defaultSearchComponentValue.push(currentSearchComponentValue);\r\n                    });\r\n                    promiseStack.push(remoteHandler);\r\n                }\r\n                Promise.all(promiseStack).finally(() => {\r\n                    let oldSearchComponentValue = [];\r\n                    if (this.$refs.searchSelect) {\r\n                        oldSearchComponentValue = this.$refs.searchSelect.chipList;\r\n                    }\r\n                    this.searchValue = filterValue([...oldSearchComponentValue, ...defaultSearchComponentValue]);\r\n                    setTimeout(() => {\r\n                        this.$emit('on-change', defaultSearchValue);\r\n                        this.$emit('input', defaultSearchValue);\r\n                    });\r\n                });\r\n            },\r\n            /**\r\n             * @desc 按 API 格式要求处理筛选值\r\n             * @params {Object} payload 筛选结果\r\n             */\r\n            handleChange (payload) {\r\n                const validValue = payload;\r\n                const result = {};\r\n                const defaultValueMap = val => val.id;\r\n                const trim = valueTarget => _.isString(valueTarget) ? _.trim(valueTarget) : valueTarget;\r\n                validValue.forEach((currentValue) => {\r\n                    const valueMap = typeof currentValue.map === 'function' ? currentValue.map : defaultValueMap;\r\n                    if (currentValue.multiable) {\r\n                        result[currentValue.id] = currentValue.values.map(item => trim(valueMap(item)));\r\n                    } else if (currentValue.values) {\r\n                        result[currentValue.id] = trim(valueMap(currentValue.values[0]));\r\n                    } else {\r\n                        result[currentValue.id] = trim(valueMap(currentValue));\r\n                    }\r\n                });\r\n                // 缓存用户筛选的数据\r\n                const userFieldArr = ['operator', 'creator', 'lastModifyUser'];\r\n                userFieldArr.forEach((userField) => {\r\n                    if (_.has(result, userField)) {\r\n                        userSearchCache.setItem(result[userField]);\r\n                    }\r\n                });\r\n                \r\n                this.$emit('on-change', result);\r\n                this.$emit('input', result);\r\n            },\r\n            /**\r\n             * @desc 外部调用——检查搜索条件是否为空\r\n             * @returns {Boolean}\r\n             */\r\n            checkEmpty () {\r\n                return this.$refs.searchSelect.chipList.length < 1;\r\n            },\r\n            /**\r\n             * @desc 外部调用——重置筛选条件\r\n             */\r\n            reset () {\r\n                this.searchValue = [];\r\n                this.$refs.searchSelect.reset();\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .jb-search-select {\r\n        z-index: 999;\r\n        background: #fff;\r\n\r\n        textarea {\r\n            &::placeholder {\r\n                color: #c4c6cc;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"job-tag-select\" v-bkloading=\"{ isLoading }\">\r\n        <bk-select\r\n            ref=\"select\"\r\n            searchable\r\n            multiple\r\n            display-tag\r\n            :clearable=\"false\"\r\n            :value=\"realValue\"\r\n            @change=\"handleChange\">\r\n            <bk-option\r\n                v-for=\"tagItem in list\"\r\n                :key=\"tagItem.id\"\r\n                :id=\"tagItem.id\"\r\n                :name=\"tagItem.name\" />\r\n            <template v-if=\"!publicScript\" slot=\"extension\">\r\n                <auth-component auth=\"tag/create\">\r\n                    <div @click=\"handleCreate\">\r\n                        <i class=\"bk-icon icon-plus-circle mr10\" />{{ '新建标签' }}\r\n                    </div>\r\n                    <div slot=\"forbid\">\r\n                        <i class=\"bk-icon icon-plus-circle mr10\" />{{ '新建标签' }}\r\n                    </div>\r\n                </auth-component>\r\n            </template>\r\n        </bk-select>\r\n        <lower-component level=\"custom\" :custom=\"isShowCreate\">\r\n            <operation-tag\r\n                v-model=\"isShowCreate\"\r\n                @on-change=\"handleTagNew\" />\r\n        </lower-component>\r\n    </div>\r\n</template>\r\n<script>\r\n    import PubliceTagManageService from '@service/public-tag-manage';\r\n    import TagManageService from '@service/tag-manage';\r\n    import { checkPublicScript } from '@utils/assist';\r\n    import OperationTag from '@components/operation-tag';\r\n\r\n    export default {\r\n        name: 'JbTagSelect',\r\n        components: {\r\n            OperationTag,\r\n        },\r\n        props: {\r\n            value: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                // tag 列表loading\r\n                isLoading: true,\r\n                // 新建 tag 弹框\r\n                isShowCreate: false,\r\n                realValue: [],\r\n                publicScript: true,\r\n                list: [{},{},{}],\r\n            };\r\n        },\r\n        watch: {\r\n            value: {\r\n                handler (value) {\r\n                    this.realValue = value.map(_ => _.id);\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        created () {\r\n            this.publicScript = checkPublicScript(this.$route);\r\n            \r\n            this.fetchData();\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 获取 tag 列表\r\n             */\r\n            fetchData () {\r\n                this.isLoading = true;\r\n                const requestHandler = this.publicScript ? PubliceTagManageService.fetchTagList : TagManageService.fetchWholeList;\r\n                return requestHandler()\r\n                    .then((data) => {\r\n                        this.list = Object.freeze(data);\r\n                    })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 外部调用显示tag选择面板\r\n             */\r\n            show () {\r\n                this.$refs.select.show();\r\n            },\r\n            \r\n            /**\r\n             * @desc 更新选中的tag\r\n             */\r\n            handleChange (value) {\r\n                const valueMap = value.reduce((result, item) => {\r\n                    result[item] = true;\r\n                    return result;\r\n                }, {});\r\n                const result = [];\r\n                this.list.forEach((item) => {\r\n                    if (valueMap[item.id]) {\r\n                        result.push({ ...item });\r\n                    }\r\n                });\r\n                this.$emit('on-change', result);\r\n                this.$emit('change', result);\r\n                this.$emit('input', result);\r\n            },\r\n            /**\r\n             * @desc 显示新建tag弹框\r\n             */\r\n            handleCreate () {\r\n                this.$refs.select.close();\r\n                this.isShowCreate = true;\r\n            },\r\n            /**\r\n             * @desc 新建标签\r\n             * @param { Object } tag\r\n             */\r\n            handleTagNew (tag) {\r\n                this.fetchData()\r\n                    .then(() => {\r\n                        this.realValue.push(tag.id);\r\n                        this.isShowCreate = false;\r\n                        this.$refs.select.show();\r\n                    });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .job-tag-select {\r\n        .bk-select {\r\n            &.is-focus {\r\n                z-index: 9;\r\n            }\r\n        }\r\n\r\n        .bk-select-dropdown {\r\n            background: #fff;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"jb-edit-tag\" :class=\"{ shortcurt }\" @click.stop=\"\">\r\n        <div\r\n            v-if=\"!isEditing\"\r\n            class=\"render-value-box\"\r\n            @click.stop=\"handleTextClick\">\r\n            <div ref=\"content\" class=\"value-text\" v-bk-overflow-tips tag-edit-tag>\r\n                <slot v-bind:value=\"text\">{{ text || '--' }}</slot>\r\n            </div>\r\n            <template v-if=\"!isLoading\">\r\n                <div\r\n                    v-if=\"shortcurt\"\r\n                    class=\"tag-shortcurt-box\"\r\n                    @click.stop=\"\">\r\n                    <div class=\"shortcurt-action-btn\">\r\n                        <Icon type=\"copy\" @click=\"handleCopy\" />\r\n                        <Icon type=\"paste\" class=\"paste-btn\" @click=\"handlePaste\" />\r\n                    </div>\r\n                </div>\r\n                <div v-else class=\"tag-normal-box\">\r\n                    <Icon\r\n                        type=\"edit-2\"\r\n                        class=\"edit-action\"\r\n                        @click.self.stop=\"handleEdit\" />\r\n                </div>\r\n            </template>\r\n            <Icon\r\n                v-if=\"isLoading\"\r\n                type=\"loading-circle\"\r\n                class=\"tag-edit-loading\" />\r\n        </div>\r\n        <div v-else class=\"edit-value-box\">\r\n            <jb-tag-select\r\n                ref=\"tagSelect\"\r\n                :value=\"localValue\"\r\n                @on-change=\"handleTagValueChange\" />\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n       import { execCopy } from '@utils/assist';\r\n    import JbTagSelect from '@components/jb-tag-select';\r\n\r\n    let copyMemo = [];\r\n\r\n    const isEqual = (pre, next) => {\r\n        if (pre.length !== next.length) {\r\n            return false;\r\n        }\r\n        if (pre.length === 0) {\r\n            return true;\r\n        }\r\n        const preMap = pre.reduce((result, item) => {\r\n            result[item.id] = true;\r\n            return result;\r\n        }, {});\r\n        next.forEach((item) => {\r\n            delete preMap[item.id];\r\n        });\r\n        return Object.keys(preMap).length < 1;\r\n    };\r\n\r\n    export default {\r\n        name: 'JbEditTag',\r\n        components: {\r\n            JbTagSelect,\r\n        },\r\n        props: {\r\n            field: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            value: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n            // 显示复制粘贴按钮\r\n            shortcurt: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n            remoteHander: {\r\n                type: Function,\r\n                default: () => Promise.resolve(),\r\n            },\r\n            rules: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isEditing: false,\r\n                isLoading: false,\r\n                localValue: this.value,\r\n            };\r\n        },\r\n        computed: {\r\n            /**\r\n             * @desc 标签显示文本\r\n             * @returns { String }\r\n             */\r\n            text () {\r\n                return this.localValue.map(_ => _.name).join('，');\r\n            },\r\n        },\r\n        watch: {\r\n            value: {\r\n                handler (value) {\r\n                    this.localValue = value;\r\n                    this.memoValue = [...this.value];\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        mounted () {\r\n            document.body.addEventListener('click', this.hideEdit);\r\n            this.$once('hook:beforeDestroy', () => {\r\n                document.body.removeEventListener('click', this.hideEdit);\r\n            });\r\n        },\r\n        \r\n        methods: {\r\n            /**\r\n             * @desc 触发标签修改操作\r\n             */\r\n            triggerRemote () {\r\n                this.isEditing = false;\r\n                \r\n                if (isEqual(this.memoValue, this.localValue)) {\r\n                    return;\r\n                }\r\n                \r\n                this.isLoading = true;\r\n                \r\n                this.remoteHander({\r\n                    [this.field]: this.localValue.map(({ id }) => ({ id })),\r\n                }).then(() => {\r\n                    this.memoValue = this.localValue;\r\n                    this.messageSuccess('编辑成功');\r\n                    this.$emit('on-change', {\r\n                        [this.field]: this.localValue,\r\n                    });\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 切换编辑状态\r\n             */\r\n            hideEdit (event) {\r\n                if (!this.isEditing) return;\r\n                if (event.path && event.path.length > 0) {\r\n                    // eslint-disable-next-line no-plusplus\r\n                    for (let i = 0; i < event.path.length; i++) {\r\n                        const target = event.path[i];\r\n                        if (/tippy-popper/.test(target.className)\r\n                            || /job-tag-create-dialog/.test(target.className)) {\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                this.triggerRemote();\r\n            },\r\n            /**\r\n             * @desc tag 值更新\r\n             * @param { Array } tagList\r\n             */\r\n            handleTagValueChange (tagList) {\r\n                this.localValue = Object.freeze(tagList);\r\n            },\r\n            /**\r\n             * @desc 编辑 tag\r\n             */\r\n            handleEdit () {\r\n                document.body.click();\r\n                this.$nextTick(() => {\r\n                    this.isEditing = true;\r\n                    setTimeout(() => {\r\n                        this.$refs.tagSelect.show();\r\n                    });\r\n                });\r\n            },\r\n            /**\r\n             * @desc 点击 tag 文本开始编辑状态\r\n             */\r\n            handleTextClick () {\r\n                if (!this.shortcurt) {\r\n                    return;\r\n                }\r\n                this.handleEdit();\r\n            },\r\n            /**\r\n             * @desc 复制 tag\r\n             */\r\n            handleCopy () {\r\n                if (this.localValue.length < 1) {\r\n                    this.$bkMessage({\r\n                        theme: 'warning',\r\n                        message: '标签为空',\r\n                    });\r\n                    return;\r\n                }\r\n                copyMemo = _.cloneDeep(this.localValue);\r\n                execCopy(this.text);\r\n            },\r\n            /**\r\n             * @desc 粘贴 tag\r\n             */\r\n            handlePaste () {\r\n                if (copyMemo.length < 1) {\r\n                    this.$bkMessage({\r\n                        theme: 'warning',\r\n                        message: '请先复制标签',\r\n                    });\r\n                    return;\r\n                }\r\n                this.localValue = [\r\n                    ...new Set([\r\n                        ...this.localValue,\r\n                        ...copyMemo,\r\n                    ]),\r\n                ];\r\n                this.triggerRemote();\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .edit-tag-column {\r\n        .cell {\r\n            overflow: initial;\r\n            line-height: 18px;\r\n            text-overflow: initial;\r\n            word-break: break-all;\r\n            -webkit-line-clamp: unset;\r\n\r\n            .jb-edit-tag {\r\n                margin-left: -4px;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n<style lang='postcss'>\r\n    @keyframes tag-edit-loading {\r\n        to {\r\n            transform: rotateZ(360deg);\r\n        }\r\n    }\r\n\r\n    .jb-edit-tag {\r\n        position: relative;\r\n        height: 30px;\r\n        cursor: pointer;\r\n        border-radius: 2px;\r\n\r\n        &.shortcurt:hover {\r\n            background: #e1e2e6;\r\n\r\n            .shortcurt-action-btn {\r\n                display: flex;\r\n            }\r\n        }\r\n\r\n        &:hover {\r\n            .tag-normal-box,\r\n            .tag-shortcurt-box {\r\n                display: flex;\r\n                opacity: 100%;\r\n                transform: scale(1);\r\n            }\r\n        }\r\n\r\n        .render-value-box {\r\n            display: flex;\r\n            height: 30px;\r\n            padding-left: 4px;\r\n            line-height: 30px;\r\n            align-items: center;\r\n        }\r\n\r\n        .value-text {\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n            white-space: nowrap;\r\n        }\r\n\r\n        .tag-normal-box,\r\n        .tag-shortcurt-box {\r\n            display: none;\r\n            height: 30px;\r\n            min-width: 24px;\r\n            color: #979ba5;\r\n            opacity: 0%;\r\n            align-items: center;\r\n        }\r\n\r\n        .tag-shortcurt-box {\r\n            padding-right: 6px;\r\n            margin-left: auto;\r\n            font-size: 16px;\r\n            flex: 0 0 42px;\r\n\r\n            .paste-btn {\r\n                margin-left: 4px;\r\n            }\r\n\r\n            .shortcurt-action-btn {\r\n                align-items: center;\r\n\r\n                i:hover {\r\n                    color: #3a84ff;\r\n                }\r\n            }\r\n        }\r\n\r\n        .tag-normal-box {\r\n            font-size: 16px;\r\n            transform: scale(0);\r\n            transition: 0.15s;\r\n            transform-origin: left center;\r\n\r\n            .edit-action {\r\n                padding: 6px 15px 6px 2px;\r\n                cursor: pointer;\r\n\r\n                &:hover {\r\n                    color: #3a84ff;\r\n                }\r\n            }\r\n        }\r\n\r\n        .tag-edit-loading {\r\n            position: absolute;\r\n            top: 9px;\r\n            right: 10px;\r\n            animation: \"tag-edit-loading\" 1s linear infinite;\r\n        }\r\n\r\n        .edit-value-box {\r\n            width: 100%;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <transition name=\"host-sideslider\" :duration=\"300\">\r\n        <div v-if=\"value\">\r\n            <div class=\"sideslider-box\" :style=\"styles\">\r\n                <div class=\"container\" @click.stop=\"\">\r\n                    <div class=\"box-header\">\r\n                        <div class=\"toggle-btn\" @click=\"handleClose\">\r\n                            <Icon class=\"btn-flag\" type=\"down-small\" />\r\n                        </div>\r\n                        <div class=\"box-title\">\r\n                            <slot name=\"title\" />\r\n                            <div class=\"desc\">\r\n                                <slot name=\"desc\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"box-content\">\r\n                        <scroll-faker>\r\n                            <slot />\r\n                        </scroll-faker>\r\n                    </div>\r\n                    <div class=\"box-footer\">\r\n                        <bk-button theme=\"primary\" @click=\"handleClose\">{{ '关闭' }}</bk-button>\r\n                    </div>\r\n                </div>\r\n                <div class=\"box-mask\" @click=\"handleClose\" />\r\n            </div>\r\n        </div>\r\n    </transition>\r\n</template>\r\n<script>\r\n    export default {\r\n        name: '',\r\n        props: {\r\n            value: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                styles: {},\r\n            };\r\n        },\r\n        watch: {\r\n            value: {\r\n                handler (value) {\r\n                    if (value) {\r\n                        this.styles = {\r\n                            'z-index': window.__bk_zIndex_manager.nextZIndex(), // eslint-disable-line no-underscore-dangle\r\n                        };\r\n                    }\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        methods: {\r\n            handleClose () {\r\n                this.$emit('input', false);\r\n                this.$emit('change', false);\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .host-sideslider-enter-active,\r\n    .host-sideslider-leave-active {\r\n        .container,\r\n        .box-mask {\r\n            opacity: 100%;\r\n            transition: all 0.3s ease;\r\n        }\r\n    }\r\n\r\n    .host-sideslider-enter,\r\n    .host-sideslider-leave-to {\r\n        .container {\r\n            opacity: 0%;\r\n            transform: translateY(-15px);\r\n        }\r\n    }\r\n\r\n    .sideslider-box {\r\n        position: fixed;\r\n        top: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        left: 0;\r\n        z-index: 2000;\r\n        display: flex;\r\n        overflow: hidden;\r\n        align-items: center;\r\n        justify-content: center;\r\n\r\n        .container {\r\n            position: relative;\r\n            z-index: 1;\r\n            display: flex;\r\n            width: 1240px;\r\n            height: 754px;\r\n            background: #fff;\r\n            flex-direction: column;\r\n        }\r\n\r\n        .box-header {\r\n            position: relative;\r\n            display: flex;\r\n            height: 42px;\r\n            padding-right: 58px;\r\n            border-bottom: 1px solid #dcdee5;\r\n            align-items: center;\r\n\r\n            .toggle-btn {\r\n                display: flex;\r\n                width: 32px;\r\n                height: 100%;\r\n                color: #fff;\r\n                cursor: pointer;\r\n                background: #3a84ff;\r\n                align-items: center;\r\n                justify-content: center;\r\n            }\r\n\r\n            .btn-flag {\r\n                font-size: 30px;\r\n                transform: rotateZ(-90deg);\r\n            }\r\n        }\r\n\r\n        .box-title {\r\n            display: flex;\r\n            padding-left: 20px;\r\n            font-size: 14px;\r\n            color: #313238;\r\n            flex: 1;\r\n\r\n            .desc {\r\n                margin-left: auto;\r\n            }\r\n        }\r\n\r\n        .box-content {\r\n            height: calc(100% - 100px);\r\n        }\r\n\r\n        .box-footer {\r\n            display: flex;\r\n            height: 60px;\r\n            padding-right: 24px;\r\n            background: #fafbfd;\r\n            align-items: center;\r\n            justify-content: flex-end;\r\n        }\r\n\r\n        .box-mask {\r\n            position: absolute;\r\n            top: 0;\r\n            right: 0;\r\n            bottom: 0;\r\n            left: 0;\r\n            cursor: pointer;\r\n            background: rgb(0 0 0 / 60%);\r\n        }\r\n    }\r\n\r\n    .choose-ip-dialog {\r\n        .sideslider-box {\r\n            position: absolute;\r\n            top: 0;\r\n            right: 0;\r\n            left: 0;\r\n            z-index: 9;\r\n            display: flex;\r\n            justify-content: flex-end;\r\n            overflow: hidden;\r\n\r\n            &.hide {\r\n                height: 0;\r\n            }\r\n\r\n            .container {\r\n                height: 100%;\r\n            }\r\n\r\n            .host-content-enter-active,\r\n            .host-content-leave-active {\r\n                transition: all 0.3s ease;\r\n            }\r\n\r\n            .host-content-enter,\r\n            .host-content-leave-to {\r\n                transform: translateX(100%);\r\n            }\r\n        }\r\n\r\n        .host-sideslider-enter,\r\n        .host-sideslider-leave-to {\r\n            .container {\r\n                transform: translateX(100%);\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"server-panel-action-extend\" @click.stop=\"\" @mouseleave=\"handleHide\">\r\n        <Icon type=\"more\" />\r\n        <div\r\n            ref=\"popoverContent\"\r\n            class=\"server-action-extend-content\"\r\n            @click=\"handleWraperClick\"\r\n            @mouseover=\"handleShow\"\r\n            @mouseleave=\"handleClose\">\r\n            <template v-if=\"copyable\">\r\n                <div class=\"action-item\" @click=\"handleCopyAll\">{{ '复制全部IP' }}</div>\r\n                <div class=\"action-item\" @click=\"handleCopyFail\">{{ '复制异常IP' }}</div>\r\n            </template>\r\n            <slot />\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import {\r\n        execCopy,\r\n    } from '@utils/assist';\r\n   \r\n    const instanceMap = {};\r\n\r\n    export default {\r\n        name: 'ChooseIpExtendAction',\r\n        props: {\r\n            list: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n            invalidList: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n            copyable: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n        },\r\n        created () {\r\n            this.id = `action_extend_${Math.random()}_${Math.random()}`;\r\n        },\r\n        mounted () {\r\n            this.init();\r\n        },\r\n        beforeDestroy () {\r\n            instanceMap[this.id].hide();\r\n            delete instanceMap[this.id];\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 弹层面板初始化\r\n             */\r\n            init () {\r\n                instanceMap[this.id] = this.$bkPopover(this.$el, {\r\n                    theme: 'server-panel-action-extend-popover',\r\n                    interactive: true,\r\n                    placement: 'bottom',\r\n                    content: this.$refs.popoverContent,\r\n                    trigger: 'mouseover',\r\n                    arrow: true,\r\n                    onShow: () => {\r\n                        Object.keys(instanceMap).forEach((key) => {\r\n                            if (key !== this.id) {\r\n                                instanceMap[key].hide();\r\n                            }\r\n                        });\r\n                    },\r\n                });\r\n            },\r\n            /**\r\n             * @desc 隐藏弹层面板\r\n             */\r\n            handleWraperClick () {\r\n                this.handleClose();\r\n            },\r\n            /**\r\n             * @desc 鼠标操作隐藏弹层面板\r\n             */\r\n            handleHide () {\r\n                this.leaveTimer = setTimeout(() => {\r\n                    this.handleClose();\r\n                }, 3000);\r\n            },\r\n            /**\r\n             * @desc 复制所有主机\r\n             */\r\n            handleCopyAll () {\r\n                if (this.list.length < 1 && this.invalidList.length < 1) {\r\n                    this.messageWarn('你还未选择主机');\r\n                    return;\r\n                }\r\n                let allIP = this.list.map(host => host.ip);\r\n                const allInvalidList = this.invalidList.map(host => host.ip);\r\n                allIP = [\r\n                    ...allIP, ...allInvalidList,\r\n                ];\r\n                execCopy(allIP.join('\\n'), `${'复制成功'}（${allIP.length}${'个IP'}）`);\r\n            },\r\n            /**\r\n             * @desc 复制异常主机\r\n             */\r\n            handleCopyFail () {\r\n                if (this.list.length < 1 && this.invalidList.length < 1) {\r\n                    this.messageWarn('你还未选择主机');\r\n                    return;\r\n                }\r\n                let allFailIp = [];\r\n                this.list.forEach((currentHost) => {\r\n                    if (!currentHost.alive) {\r\n                        allFailIp.push(currentHost.ip);\r\n                    }\r\n                });\r\n                if (allFailIp.length < 1 && this.invalidList.length < 1) {\r\n                    this.messageWarn('暂无异常主机');\r\n                    return;\r\n                }\r\n                const allInvalidList = this.invalidList.map(host => host.ip);\r\n                allFailIp = [\r\n                    ...allFailIp, ...allInvalidList,\r\n                ];\r\n                execCopy(allFailIp.join('\\n'), `${'复制成功'}（${allFailIp.length}${'个异常IP'}）`);\r\n            },\r\n            handleShow () {\r\n                clearTimeout(this.leaveTimer);\r\n            },\r\n            handleClose () {\r\n                instanceMap[this.id] && instanceMap[this.id].hide();\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    html[lang=\"en-US\"] {\r\n        .server-action-extend-content {\r\n            width: 154px;\r\n        }\r\n    }\r\n\r\n    .server-panel-action-extend {\r\n        position: absolute;\r\n        top: 50%;\r\n        right: 16px;\r\n        z-index: 9;\r\n        display: flex;\r\n        width: 30px;\r\n        height: 30px;\r\n        font-size: 16px;\r\n        font-weight: normal;\r\n        color: #979ba5;\r\n        cursor: pointer;\r\n        border-radius: 50%;\r\n        transform: translateY(-50%);\r\n        user-select: none;\r\n        align-items: center;\r\n        justify-content: center;\r\n\r\n        &:hover,\r\n        &.tippy-active {\r\n            z-index: 10;\r\n            color: #3a84ff;\r\n            background: #dcdee5;\r\n        }\r\n    }\r\n\r\n    .server-panel-action-extend-popover-theme {\r\n        padding: 0 !important;\r\n\r\n        .tippy-arrow {\r\n            display: none;\r\n        }\r\n\r\n        .server-action-extend-content {\r\n            width: 93px;\r\n            font-size: 14px;\r\n            line-height: 32px;\r\n            color: #63656e;\r\n            background: #fff;\r\n            border: 1px solid #f0f1f5;\r\n            box-shadow: 0 2px 1px 0 rgb(185 203 222 / 50%);\r\n\r\n            .action-item {\r\n                padding-left: 15px;\r\n                cursor: pointer;\r\n\r\n                &:hover {\r\n                    color: #3a84ff;\r\n                    background: #e5efff;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n</style>\r\n","<template>\r\n    <div\r\n        class=\"jb-edit-input\"\r\n        :class=\"mode\"\r\n        :key=\"value\">\r\n        <template v-if=\"!isEditing\">\r\n            <div\r\n                class=\"render-value-box\"\r\n                @click.stop=\"handleBlockShowEdit\">\r\n                <div class=\"value-text\" v-bk-overflow-tips>\r\n                    <slot v-bind:value=\"newVal\">\r\n                        <span>{{ newVal || '--' }}</span>\r\n                    </slot>\r\n                </div>\r\n                <div class=\"edit-action-box\">\r\n                    <Icon\r\n                        v-if=\"!isBlock && !isSubmiting\"\r\n                        type=\"edit-2\"\r\n                        class=\"edit-action\"\r\n                        @click.self.stop=\"handleShowEdit\" />\r\n                    <Icon\r\n                        v-if=\"isSubmiting\"\r\n                        type=\"loading-circle\"\r\n                        class=\"edit-loading\" />\r\n                </div>\r\n            </div>\r\n        </template>\r\n        <template v-else>\r\n            <div class=\"edit-value-box\" :class=\"{ 'edit-error': !!error }\" @click.stop=\"\">\r\n                <bk-input\r\n                    ref=\"input\"\r\n                    :value=\"newVal\"\r\n                    @change=\"handleInputChange\"\r\n                    @blur=\"handleInputBlur\"\r\n                    @keyup=\"handleInputEnter\" />\r\n                <div v-if=\"error\" class=\"input-edit-info\" v-bk-tooltips.top=\"error\">\r\n                    <Icon type=\"info\" />\r\n                </div>\r\n            </div>\r\n        </template>\r\n    </div>\r\n</template>\r\n<script>\r\n   \r\n    export default {\r\n        name: 'JbEditInput',\r\n        props: {\r\n            /**\r\n             * @value block 块级交互\r\n             * @value ‘’ 默认鼠标点击编辑按钮\r\n             */\r\n            mode: {\r\n                type: String,\r\n                default: '',\r\n            },\r\n            /**\r\n             * @desc 编辑操作对应的字段名称\r\n             */\r\n            field: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            /**\r\n             * @desc 默认值\r\n             */\r\n            value: {\r\n                type: String,\r\n                default: '',\r\n            },\r\n            /**\r\n             * @desc 宽度\r\n             */\r\n            width: {\r\n                type: String,\r\n                default: 'auto',\r\n            },\r\n            remoteHander: {\r\n                type: Function,\r\n                default: () => Promise.resolve(),\r\n            },\r\n            /**\r\n             * @desc 值验证规则\r\n             */\r\n            rules: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                newVal: this.value,\r\n                error: '',\r\n                isEditing: false,\r\n                isSubmiting: false,\r\n            };\r\n        },\r\n        computed: {\r\n            styles () {\r\n                return {\r\n                    width: this.width,\r\n                };\r\n            },\r\n            isBlock () {\r\n                return this.mode === 'block';\r\n            },\r\n        },\r\n        watch: {\r\n            value (newVal) {\r\n                this.newVal = newVal;\r\n            },\r\n        },\r\n        mounted () {\r\n            this.isValidatoring = false;\r\n            document.body.addEventListener('click', this.handleHideEdit);\r\n            this.$once('hook:beforeDestroy', () => {\r\n                document.body.removeEventListener('click', this.handleHideEdit);\r\n            });\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 值验证\r\n             */\r\n            doValidator () {\r\n                const checkValidator = (rule, value) => new Promise((resolve, reject) => {\r\n                    if (rule.required && !value) {\r\n                        reject(rule.message);\r\n                    }\r\n                    // 通过自定义方法来检测\r\n                    if (rule.validator && (typeof rule.validator === 'function')) {\r\n                        const result = rule.validator(value);\r\n                        if (result.then) {\r\n                            result.then((data) => {\r\n                                if (data) {\r\n                                    return resolve();\r\n                                }\r\n                                return reject(rule.message);\r\n                            }).catch(() => {\r\n                                reject(rule.message);\r\n                            });\r\n                        } else if (result) {\r\n                            return resolve();\r\n                        } else {\r\n                            return reject(rule.message);\r\n                        }\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                });\r\n                \r\n                const allPromise = this.rules.map(rule => checkValidator(rule, this.newVal));\r\n                this.isValidatoring = true;\r\n                return Promise.all(allPromise).finally(() => {\r\n                    this.isValidatoring = false;\r\n                });\r\n            },\r\n            /**\r\n             * @desc 提交编辑\r\n             */\r\n            triggerChange () {\r\n                this.doValidator()\r\n                    .then(() => {\r\n                        this.isEditing = false;\r\n                        if (this.newVal === this.value) {\r\n                            return;\r\n                        }\r\n                        this.isSubmiting = true;\r\n                        this.remoteHander({\r\n                            [this.field]: this.newVal,\r\n                        }).then(() => {\r\n                            this.$emit('on-change', {\r\n                                [this.field]: this.newVal,\r\n                            });\r\n                            this.messageSuccess('编辑成功');\r\n                        })\r\n                            .catch(() => {\r\n                                this.newVal = this.value;\r\n                            })\r\n                            .finally(() => {\r\n                                this.isSubmiting = false;\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        this.error = error;\r\n                    });\r\n            },\r\n            handleBlockShowEdit () {\r\n                if (!this.isBlock) {\r\n                    return;\r\n                }\r\n                this.handleShowEdit();\r\n            },\r\n            /**\r\n             * @desc 显示input\r\n             */\r\n            handleShowEdit () {\r\n                document.body.click();\r\n                this.isEditing = true;\r\n                this.$nextTick(() => {\r\n                    this.$refs.input.focus();\r\n                });\r\n            },\r\n            /**\r\n             * @desc input 值更新\r\n             * @param {String} value 最新输入值\r\n             */\r\n            handleInputChange (value) {\r\n                this.newVal = value.trim();\r\n            },\r\n            /**\r\n             * @desc input 失去焦点开始提交\r\n             */\r\n            handleInputBlur () {\r\n                this.triggerChange();\r\n            },\r\n            /**\r\n             * @desc input enter 提交\r\n             * @param {String} value 最新输入值\r\n             * @param {Object} event dom 事件\r\n             */\r\n            handleInputEnter (value, event) {\r\n                if (!this.isEditing) return;\r\n                if (event.key === 'Enter' && event.keyCode === 13) {\r\n                    this.triggerChange();\r\n                }\r\n            },\r\n            /**\r\n             * @desc 隐藏 input 框\r\n             * @param {Object} event dom 事件\r\n             */\r\n            handleHideEdit (event) {\r\n                if (this.isValidatoring || this.error) {\r\n                    return;\r\n                }\r\n                if (event.path && event.path.length > 0) {\r\n                    // eslint-disable-next-line no-plusplus\r\n                    for (let i = 0; i < event.path.length; i++) {\r\n                        const target = event.path[i];\r\n                        if (target.className === 'jb-edit-input') {\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n                this.isEditing = false;\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .jb-edit-input {\r\n        &.block {\r\n            position: relative;\r\n            margin-left: -10px;\r\n            cursor: pointer;\r\n\r\n            .render-value-box {\r\n                padding-left: 10px;\r\n\r\n                &:hover {\r\n                    background: #f0f1f5;\r\n                }\r\n            }\r\n\r\n            .edit-action-box {\r\n                position: absolute;\r\n                top: 0;\r\n                right: 10px;\r\n                width: 16px;\r\n            }\r\n        }\r\n\r\n        .render-value-box {\r\n            position: relative;\r\n            display: flex;\r\n            height: 30px;\r\n            min-width: 36px;\r\n            min-height: 28px;\r\n\r\n            &:hover {\r\n                .edit-action {\r\n                    opacity: 100%;\r\n                    transform: scale(1);\r\n                }\r\n            }\r\n        }\r\n\r\n        .value-text {\r\n            overflow: hidden;\r\n            line-height: 30px;\r\n            text-overflow: ellipsis;\r\n            white-space: nowrap;\r\n        }\r\n\r\n        .edit-action-box {\r\n            display: flex;\r\n            align-items: center;\r\n            min-height: 1em;\r\n            margin-right: auto;\r\n            font-size: 16px;\r\n            color: #979ba5;\r\n\r\n            .edit-action {\r\n                padding: 6px 0 6px 2px;\r\n                cursor: pointer;\r\n                opacity: 0%;\r\n                transform: scale(0);\r\n                transition: 0.15s;\r\n                transform-origin: left center;\r\n\r\n                &:hover {\r\n                    color: #3a84ff;\r\n                }\r\n            }\r\n\r\n            .edit-loading {\r\n                position: absolute;\r\n                top: 9px;\r\n                margin-left: 2px;\r\n                animation: rotate-loading 1s linear infinite;\r\n            }\r\n        }\r\n\r\n        .edit-value-box {\r\n            position: relative;\r\n            width: 100%;\r\n            font-size: 0;\r\n\r\n            &.edit-error {\r\n                .bk-form-input {\r\n                    border-color: #ea3636 !important;\r\n                }\r\n            }\r\n\r\n            .input-edit-info {\r\n                position: absolute;\r\n                top: 0;\r\n                right: 0;\r\n                bottom: 0;\r\n                z-index: 1;\r\n                display: flex;\r\n                align-items: center;\r\n                padding: 0 10px;\r\n                font-size: 16px;\r\n                color: #ea3636;\r\n            }\r\n\r\n            .bk-form-input {\r\n                height: 30px;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div ref=\"layout\" :class=\"classes\">\r\n        <slot />\r\n    </div>\r\n</template>\r\n<script>\r\n    export default {\r\n        name: 'GlobalVariableLayout',\r\n\r\n        props: {\r\n            type: {\r\n                type: String,\r\n                default: 'horizontal', // 水平：horizontal；垂直：vertical\r\n            },\r\n        },\r\n        computed: {\r\n            classes () {\r\n                const classes = {\r\n                    'global-variable-layout': true,\r\n                };\r\n                if (this.type !== 'horizontal') {\r\n                    classes.vertical = true;\r\n                }\r\n                return classes;\r\n            },\r\n        },\r\n        updated () {\r\n            const childrenNum = this.$slots.default;\r\n            if (this.childrenNum !== childrenNum) {\r\n                this.childrenNum = childrenNum;\r\n                this.init();\r\n            }\r\n        },\r\n        mounted  () {\r\n            if (this.type === 'horizontal') {\r\n                this.init();\r\n            }\r\n        },\r\n        methods: {\r\n            init () {\r\n                const isShowLayout = this.$refs.layout.getBoundingClientRect().width > 0;\r\n                if (!isShowLayout) {\r\n                    return;\r\n                }\r\n                const $formEle = this.$refs.layout;\r\n                let max = 0;\r\n                const $labelEleList = $formEle.querySelectorAll('.variable-name');\r\n                $labelEleList.forEach((item) => {\r\n                    const { width } = item.querySelector('span').getBoundingClientRect();\r\n                    max = Math.max(max, width);\r\n                });\r\n                $labelEleList.forEach((item) => {\r\n                    item.style.width = `${max}px`;\r\n                });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .global-variable-layout {\r\n        display: flex;\r\n        flex-direction: column;\r\n\r\n        &.vertical {\r\n            .global-variable-edit-box {\r\n                flex-direction: column;\r\n            }\r\n\r\n            .variable-name {\r\n                text-align: left;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"mult-input\">\r\n        <div\r\n            ref=\"input\"\r\n            class=\"input-text-area\"\r\n            contenteditable=\"true\"\r\n            :style=\"stylees\"\r\n            @input=\"handleInput\"\r\n            @focus=\"handleFocus\"\r\n            @blur=\"handleBlur\"\r\n            @paste=\"handlePaste\" />\r\n        <div v-if=\"showPlaceholder\" class=\"mult-input-placeholder\" @click=\"handleInputFocus\">{{ placeholder }}</div>\r\n    </div>\r\n</template>\r\n<script>\r\n    export default {\r\n        name: '',\r\n        props: {\r\n            value: {\r\n                type: String,\r\n                default: '',\r\n            },\r\n            placeholder: String,\r\n        },\r\n        data () {\r\n            return {\r\n                localValue: this.value,\r\n                focused: false,\r\n            };\r\n        },\r\n        computed: {\r\n            stylees () {\r\n                const styles = {};\r\n                if (this.focused) {\r\n                    styles['z-index'] = 9999;\r\n                } else {\r\n                    styles.height = '30px';\r\n                    styles.overflow = 'hidden';\r\n                    styles['white-space'] = 'pre';\r\n                    styles['text-overflow'] = 'ellipsis';\r\n                }\r\n                return styles;\r\n            },\r\n            showPlaceholder () {\r\n                if (this.focused) {\r\n                    return false;\r\n                }\r\n                return !this.localValue;\r\n            },\r\n        },\r\n        methods: {\r\n            handleInputFocus () {\r\n                this.$refs.input.focus();\r\n                setTimeout(() => {\r\n                    this.$refs.input.selectionStart = this.localValue.length;\r\n                    this.$refs.input.selectionEnd = this.localValue.length;\r\n                });\r\n            },\r\n            handleInput (event) {\r\n                const value = event.target.outerText;\r\n                this.localValue = value;\r\n                this.$emit('input', value);\r\n                this.$emit('change', value);\r\n            },\r\n            handleFocus () {\r\n                this.focused = true;\r\n            },\r\n            handleBlur () {\r\n                this.focused = false;\r\n                this.$refs.input.scrollTop = 0;\r\n            },\r\n            handlePaste (e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                let text = '';\r\n                const event = (e.originalEvent || e);\r\n                if (event.clipboardData && event.clipboardData.getData) {\r\n                    text = event.clipboardData.getData('text/plain');\r\n                } else if (window.clipboardData && window.clipboardData.getData) {\r\n                    text = window.clipboardData.getData('Text');\r\n                }\r\n                if (document.queryCommandSupported('insertText')) {\r\n                    document.execCommand('insertText', false, text);\r\n                } else {\r\n                    document.execCommand('paste', false, text);\r\n                }\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .mult-input {\r\n        position: relative;\r\n        height: 30px;\r\n        padding: 0 10px;\r\n        font-size: 12px;\r\n        line-height: 1.5;\r\n        word-break: break-all;\r\n        cursor: pointer;\r\n        background: #fff;\r\n\r\n        .input-text-area {\r\n            position: absolute;\r\n            top: 0;\r\n            right: 0;\r\n            left: 0;\r\n            max-height: 300px;\r\n            min-height: 32px;\r\n            padding: 6px 10px;\r\n            overflow-y: scroll;\r\n            font-size: 12px;\r\n            color: #63656e;\r\n            background: inherit;\r\n            border: 1px solid #c4c6cc;\r\n            border-radius: 2px;\r\n            outline: none;\r\n        }\r\n\r\n        .mult-input-placeholder {\r\n            position: absolute;\r\n            top: 1px;\r\n            right: 1px;\r\n            bottom: 1px;\r\n            left: 1px;\r\n            padding: 6px 10px;\r\n            color: #c4c6cc;\r\n            background: inherit;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"choose-ip-host-table\" :class=\"{ empty: isEmpty }\">\r\n        <scroll-faker :style=\"styles\">\r\n            <table>\r\n                <template v-if=\"!$slots.default\">\r\n                    <thead>\r\n                        <th style=\"width: 20%;\">{{ '主机IP' }}</th>\r\n                        <th style=\"width: 20%;\">{{ '云区域' }}</th>\r\n                        <th style=\"width: 150px;\">{{ 'Agent 状态' }}</th>\r\n                        <th>{{ '主机名' }}</th>\r\n                        <th>{{ '操作系统名称' }}</th>\r\n                        <th v-if=\"editable\" class=\"action-column\">{{ '操作' }}</th>\r\n                    </thead>\r\n                    <slot name=\"appendBefore\" />\r\n                    <tbody v-if=\"renderList.length > 0\" class=\"valid-list\">\r\n                        <tr v-for=\"(row) in renderList\" :key=\"row.realId\" :class=\"diff[row.realId]\">\r\n                            <td class=\"table-cell\">\r\n                                <span\r\n                                    v-if=\"row.repeat\"\r\n                                    class=\"repeat\"\r\n                                    :tippy-tips=\"'指和其他主机的IP地址相同，但云区域不同'\">\r\n                                    {{ '重复' }}\r\n                                </span>\r\n                                <div class=\"cell-text\">{{ row.ip }}</div>\r\n                            </td>\r\n                            <td>\r\n                                <div class=\"cell-text\">{{ row.cloudAreaInfo.name || '--' }}</div>\r\n                            </td>\r\n                            <td>\r\n                                <span v-if=\"row.alive\">\r\n                                    <icon svg type=\"normal\" style=\"vertical-align: middle;\" />\r\n                                    <span style=\"vertical-align: middle;\">{{ '正常' }}</span>\r\n                                </span>\r\n                                <span v-else>\r\n                                    <icon svg type=\"abnormal\" style=\"vertical-align: middle;\" />\r\n                                    <span style=\"vertical-align: middle;\">{{ '异常' }}</span>\r\n                                </span>\r\n                            </td>\r\n                            <td>\r\n                                <div class=\"cell-text\">{{ row.ipDesc || '--' }}</div>\r\n                            </td>\r\n                            <td>\r\n                                <div class=\"cell-text\">{{ row.os || '--' }}</div>\r\n                            </td>\r\n                            <td v-if=\"editable\" class=\"action-column\">\r\n                                <bk-button text @click=\"handleRemove(row.realId)\">{{ '移除' }}</bk-button>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </template>\r\n                <template v-else>\r\n                    <slot name=\"appendBefore\" />\r\n                    <slot />\r\n                </template>\r\n            </table>\r\n            <div\r\n                v-if=\"isShowMorePage\"\r\n                class=\"list-more\"\r\n                @click=\"handlePage\">\r\n                {{ '查看更多' }}\r\n            </div>\r\n        </scroll-faker>\r\n        <empty v-if=\"isEmpty\" :type=\"emptyType\" />\r\n    </div>\r\n</template>\r\n<script>\r\n    import Empty from '@components/empty';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            Empty,\r\n        },\r\n        props: {\r\n            list: {\r\n                type: Array,\r\n                required: true,\r\n            },\r\n            editable: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n            maxHeight: {\r\n                type: Number,\r\n                default: -1,\r\n            },\r\n            appendNums: {\r\n                type: Number,\r\n                default: 0,\r\n            },\r\n            diff: {\r\n                type: Object,\r\n                default: () => ({}),\r\n            },\r\n            isSearch: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                page: 1,\r\n                offset: 30,\r\n            };\r\n        },\r\n        computed: {\r\n            styles () {\r\n                const style = {\r\n                    width: '100%',\r\n                };\r\n                if (this.list.length + this.appendNums > 10 && this.maxHeight > 0) {\r\n                    style.height = '410px';\r\n                }\r\n                return style;\r\n            },\r\n            renderList () {\r\n                return Object.freeze(this.list.slice(0, this.page * this.offset));\r\n            },\r\n            isShowMorePage () {\r\n                return this.renderList.length < this.list.length;\r\n            },\r\n            isEmpty () {\r\n                return this.list.length < 1 && !this.$slots.appendBefore;\r\n            },\r\n            emptyType () {\r\n                if (this.isSearch) {\r\n                    return 'search';\r\n                }\r\n                return '';\r\n            },\r\n        },\r\n        methods: {\r\n            handleRemove (id) {\r\n                this.$emit('on-change', id);\r\n            },\r\n            handlePage () {\r\n                this.page += 1;\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .choose-ip-host-table {\r\n        &.empty {\r\n            display: flex;\r\n            align-items: center;\r\n            flex-direction: column;\r\n            min-height: 300px;\r\n\r\n            .job-empty {\r\n                margin-top: 90px;\r\n            }\r\n        }\r\n\r\n        table {\r\n            width: 100%;\r\n            color: #63656e;\r\n            table-layout: fixed;\r\n\r\n            .valid-list {\r\n                tr:last-child {\r\n                    td {\r\n                        border: none;\r\n                    }\r\n                }\r\n            }\r\n\r\n            th,\r\n            td {\r\n                height: 41px;\r\n                padding: 0 10px;\r\n                font-size: 12px;\r\n                font-weight: normal;\r\n                line-height: 20px;\r\n                text-align: left;\r\n                border-bottom: 1px solid #e7e8ed;\r\n\r\n                &:first-child {\r\n                    padding-left: 60px;\r\n                }\r\n            }\r\n\r\n            th {\r\n                color: #313238;\r\n                white-space: nowrap;\r\n                background: #f5f6fa;\r\n            }\r\n\r\n            td {\r\n                word-break: break-all;\r\n            }\r\n\r\n            .table-cell {\r\n                position: relative;\r\n\r\n                .repeat,\r\n                .invalid {\r\n                    position: absolute;\r\n                    top: 10px;\r\n                    height: 18px;\r\n                    padding: 0 5px;\r\n                    margin-left: -6px;\r\n                    font-size: 12px;\r\n                    line-height: 18px;\r\n                    text-align: center;\r\n                    border-radius: 2px;\r\n                    transform: translateX(-100%);\r\n                }\r\n\r\n                .repeat {\r\n                    color: #fff;\r\n                    background: #fe9c00;\r\n                }\r\n\r\n                .invalid {\r\n                    color: #979ba5;\r\n                    background: #f0f1f5;\r\n                }\r\n            }\r\n\r\n            .cell-text {\r\n                /* stylelint-disable value-no-vendor-prefix */\r\n                display: -webkit-box;\r\n                overflow: hidden;\r\n                text-overflow: ellipsis;\r\n                word-break: break-all;\r\n                white-space: normal;\r\n                -webkit-box-orient: vertical;\r\n                -webkit-line-clamp: 2;\r\n            }\r\n        }\r\n\r\n        .bk-button-text {\r\n            font-size: 12px;\r\n        }\r\n\r\n        .action-column {\r\n            width: 90px;\r\n            padding-right: 20px;\r\n            text-align: right;\r\n        }\r\n\r\n        .loading-status {\r\n            font-size: 16px;\r\n            color: #3a84ff;\r\n            vertical-align: middle;\r\n            animation: rotate-loading 1s linear infinite;\r\n        }\r\n\r\n        .list-more {\r\n            height: 40px;\r\n            font-size: 12px;\r\n            line-height: 40px;\r\n            color: #63656e;\r\n            text-align: center;\r\n            cursor: pointer;\r\n            border-top: 1px solid #e7e8ed;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"server-panel-dropdown-menu\" @click.stop=\"\" @mouseleave=\"handleHide\">\r\n        <slot />\r\n        <div class=\"server-dropdown-menu-content\" ref=\"popoverContent\" @mouseover=\"handleShow\" @mouseleave=\"handleClose\">\r\n            <slot name=\"menu\" />\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    const instanceMap = {};\r\n\r\n    export default {\r\n        name: 'JbPopoverConfirm',\r\n        created () {\r\n            this.id = `dropdown_menu_${Math.random()}_${Math.random()}`;\r\n        },\r\n        mounted () {\r\n            this.init();\r\n        },\r\n        beforeDestroy () {\r\n            instanceMap[this.id].hide();\r\n            delete instanceMap[this.id];\r\n        },\r\n        methods: {\r\n            init () {\r\n                instanceMap[this.id] = this.$bkPopover(this.$el, {\r\n                    theme: 'server-panel-dropdown-menu-popover',\r\n                    interactive: true,\r\n                    placement: 'bottom-start',\r\n                    content: this.$refs.popoverContent,\r\n                    trigger: 'mouseover',\r\n                    arrow: true,\r\n                    onShow: () => {\r\n                        Object.keys(instanceMap).forEach((key) => {\r\n                            if (key !== this.id) {\r\n                                instanceMap[key].hide();\r\n                            }\r\n                        });\r\n                    },\r\n                });\r\n            },\r\n            handleHide () {\r\n                this.leaveTimer = setTimeout(() => {\r\n                    instanceMap[this.id].hide();\r\n                }, 2000);\r\n            },\r\n            handleShow () {\r\n                clearTimeout(this.leaveTimer);\r\n            },\r\n            handleClose () {\r\n                instanceMap[this.id].hide();\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .server-panel-dropdown-menu {\r\n        display: inline-flex;\r\n        align-items: center;\r\n        font-size: 20px;\r\n        cursor: pointer;\r\n    }\r\n\r\n    .server-panel-dropdown-menu-popover-theme {\r\n        padding: 0 !important;\r\n\r\n        .tippy-arrow {\r\n            display: none;\r\n        }\r\n\r\n        .server-dropdown-menu-content {\r\n            width: 93px;\r\n            padding: 10px 0;\r\n            font-size: 14px;\r\n            line-height: 32px;\r\n            color: #63656e;\r\n            text-align: center;\r\n            background: #fff;\r\n            border: 1px solid #f0f1f5;\r\n            box-shadow: 0 1px 1px 0 rgb(185 203 222 / 50%);\r\n\r\n            .dropdown-menu-item {\r\n                cursor: pointer;\r\n\r\n                &:hover,\r\n                &.active {\r\n                    color: #3a84ff;\r\n                    background: #e5efff;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n</style>\r\n","<template>\r\n    <div class=\"choose-ip-business-topology\">\r\n        <div class=\"topology-data\" v-bkloading=\"{ isLoading: topologyLoading }\">\r\n            <div class=\"topology-node-search\">\r\n                <bk-input\r\n                    :placeholder=\"'搜索拓扑节点'\"\r\n                    right-icon=\"bk-icon icon-search\"\r\n                    @input=\"handleNodeSearch\" />\r\n            </div>\r\n            <div class=\"topology-node-tree\">\r\n                <scroll-faker>\r\n                    <div class=\"wraper\">\r\n                        <bk-big-tree\r\n                            ref=\"tree\"\r\n                            show-link-line\r\n                            selectable\r\n                            :expand-on-click=\"false\"\r\n                            @select-change=\"handleNodeChange\">\r\n                            <div class=\"node-box\" slot-scope=\"{ node, data }\">\r\n                                <div class=\"node-name\">{{ node.name }}</div>\r\n                                <div\r\n                                    v-if=\"node.level === 0\"\r\n                                    class=\"node-filter\"\r\n                                    @click=\"handleFilterEmptyToggle\">\r\n                                    <template v-if=\"isRenderEmptyTopoNode\">\r\n                                        <Icon type=\"eye-slash-shape\" />\r\n                                        <span>{{ '隐藏空节点' }}</span>\r\n                                    </template>\r\n                                    <template v-else>\r\n                                        <Icon type=\"eye-shape\" />\r\n                                        <span>{{ '恢复完整拓扑' }}</span>\r\n                                    </template>\r\n                                </div>\r\n                                <div class=\"node-count\">{{ data.payload.count }}</div>\r\n                            </div>\r\n                        </bk-big-tree>\r\n                    </div>\r\n                </scroll-faker>\r\n            </div>\r\n            <empty v-if=\"isNodeEmpty\" class=\"topology-empty\" />\r\n        </div>\r\n        <div class=\"host-list\">\r\n            <mult-input\r\n                :placeholder=\"'输入 主机 IP / 主机名 / 操作系统 / 云区域 进行搜索...'\"\r\n                class=\"host-search\"\r\n                @input=\"handleHostSearch\" />\r\n            <host-table\r\n                :list=\"renderList\"\r\n                :is-search=\"isSearch\"\r\n                v-bkloading=\"{ isLoading }\">\r\n                <thead>\r\n                    <tr>\r\n                        <th style=\"width: 10.2%;\">\r\n                            <bk-checkbox\r\n                                :value=\"isCheckedAll\"\r\n                                @click.native=\"handleToggleWholeAll\" />\r\n                        </th>\r\n                        <th style=\"width: 18.9%;\">{{ '主机IP' }}</th>\r\n                        <th style=\"width: 12.8%;\">{{ '云区域' }}</th>\r\n                        <th style=\"width: 13.4%;\">\r\n                            <div\r\n                                class=\"head-cell\"\r\n                                :class=\"{\r\n                                    'is-filtered': agentFilter !== '',\r\n                                }\">\r\n                                <span>{{ 'Agent 状态' }}</span>\r\n                                <dropdown-menu>\r\n                                    <Icon type=\"filter-fill\" class=\"filer-flag\" />\r\n                                    <div slot=\"menu\">\r\n                                        <div\r\n                                            class=\"dropdown-menu-item\"\r\n                                            :class=\"{ active: agentFilter === '' }\"\r\n                                            @click=\"handleAgentFiler('')\">\r\n                                            {{ '全部' }}\r\n                                        </div>\r\n                                        <div\r\n                                            class=\"dropdown-menu-item\"\r\n                                            :class=\"{ active: agentFilter === 0 }\"\r\n                                            @click=\"handleAgentFiler(0)\">\r\n                                            {{ '异常' }}\r\n                                        </div>\r\n                                        <div\r\n                                            class=\"dropdown-menu-item\"\r\n                                            :class=\"{ active: agentFilter === 1 }\"\r\n                                            @click=\"handleAgentFiler(1)\">\r\n                                            {{ '正常' }}\r\n                                        </div>\r\n                                    </div>\r\n                                </dropdown-menu>\r\n                            </div>\r\n                        </th>\r\n                        <th>{{ '主机名' }}</th>\r\n                        <th style=\"width: 14.7%;\">{{ '操作系统名称' }}</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody v-if=\"renderList.length > 0\">\r\n                    <template v-for=\"(row, index) in renderList\">\r\n                        <tr\r\n                            class=\"host-row\"\r\n                            :key=\"`${row.realId}_${index}`\"\r\n                            @click=\"handleHostCheck(row)\">\r\n                            <td>\r\n                                <bk-checkbox :checked=\"!!checkedMap[row.realId]\" />\r\n                            </td>\r\n                            <td>\r\n                                <div class=\"cell-text\">{{ row.displayIp }}</div>\r\n                            </td>\r\n                            <td>\r\n                                <div class=\"cell-text\">{{ row.cloudAreaInfo.name || '--' }}</div>\r\n                            </td>\r\n                            <td>\r\n                                <span v-if=\"row.alive\">\r\n                                    <icon svg type=\"normal\" style=\"vertical-align: middle;\" />\r\n                                    <span style=\"vertical-align: middle;\">{{ '正常' }}</span>\r\n                                </span>\r\n                                <span v-else>\r\n                                    <icon svg type=\"abnormal\" style=\"vertical-align: middle;\" />\r\n                                    <span style=\"vertical-align: middle;\">{{ '异常' }}</span>\r\n                                </span>\r\n                            </td>\r\n                            <td>\r\n                                <div class=\"cell-text\">{{ row.ipDesc || '--' }}</div>\r\n                            </td>\r\n                            <td>\r\n                                <div class=\"cell-text\">{{ row.os || '--' }}</div>\r\n                            </td>\r\n                        </tr>\r\n                    </template>\r\n                </tbody>\r\n            </host-table>\r\n            <div v-if=\"pagination.pageSize > 0\" style=\"padding: 16px 0;\">\r\n                <bk-pagination\r\n                    align=\"right\"\r\n                    show-total-count\r\n                    :show-limit=\"false\"\r\n                    :count=\"pagination.total\"\r\n                    :limit=\"pagination.pageSize\"\r\n                    :current.sync=\"pagination.page\"\r\n                    :limit-list=\"[pagination.pageSize]\"\r\n                    @change=\"handlePageChange\"\r\n                    small />\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n    import AppManageService from '@service/app-manage';\r\n    import UserService from '@service/user';\r\n    import { topoNodeCache } from '@utils/cache-helper';\r\n    import Empty from '@components/empty';\r\n    import {\r\n        generateHostRealId,\r\n        parseIdInfo,\r\n        filterTopology,\r\n    } from './utils';\r\n    import MultInput from './mult-input';\r\n    import HostTable from './host-table';\r\n    import DropdownMenu from './dropdown-menu';\r\n\r\n    const ROOT_NODE_ID = `#${window.PROJECT_CONFIG.SCOPE_TYPE}#${window.PROJECT_CONFIG.SCOPE_ID}`;\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            Empty,\r\n            MultInput,\r\n            HostTable,\r\n            DropdownMenu,\r\n        },\r\n        inheritAttrs: false,\r\n        props: {\r\n            topologyNodeTree: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n            topologyLoading: {\r\n                type: Boolean,\r\n                default: true,\r\n            },\r\n            ipList: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n            dialogHeight: {\r\n                type: Number,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            this.selfChange = false;\r\n            return {\r\n                isLoading: true,\r\n                isNodeEmpty: false,\r\n                // 展示空的拓扑节点\r\n                isRenderEmptyTopoNode: false,\r\n                // 登录用户\r\n                currentUser: {},\r\n                selectedNodeId: ROOT_NODE_ID,\r\n                renderList: [{},{},{}],\r\n                checkedMap: {},\r\n                isCheckedAll: false,\r\n                searchContent: '',\r\n                agentFilter: '',\r\n                pagination: {\r\n                    total: 0,\r\n                    page: 1,\r\n                    pageSize: 0,\r\n                },\r\n            };\r\n        },\r\n        computed: {\r\n            /**\r\n             * @desc 表格的全选状态\r\n             */\r\n            pageCheckInfo () {\r\n                const info = {\r\n                    indeterminate: false,\r\n                    checked: false,\r\n                };\r\n                const checkedNums = Object.keys(this.checkedMap).length;\r\n                info.indeterminate = checkedNums > 0;\r\n                info.checked = checkedNums > 0 && checkedNums >= this.pagination.total;\r\n                \r\n                return info;\r\n            },\r\n            isSearch () {\r\n                return [\r\n                    0, 1,\r\n                ].includes(this.agentFilter) || !!this.searchContent;\r\n            },\r\n        },\r\n        watch: {\r\n            /**\r\n             * @desc 选中的主机更新\r\n             */\r\n            ipList: {\r\n                handler (ipList) {\r\n                    if (this.selfChange) {\r\n                        this.selfChange = false;\r\n                        return;\r\n                    }\r\n                    const checkedMap = {};\r\n                    ipList.forEach((host) => {\r\n                        checkedMap[host.realId] = host;\r\n                    });\r\n                    this.pagination.page = 1;\r\n                    this.checkedMap = Object.freeze(checkedMap);\r\n                },\r\n                immediate: true,\r\n            },\r\n            topologyLoading (topologyLoading) {\r\n                if (!topologyLoading) {\r\n                    this.resetTopoTree();\r\n                }\r\n            },\r\n        },\r\n        created () {\r\n            this.fetchUserInfo();\r\n        },\r\n        mounted () {\r\n            this.calcPageSize();\r\n            // 根节点 ID 默认已知，主动拉取节点下面的主机\r\n            this.fetchTopologyHost();\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 获取登陆用户信息\r\n             */\r\n            fetchUserInfo () {\r\n                UserService.fetchUserInfo()\r\n                    .then((data) => {\r\n                        this.currentUser = Object.freeze(data);\r\n                        this.isRenderEmptyTopoNode = topoNodeCache.getItem(data.username);\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 获取拓扑节点下的主机列表\r\n             */\r\n            fetchTopologyHost: _.throttle(function () {\r\n                if (!this.selectedNodeId) {\r\n                    return;\r\n                }\r\n                const [objectId, instanceId] = parseIdInfo(this.selectedNodeId);\r\n                const { page, pageSize } = this.pagination;\r\n                this.isLoading = true;\r\n                AppManageService.fetchTopologyHost({\r\n                    appTopoNodeList: [{\r\n                        objectId,\r\n                        instanceId,\r\n                    },\r\n                    ],\r\n                    agentStatus: this.agentFilter,\r\n                    searchContent: this.searchContent,\r\n                    pageSize,\r\n                    start: (page - 1) * pageSize,\r\n                }).then((data) => {\r\n                    this.renderList = Object.freeze(data.data.map(host => Object.assign({\r\n                        realId: generateHostRealId(host),\r\n                    }, host)));\r\n                    this.pagination.total = data.total;\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            }, 300),\r\n            /**\r\n             * @desc 权限时获取拓扑节点下的所有主机\r\n             * @param {Boolean} check 列表全选状态\r\n             */\r\n            fetchTopologyHostWhole: _.throttle(function (check) {\r\n                if (!this.selectedNodeId) {\r\n                    return;\r\n                }\r\n                const [\r\n                    objectId,\r\n                    instanceId,\r\n                ] = parseIdInfo(this.selectedNodeId);\r\n                const checkedMap = {\r\n                    ...this.checkedMap,\r\n                };\r\n                this.isLoading = true;\r\n                AppManageService.fetchTopogyIPs({\r\n                    appTopoNodeList: [{\r\n                        objectId,\r\n                        instanceId,\r\n                    },\r\n                    ],\r\n                    agentStatus: this.agentFilter,\r\n                    searchContent: this.searchContent,\r\n                }).then((data) => {\r\n                    const list = data.data;\r\n                    list.forEach((realId) => {\r\n                        const [\r\n                            cloudAreaId,\r\n                            ip,\r\n                        ] = realId.split(':');\r\n                        if (check) {\r\n                            checkedMap[realId] = {\r\n                                ip,\r\n                                cloudAreaInfo: {\r\n                                    id: cloudAreaId,\r\n                                },\r\n                                realId,\r\n                            };\r\n                        } else {\r\n                            delete checkedMap[realId];\r\n                        }\r\n                    });\r\n                    this.checkedMap = Object.freeze(checkedMap);\r\n                    this.triggerChange();\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            }, 300),\r\n            /**\r\n             * @desc 初始化拓扑树\r\n             * @param {Array} expandIds 需要展开的节点\r\n             * @param {Boolean} emitEvent 选中节点时触发选中事件\r\n             */\r\n            resetTopoTree (expandIds, emitEvent = false) {\r\n                const topologyNodeTree = filterTopology(this.topologyNodeTree, this.isRenderEmptyTopoNode);\r\n                const expandIdArr = expandIds && expandIds.length > 0 ? expandIds : [this.selectedNodeId];\r\n                this.$refs.tree.setData(topologyNodeTree);\r\n                this.$nextTick(() => {\r\n                    if (topologyNodeTree.length < 1) {\r\n                        return;\r\n                    }\r\n                    this.$refs.tree.setSelected(this.selectedNodeId, {\r\n                        emitEvent,\r\n                    });\r\n                    expandIdArr.forEach((nodeId) => {\r\n                        this.$refs.tree.setExpanded(nodeId);\r\n                    });\r\n                });\r\n            },\r\n            /**\r\n             * @desc 计算PageSize\r\n             */\r\n            calcPageSize () {\r\n                const topOffset = 154;\r\n                const bottomOffset = 116;\r\n                const pageSize = Math.floor((this.dialogHeight - topOffset - bottomOffset) / 41);\r\n                this.pagination.pageSize = pageSize;\r\n            },\r\n            /**\r\n             * @desc 更新静态ip值\r\n             */\r\n            triggerChange () {\r\n                this.selfChange = true;\r\n                this.$emit('on-change', 'ipList', Object.values(this.checkedMap));\r\n            },\r\n            /**\r\n             * @desc 切换拓扑树中主机为空的节点\r\n             *\r\n             * 缓存状态，切换过程中保持节点的展开状态\r\n             */\r\n            handleFilterEmptyToggle (event) {\r\n                this.isRenderEmptyTopoNode = !this.isRenderEmptyTopoNode;\r\n                const selectNode = this.$refs.tree.getNodeById(this.selectedNodeId);\r\n                if (this.isRenderEmptyTopoNode) {\r\n                    // 显示所有节点，节点的选中状态不变\r\n                    event.stopPropagation();\r\n                    topoNodeCache.clearItem();\r\n                } else {\r\n                    // 隐藏空节点时，如果已选的节点将被隐藏自动切换为选中根节点\r\n                    if (selectNode.data.payload.count < 1) {\r\n                        this.selectedNodeId = ROOT_NODE_ID;\r\n                    } else {\r\n                        event.stopPropagation();\r\n                    }\r\n                    topoNodeCache.setItem(this.currentUser.username);\r\n                }\r\n                // 更新节点树时保留树中节点的展开状态\r\n                const expandIdArr = this.$refs.tree.nodes.reduce((result, node) => {\r\n                    if (node.expanded) {\r\n                        result.push(node.id);\r\n                    }\r\n                    return result;\r\n                }, []);\r\n                \r\n                this.resetTopoTree(expandIdArr, true);\r\n            },\r\n            /**\r\n             * @desc 搜索拓扑节点\r\n             * @param {String} value 筛选字符\r\n             */\r\n            handleNodeSearch: _.debounce(function (value) {\r\n                const data = this.$refs.tree.filter(value);\r\n                if (data.length > 0) {\r\n                    this.$nextTick(() => {\r\n                        this.$refs.tree.setSelected(data[0].id, {\r\n                            emitEvent: true,\r\n                        });\r\n                    });\r\n                }\r\n                this.isNodeEmpty = data.length < 1;\r\n            }, 300),\r\n            /**\r\n             * @desc 拓扑节点改变\r\n             * @param {Object} node 最新选中的拓扑节点\r\n             *\r\n             * 节点切换时重新拉取主机列表\r\n             */\r\n            handleNodeChange (node) {\r\n                this.selectedNodeId = node.id;\r\n                this.pagination.page = 1;\r\n                if (!node.expanded) {\r\n                    this.$refs.tree.setExpanded(this.selectedNodeId, {\r\n                        expanded: true,\r\n                    });\r\n                }\r\n                this.fetchTopologyHost();\r\n            },\r\n            /**\r\n             * @desc 搜索主机\r\n             * @param {String} str 筛选字符\r\n             */\r\n            handleHostSearch: _.debounce(function (str) {\r\n                const value = _.trim(str);\r\n                \r\n                // 前后两次搜索内容相同直接返回\r\n                if (this.searchContent === value) {\r\n                    return;\r\n                }\r\n                \r\n                // 搜索框内容为空格换行等空白符直接用空字符串搜索\r\n                const realValue = value.replace(/\\s/g, '');\r\n                this.searchContent = realValue ? value : '';\r\n                \r\n                this.pagination.page = 1;\r\n                this.fetchTopologyHost();\r\n            }, 300),\r\n            /**\r\n             * @desc Agent状态筛选\r\n             * @param {String} type 筛选字符\r\n             */\r\n            handleAgentFiler (type) {\r\n                this.pagination.page = 1;\r\n                this.agentFilter = type;\r\n                this.fetchTopologyHost();\r\n            },\r\n            /**\r\n             * @desc 全选节点下的所有主机\r\n             */\r\n            handleToggleWholeAll () {\r\n                this.isCheckedAll = !this.isCheckedAll;\r\n                this.fetchTopologyHostWhole(this.isCheckedAll);\r\n            },\r\n            /**\r\n             * @desc 选择单台主机\r\n             * @param {Object} host 主机信息\r\n             */\r\n            handleHostCheck (host) {\r\n                const checkedMap = Object.assign({}, this.checkedMap);\r\n                if (checkedMap[host.realId]) {\r\n                    delete checkedMap[host.realId];\r\n                } else {\r\n                    checkedMap[host.realId] = {\r\n                        ip: host.ip,\r\n                        cloudAreaInfo: {\r\n                            id: host.cloudAreaInfo.id,\r\n                        },\r\n                        realId: host.realId,\r\n                    };\r\n                }\r\n                this.checkedMap = Object.freeze(checkedMap);\r\n                this.triggerChange();\r\n            },\r\n            /**\r\n             * @desc 切换分页\r\n             * @param {Number} page 页码\r\n             */\r\n            handlePageChange (page) {\r\n                this.pagination.page = page;\r\n                this.fetchTopologyHost();\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .choose-ip-business-topology {\r\n        display: flex;\r\n        height: 100%;\r\n        padding-top: 20px;\r\n\r\n        .topology-data {\r\n            position: relative;\r\n            height: 100%;\r\n            overflow: hidden;\r\n            border-right: 1px solid #dcdee5;\r\n            flex: 0 0 33%;\r\n\r\n            .topology-node-search {\r\n                position: relative;\r\n                z-index: 1;\r\n                padding: 0 24px 20px;\r\n            }\r\n\r\n            .topology-node-tree {\r\n                height: calc(100% - 72px);\r\n\r\n                .wraper {\r\n                    padding-right: 24px;\r\n                    margin-left: 24px;\r\n                }\r\n\r\n                .bk-big-tree {\r\n                    overflow: unset;\r\n\r\n                    .bk-big-tree-node .node-content {\r\n                        overflow: unset;\r\n                    }\r\n\r\n                    .node-name {\r\n                        overflow: hidden;\r\n                        text-overflow: ellipsis;\r\n                        white-space: nowrap;\r\n                        flex: 0 1 auto;\r\n                    }\r\n                }\r\n            }\r\n\r\n            .topology-empty {\r\n                position: absolute;\r\n                top: 0;\r\n                right: 0;\r\n                bottom: 0;\r\n                left: 0;\r\n            }\r\n        }\r\n\r\n        .host-list {\r\n            flex: 2;\r\n            padding: 0 24px;\r\n\r\n            table {\r\n                th,\r\n                td {\r\n                    &:first-child {\r\n                        padding-left: 15px;\r\n                    }\r\n                }\r\n            }\r\n\r\n            .head-cell {\r\n                &.is-filtered {\r\n                    .filer-flag {\r\n                        color: #63656e;\r\n                    }\r\n                }\r\n            }\r\n\r\n            .host-search {\r\n                margin-bottom: 20px;\r\n            }\r\n\r\n            .check-flag {\r\n                font-size: 20px;\r\n                color: #63656e;\r\n            }\r\n\r\n            .filer-flag {\r\n                font-size: 12px;\r\n                color: #c4c6cc;\r\n            }\r\n\r\n            .host-row {\r\n                cursor: pointer;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div\r\n        class=\"choose-ip-dinamic-business-topology\"\r\n        v-bkloading=\"{\r\n            isLoading: topologyLoading,\r\n        }\">\r\n        <div class=\"node-search\">\r\n            <bk-input\r\n                :placeholder=\"'搜索拓扑节点'\"\r\n                right-icon=\"bk-icon icon-search\"\r\n                @input=\"handleSearch\" />\r\n        </div>\r\n        <empty v-if=\"emptyTopologyOfAllBusiness\" />\r\n        <template v-else>\r\n            <empty v-show=\"isSearchEmpty\" class=\"topology-empty\" />\r\n            <div class=\"topology-node-tree\">\r\n                <scroll-faker>\r\n                    <bk-big-tree\r\n                        ref=\"tree\"\r\n                        show-link-line\r\n                        show-checkbox\r\n                        :expand-on-click=\"false\"\r\n                        @check-change=\"handleCheckChange\">\r\n                        <div class=\"node-box\" slot-scope=\"{ node: nodeItem, data }\">\r\n                            <div class=\"node-name\">{{ data.name }}</div>\r\n                            <div\r\n                                v-if=\"nodeItem.level === 0\"\r\n                                class=\"node-filter\"\r\n                                @click=\"handleFilterEmptyToggle\">\r\n                                <template v-if=\"isRenderEmptyTopoNode\">\r\n                                    <Icon type=\"eye-slash-shape\" />\r\n                                    <span>{{ '隐藏空节点' }}</span>\r\n                                </template>\r\n                                <template v-else>\r\n                                    <Icon type=\"eye-shape\" />\r\n                                    <span>{{ '恢复完整拓扑' }}</span>\r\n                                </template>\r\n                            </div>\r\n                            <div class=\"node-count\">{{ data.payload.count }}</div>\r\n                        </div>\r\n                    </bk-big-tree>\r\n                </scroll-faker>\r\n            </div>\r\n            \r\n        </template>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n    import UserService from '@service/user';\r\n    import { topoNodeCache } from '@utils/cache-helper';\r\n    import Empty from '@components/empty';\r\n    import {\r\n        findAllChildNodeId,\r\n        resetTree,\r\n        parseIdInfo,\r\n        filterTopology,\r\n    } from './utils';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            Empty,\r\n        },\r\n        inheritAttrs: false,\r\n        props: {\r\n            topologyNodeTree: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n            topologyLoading: {\r\n                type: Boolean,\r\n                default: true,\r\n            },\r\n            topoNodeList: {\r\n                type: Array,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                currentUser: {},\r\n                isRenderEmptyTopoNode: false,\r\n                isSearchEmpty: false,\r\n                // 业务集下没有动态拓扑\r\n                emptyTopologyOfAllBusiness: window.PROJECT_CONFIG.SCOPE_TYPE === 'biz_set',\r\n            };\r\n        },\r\n        watch: {\r\n            /**\r\n             * @desc 更新 topo 树节点的选中状态\r\n             */\r\n            topoNodeList (newTopoNodeList, oldTopoNodeList) {\r\n                if (this.isSelfChange) {\r\n                    this.isSelfChange = false;\r\n                    return;\r\n                }\r\n                // 没有选中的节点时重置 topo 树节点的所有状态\r\n                if (newTopoNodeList.length < 1) {\r\n                    resetTree(this.topologyNodeTree, (node) => {\r\n                        this.$refs.tree.setChecked(node.id, {\r\n                            checked: false,\r\n                        });\r\n                        this.$refs.tree.setDisabled(node.id, {\r\n                            disabled: false,\r\n                        });\r\n                    });\r\n                    return;\r\n                }\r\n                this.recoverTreeState(newTopoNodeList, oldTopoNodeList);\r\n            },\r\n        },\r\n        created () {\r\n            this.isSelfChange = false;\r\n            this.isTreeRefresh = false;\r\n            this.fetchUserInfo();\r\n        },\r\n        mounted () {\r\n            if (this.emptyTopologyOfAllBusiness) {\r\n                return;\r\n            }\r\n            this.$nextTick(() => {\r\n                this.$refs.tree.setData(this.topologyNodeTree);\r\n                this.$refs.tree.setExpanded(this.topologyNodeTree[0].id, {\r\n                    expanded: true,\r\n                });\r\n                this.recoverTreeState(this.topoNodeList);\r\n            });\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 获取登陆用户信息\r\n             */\r\n            fetchUserInfo () {\r\n                UserService.fetchUserInfo()\r\n                    .then((data) => {\r\n                        this.currentUser = Object.freeze(data);\r\n                        this.isRenderEmptyTopoNode = topoNodeCache.getItem(data.username);\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 节点的选中状态改变\r\n             * @param {Array} newNode 最新选中的节点值\r\n             * @param {Array} oldNode 上次选中的节点值\r\n             *\r\n             * 外部传入值还原树的选中状态\r\n             */\r\n            recoverTreeState (newTopoNodeList, oldTopoNodeList = []) {\r\n                this.isSearchEmpty = this.topologyNodeTree.length < 1;\r\n                const isRemove = newTopoNodeList.length < oldTopoNodeList.length;\r\n                const oldNodeId = oldTopoNodeList.map(item => `#${item.type}#${item.id}`);\r\n                const newNodeId = newTopoNodeList.map(item => `#${item.type}#${item.id}`);\r\n                \r\n                if (isRemove) {\r\n                    // 外部删除操作\r\n                    const needRemoveCheckNode = _.difference(oldNodeId, newNodeId);\r\n                    this.isTreeRefresh = true;\r\n                    this.$refs.tree.setChecked(needRemoveCheckNode, {\r\n                        emitEvent: true,\r\n                        checked: false,\r\n                    });\r\n                } else {\r\n                    // 新增，只能出现在初始化的时候\r\n                    const needSelectNode = newNodeId;\r\n                    if (needSelectNode.length > 0) {\r\n                        this.isTreeRefresh = true;\r\n                        this.$refs.tree.setChecked(needSelectNode, {\r\n                            emitEvent: true,\r\n                            checked: true,\r\n                        });\r\n                    }\r\n                }\r\n            },\r\n            \r\n            handleFilterEmptyToggle (event) {\r\n                this.isRenderEmptyTopoNode = !this.isRenderEmptyTopoNode;\r\n                if (this.isRenderEmptyTopoNode) {\r\n                    // 显示所有节点，节点的选中状态不变\r\n                    event.stopPropagation();\r\n                    topoNodeCache.clearItem();\r\n                } else {\r\n                    topoNodeCache.setItem(this.currentUser.username);\r\n                }\r\n                // 更新节点树时保留树中节点的展开状态\r\n                const expandIdListMemo = this.$refs.tree.nodes.reduce((result, node) => {\r\n                    if (node.expanded) {\r\n                        result.push(node.id);\r\n                    }\r\n                    return result;\r\n                }, []);\r\n                // 过滤 topo 树\r\n                const topologyNodeTree = filterTopology(this.topologyNodeTree, this.isRenderEmptyTopoNode);\r\n                // 重新渲染 topo 树\r\n                this.$refs.tree.setData(topologyNodeTree);\r\n                this.$nextTick(() => {\r\n                    if (topologyNodeTree.length < 1) {\r\n                        return;\r\n                    }\r\n                    // 还原选中状态\r\n                    this.$refs.tree.setChecked(this.topoNodeList.map(item => `#${item.type}#${item.id}`), {\r\n                        emitEvent: false,\r\n                    });\r\n                    // 还原展开状态\r\n                    expandIdListMemo.forEach((nodeId) => {\r\n                        this.$refs.tree.setExpanded(nodeId);\r\n                    });\r\n                });\r\n            },\r\n            /**\r\n             * @desc 节点的选中状态改变\r\n             * @param {Array} allCheckNode 所有选中的节点\r\n             * @param {Object} node 当前操作的节点\r\n             */\r\n            handleCheckChange (allCheckNode, node) {\r\n                const filterCheckNode = (nodeList) => {\r\n                    const expireNodeMap = {};\r\n                    if (nodeList.length < 1) {\r\n                        return [];\r\n                    }\r\n                    const search = (list) => {\r\n                        let currentNode = null;\r\n                        let index = 0;\r\n                        while (index < list.length) {\r\n                            const currentNodeId = list[index];\r\n                            currentNode = this.$refs.tree.getNodeById(currentNodeId);\r\n                            if (!expireNodeMap[currentNodeId]) {\r\n                                break;\r\n                            }\r\n                            // eslint-disable-next-line no-plusplus\r\n                            index++;\r\n                        }\r\n                        if (index >= list.length) {\r\n                            return list;\r\n                        }\r\n                        \r\n                        const currentNodeChildIds = findAllChildNodeId(currentNode);\r\n                        const validList = _.difference(list, currentNodeChildIds);\r\n                        expireNodeMap[currentNode.id] = true;\r\n                        return search(validList);\r\n                    };\r\n                    return search(nodeList);\r\n                };\r\n                // 如果父级节点和子节点同时被添加过滤掉子节点\r\n                const checkNodeIds = filterCheckNode(allCheckNode);\r\n\r\n                if (this.isTreeRefresh) {\r\n                    this.isSelfChange = false;\r\n                    this.isTreeRefresh = false;\r\n                    return;\r\n                }\r\n                this.isSelfChange = true;\r\n                this.$emit('on-change', 'topoNodeList', checkNodeIds.map((item) => {\r\n                    const [type, id] = parseIdInfo(item);\r\n                    return {\r\n                        type,\r\n                        id,\r\n                    };\r\n                }));\r\n            },\r\n            /**\r\n             * @desc 拓扑节点搜索\r\n             * @param {String} value 筛选值\r\n             */\r\n            handleSearch: _.debounce(function (value) {\r\n                if (this.emptyTopologyOfAllBusiness) {\r\n                    return;\r\n                }\r\n                const data = this.$refs.tree.filter(value);\r\n                this.isSearchEmpty = data.length < 1;\r\n            }, 300),\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .choose-ip-dinamic-business-topology {\r\n        position: relative;\r\n        height: 100%;\r\n        padding: 0 24px;\r\n\r\n        .node-search {\r\n            position: relative;\r\n            z-index: 1;\r\n            padding-top: 20px;\r\n        }\r\n\r\n        .topology-node-tree {\r\n            height: calc(100% - 92px);\r\n            margin-top: 20px;\r\n        }\r\n\r\n        .node-box {\r\n            .node-count {\r\n                margin-left: 8px !important;\r\n            }\r\n        }\r\n\r\n        .topology-empty {\r\n            position: absolute;\r\n            right: 0;\r\n            left: 0;\r\n            width: 100%;\r\n            margin-top: 90px;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"choose-ip-dynamic-group\" v-bkloading=\"{ isLoading }\">\r\n        <div class=\"group-search\">\r\n            <bk-input\r\n                :placeholder=\"'搜索分组名称'\"\r\n                right-icon=\"bk-icon icon-search\"\r\n                @input=\"handleGroupSearch\" />\r\n        </div>\r\n        <template v-if=\"!isLoading\">\r\n            <div v-if=\"hasNotGroup\" class=\"group-empty\">\r\n                {{ '无数据' }}，<a :href=\"CMDBCreateGroupUrl\" target=\"_blank\">{{ '去创建' }}</a>\r\n            </div>\r\n            <div v-else class=\"group-list\">\r\n                <host-table :list=\"renderList\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th style=\"width: 80px;\">\r\n                                <div class=\"head-cell\">\r\n                                    <bk-checkbox\r\n                                        v-bind=\"pageCheckInfo\"\r\n                                        @click.native=\"handleToggleWholeAll\" />\r\n                                </div>\r\n                            </th>\r\n                            <th style=\"width: 450px;\">{{ '分组名称' }}</th>\r\n                            <th>{{ '操作' }}</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody v-if=\"renderList.length > 0\">\r\n                        <template v-for=\"group in renderList\">\r\n                            <tr class=\"group-row\" :key=\"group.id\">\r\n                                <td @click=\"handleGroupCheck(group.id)\">\r\n                                    <bk-checkbox :checked=\"checkedMap[group.id]\" />\r\n                                </td>\r\n                                <td @click=\"handleGroupCheck(group.id)\">{{ group.name }}</td>\r\n                                <td>\r\n                                    <bk-button text @click=\"handlePreview(group)\">{{ '预览' }}</bk-button>\r\n                                </td>\r\n                            </tr>\r\n                        </template>\r\n                    </tbody>\r\n                </host-table>\r\n                <div v-if=\"pagination.pageSize > 0\" style=\"padding: 16px 0;\">\r\n                    <bk-pagination\r\n                        :count=\"pagination.total\"\r\n                        align=\"right\"\r\n                        show-total-count\r\n                        :show-limit=\"false\"\r\n                        :limit=\"pagination.pageSize\"\r\n                        :current.sync=\"pagination.page\"\r\n                        :limit-list=\"[pagination.pageSize]\"\r\n                        @change=\"handlePageChange\"\r\n                        small />\r\n                </div>\r\n            </div>\r\n        </template>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n    import AppService from '@service/app-manage';\r\n    import QueryGlobalSettingService from '@service/query-global-setting';\r\n    import {\r\n        encodeRegexp,\r\n    } from '@utils/assist';\r\n    import HostTable from './host-table';\r\n    \r\n    export default {\r\n        name: '',\r\n        components: {\r\n            HostTable,\r\n        },\r\n        inheritAttrs: false,\r\n        props: {\r\n            dynamicGroupList: {\r\n                type: Array,\r\n                required: true,\r\n            },\r\n            dialogHeight: {\r\n                type: Number,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            this.selfChange = false;\r\n            return {\r\n                isLoading: false,\r\n                isEmpty: false,\r\n                hasNotGroup: true,\r\n                list: [{},{},{}],\r\n                tempList: [{},{},{}],\r\n                checkedMap: {},\r\n                CMDBCreateGroupUrl: '',\r\n                pagination: {\r\n                    page: 1,\r\n                    pageSize: 0,\r\n                    total: 0,\r\n                },\r\n            };\r\n        },\r\n        computed: {\r\n            renderList  () {\r\n                const { page, pageSize } = this.pagination;\r\n                return Object.freeze(this.tempList.slice((page - 1) * pageSize, page * pageSize));\r\n            },\r\n            pageCheckInfo () {\r\n                const info = {\r\n                    indeterminate: false,\r\n                    checked: false,\r\n                };\r\n                const checkedNums = Object.keys(this.checkedMap).length;\r\n                info.indeterminate = checkedNums > 0;\r\n                info.checked = checkedNums > 0 && checkedNums >= this.pagination.total;\r\n                return info;\r\n            },\r\n        },\r\n        watch: {\r\n            dynamicGroupList: {\r\n                handler (dynamicGroupList) {\r\n                    if (this.selfChange) {\r\n                        this.selfChange = false;\r\n                        return;\r\n                    }\r\n                    const checkedMap = {};\r\n                    dynamicGroupList.forEach((groupId) => {\r\n                        checkedMap[groupId] = true;\r\n                    });\r\n                    this.pagination.page = 1;\r\n                    this.checkedMap = Object.freeze(checkedMap);\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        mounted () {\r\n            this.calcPageSize();\r\n            this.fetchDynamicGroup();\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 获取动态分组列表\r\n             *\r\n             * 动态分组列表为空可以跳转 cmdb 创建\r\n             */\r\n            fetchDynamicGroup () {\r\n                this.isLoading = true;\r\n                AppService.fetchDynamicGroup()\r\n                    .then((data) => {\r\n                        this.list = Object.freeze(data);\r\n                        this.tempList = Object.freeze(data);\r\n                        this.pagination.total = data.length;\r\n                        this.hasNotGroup = data.length < 1;\r\n                        if (this.hasNotGroup) {\r\n                            return this.fetchCMDBUrl();\r\n                        }\r\n                    })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 没有动态分组时可以去 cmdb 创建\r\n             */\r\n            fetchCMDBUrl () {\r\n                return QueryGlobalSettingService.fetchRelatedSystemUrls()\r\n                    .then((data) => {\r\n                        this.CMDBCreateGroupUrl = `${data.BK_CMDB_ROOT_URL}/#/business/${window.PROJECT_CONFIG.SCOPE_ID}/custom-query`;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 计算PageSize\r\n             */\r\n            calcPageSize () {\r\n                const topOffset = 154;\r\n                const bottomOffset = 116;\r\n                const pageSize = Math.floor((this.dialogHeight - topOffset - bottomOffset) / 40);\r\n                this.pagination.pageSize = pageSize;\r\n            },\r\n            /**\r\n             * @desc 动态分组值更新\r\n             */\r\n            trigger () {\r\n                this.selfChange = true;\r\n                this.$emit('on-change', 'dynamicGroupList', Object.keys(this.checkedMap));\r\n            },\r\n            /**\r\n             * @desc 本地搜索动态分组\r\n             * @param {String} value 搜索值\r\n             */\r\n            handleGroupSearch: _.debounce(function (value) {\r\n                if (!value.trim()) {\r\n                    this.tempList = this.list;\r\n                } else {\r\n                    const group = [];\r\n                    const searchRule = new RegExp(encodeRegexp(value), 'i');\r\n                    this.list.forEach((currentGroup) => {\r\n                        if (searchRule.test(currentGroup.name)) {\r\n                            group.push(currentGroup);\r\n                        }\r\n                    });\r\n                    this.tempList = Object.freeze(group);\r\n                }\r\n                \r\n                this.pagination.total = this.tempList.length;\r\n            }, 300),\r\n            /**\r\n             * @desc 列表跨页全选切换\r\n             */\r\n            handleToggleWholeAll () {\r\n                const checkedMap = {\r\n                    ...this.checkedMap,\r\n                };\r\n                const hasAllChecked = this.pageCheckInfo.checked;\r\n                this.tempList.forEach((current) => {\r\n                    if (!hasAllChecked) {\r\n                        checkedMap[current.id] = true;\r\n                    } else {\r\n                        delete checkedMap[current.id];\r\n                    }\r\n                });\r\n                this.checkedMap = Object.freeze(checkedMap);\r\n                this.trigger();\r\n            },\r\n            /**\r\n             * @desc 选中单个分组\r\n             * @param {Number} groupId\r\n             */\r\n            handleGroupCheck (groupId) {\r\n                const checkedMap = {\r\n                    ...this.checkedMap,\r\n                };\r\n                if (checkedMap[groupId]) {\r\n                    delete checkedMap[groupId];\r\n                } else {\r\n                    checkedMap[groupId] = true;\r\n                }\r\n                this.checkedMap = Object.freeze(checkedMap);\r\n                this.trigger();\r\n            },\r\n            /**\r\n             * @desc 预览单个分组的主机详情\r\n             * @param {Object} group\r\n             */\r\n            handlePreview (group) {\r\n                this.$emit('on-group-preview', {\r\n                    name: group.name,\r\n                    id: group.id,\r\n                });\r\n            },\r\n            /**\r\n             * @desc 列表翻页\r\n             * @param {Number} page\r\n             */\r\n            handlePageChange (page) {\r\n                this.pagination.page = page;\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .choose-ip-dynamic-group {\r\n        min-height: 100%;\r\n        padding: 20px 24px;\r\n\r\n        .group-empty {\r\n            margin-top: 180px;\r\n            text-align: center;\r\n        }\r\n\r\n        .group-list {\r\n            padding-top: 20px;\r\n\r\n            table {\r\n                th,\r\n                td {\r\n                    &:first-child {\r\n                        padding-left: 15px;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        .check-flag {\r\n            font-size: 20px;\r\n            color: #63656e;\r\n        }\r\n\r\n        .group-row {\r\n            cursor: pointer;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"choose-ip-server-ip-input\">\r\n        <div @click=\"handleInputClick\">\r\n            <bk-input\r\n                ref=\"input\"\r\n                type=\"textarea\"\r\n                :class=\"{\r\n                    'focus-error': isFocusError,\r\n                }\"\r\n                :rows=\"inputRows\"\r\n                :value=\"ipInputText\"\r\n                :placeholder=\"'请输入 IP 地址，多IP可用 空格 换行 ; , |分隔 \\n带云区域请用冒号分隔，如（ 0:192.168.1.101 ）'\"\r\n                @change=\"handleIPChange\" />\r\n        </div>\r\n        <div class=\"input-action\">\r\n            <div v-if=\"isError\" class=\"input-error\">\r\n                <div>{{ '以上内容存在错误：' }}</div>\r\n                <div v-if=\"invalidIPList.length > 0\">\r\n                    <span>{{ 'IP 在本业务下不存在' }}</span>\r\n                    <Icon\r\n                        type=\"ip-audit\"\r\n                        class=\"error-action\"\r\n                        v-bk-tooltips=\"'标识错误'\"\r\n                        @click=\"handleHighlightInvilad\" />\r\n                    <Icon\r\n                        type=\"delete\"\r\n                        class=\"error-action\"\r\n                        v-bk-tooltips=\"'一键清除'\"\r\n                        @click=\"handleRemoveInvalid\" />\r\n                </div>\r\n                <div v-if=\"invalidIPList.length > 0 && errorIPList.length > 0\">；</div>\r\n                <div v-if=\"errorIPList.length > 0\">\r\n                    <span>{{ '内容格式错误，无法识别' }}</span>\r\n                    <Icon\r\n                        type=\"ip-audit\"\r\n                        class=\"error-action\"\r\n                        v-bk-tooltips=\"'标识错误'\"\r\n                        @click=\"handleHightlightError\" />\r\n                    <Icon\r\n                        type=\"delete\"\r\n                        class=\"error-action\"\r\n                        v-bk-tooltips=\"'一键清除'\"\r\n                        @click=\"handleRemoveError\" />\r\n                </div>\r\n            </div>\r\n            <bk-button\r\n                class=\"submit-btn\"\r\n                theme=\"primary\"\r\n                outline\r\n                :loading=\"isSubmiting\"\r\n                @click=\"handleAddHost\">\r\n                <span>{{ '添加到已选择' }}</span>\r\n                <div\r\n                    v-if=\"inputItemList.length > 0\"\r\n                    ref=\"inputNumber\"\r\n                    class=\"server-input-number\">\r\n                    <span class=\"text\">{{ inputItemList.length }}</span>\r\n                </div>\r\n            </bk-button>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n    import AppManageService from '@service/app-manage';\r\n    import { encodeRegexp } from '@utils/assist';\r\n    import { generateHostRealId } from './utils';\r\n\r\n    export default {\r\n        name: '',\r\n        inheritAttrs: false,\r\n        props: {\r\n            previewId: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            dialogHeight: {\r\n                type: Number,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isSubmiting: false,\r\n                ipInputText: '',\r\n                inputItemList: [{},{},{}],\r\n                invalidIPList: [{},{},{}],\r\n                errorIPList: [{},{},{}],\r\n                isFocusError: false,\r\n            };\r\n        },\r\n        computed: {\r\n            inputRows () {\r\n                const offsetTop = 65;\r\n                const offsetBottom = 130;\r\n                const inputPadding = 15;\r\n\r\n                return Math.floor((this.dialogHeight - offsetTop - offsetBottom - inputPadding) / 18);\r\n            },\r\n            isError () {\r\n                return this.invalidIPList.length > 0 || this.errorIPList.length > 0;\r\n            },\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 更新输入框内容\r\n             */\r\n            updateInputValue () {\r\n                this.ipInputText = [\r\n                    ...this.invalidIPList,\r\n                    ...this.errorIPList,\r\n                ].join('\\n');\r\n                // fix: bk-input组件更新问题\r\n                setTimeout(() => {\r\n                    this.$refs.input.setCurValue(this.ipInputText);\r\n                });\r\n            },\r\n            /**\r\n             * @desc 用户点击输入框时切换选中文本样式\r\n             */\r\n            handleInputClick () {\r\n                this.isFocusError = false;\r\n            },\r\n            /**\r\n             * @desc 高亮输入框内无效的 IP 输入\r\n             */\r\n            handleHighlightInvilad () {\r\n                this.isFocusError = true;\r\n                const $inputEl = this.$refs.input.$el.querySelector('textarea');\r\n                const errorText = this.invalidIPList.join('\\n');\r\n                $inputEl.focus();\r\n                $inputEl.selectionStart = 0;\r\n                $inputEl.selectionEnd = errorText.length;\r\n            },\r\n            /**\r\n             * @desc 清空输入框内无效的 IP 输入\r\n             */\r\n            handleRemoveInvalid () {\r\n                this.invalidIPList = [];\r\n                this.updateInputValue();\r\n            },\r\n            /**\r\n             * @desc 高亮输入框内错误格式的 IP 输入\r\n             */\r\n            handleHightlightError () {\r\n                this.isFocusError = true;\r\n                const $inputEl = this.$refs.input.$el.querySelector('textarea');\r\n                $inputEl.focus();\r\n                const invalidText = this.invalidIPList.join('\\n');\r\n                const errorText = this.errorIPList.join('\\n');\r\n                const startIndex = invalidText.length > 0 ? invalidText.length + 1 : 0;\r\n                $inputEl.selectionStart = startIndex;\r\n                $inputEl.selectionEnd = startIndex + errorText.length;\r\n            },\r\n            /**\r\n             * @desc 清空输入框内错误格式的 IP 输入\r\n             */\r\n            handleRemoveError () {\r\n                this.errorIPList = [];\r\n                this.updateInputValue();\r\n            },\r\n            /**\r\n             * @desc 输入框值改变\r\n             * @param {String} value 用户输入值\r\n             */\r\n            handleIPChange: _.throttle(function (value) {\r\n                const realValue = _.trim(value);\r\n                this.invalidIPList = [];\r\n                this.errorIPList = [];\r\n                if (!realValue) {\r\n                    this.inputItemList = [];\r\n                    // 通知外部组件输入框没有值需要保存\r\n                    this.$emit('on-input-change', false);\r\n                } else {\r\n                    this.inputItemList = value.split(/[;,；，\\n|]+/).filter(_ => !!_);\r\n                    // 通知外部组件输入框有值还没被保存\r\n                    this.$emit('on-input-change', true);\r\n                }\r\n                // this.isError = false;\r\n            }, 60),\r\n            /**\r\n             * @desc 提交输入结果\r\n             */\r\n            handleAddHost () {\r\n                if (this.inputItemList.length < 1) {\r\n                    return;\r\n                }\r\n                const IPReg = /(((\\d+:)?)(?:(?:25[0-5]|2[0-4]\\d|((1\\d{2})|([1-9]?\\d)))\\.){3}(?:25[0-5]|2[0-4]\\d|((1\\d{2})|([1-9]?\\d))))/;\r\n                const ipList = [];\r\n                // 无法解析出 IP 的内容\r\n                const errorIPList = [];\r\n                this.inputItemList.forEach((IPText) => {\r\n                    const IPMatch = IPText.match(IPReg);\r\n                    if (IPMatch) {\r\n                        const [IPStr] = IPMatch;\r\n                        const errorIPRule = new RegExp(`([\\\\d:.]${encodeRegexp(IPStr)})|(${encodeRegexp(IPStr)}[\\\\d.])`);\r\n                        if (errorIPRule.test(IPText)) {\r\n                            // 无法完全正确的解析 IP（eq: 1.1.1.12.2.2.2，少了分隔造成的）\r\n                            errorIPList.push(IPText);\r\n                        } else {\r\n                            // 提取识别成功的 IP\r\n                            ipList.push(IPStr);\r\n                            // 将剩下的内容作为错误 IP 处理\r\n                            const errorText = IPText.replace(new RegExp(`(${encodeRegexp(IPStr)})|(\\\\s)`, 'g'), '');\r\n                            if (errorText) {\r\n                                errorIPList.push(errorText);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        // 输入内容中不包含 IP\r\n                        errorIPList.push(IPText);\r\n                    }\r\n                });\r\n                \r\n                this.isSubmiting = true;\r\n\r\n                const params = {\r\n                    ipList,\r\n                };\r\n                if (window.IPInputScope) {\r\n                    params.actionScope = window.IPInputScope;\r\n                }\r\n\r\n                AppManageService.fetchHostOfHost(params)\r\n                    .then((data) => {\r\n                        // 输入的有效 IP\r\n                        const hostList = [];\r\n                        const hostIPMap = {};\r\n                        \r\n                        data.forEach((host) => {\r\n                            const {\r\n                                ip,\r\n                                cloudAreaInfo,\r\n                            } = host;\r\n                            hostList.push({\r\n                                realId: generateHostRealId(host),\r\n                                ip,\r\n                                cloudAreaInfo: {\r\n                                    id: cloudAreaInfo.id,\r\n                                },\r\n                            });\r\n                            // 记录 IP 和 云区域 ID + IP 组成的检索\r\n                            hostIPMap[ip] = true;\r\n                            hostIPMap[`${cloudAreaInfo.id}:${ip}`] = true;\r\n                        });\r\n                        // 提交输入内容\r\n                        if (hostList.length > 0) {\r\n                            this.$emit('on-change', 'ipInput', hostList);\r\n                        }\r\n                        // 正确的 IP 输入，但是 IP 不存于当前业务下\r\n                        this.invalidIPList = ipList.reduce((result, IPItem) => {\r\n                            if (!hostIPMap[IPItem]) {\r\n                                result.push(IPItem);\r\n                            }\r\n                            return result;\r\n                        }, []);\r\n                        this.errorIPList = errorIPList;\r\n                        // 提交成功后重置用户输入内容的分隔符解析\r\n                        this.inputItemList = [];\r\n                        \r\n                        this.updateInputValue();\r\n                        this.$emit('on-input-change', false);\r\n                    })\r\n                    .finally(() => {\r\n                        this.isSubmiting = false;\r\n                    });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .choose-ip-server-ip-input {\r\n        padding: 20px 24px;\r\n\r\n        .focus-error {\r\n            textarea {\r\n                &::selection {\r\n                    color: #63656e;\r\n                    background: #fdd;\r\n                }\r\n            }\r\n        }\r\n\r\n        .input-action {\r\n            display: flex;\r\n            align-items: center;\r\n            margin-top: 20px;\r\n        }\r\n\r\n        .input-error {\r\n            display: flex;\r\n            margin-right: auto;\r\n            color: #ea3636;\r\n\r\n            .error-action {\r\n                font-size: 16px;\r\n                color: #63656e;\r\n                cursor: pointer;\r\n\r\n                &:hover {\r\n                    color: #3a84ff;\r\n                }\r\n            }\r\n        }\r\n\r\n        .submit-btn {\r\n            margin-left: auto;\r\n\r\n            &:hover {\r\n                .server-input-number .text {\r\n                    color: #3a84ff;\r\n                    background: #fff;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    .server-input-number,\r\n    .server-input-number .text {\r\n        transition: transform 0.5s;\r\n    }\r\n\r\n    .server-input-number {\r\n        position: relative;\r\n        z-index: 999999;\r\n        display: inline-block;\r\n        height: 17px;\r\n        transition-timing-function: cubic-bezier(0.74, 0.95, 0.81, 0.92);\r\n    }\r\n\r\n    .server-input-number .text {\r\n        display: inline-block;\r\n        height: 17px;\r\n        min-width: 17px;\r\n        padding: 0 4px;\r\n        font-size: 12px;\r\n        line-height: 17px;\r\n        color: #fff;\r\n        text-align: center;\r\n        background: #3a84ff;\r\n        border-radius: 8px;\r\n        transition-timing-function: cubic-bezier(0, -1.12, 0.94, -1.07);\r\n    }\r\n</style>\r\n","<template>\r\n    <span class=\"statistics-text\">\r\n        <template v-if=\"data.success > 0\">\r\n            {{ '正常' }}:<span class=\"success number\">{{ data.success }}</span>\r\n        </template>\r\n        <template v-if=\"data.fail > 0\">\r\n            <span v-if=\"data.success > 0\" style=\"padding-left: 16px;\" />\r\n            {{ '异常' }}:<span class=\"error number\">{{ data.fail }}</span>\r\n        </template>\r\n    </span>\r\n</template>\r\n<script>\r\n    export default {\r\n        props: {\r\n            data: {\r\n                type: Object,\r\n                require: true,\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .statistics-text {\r\n        display: flex;\r\n        font-size: 12px;\r\n        font-weight: normal;\r\n        color: #63656e;\r\n\r\n        .strong {\r\n            color: #3a84ff;\r\n        }\r\n\r\n        .error {\r\n            color: #ea3636;\r\n        }\r\n\r\n        .success {\r\n            color: #3fc06d;\r\n        }\r\n\r\n        .number {\r\n            padding: 0 4px;\r\n            font-weight: bold;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <sideslider-box class=\"server-group-host-preview\" :value=\"value\" @change=\"handleClose\">\r\n        <div slot=\"title\">{{ '分组预览' }}——{{ data.name }}</div>\r\n        <div slot=\"desc\">\r\n            <statistics-text :data=\"statisticsData\" />\r\n            <action-extend :list=\"list\" copyable />\r\n        </div>\r\n        <div class=\"preview-wraper\" v-bkloading=\"{ isLoading }\">\r\n            <host-table :list=\"list\" />\r\n        </div>\r\n    </sideslider-box>\r\n</template>\r\n<script>\r\n    import AppService from '@service/app-manage';\r\n    import HostTable from './host-table';\r\n    import SidesliderBox from './sideslider-box';\r\n    import StatisticsText from './statistics-text';\r\n    import ActionExtend from './action-extend';\r\n    import {\r\n        sortHost,\r\n        statisticsHost,\r\n    } from '../components/utils';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            HostTable,\r\n            SidesliderBox,\r\n            StatisticsText,\r\n            ActionExtend,\r\n        },\r\n        props: {\r\n            value: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n            data: {\r\n                type: Object,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: false,\r\n                statisticsData: {},\r\n                list: [{},{},{}],\r\n            };\r\n        },\r\n        created () {\r\n            if (this.data.id) {\r\n                this.fetchDynamicGroup();\r\n            }\r\n        },\r\n        methods: {\r\n            fetchDynamicGroup () {\r\n                this.isLoading = true;\r\n                AppService.fetchHostOfDynamicGroup({\r\n                    id: this.data.id,\r\n                }).then((data) => {\r\n                    if (data.length < 1) {\r\n                        this.isError = true;\r\n                        return;\r\n                    }\r\n                    this.statisticsData = statisticsHost(data[0].ipListStatus);\r\n                    this.list = Object.freeze(sortHost(data[0].ipListStatus));\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            handleClose () {\r\n                this.list = [];\r\n                this.statisticsData = {};\r\n                this.$emit('input', false);\r\n                this.$emit('change', false);\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .server-group-host-preview {\r\n        .choose-ip-host-table {\r\n            tr {\r\n                td {\r\n                    border-bottom: 1px solid #e7e8ed !important;\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"jb-collapse-item\">\r\n        <bk-collapse-item ref=\"collapseItem\" v-bind=\"$attrs\" v-on=\"$listeners\" hide-arrow>\r\n            <template #default>\r\n                <Icon :type=\"iconType\" />\r\n                <span style=\"display: none;\">{{ iconType }}</span>\r\n                <slot />\r\n            </template>\r\n            <template #content>\r\n                <slot name=\"content\" />\r\n            </template>\r\n        </bk-collapse-item>\r\n    </div>\r\n</template>\r\n<script>\r\n    export default {\r\n        inject: ['collapse'],\r\n        data () {\r\n            return {\r\n                iconType: 'arrow-full-right',\r\n            };\r\n        },\r\n        mounted () {\r\n            const unwatch = this.$watch(() => this.$refs.collapseItem.isActive, (newValue) => {\r\n                this.iconType = newValue ? 'arrow-full-down' : 'arrow-full-right';\r\n            }, {\r\n                immediate: true,\r\n            });\r\n            this.$once('hook:beforeDestroy', () => {\r\n                unwatch();\r\n            });\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .bk-collapse {\r\n        border-bottom: 1px solid #dcdee5;\r\n    }\r\n\r\n    .jb-collapse-item {\r\n        .bk-collapse-item-active {\r\n            .bk-collapse-item-header {\r\n                border-bottom-color: #dcdee5;\r\n            }\r\n        }\r\n\r\n        .bk-collapse-item-header {\r\n            position: relative;\r\n            overflow: initial;\r\n            font-size: 12px;\r\n            font-weight: 600;\r\n            background: #fafbfd;\r\n            border: 1px solid #dcdee5;\r\n            border-bottom-color: transparent;\r\n        }\r\n\r\n        .bk-collapse-item .bk-collapse-item-content {\r\n            padding: 0;\r\n            border-right: 1px solid #dcdee5;\r\n            border-left: 1px solid #dcdee5;\r\n        }\r\n    }\r\n\r\n</style>\r\n","<template>\r\n    <jb-collapse-item name=\"node\">\r\n        <span class=\"panel-title\">\r\n            <span>{{ '已选择'}}</span>\r\n            <span class=\"strong number\">{{ data.length }}</span>\r\n            <span>{{ '个节点'}}</span>\r\n        </span>\r\n        <action-extend v-if=\"editable\">\r\n            <div class=\"action-item\" @click=\"handleRemoveAll\">{{ '移除全部' }}</div>\r\n        </action-extend>\r\n        <template #content>\r\n            <div class=\"server-panel-node-view\" v-bkloading=\"{ isLoading }\">\r\n                <host-table\r\n                    v-if=\"!isRequestError\"\r\n                    :max-height=\"410\"\r\n                    :list=\"list\"\r\n                    :append-nums=\"invalidList.length\">\r\n                    <tbody\r\n                        v-if=\"invalidList.length > 0\"\r\n                        class=\"invalid-list\"\r\n                        slot=\"appendBefore\">\r\n                        <tr v-for=\"(row, index) in invalidList\" :key=\"`invalid_${index}`\">\r\n                            <td class=\"table-cell\">\r\n                                <span class=\"invalid\" v-bk-tooltips=\"'该节点在配置平台已被删除'\">\r\n                                    {{ '无效' }}\r\n                                </span>\r\n                                <span>{{ row.type }}#{{ row.id }}</span>\r\n                            </td>\r\n                            <td colspan=\"2\">--</td>\r\n                            <td v-if=\"editable\" class=\"action-column\">\r\n                                <bk-button\r\n                                    text\r\n                                    @click=\"handleInvalidRemove(index)\">\r\n                                    {{ '移除' }}\r\n                                </bk-button>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                    <tbody class=\"valid-list\">\r\n                        <tr\r\n                            v-for=\"(row, index) in list\"\r\n                            :key=\"row.key\"\r\n                            :class=\"diff[row.key]\">\r\n                            <td\r\n                                style=\"width: 40%; cursor: pointer;\"\r\n                                @click=\"handleViewHostList(row.key)\">\r\n                                <div class=\"cell-text\">\r\n                                    {{ wholePathMap[row.key] || row.name }}\r\n                                </div>\r\n                            </td>\r\n                            <td style=\"width: 150px;\">\r\n                                <Icon\r\n                                    v-if=\"row.isHostLoading\"\r\n                                    class=\"loading-status\"\r\n                                    svg\r\n                                    type=\"sync-pending\" />\r\n                                <div\r\n                                    v-else\r\n                                    class=\"cell-text\">\r\n                                    <span>{{ '共' }}</span>\r\n                                    <span class=\"number strong\">{{ row.total }}</span>\r\n                                    <span>{{ '台主机'}}</span>\r\n                                </div>\r\n                            </td>\r\n                            <td @click=\"handleViewHostList(row.key)\">\r\n                                <statistics-text\r\n                                    v-if=\"!row.isHostLoading\"\r\n                                    style=\"cursor: pointer;\"\r\n                                    :data=\"row\" />\r\n                            </td>\r\n                            <td v-if=\"editable\" class=\"action-column\">\r\n                                <bk-button\r\n                                    text\r\n                                    @click=\"handleRemoveOne(index)\">\r\n                                    {{ '移除' }}\r\n                                </bk-button>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </host-table>\r\n                <bk-exception\r\n                    v-if=\"isRequestError\"\r\n                    type=\"500\"\r\n                    style=\"padding-bottom: 50px;\">\r\n                    <div style=\"display: flex; font-size: 14px;\">\r\n                        <span>数据拉取失败，请</span>\r\n                        <bk-button text @click=\"handleRefresh\">重试</bk-button>\r\n                    </div>\r\n                </bk-exception>\r\n            </div>\r\n        </template>\r\n    </jb-collapse-item>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n    import AppService from '@service/app-manage';\r\n       import JbCollapseItem from '@components/jb-collapse-item';\r\n    import ActionExtend from '../components/action-extend';\r\n    import HostTable from '../components/host-table';\r\n    import StatisticsText from '../components/statistics-text';\r\n    import {\r\n        statisticsHost,\r\n    } from '../components/utils';\r\n\r\n    const genNodeKey = ({ objectId, instanceId }) => `#${objectId}#${instanceId}`;\r\n\r\n    export default {\r\n        name: 'ViewNode',\r\n        components: {\r\n            JbCollapseItem,\r\n            ActionExtend,\r\n            HostTable,\r\n            StatisticsText,\r\n        },\r\n        props: {\r\n            data: {\r\n                type: Array,\r\n                required: true,\r\n            },\r\n            editable: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n            diff: {\r\n                type: Object,\r\n                default: () => ({}),\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: false,\r\n                isNodeListLoading: true,\r\n                list: [{},{},{}],\r\n                invalidList: [{},{},{}],\r\n                wholePathMap: {},\r\n                isRequestError: false,\r\n            };\r\n        },\r\n        watch: {\r\n            data: {\r\n                handler (data) {\r\n                    if (this.isInnerChange) {\r\n                        this.isInnerChange = false;\r\n                        return;\r\n                    }\r\n                    if (data.length < 1) {\r\n                        this.list = [];\r\n                        return;\r\n                    }\r\n                    this.fetchNodeDetail();\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        created () {\r\n            this.isInnerChange = false;\r\n            // 缓存数据用查看节点的主机详情\r\n            this.nodeMap = {};\r\n        },\r\n        methods: {\r\n            /**\r\n             * 获取节点的信息\r\n             */\r\n            fetchNodeDetail () {\r\n                this.isLoading = true;\r\n                this.isNodeListLoading = true;\r\n                const wholeNodeMap = this.data.reduce((result, node) => {\r\n                    result[`#${node.type}#${node.id}`] = node;\r\n                    return result;\r\n                }, {});\r\n                \r\n                AppService.fetchNodePath(this.data)\r\n                    .then((data) => {\r\n                        this.nodeMap = {};\r\n                        const list = [];\r\n                        data.forEach((pathStack) => {\r\n                            // 无效节点对应的拓扑路径信息为 null\r\n                            if (!pathStack) {\r\n                                return;\r\n                            }\r\n                            const wholePath = pathStack.map(({ instanceName }) => instanceName).join(' / ');\r\n                            const currentNode = _.last(pathStack);\r\n                            const {\r\n                                objectId: type,\r\n                                instanceId: id,\r\n                            } = currentNode;\r\n                            const key = genNodeKey(currentNode);\r\n                            // 删除有返回结果的节点缓存\r\n                            delete wholeNodeMap[key];\r\n                            list.push({\r\n                                key,\r\n                                id,\r\n                                name: wholePath,\r\n                                type,\r\n                            });\r\n                        });\r\n                        // 没有查询到节点信息为无效节点\r\n                        this.invalidList = Object.freeze(Object.values(wholeNodeMap));\r\n                        // 有效节点列表\r\n                        this.list = Object.freeze(list);\r\n                        this.fetchHostOfNode();\r\n                    })\r\n                    .catch(() => {\r\n                        this.isRequestError = true;\r\n                    })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            /**\r\n             * 获取节点的主机信息\r\n             */\r\n            fetchHostOfNode () {\r\n                const nodeMap = this.list.reduce((result, item) => {\r\n                    result[item.key] = Object.assign({}, item, {\r\n                        isHostLoading: true,\r\n                    });\r\n                    return result;\r\n                }, {});\r\n                // 更新节点主机列表的loading状态\r\n                this.list = Object.freeze(Object.values(nodeMap));\r\n                AppService.fetchNodeInfo(this.list.map(({ id, type }) => ({\r\n                    id,\r\n                    type,\r\n                })))\r\n                    .then((data) => {\r\n                        this.nodeMap = {};\r\n                        data.forEach((item) => {\r\n                            const {\r\n                                nodeType: type,\r\n                                id,\r\n                                ipListStatus = [],\r\n                            } = item;\r\n                            const key = `#${type}#${id}`;\r\n\r\n                            const statisticsResult = statisticsHost(ipListStatus);\r\n\r\n                            nodeMap[key] = Object.assign({}, nodeMap[key], {\r\n                                ...statisticsResult,\r\n                                isHostLoading: false,\r\n                            });\r\n\r\n                            this.nodeMap[key] = Object.assign({}, nodeMap[key], {\r\n                                ...statisticsResult,\r\n                                host: Object.freeze(ipListStatus),\r\n                            });\r\n                        });\r\n                        this.list = Object.freeze(Object.values(nodeMap));\r\n                    })\r\n                    .finally(() => {\r\n                        this.isNodeListLoading = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 外部调用刷新节点的主机状态\r\n             */\r\n            refresh: _.debounce(function () {\r\n                if (this.isNodeListLoading) {\r\n                    return;\r\n                }\r\n                this.fetchHostOfNode();\r\n            }, 300),\r\n            /**\r\n             * @desc 外部调用获取所有节点下的主机\r\n             */\r\n            getAllHost () {\r\n                const stack = [];\r\n                for (const nodeId in this.nodeMap) {\r\n                    stack.push(...this.nodeMap[nodeId].host);\r\n                }\r\n                return stack;\r\n            },\r\n            /**\r\n             * @desc 外部调用移除所有无效的分组\r\n             */\r\n            removeAllInvalidHost () {\r\n                this.invalidList = [];\r\n                this.triggerChange();\r\n            },\r\n            triggerChange () {\r\n                this.isInnerChange = true;\r\n                this.$emit('on-change', [\r\n                    ...this.invalidList,\r\n                    ...this.list,\r\n                ]);\r\n            },\r\n            /**\r\n             * @desc 失败重试\r\n             */\r\n            handleRefresh () {\r\n                this.fetchNodeDetail();\r\n            },\r\n            /**\r\n             * @desc 移除无效节点\r\n             * @param {Number} index 节点索引\r\n             */\r\n            handleInvalidRemove (index) {\r\n                const invalidList = [\r\n                    ...this.invalidList,\r\n                ];\r\n                invalidList.splice(index, 1);\r\n                this.invalidList = Object.freeze(invalidList);\r\n                this.triggerChange();\r\n            },\r\n            /**\r\n             * @desc 移除所有节点\r\n             */\r\n            handleRemoveAll () {\r\n                if (this.data.length < 1) {\r\n                    this.messageSuccess('你还未选择节点');\r\n                    return;\r\n                }\r\n                // 内部显示删除\r\n                this.list = [];\r\n                this.nodeMap = {};\r\n                this.invalidList = [];\r\n                this.triggerChange();\r\n                this.messageSuccess('移除成功');\r\n            },\r\n            /**\r\n             * @desc 移除节点\r\n             * @param {Number} index 节点索引\r\n             */\r\n            handleRemoveOne (index) {\r\n                // 内部显示删除\r\n                const currentNode = this.list[index];\r\n                const list = [...this.list];\r\n                list.splice(index, 1);\r\n                this.list = Object.freeze(list);\r\n                delete this.nodeMap[currentNode.id];\r\n                this.triggerChange();\r\n                this.messageSuccess('移除成功');\r\n            },\r\n            /**\r\n             * @desc 查看阶段的主机详情\r\n             * @param {String} key 节点key\r\n             */\r\n            handleViewHostList (key) {\r\n                if (this.isNodeListLoading) {\r\n                    this.messageError('节点主机列表加载中');\r\n                    return;\r\n                }\r\n                this.$emit('on-view', Object.freeze(this.nodeMap[key]));\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .server-panel-node-view {\r\n        .cell-text {\r\n            display: block !important;\r\n            height: 20px;\r\n            text-align: left;\r\n            white-space: nowrap !important;\r\n            direction: rtl;\r\n            -webkit-line-clamp: 1 !important;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"choose-ip-host-detail\" ref=\"hostDetail\">\r\n        <sideslider-box :value=\"show\" @change=\"handleClose\">\r\n            <div slot=\"title\">{{ data.name }}</div>\r\n            <div slot=\"desc\">\r\n                <statistics-text slot=\"desc\" :data=\"data\" />\r\n                <action-extend :list=\"list\" copyable />\r\n            </div>\r\n            <host-table :list=\"list\" />\r\n        </sideslider-box>\r\n    </div>\r\n</template>\r\n<script>\r\n    import ActionExtend from '../components/action-extend';\r\n    import SidesliderBox from '../components/sideslider-box';\r\n    import StatisticsText from '../components/statistics-text';\r\n    import HostTable from '../components/host-table';\r\n    import {\r\n        sortHost,\r\n    } from '../components/utils';\r\n\r\n    export default {\r\n        name: 'HostDetail',\r\n        components: {\r\n            ActionExtend,\r\n            SidesliderBox,\r\n            StatisticsText,\r\n            HostTable,\r\n        },\r\n        model: {\r\n            prop: 'show',\r\n            event: 'input',\r\n        },\r\n        props: {\r\n            append: {\r\n                type: Function,\r\n                required: true,\r\n            },\r\n            show: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n            data: {\r\n                type: Object,\r\n                default: () => ({\r\n                    host: [],\r\n                }),\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                list: [{},{},{}],\r\n            };\r\n        },\r\n        watch: {\r\n            data: {\r\n                handler (data) {\r\n                    if (!data.host) {\r\n                        this.list = [];\r\n                        return;\r\n                    }\r\n                    this.list = Object.freeze(sortHost(data.host));\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        mounted () {\r\n            this.append().appendChild(this.$refs.hostDetail);\r\n            this.$once('hook:beforeDestroy', () => {\r\n                const $target = this.append();\r\n                if (this.append()) {\r\n                    $target.removeChild(this.$refs.hostDetail);\r\n                }\r\n            });\r\n        },\r\n        methods: {\r\n            handleClose () {\r\n                this.currentPage = 1;\r\n                this.$emit('input', false);\r\n                this.$emit('change', false);\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .choose-ip-host-detail {\r\n        .choose-ip-host-table {\r\n            tr {\r\n                td {\r\n                    border-bottom: 1px solid #e7e8ed !important;\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"server-search-panel\">\r\n        <div class=\"search-header\">\r\n            <span>\r\n                <span>{{ '已筛选出' }}<span class=\"strong number\">{{ list.length }}</span>{{ '个IP' }}</span>\r\n                <span v-if=\"statisticsData.fail\">（<span class=\"error\">{{ statisticsData.fail }}</span>{{ '台Agent异常' }}）</span>\r\n            </span>\r\n            <action-extend :list=\"list\" copyable>\r\n                <template v-if=\"editable\">\r\n                    <div class=\"action-item\" @click=\"handleRemoveAll\">{{ '移除全部' }}</div>\r\n                    <div class=\"action-item\" @click=\"handleRemoveFail\">{{ '移除异常' }}</div>\r\n                </template>\r\n            </action-extend>\r\n        </div>\r\n        <host-table :list=\"list\" editable is-search @on-change=\"handleRemoveOne\" />\r\n    </div>\r\n</template>\r\n<script>\r\n       import HostTable from '../components/host-table';\r\n    import ActionExtend from '../components/action-extend';\r\n    import {\r\n        sortHost,\r\n        statisticsHost,\r\n    } from '../components/utils';\r\n    \r\n    export default {\r\n        name: '',\r\n        components: {\r\n            HostTable,\r\n            ActionExtend,\r\n        },\r\n        props: {\r\n            data: {\r\n                type: Array,\r\n                required: true,\r\n            },\r\n            editable: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                list: [{},{},{}],\r\n                statisticsData: {},\r\n            };\r\n        },\r\n        computed: {\r\n            classes () {\r\n                return {\r\n                    scroll: this.data.length > 10,\r\n                };\r\n            },\r\n        },\r\n        watch: {\r\n            data: {\r\n                handler (host) {\r\n                    if (this.isInnerChange) {\r\n                        this.isInnerChange = false;\r\n                        return;\r\n                    }\r\n                    this.page = 1;\r\n                    this.list = Object.freeze(sortHost(host));\r\n                    this.statisticsData = statisticsHost(host);\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n\r\n        methods: {\r\n            /**\r\n             * @desc 删除所有筛选得到的主机\r\n             */\r\n            handleRemoveAll () {\r\n                if (this.list.length < 1) {\r\n                    this.messageSuccess('没有可移除主机');\r\n                    return;\r\n                }\r\n                const allList = this.list;\r\n                this.list = [];\r\n                this.isInnerChange = true;\r\n                this.$emit('on-change', allList);\r\n                this.messageSuccess('移除全部主机成功');\r\n            },\r\n            /**\r\n             * @desc 删除筛选结果中的异常主机\r\n             *\r\n             * 抛出change事件通知那些主机被删除\r\n             */\r\n            handleRemoveFail () {\r\n                const effectiveIp = [];\r\n                const failIp = [];\r\n                this.list.forEach((currentHost) => {\r\n                    if (currentHost.alive) {\r\n                        effectiveIp.push(currentHost);\r\n                    } else {\r\n                        failIp.push(currentHost);\r\n                    }\r\n                });\r\n                if (effectiveIp.length === this.list.length) {\r\n                    this.messageSuccess('没有可移除主机');\r\n                    return;\r\n                }\r\n                this.list = Object.freeze(effectiveIp);\r\n                this.isInnerChange = true;\r\n                this.$emit('on-change', failIp);\r\n                this.messageSuccess('移除异常主机成功');\r\n            },\r\n            /**\r\n             * @desc 删除单个主机\r\n             * @param {Number} hostRealId 主机的唯一标识\r\n             *\r\n             * 抛出change事件通知那些主机被删除\r\n             */\r\n            handleRemoveOne (hostRealId) {\r\n                // 内部显示删除\r\n                const newList = [];\r\n                let removeHost = null;\r\n                this.list.forEach((currentHost) => {\r\n                    if (currentHost.realId !== hostRealId) {\r\n                        newList.push(currentHost);\r\n                    } else {\r\n                        removeHost = currentHost;\r\n                    }\r\n                });\r\n                this.list = Object.freeze(newList);\r\n                if (!removeHost) {\r\n                    return;\r\n                }\r\n                \r\n                this.isInnerChange = true;\r\n                this.$emit('on-change', [\r\n                    removeHost,\r\n                ]);\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .server-search-panel {\r\n        color: #63656e;\r\n        border: 1px solid #dcdee5;\r\n\r\n        .search-header {\r\n            position: relative;\r\n            height: 41px;\r\n            padding-left: 60px;\r\n            font-size: 12px;\r\n            font-weight: bold;\r\n            line-height: 41px;\r\n            color: #63656e;\r\n            background: #fafbfd;\r\n            border-bottom: 1px solid #dcdee5;\r\n        }\r\n\r\n        .list-more {\r\n            border-top: 1px solid #dcdee5;\r\n        }\r\n\r\n        .search-empty {\r\n            height: 240px;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div\r\n        class=\"server-panel\"\r\n        :class=\"classes\">\r\n        <div\r\n            v-if=\"needRender\"\r\n            class=\"server-result-wraper\">\r\n            <bk-collapse v-model=\"activePanel\">\r\n                <server-host\r\n                    v-if=\"hostList.length > 0 || renderWithEmpty\"\r\n                    ref=\"host\"\r\n                    :data=\"hostList\"\r\n                    :editable=\"editable\"\r\n                    :diff=\"hostDiff\"\r\n                    @on-change=\"handleHostChange\" />\r\n                <server-node\r\n                    v-if=\"nodeInfo.length > 0 || renderWithEmpty\"\r\n                    ref=\"node\"\r\n                    :data=\"nodeInfo\"\r\n                    :editable=\"editable\"\r\n                    :diff=\"nodeDiff\"\r\n                    @on-view=\"handleView\"\r\n                    @on-change=\"handleNodeChange\" />\r\n                <server-group\r\n                    v-if=\"groupList.length > 0 || renderWithEmpty\"\r\n                    ref=\"group\"\r\n                    :data=\"groupList\"\r\n                    :editable=\"editable\"\r\n                    :diff=\"groupDiff\"\r\n                    @on-view=\"handleView\"\r\n                    @on-change=\"handleGroupChange\" />\r\n            </bk-collapse>\r\n        </div>\r\n        <lower-component level=\"custom\" :custom=\"showDetail\">\r\n            <host-detail\r\n                v-model=\"showDetail\"\r\n                :data=\"viewInfo\"\r\n                :append=\"hostDetailAppend\" />\r\n        </lower-component>\r\n        <lower-component level=\"custom\" :custom=\"searchMode\">\r\n            <host-search\r\n                v-show=\"searchMode\"\r\n                :data=\"searchData\"\r\n                :editable=\"editable\"\r\n                @on-change=\"handleSearchChange\" />\r\n        </lower-component>\r\n    </div>\r\n</template>\r\n<script>\r\n    import { encodeRegexp } from '@utils/assist';\r\n    import TaskHostNodeModel from '@model/task-host-node';\r\n    import ServerNode from './view/node';\r\n    import ServerHost from './view/host';\r\n    import ServerGroup from './view/group';\r\n    import HostDetail from './view/host-detail';\r\n    import HostSearch from './view/host-search';\r\n    import { generateHostRealId } from './components/utils';\r\n\r\n    const addCollapsePanel = (target, name) => {\r\n        if (target.length > 0) {\r\n            return;\r\n        }\r\n        if (!target.includes(name)) {\r\n            target.push(name);\r\n        }\r\n    };\r\n\r\n    export default {\r\n        name: 'ServerPanel',\r\n        components: {\r\n            ServerNode,\r\n            ServerHost,\r\n            ServerGroup,\r\n            HostDetail,\r\n            HostSearch,\r\n        },\r\n        props: {\r\n            hostNodeInfo: {\r\n                type: Object,\r\n                default: () => new TaskHostNodeModel(),\r\n            },\r\n            // 可编辑\r\n            editable: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n            // 数据为空时是否显示\r\n            renderWithEmpty: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n            // 主机详情弹框的渲染位置\r\n            hostDetailAppend: {\r\n                type: Function,\r\n                default: () => document.querySelector('body'),\r\n            },\r\n            // 主机搜索模式\r\n            searchMode: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n            // 主机搜索的筛选值\r\n            searchData: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n            nodeDiff: {\r\n                type: Object,\r\n                default: () => ({}),\r\n            },\r\n            hostDiff: {\r\n                type: Object,\r\n                default: () => ({}),\r\n            },\r\n            groupDiff: {\r\n                type: Object,\r\n                default: () => ({}),\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                activePanel: [],\r\n                showDetail: false,\r\n                viewInfo: {},\r\n                nodeInfo: [],\r\n                hostList: [{},{},{}],\r\n                groupList: [{},{},{}],\r\n                requestQueue: [],\r\n            };\r\n        },\r\n        computed: {\r\n            needRender () {\r\n                if (this.renderWithEmpty) {\r\n                    return true;\r\n                }\r\n                return this.nodeInfo.length || this.hostList.length || this.groupList.length;\r\n            },\r\n            classes () {\r\n                const stack = [];\r\n                if (this.searchMode) {\r\n                    stack.push('show-search');\r\n                }\r\n                return stack;\r\n            },\r\n        },\r\n        watch: {\r\n            hostNodeInfo: {\r\n                handler (hostNodeInfo) {\r\n                    const { dynamicGroupList, ipList, topoNodeList } = hostNodeInfo;\r\n                    this.hostList = Object.freeze(ipList);\r\n                    if (ipList.length > 0) {\r\n                        addCollapsePanel(this.activePanel, 'host');\r\n                    }\r\n                    this.nodeInfo = Object.freeze(topoNodeList);\r\n                    if (topoNodeList.length > 0) {\r\n                        addCollapsePanel(this.activePanel, 'node');\r\n                    }\r\n                    this.groupList = Object.freeze(dynamicGroupList);\r\n                    if (dynamicGroupList.length > 0) {\r\n                        addCollapsePanel(this.activePanel, 'group');\r\n                    }\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 供外部调用的api\r\n             * @param {Boolean} returnErrorIP true: 只返回返回异常主机ip；false: 返回所有主机ip\r\n             *\r\n             * 获取面板中的所有ip(主机)，根据ip去重\r\n             */\r\n            getAllIP (returnErrorIP = false) {\r\n                const allHostList = [];\r\n                if (this.$refs.host) {\r\n                    allHostList.push(...this.$refs.host.getAllHost());\r\n                }\r\n                if (this.$refs.node) {\r\n                    allHostList.push(...this.$refs.node.getAllHost());\r\n                }\r\n                if (this.$refs.group) {\r\n                    allHostList.push(...this.$refs.group.getAllHost());\r\n                }\r\n                const ipMap = {};\r\n                const errorIPMap = {};\r\n                allHostList.forEach((host) => {\r\n                    ipMap[host.ip] = 1;\r\n                    if (host.alive !== 1) {\r\n                        errorIPMap[host.ip] = 1;\r\n                    }\r\n                });\r\n                \r\n                // 异常主机包含无效主机\r\n                if (returnErrorIP) {\r\n                    return Object.keys(errorIPMap);\r\n                }\r\n                return Object.keys(ipMap);\r\n            },\r\n            /**\r\n             * @desc 供外部调用的api，支持搜索（操作的对象是已选的主机，不包含分组和节点）\r\n             * @param {String} filter 过滤项\r\n             *\r\n             * 获取主机面板中的所有主机信息，根据（ip + 云区域）去重\r\n             */\r\n            getAllHost (filter = '') {\r\n                if (filter.trim() === '') {\r\n                    return this.$refs.host.getAllHost();\r\n                }\r\n                if (!/^[0-9.]+$/g.test(filter)) {\r\n                    return [];\r\n                }\r\n                \r\n                const filterReg = new RegExp(`${encodeRegexp(filter.trim())}`);\r\n                const hostMap = {};\r\n                \r\n                if (this.$refs.host) {\r\n                    this.$refs.host.getAllHost().forEach((host) => {\r\n                        if (filterReg.test(host.ip)) {\r\n                            hostMap[generateHostRealId(host)] = host;\r\n                        }\r\n                    });\r\n                }\r\n                \r\n                return Object.values(hostMap);\r\n            },\r\n            /**\r\n             * @desc 外部调用——移除无效主机\r\n             */\r\n            removeAllInvalidHost () {\r\n                this.$refs.host && this.$refs.host.removeAllInvalidHost();\r\n                this.$refs.node && this.$refs.node.removeAllInvalidHost();\r\n                this.$refs.group && this.$refs.group.removeAllInvalidHost();\r\n            },\r\n            /**\r\n             * @desc 外部刷新主机状态接口\r\n             *\r\n             * 获取主机面板中的所有主机（主机），根据（ip + 云区域）去重\r\n             */\r\n            refresh () {\r\n                this.$refs.host && this.$refs.host.refresh();\r\n                this.$refs.node && this.$refs.node.refresh();\r\n                this.$refs.group && this.$refs.group.refresh();\r\n            },\r\n            /**\r\n             * @desc 触发值的改变\r\n             */\r\n            trigger () {\r\n                this.$emit('on-change', {\r\n                    ipList: this.hostList,\r\n                    topoNodeList: this.nodeInfo,\r\n                    dynamicGroupList: this.groupList,\r\n                });\r\n            },\r\n            /**\r\n             * @desc 面板的loading状态\r\n             * @param {Boolean} loading 每个面板的loading状态\r\n             */\r\n            handleLoading (loading) {\r\n                if (loading) {\r\n                    this.requestQueue.push(true);\r\n                } else {\r\n                    this.requestQueue.pop();\r\n                }\r\n            },\r\n            /**\r\n             * @desc 查看分组和节点下的主机列表\r\n             * @param {Boolean} payload 查看详情的数据\r\n             */\r\n            handleView (payload) {\r\n                this.showDetail = true;\r\n                this.viewInfo = Object.freeze(payload);\r\n            },\r\n            /**\r\n             * @desc 更新主机\r\n             * @param {Array} hostList 最新的主机列表\r\n             */\r\n            handleHostChange (hostList) {\r\n                this.hostList = Object.freeze(hostList);\r\n                this.trigger();\r\n            },\r\n            /**\r\n             * @desc 更新节点\r\n             * @param {Array} nodeInfo 最新的节点列表\r\n             */\r\n            handleNodeChange (nodeInfo) {\r\n                this.nodeInfo = Object.freeze(nodeInfo);\r\n                this.trigger();\r\n            },\r\n            /**\r\n             * @desc 更新分组\r\n             * @param {Array} groupList 最新的分组列表\r\n             */\r\n            handleGroupChange (groupList) {\r\n                this.groupList = Object.freeze(groupList);\r\n                this.trigger();\r\n            },\r\n            /**\r\n             * @desc 搜索主机面板删除了主机\r\n             * @param {Array} removeHostList 在搜索面板中被删除的主机\r\n             */\r\n            handleSearchChange (removeHostList) {\r\n                const removeHostMap = {};\r\n                removeHostList.forEach((item) => {\r\n                    removeHostMap[item.realId] = true;\r\n                });\r\n\r\n                const result = [];\r\n                this.$refs.host.list.forEach((currentHost) => {\r\n                    if (!removeHostMap[currentHost.realId]) {\r\n                        result.push(currentHost);\r\n                    }\r\n                });\r\n                this.hostList = Object.freeze(result);\r\n                this.trigger();\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .server-panel {\r\n        position: relative;\r\n        z-index: 1;\r\n        width: 100%;\r\n        background: #fff;\r\n\r\n        &.show-search {\r\n            .server-result-wraper {\r\n                display: none;\r\n            }\r\n        }\r\n\r\n        .bk-collapse-item-header {\r\n            display: flex;\r\n            align-items: center;\r\n            padding-left: 23px;\r\n\r\n            .panel-title {\r\n                padding-left: 23px;\r\n            }\r\n        }\r\n\r\n        .server-result-wraper {\r\n            height: 100%;\r\n        }\r\n\r\n        .choose-ip-host-table {\r\n            thead {\r\n                th {\r\n                    background: #fff;\r\n                }\r\n            }\r\n\r\n            .invalid-list {\r\n                td {\r\n                    color: #c4c6cc;\r\n                }\r\n            }\r\n\r\n            tbody:last-child {\r\n                tr:last-child {\r\n                    td {\r\n                        border-bottom: none;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /* diff 样式 */\r\n        .choose-ip-host-table { /* stylelint-disable-line */\r\n            tr.delete {\r\n                * {\r\n                    color: #c4c6cc !important;\r\n                    text-decoration: line-through;\r\n                }\r\n            }\r\n\r\n            tr.new {\r\n                td:first-child {\r\n                    position: relative;\r\n\r\n                    &::before {\r\n                        position: absolute;\r\n                        top: 50%;\r\n                        width: 24px;\r\n                        height: 16px;\r\n                        margin-left: -32px;\r\n                        font-size: 12px;\r\n                        line-height: 16px;\r\n                        color: #fff;\r\n                        text-align: center;\r\n                        background: #f0c581;\r\n                        border-radius: 2px;\r\n                        content: \"new\";\r\n                        transform: translateY(-50%);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div v-if=\"value\" id=\"chooseIPServerPreview\" class=\"server-preview\">\r\n        <div class=\"preview-header\">\r\n            <div>{{ '已选项预览' }}</div>\r\n            <div class=\"server-description\">\r\n                <span v-html=\"resultText\" />\r\n            </div>\r\n        </div>\r\n        <scroll-faker class=\"preview-content\" style=\"height: calc(100% - 118px);\">\r\n            <server-panel\r\n                :host-node-info=\"hostNodeInfo\"\r\n                :host-detail-append=\"getElementTarget\"\r\n                editable\r\n                render-with-empty\r\n                @on-change=\"handleServerPanelChange\" />\r\n        </scroll-faker>\r\n        <div class=\"preview-footer\">\r\n            <bk-button class=\"mr10\" theme=\"primary\" @click=\"handleSubmit\">{{ '确定' }}</bk-button>\r\n            <bk-button @click=\"handleClose\">{{ '关闭' }}</bk-button>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n/**\r\n     * 预览已选主机数据\r\n    */\r\n       import ServerPanel from './server-panel';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            ServerPanel,\r\n        },\r\n        props: {\r\n            value: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n            host: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n            node: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n            group: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                hostNodeInfoLocal: {},\r\n            };\r\n        },\r\n        computed: {\r\n            hostNodeInfo () {\r\n                return {\r\n                    ipList: this.host,\r\n                    dynamicGroupList: this.group,\r\n                    topoNodeList: this.node,\r\n                };\r\n            },\r\n            /**\r\n             * @desc 选择结果的展示\r\n             * @returns {String}\r\n             */\r\n            resultText () {\r\n                const {\r\n                    dynamicGroupList = [],\r\n                    ipList = [],\r\n                    topoNodeList = [],\r\n                } = this.hostNodeInfoLocal;\r\n\r\n                const result = [];\r\n                if (ipList.length > 0) {\r\n                    result.push(`<span class=\"strong number choose-host\">${ipList.length}</span>${'台主机'}`);\r\n                }\r\n                if (topoNodeList.length > 0) {\r\n                    result.push(`<span class=\"strong number choose-node\">${topoNodeList.length}</span>${'个节点'}`);\r\n                }\r\n                if (dynamicGroupList.length > 0) {\r\n                    result.push(`<span class=\"strong number choose-group\">${dynamicGroupList.length}</span>${'个分组'}`);\r\n                }\r\n                if (result.length < 1) {\r\n                    return `（${'暂无已选项'}）`;\r\n                }\r\n                return `（${result.join('，')}）`;\r\n            },\r\n        },\r\n        watch: {\r\n            hostNodeInfo: {\r\n                handler (hostNodeInfo) {\r\n                    this.hostNodeInfoLocal = Object.freeze(hostNodeInfo);\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        created () {\r\n            this.innerChange = false;\r\n        },\r\n        methods: {\r\n            getElementTarget () {\r\n                return document.querySelector('#chooseIPServerPreview');\r\n            },\r\n            handleServerPanelChange (hostNodeInfo) {\r\n                this.innerChange = true;\r\n                this.hostNodeInfoLocal = Object.freeze(hostNodeInfo);\r\n            },\r\n            handleSubmit () {\r\n                if (this.innerChange) {\r\n                    this.$emit('on-change', this.hostNodeInfoLocal);\r\n                }\r\n                this.handleClose();\r\n            },\r\n            handleClose () {\r\n                this.innerChange = false;\r\n                this.$emit('input', false);\r\n                this.$emit('change', false);\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .server-preview {\r\n        position: absolute;\r\n        top: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        left: 0;\r\n        z-index: 9;\r\n        display: flex;\r\n        flex-direction: column;\r\n        background: #fff;\r\n\r\n        .preview-header {\r\n            display: flex;\r\n            align-items: center;\r\n            flex: 0 0 68px;\r\n            height: 68px;\r\n            padding-left: 24px;\r\n            margin-bottom: -1px;\r\n            font-size: 20px;\r\n            color: #000;\r\n            border-bottom: 1px solid #dcdee5;\r\n\r\n            .server-description {\r\n                padding-top: 6px;\r\n                margin-left: 12px;\r\n                font-size: 12px;\r\n                line-height: 1em;\r\n                color: #63656e;\r\n            }\r\n        }\r\n\r\n        .preview-footer {\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: flex-end;\r\n            height: 60px;\r\n            padding-right: 24px;\r\n            background: #fafbfd;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <lower-component level=\"custom\" :custom=\"isShowDialog\">\r\n        <jb-dialog\r\n            v-model=\"isShowDialog\"\r\n            class=\"choose-ip-dialog\"\r\n            :mask-close=\"false\"\r\n            :esc-close=\"false\"\r\n            :draggable=\"false\"\r\n            :width=\"1240\"\r\n            :media=\"mediaWidth\">\r\n            <div class=\"choose-ip-container\" :style=\"containerStyles\">\r\n                <template v-if=\"isShowDialog\">\r\n                    <div class=\"action-tab\">\r\n                        <div class=\"tab-container\">\r\n                            <div class=\"tab-item\" :class=\"{ active: activeTab === 'static' }\" @click=\"handleTabChange('static')\">\r\n                                {{ '静态 - IP 选择' }}\r\n                            </div>\r\n                            <div class=\"tab-item\" :class=\"{ active: activeTab === 'dynamic' }\" @click=\"handleTabChange('dynamic')\">\r\n                                {{ '动态 - 拓扑选择' }}\r\n                            </div>\r\n                            <div class=\"tab-item\" :class=\"{ active: activeTab === 'group' }\" @click=\"handleTabChange('group')\">\r\n                                {{ '动态 - 分组选择' }}\r\n                            </div>\r\n                            <div class=\"tab-item\" :class=\"{ active: activeTab === 'input' }\" @click=\"handleTabChange('input')\">\r\n                                {{ '手动输入' }}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"action-content\" :style=\"contentStyles\">\r\n                        <keep-alive>\r\n                            <component\r\n                                ref=\"dataTree\"\r\n                                :is=\"panelCom\"\r\n                                class=\"fade-in\"\r\n                                :preview-id=\"previewId\"\r\n                                :topology-node-tree=\"topologyNodeTree\"\r\n                                :ip-list=\"ipList\"\r\n                                :topo-node-list=\"topoNodeList\"\r\n                                :dynamic-group-list=\"dynamicGroupList\"\r\n                                :topology-loading=\"isLoading\"\r\n                                :dialog-height=\"dialogHeight\"\r\n                                @on-group-preview=\"handleGroupPreview\"\r\n                                @on-input-change=\"handleInputChange\"\r\n                                @on-input-animate=\"handleInputAnimate\"\r\n                                @on-change=\"handleChange\" />\r\n                        </keep-alive>\r\n                    </div>\r\n                </template>\r\n            </div>\r\n            <template v-if=\"showGroupPreview\">\r\n                <preview-group v-model=\"showGroupPreview\" :data=\"previewGroup\" />\r\n            </template>\r\n            <template v-if=\"showChoosePreview\">\r\n                <preview\r\n                    v-model=\"showChoosePreview\"\r\n                    :host=\"ipList\"\r\n                    :node=\"topoNodeList\"\r\n                    :group=\"dynamicGroupList\"\r\n                    @on-change=\"handlePreviewChange\">\r\n                    <div slot=\"desc\" v-html=\"actionResult\" />\r\n                </preview>\r\n            </template>\r\n            <template slot=\"footer\">\r\n                <span v-if=\"error\" class=\"ip-error\">{{ error }}</span>\r\n                <div\r\n                    :id=\"previewId\"\r\n                    class=\"choose-result\"\r\n                    :class=\"currentChangeClass\"\r\n                    v-html=\"actionResult\"\r\n                    @click=\"handleShowChoosePreview\" />\r\n                <jb-popover-confirm\r\n                    v-if=\"ipInputStatus\"\r\n                    :title=\"'操作确认'\"\r\n                    :content=\"'手动输入框有内容未添加到“已选择”列表，确认结束操作？'\"\r\n                    :confirm-handler=\"handleSubmit\">\r\n                    <bk-button class=\"mr10\" theme=\"primary\">{{ '确定' }}</bk-button>\r\n                </jb-popover-confirm>\r\n                <bk-button\r\n                    v-if=\"!ipInputStatus\"\r\n                    class=\"mr10\"\r\n                    theme=\"primary\"\r\n                    \r\n                    @click=\"handleSubmit\">\r\n                    {{ '确定' }}\r\n                </bk-button>\r\n                <bk-button @click=\"handleCancle\">{{ '取消' }}</bk-button>\r\n            </template>\r\n        </jb-dialog>\r\n    </lower-component>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n    import AppService from '@service/app-manage';\r\n       import TaskHostNodeModel from '@model/task-host-node';\r\n    import {\r\n        bigTreeTransformTopologyOfTopology,\r\n        mergeInputHost,\r\n        mergeTopologyHost,\r\n        generateHostRealId,\r\n    } from './components/utils';\r\n    import RenderBusinessTopology from './components/render-business-topology';\r\n    import RenderDynamicBusinessTopology from './components/render-dynamic-business-topology';\r\n    import RenderDynamicGroup from './components/render-dynamic-group';\r\n    import RenderIpInput from './components/render-ip-input';\r\n    import PreviewGroup from './components/preview-group';\r\n    import SidesliderBox from './components/sideslider-box';\r\n    import Preview from './preview';\r\n\r\n    const DIALOG_FOOTER_HEIGHT = 58;\r\n    const CONTENT_TAB_HEIGHT = 42;\r\n\r\n    export default {\r\n        name: 'ChooseIp',\r\n        components: {\r\n            RenderBusinessTopology,\r\n            RenderDynamicBusinessTopology,\r\n            RenderDynamicGroup,\r\n            RenderIpInput,\r\n            PreviewGroup,\r\n            SidesliderBox,\r\n            Preview,\r\n        },\r\n        model: {\r\n            prop: 'show',\r\n            event: 'input',\r\n        },\r\n        props: {\r\n            // 显示弹框\r\n            show: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n            // 传入主机节点值\r\n            hostNodeInfo: {\r\n                type: Object,\r\n                default: () => new TaskHostNodeModel({}).hostNodeInfo,\r\n            },\r\n            // 是否必填\r\n            required: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n            // 错误提示\r\n            errorTips: {\r\n                type: String,\r\n                default: '服务器不能为空',\r\n            },\r\n        },\r\n        data () {\r\n            this.ipListTopolagyLast = [];\r\n            return {\r\n                isShowDialog: false,\r\n                isLoading: true,\r\n                isSubmitDisable: false,\r\n                // 预览结果\r\n                showChoosePreview: false,\r\n                // 预览节点合分组的主机详情\r\n                showGroupPreview: false,\r\n                activeTab: 'static',\r\n                // 弹框的高度\r\n                dialogHeight: 0,\r\n                topologyNodeTree: [],\r\n                topoNodeList: [{},{},{}],\r\n                ipList: [{},{},{}],\r\n                dynamicGroupList: [{},{},{}],\r\n                previewGroup: {},\r\n                error: '',\r\n                currentChangeClass: '',\r\n                //  手动的输入的内容是否提交\r\n                ipInputStatus: false,\r\n            };\r\n        },\r\n        computed: {\r\n            /**\r\n             * @desc 渲染tab组件\r\n             * @returns {Object}\r\n             */\r\n            panelCom () {\r\n                const comMap = {\r\n                    static: RenderBusinessTopology,\r\n                    dynamic: RenderDynamicBusinessTopology,\r\n                    group: RenderDynamicGroup,\r\n                    input: RenderIpInput,\r\n                };\r\n                return comMap[this.activeTab];\r\n            },\r\n            /**\r\n             * @desc 弹框内容区样式\r\n             * @returns {Object}\r\n             */\r\n            containerStyles () {\r\n                return {\r\n                    height: `${this.dialogHeight - DIALOG_FOOTER_HEIGHT}px`,\r\n                };\r\n            },\r\n            /**\r\n             * @desc tab内容区样式\r\n             * @returns {Object}\r\n             */\r\n            contentStyles () {\r\n                return {\r\n                    height: `${this.dialogHeight - DIALOG_FOOTER_HEIGHT - CONTENT_TAB_HEIGHT}px`,\r\n                };\r\n            },\r\n            /**\r\n             * @desc 主机是否为空\r\n             * @returns {Boolean}\r\n             */\r\n            isEmpty () {\r\n                return !this.topoNodeList.length && !this.ipList.length && !this.dynamicGroupList.length;\r\n            },\r\n            /**\r\n             * @desc 选择结果的展示\r\n             * @returns {String}\r\n             */\r\n            actionResult () {\r\n                const result = [];\r\n                if (this.ipList.length > 0) {\r\n                    result.push(`<span class=\"strong number choose-host\">${this.ipList.length}</span>${'台主机'}`);\r\n                }\r\n                if (this.topoNodeList.length > 0) {\r\n                    result.push(`<span class=\"strong number choose-node\">${this.topoNodeList.length}</span>${'个节点'}`);\r\n                }\r\n                if (this.dynamicGroupList.length > 0) {\r\n                    result.push(`<span class=\"strong number choose-group\">${this.dynamicGroupList.length}</span>${'个分组'}`);\r\n                }\r\n                if (result.length < 1) {\r\n                    return '';\r\n                }\r\n                let resultText = result.join('，');\r\n                if (resultText) {\r\n                    resultText = `<span>${'已选择'}：</span>${resultText}`;\r\n                }\r\n                return resultText;\r\n            },\r\n        },\r\n        watch: {\r\n            show: {\r\n                /**\r\n                 * @desc 每次打开重新拉取拓扑节点树\r\n                 * @param {Boolean} show 显示 ip 选择器\r\n                 */\r\n                handler (show) {\r\n                    if (show) {\r\n                        this.fetchTopologyWithCount();\r\n                    }\r\n                    this.ipInputStatus = false;\r\n                    this.isShowDialog = show;\r\n                    this.isSubmitDisable = false;\r\n                },\r\n                immediate: true,\r\n            },\r\n            hostNodeInfo: {\r\n                /**\r\n                 * @desc 处理默认值\r\n                 * @param {Object} hostNodeInfo 主机信息\r\n                 */\r\n                handler (hostNodeInfo) {\r\n                    if (this.isSelfChange) {\r\n                        this.isSelfChange = false;\r\n                        return;\r\n                    }\r\n                    const {\r\n                        dynamicGroupList = [],\r\n                        ipList = [],\r\n                        topoNodeList = [],\r\n                    } = hostNodeInfo;\r\n\r\n                    this.topoNodeList = Object.freeze([\r\n                        ...topoNodeList,\r\n                    ]);\r\n                    this.ipList = Object.freeze(ipList.map(host => Object.assign({\r\n                        realId: generateHostRealId(host),\r\n                        ...host,\r\n                    })));\r\n                    this.ipListTopolagyLast = this.ipList;\r\n                    this.dynamicGroupList = Object.freeze(dynamicGroupList);\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        created () {\r\n            this.previewId = `chooseIPPreview_${_.random(1, 99999999)}`;\r\n            this.isSelfChange = false;\r\n            this.hostInput = [];\r\n            this.mediaWidth = [\r\n                1240, 1400, 1560, 1720,\r\n            ];\r\n        },\r\n        mounted () {\r\n            this.calcDialogHeight();\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 获取拓扑节点树\r\n             */\r\n            fetchTopologyWithCount () {\r\n                this.isLoading = true;\r\n                AppService.fetchTopologyWithCount()\r\n                    .then((data) => {\r\n                        this.topologyNodeTree = Object.freeze(bigTreeTransformTopologyOfTopology([\r\n                            data,\r\n                        ]));\r\n                    })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 动态计算弹框高度占浏览器窗口的 80%\r\n             */\r\n            calcDialogHeight () {\r\n                const dialogHeight = window.innerHeight * 0.8;\r\n                this.dialogHeight = dialogHeight < 660 ? 660 : dialogHeight;\r\n            },\r\n            /**\r\n             * @desc tab 面板切换\r\n             */\r\n            handleTabChange (payload) {\r\n                this.activeTab = payload;\r\n            },\r\n            /**\r\n             * @desc 选择值\r\n             * @param {String} field 更新的字段名\r\n             * @param {Any} value 字段值\r\n             *\r\n             * 静态 ip 选择和手动输入的结果需要合并\r\n             */\r\n            handleChange (field, value) {\r\n                this.error = '';\r\n                switch (field) {\r\n                    case 'ipList':\r\n                        this.ipList = Object.freeze(mergeTopologyHost(this.ipList, this.ipListTopolagyLast, value));\r\n                        this.ipListTopolagyLast = value;\r\n                        this.currentChangeClass = 'host';\r\n                        break;\r\n                    case 'ipInput':\r\n                        this.ipList = Object.freeze(mergeInputHost(this.ipList, value));\r\n                        this.currentChangeClass = 'host';\r\n                        break;\r\n                    case 'topoNodeList':\r\n                        this.topoNodeList = Object.freeze(value);\r\n                        this.currentChangeClass = 'node';\r\n                        break;\r\n                    case 'dynamicGroupList':\r\n                        this.dynamicGroupList = Object.freeze(value);\r\n                        this.currentChangeClass = 'group';\r\n                        break;\r\n                    default:\r\n                        return '';\r\n                }\r\n            },\r\n            /**\r\n             * @desc 手动输入的输入状态\r\n             *\r\n             * 有输入结果但是没有添加需要给出提示结果\r\n             */\r\n            handleInputChange (status) {\r\n                this.ipInputStatus = status;\r\n            },\r\n            /**\r\n             * @desc 手动输入的动画状态\r\n             * @param {Boolean} running 动画是否运行中\r\n             *\r\n             * 动画没结束禁止提交\r\n             */\r\n            handleInputAnimate (running) {\r\n                this.isSubmitDisable = running;\r\n            },\r\n            /**\r\n             * @desc 预览结果\r\n             */\r\n            handleShowChoosePreview () {\r\n                this.showChoosePreview = true;\r\n            },\r\n            /**\r\n             * @desc 手动输入的动画状态\r\n             * @param {Object} hostNodeInfo 主机信息\r\n             *\r\n             */\r\n            handlePreviewChange (hostNodeInfo) {\r\n                const {\r\n                    dynamicGroupList,\r\n                    ipList,\r\n                    topoNodeList,\r\n                } = hostNodeInfo;\r\n                this.topoNodeList = Object.freeze(topoNodeList);\r\n                this.ipList = Object.freeze(ipList);\r\n                this.dynamicGroupList = Object.freeze(dynamicGroupList);\r\n            },\r\n            /**\r\n             * @desc 查看分组的主机详情\r\n             * @param {Object} groupInfo 分组信息\r\n             *\r\n             */\r\n            handleGroupPreview (groupInfo) {\r\n                this.previewGroup = groupInfo;\r\n                this.showGroupPreview = true;\r\n            },\r\n            /**\r\n             * @desc 外部调用，重置选中状态\r\n             */\r\n            reset () {\r\n                this.topoNodeList = [];\r\n                this.ipList = [];\r\n                this.dynamicGroupList = [];\r\n            },\r\n            /**\r\n             * @desc 弹框关闭\r\n             */\r\n            close () {\r\n                this.activeTab = 'static';\r\n                this.$emit('on-cancel');\r\n                this.$emit('input', false);\r\n            },\r\n            /**\r\n             * @desc 提交操作结果\r\n             */\r\n            handleSubmit () {\r\n                return Promise.resolve()\r\n                    .then(() => {\r\n                        if (this.required && this.isEmpty) {\r\n                            this.error = '源文件的服务器列表不允许为空';\r\n                            return;\r\n                        }\r\n                        \r\n                        // 保证先关闭jb-popover-confirm，再关闭dialog\r\n                        Promise.resolve()\r\n                            .then(() => {\r\n                                this.isSelfChange = true;\r\n                                this.$emit('on-change', {\r\n                                    ipList: this.ipList,\r\n                                    topoNodeList: this.topoNodeList,\r\n                                    dynamicGroupList: this.dynamicGroupList,\r\n                                });\r\n                                this.close();\r\n                            });\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 取消当前操作\r\n             *\r\n             * 重置默认数据\r\n             */\r\n            handleCancle () {\r\n                const {\r\n                    dynamicGroupList = [],\r\n                    ipList = [],\r\n                    topoNodeList = [],\r\n                } = this.hostNodeInfo;\r\n\r\n                this.topoNodeList = Object.freeze([\r\n                    ...topoNodeList,\r\n                ]);\r\n                this.ipList = Object.freeze(ipList.map(host => ({\r\n                    ...host,\r\n                    realId: generateHostRealId(host),\r\n                })));\r\n                this.dynamicGroupList = Object.freeze(dynamicGroupList);\r\n                this.ipListTopolagyLast = this.ipList;\r\n                this.isShowDialog = false;\r\n                this.close();\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    @keyframes fade-in {\r\n        from {\r\n            opacity: 10%;\r\n        }\r\n\r\n        to {\r\n            opacity: 100%;\r\n        }\r\n    }\r\n\r\n    @keyframes choose-result-ani {\r\n        0% {\r\n            transform: scale(1.5);\r\n        }\r\n\r\n        25% {\r\n            transform: scale(1.2);\r\n        }\r\n\r\n        50% {\r\n            transform: scale(1.4);\r\n        }\r\n\r\n        75% {\r\n            transform: scale(1.1);\r\n        }\r\n\r\n        100% {\r\n            transform: scale(0);\r\n        }\r\n    }\r\n\r\n    .choose-ip-dialog {\r\n        .bk-dialog-wrapper {\r\n            padding-top: 20px;\r\n            padding-bottom: 20px;\r\n            overflow-y: scroll;\r\n            text-align: center;\r\n\r\n            &::-webkit-scrollbar {\r\n                width: 0;\r\n            }\r\n\r\n            &::after {\r\n                display: inline-block;\r\n                width: 0;\r\n                height: 100%;\r\n                vertical-align: middle;\r\n                content: \"\";\r\n            }\r\n        }\r\n\r\n        .bk-dialog {\r\n            display: inline-block;\r\n            height: auto;\r\n            text-align: left;\r\n            vertical-align: middle;\r\n\r\n            .bk-dialog-tool {\r\n                display: none;\r\n            }\r\n\r\n            .bk-dialog-content {\r\n                margin-bottom: 0 !important;\r\n            }\r\n\r\n            .bk-dialog-body {\r\n                padding: 0;\r\n            }\r\n\r\n            .bk-dialog-footer {\r\n                display: flex;\r\n                justify-content: flex-end;\r\n            }\r\n        }\r\n\r\n        .choose-ip-container {\r\n            .action-tab {\r\n                position: relative;\r\n                z-index: 2;\r\n                display: flex;\r\n                flex-direction: column;\r\n\r\n                .tab-container {\r\n                    display: flex;\r\n                    background: #fafbfd;\r\n                }\r\n\r\n                .tab-item {\r\n                    display: flex;\r\n                    height: 42px;\r\n                    cursor: pointer;\r\n                    border-right: 1px solid #dcdee5;\r\n                    border-bottom: 1px solid #dcdee5;\r\n                    flex: 1;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n\r\n                    &.active {\r\n                        background: #fff;\r\n                        border-bottom-color: transparent;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        .bk-big-tree-node.is-selected {\r\n            .node-box {\r\n                .node-count {\r\n                    color: #fff;\r\n                    background: #a3c5fd;\r\n                }\r\n            }\r\n        }\r\n\r\n        .node-box {\r\n            display: flex;\r\n            align-items: center;\r\n\r\n            .node-filter {\r\n                height: 1em;\r\n                padding-left: 7px;\r\n                margin-right: 10px;\r\n                margin-left: 10px;\r\n                font-size: 12px;\r\n                line-height: 1em;\r\n                color: #979ba5;\r\n                border-left: 1px solid #dcdee5;\r\n                user-select: none;\r\n            }\r\n\r\n            .node-count {\r\n                display: flex;\r\n                height: 17px;\r\n                padding: 0 4px;\r\n                margin-left: auto;\r\n                font-size: 12px;\r\n                color: #979ba5;\r\n                background: #f0f1f5;\r\n                border-radius: 2px;\r\n                align-items: center;\r\n            }\r\n        }\r\n\r\n        .line-checkbox {\r\n            position: relative;\r\n            display: inline-block;\r\n            width: 16px;\r\n            height: 16px;\r\n            overflow: hidden;\r\n            font-size: 0;\r\n            line-height: 18px;\r\n            vertical-align: middle;\r\n            cursor: pointer;\r\n            border: 1px solid #3a84ff;\r\n            border-radius: 2px;\r\n\r\n            &::after {\r\n                position: absolute;\r\n                top: 1px;\r\n                left: 4px;\r\n                width: 4px;\r\n                height: 8px;\r\n                border: 2px solid #3a84ff;\r\n                border-top: 0;\r\n                border-left: 0;\r\n                content: \"\";\r\n                transform: rotate(45deg) scaleY(1);\r\n                transform-origin: center;\r\n            }\r\n        }\r\n\r\n        .choose-all-tips {\r\n            height: 30px !important;\r\n            font-size: 12px !important;\r\n            text-align: center !important;\r\n\r\n            .strong {\r\n                color: inherit;\r\n            }\r\n\r\n            .all-change {\r\n                color: #3a84ff;\r\n                cursor: pointer;\r\n            }\r\n        }\r\n\r\n        .choose-result {\r\n            display: flex;\r\n            height: 32px;\r\n            padding: 0 4px;\r\n            margin-right: auto;\r\n            font-size: 14px;\r\n            line-height: 32px;\r\n            color: #63656e;\r\n            cursor: pointer;\r\n            border-radius: 2px;\r\n\r\n            &:hover {\r\n                background: #ebecf0;\r\n            }\r\n\r\n            &.host {\r\n                .choose-host {\r\n                    animation: choose-result-ani 0.35s;\r\n                }\r\n            }\r\n\r\n            &.node {\r\n                .choose-node {\r\n                    animation: choose-result-ani 0.35s;\r\n                }\r\n            }\r\n\r\n            &.group {\r\n                .choose-group {\r\n                    animation: choose-result-ani 0.35s;\r\n                }\r\n            }\r\n        }\r\n\r\n        .ip-error {\r\n            margin-right: 10px;\r\n            font-size: 12px;\r\n            color: #ff5656;\r\n        }\r\n\r\n        .fade-in {\r\n            animation: fade-in 0.6s linear;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"variable-type-host\" :class=\"{ 'variable-value-error': isError }\">\r\n        <div>\r\n            <div>\r\n                <bk-button\r\n                    class=\"mr10\"\r\n                    \r\n                    @click=\"handleChooseIp\"\r\n                    v-bk-tooltips=\"descPopover\">\r\n                    <Icon type=\"plus\" />\r\n                    {{ '添加服务器' }}\r\n                </bk-button>\r\n                <bk-button\r\n                    v-show=\"isNotEmpty\"\r\n                    \r\n                    @click=\"handleClear\">\r\n                    {{ '清空' }}\r\n                </bk-button>\r\n            </div>\r\n            <server-panel\r\n                v-show=\"isNotEmpty\"\r\n                ref=\"choostIP\"\r\n                class=\"host-value-panel\"\r\n                :host-node-info=\"hostNodeInfo\"\r\n                detail-fullscreen\r\n                :editable=\"!readonly\"\r\n                @on-change=\"handleChange\" />\r\n            <p v-if=\"isError\" class=\"variable-error\">{{ '该变量的值必填' }}</p>\r\n        </div>\r\n        <choose-ip\r\n            v-model=\"isShowChooseIp\"\r\n            :host-node-info=\"hostNodeInfo\"\r\n            @on-change=\"handleChange\" />\r\n    </div>\r\n</template>\r\n<script>\r\n    import TaskHostNodeModel from '@model/task-host-node';\r\n    import ChooseIp from '@components/choose-ip';\r\n    import ServerPanel from '@components/choose-ip/server-panel';\r\n\r\n    export default {\r\n        components: {\r\n            ChooseIp,\r\n            ServerPanel,\r\n        },\r\n        props: {\r\n            data: {\r\n                type: Object,\r\n                required: true,\r\n            },\r\n            readonly: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isShowChooseIp: false,\r\n                hostNodeInfo: {},\r\n            };\r\n        },\r\n        computed: {\r\n            isNotEmpty () {\r\n                return !TaskHostNodeModel.isHostNodeInfoEmpty(this.hostNodeInfo);\r\n            },\r\n            isError () {\r\n                if (this.data.required !== 1) {\r\n                    return false;\r\n                }\r\n                return !this.isNotEmpty;\r\n            },\r\n            descPopover () {\r\n                return {\r\n                    theme: 'light',\r\n                    extCls: 'variable-desc-tippy',\r\n                    trigger: 'click mouseenter',\r\n                    hideOnClick: false,\r\n                    content: this.data.description,\r\n                    disabled: !this.data.description,\r\n                };\r\n            },\r\n        },\r\n        created () {\r\n            this.init();\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 解析默认值\r\n             */\r\n            init () {\r\n                if (this.data.defaultTargetValue) {\r\n                    this.hostNodeInfo = this.data.defaultTargetValue.hostNodeInfo;\r\n                } else {\r\n                    this.hostNodeInfo = this.data.targetValue.hostNodeInfo;\r\n                }\r\n            },\r\n            /**\r\n             * @desc 外部调用——移除无效主机\r\n             */\r\n            removeAllInvalidHost () {\r\n                window.changeAlert = true;\r\n                this.$refs.choostIP.removeAllInvalidHost();\r\n            },\r\n            /**\r\n             * @desc 编辑主机列表\r\n             */\r\n            handleChooseIp () {\r\n                this.isShowChooseIp = true;\r\n            },\r\n            /**\r\n             * @desc 清空主机列表\r\n             */\r\n            handleClear () {\r\n                const { hostNodeInfo } = new TaskHostNodeModel({});\r\n                this.hostNodeInfo = hostNodeInfo;\r\n                window.changeAlert = true;\r\n            },\r\n            /**\r\n             * @desc 提交编辑的数据\r\n             */\r\n            handleChange (hostNodeInfo) {\r\n                this.hostNodeInfo = Object.freeze(hostNodeInfo);\r\n                window.changeAlert = true;\r\n            },\r\n            /**\r\n             * @desc 外部调用——还原默认值\r\n             */\r\n            reset () {\r\n                this.init();\r\n            },\r\n            /**\r\n             * @desc 外部调用——值验证\r\n             * @returns {Promise}\r\n             */\r\n            validate () {\r\n                const { type, id, name } = this.data;\r\n                \r\n                const data = {\r\n                    id,\r\n                    name,\r\n                    type,\r\n                    value: '',\r\n                    targetValue: {\r\n                        hostNodeInfo: this.hostNodeInfo,\r\n                    },\r\n                };\r\n                return new Promise((resolve, reject) => {\r\n                    if (this.isError) {\r\n                        return reject(new Error('host error'));\r\n                    }\r\n                    resolve(data);\r\n                });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    .variable-type-host {\r\n        .host-value-panel {\r\n            margin-top: 10px;\r\n        }\r\n    }\r\n\r\n</style>\r\n","<template>\r\n    <div class=\"global-variable-edit-box\" ref=\"varBox\" :class=\"boxClasses\">\r\n        <div class=\"variable-name\" ref=\"varName\">\r\n            <span class=\"name-text\">{{ data.name }}</span>\r\n        </div>\r\n        <div class=\"variable-value\" ref=\"varValue\">\r\n            <component\r\n                ref=\"target\"\r\n                :is=\"typeCom\"\r\n                :data=\"data\"\r\n                :placement=\"placement\"\r\n                v-bind=\"$attrs\"\r\n                v-on=\"$listeners\" />\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import VariableModel from '@model/task/global-variable';\r\n    import TypeString from './string';\r\n    import TypeNamespace from './namespace';\r\n    import TypeHost from './host';\r\n    import TypePassword from './password';\r\n    import TypeArray from './array';\r\n\r\n    export default {\r\n        props: {\r\n            type: {\r\n                type: Number,\r\n                required: true,\r\n            },\r\n            data: {\r\n                type: Object,\r\n                required: true,\r\n            },\r\n            layout: {\r\n                type: String,\r\n                default: 'horizontal', // 水平：horizontal；垂直：vertical\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isError: false,\r\n                placement: '',\r\n            };\r\n        },\r\n        computed: {\r\n            typeCom () {\r\n                const comMap = {\r\n                    1: TypeString,\r\n                    2: TypeNamespace,\r\n                    3: TypeHost,\r\n                    4: TypePassword,\r\n                    5: TypeArray,\r\n                    6: TypeArray,\r\n                };\r\n                if (!Object.prototype.hasOwnProperty.call(comMap, this.type)) {\r\n                    return 'div';\r\n                }\r\n                \r\n                return comMap[this.type];\r\n            },\r\n            boxClasses () {\r\n                const classes = {\r\n                    'variable-required': this.data.required === 1,\r\n                };\r\n                if (this.layout === 'vertical') {\r\n                    classes.vertical = true;\r\n                }\r\n                return classes;\r\n            },\r\n        },\r\n        mounted () {\r\n            if (this.type === VariableModel.TYPE_HOST) {\r\n                this.placement = 'right';\r\n                return;\r\n            }\r\n            const containerWidth = this.$refs.varBox.clientWidth;\r\n            const labelWith = this.$refs.varName.clientWidth;\r\n            const valueWith = this.$refs.varValue.clientWidth;\r\n            this.placement = labelWith + valueWith + 220 > containerWidth ? 'top' : 'right';\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 外部调用——移除主机变量中的无效主机\r\n             */\r\n            removeAllInvalidHost () {\r\n                this.$refs.target.removeAllInvalidHost && this.$refs.target.removeAllInvalidHost();\r\n            },\r\n            /**\r\n             * @desc 外部调用——移除主机变量中的无效主机\r\n             */\r\n            reset () {\r\n                this.$refs.target.reset();\r\n            },\r\n            validate () {\r\n                return this.$refs.target.validate()\r\n                    .then((data) => {\r\n                        this.isError = false;\r\n                        return Promise.resolve(data);\r\n                    })\r\n                    .catch((err) => {\r\n                        this.isError = true;\r\n                        document.querySelector('.variable-value-error').scrollIntoView();\r\n                        return Promise.reject(err);\r\n                    });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .global-variable-edit-box {\r\n        display: flex;\r\n        flex: 1;\r\n        margin-bottom: 20px;\r\n\r\n        &.variable-required {\r\n            .variable-name {\r\n                white-space: normal;\r\n\r\n                .name-text {\r\n                    margin-right: -10px;\r\n\r\n                    &::after {\r\n                        width: 10px;\r\n                        margin-left: 0.2em;\r\n                        color: #ea3636;\r\n                        content: \"*\";\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        .variable-name {\r\n            padding-right: 28px;\r\n            font-size: 14px;\r\n            line-height: 32px;\r\n            color: #666;\r\n            text-align: right;\r\n            box-sizing: content-box;\r\n\r\n            .name-text {\r\n                white-space: nowrap;\r\n            }\r\n        }\r\n\r\n        .variable-value {\r\n            flex: 1;\r\n            max-width: 960px;\r\n        }\r\n\r\n        .variable-value-error {\r\n            .bk-form-input {\r\n                color: #ff5656;\r\n                border-color: #ff5656;\r\n            }\r\n        }\r\n\r\n        .variable-error {\r\n            margin-top: 4px;\r\n            margin-bottom: -6px;\r\n            font-size: 12px;\r\n            line-height: 1;\r\n            color: #ea3636;\r\n        }\r\n    }\r\n\r\n    .variable-desc-tippy {\r\n        .tippy-content {\r\n            max-width: 200px;\r\n            white-space: normal;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"toggle-display\">\r\n        <div\r\n            class=\"action\"\r\n            :class=\"{\r\n                open: isOpen,\r\n            }\"\r\n            @click=\"handleToggle\">\r\n            <template v-if=\"isOpen\">\r\n                <Icon type=\"angle-double-up\" class=\"toggle-arrow\" />\r\n                <span>{{ '收起未引用的变量' }} ({{ count }})</span>\r\n            </template>\r\n            <template v-else>\r\n                <Icon type=\"angle-double-down\" class=\"toggle-arrow\" />\r\n                <span>{{ '展开未引用的变量' }} ({{ count }})</span>\r\n            </template>\r\n        </div>\r\n        <div v-if=\"isOpen\">\r\n            <slot />\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    export default {\r\n        name: 'globalVariableToggleDisplay',\r\n        props: {\r\n            count: {\r\n                type: Number,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isOpen: false,\r\n            };\r\n        },\r\n        methods: {\r\n            handleToggle () {\r\n                this.isOpen = !this.isOpen;\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    .toggle-display {\r\n        .action {\r\n            display: flex;\r\n            align-items: center;\r\n            height: 32px;\r\n            font-size: 14px;\r\n            color: #3a84ff;\r\n            cursor: pointer;\r\n            border-radius: 2px;\r\n            user-select: none;\r\n\r\n            &.open {\r\n                padding-left: 8px;\r\n                background: #e1ecff;\r\n            }\r\n        }\r\n\r\n        .toggle-arrow {\r\n            margin-right: 3px;\r\n            font-size: 12px;\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template functional>\r\n    <div class=\"card-box\">\r\n        <div class=\"card-title\">{{ props.title }}</div>\r\n        <slot />\r\n    </div>\r\n</template>\r\n\r\n<style lang='postcss' scoped>\r\n    .card-box {\r\n        padding: 12px 20px 10px;\r\n\r\n        /* box-shadow: 0px 1px 2px 0px rgba(0, 0, 0, 0.1); */\r\n        background: #fff;\r\n        border: 1px solid #dde4eb;\r\n    }\r\n\r\n    .card-title {\r\n        margin-bottom: 30px;\r\n        font-size: 14px;\r\n        font-weight: bold;\r\n        line-height: 1;\r\n        color: #63656e;\r\n    }\r\n</style>\r\n","<template>\r\n    <jb-form-item :label=\"'错误处理'\">\r\n        <div class=\"error-handle-wraper\">\r\n            <bk-checkbox\r\n                v-bk-tooltips=\"tips\"\r\n                :value=\"formData[field]\"\r\n                :true-value=\"1\"\r\n                :false-value=\"0\"\r\n                @change=\"handleChange\">\r\n                {{ '自动忽略错误' }}\r\n            </bk-checkbox>\r\n        </div>\r\n    </jb-form-item>\r\n</template>\r\n<script>\r\n   \r\n    export default {\r\n        name: '',\r\n        props: {\r\n            field: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            formData: {\r\n                type: Object,\r\n                default: () => ({}),\r\n            },\r\n        },\r\n        created () {\r\n            this.tips = {\r\n                content: '步骤有执行失败的目标，将会自动忽略并进入下一步',\r\n                width: 310,\r\n                placement: 'right',\r\n            };\r\n        },\r\n        methods: {\r\n            handleChange (value) {\r\n                this.$emit('on-change', this.field, value);\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .error-handle-wraper {\r\n        display: flex;\r\n        align-items: center;\r\n        height: 100%;\r\n\r\n        .bk-checkbox-text {\r\n            border-bottom: 1px dashed #c4c6cc;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"source-file-action-extend\" @click.stop=\"\" @mouseleave=\"handleHide\">\r\n        <Icon type=\"more\" />\r\n        <div\r\n            ref=\"popoverContent\"\r\n            class=\"source-file-action-content\"\r\n            @click=\"handleWraperClick\"\r\n            @mouseover=\"handleShow\"\r\n            @mouseleave=\"handleClose\">\r\n            <slot />\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    const instanceMap = {};\r\n\r\n    export default {\r\n        name: 'SourceFileExtendAction',\r\n        created () {\r\n            this.id = `action_extend_${Math.random()}_${Date.now()}`;\r\n        },\r\n        mounted () {\r\n            this.init();\r\n        },\r\n        beforeDestroy () {\r\n            instanceMap[this.id].hide();\r\n            delete instanceMap[this.id];\r\n        },\r\n        methods: {\r\n            init () {\r\n                instanceMap[this.id] = this.$bkPopover(this.$el, {\r\n                    theme: 'source-file-action-extend-popover',\r\n                    interactive: true,\r\n                    placement: 'bottom',\r\n                    content: this.$refs.popoverContent,\r\n                    trigger: 'mouseover',\r\n                    arrow: true,\r\n                    onShow: () => {\r\n                        Object.keys(instanceMap).forEach((key) => {\r\n                            if (key !== this.id) {\r\n                                instanceMap[key].hide();\r\n                            }\r\n                        });\r\n                    },\r\n                });\r\n            },\r\n            handleWraperClick () {\r\n                this.handleClose();\r\n            },\r\n            handleHide () {\r\n                this.leaveTimer = setTimeout(() => {\r\n                    this.handleClose();\r\n                }, 3000);\r\n            },\r\n            handleShow () {\r\n                clearTimeout(this.leaveTimer);\r\n            },\r\n            handleClose () {\r\n                instanceMap[this.id] && instanceMap[this.id].hide();\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    html[lang=\"en-US\"] {\r\n        .source-file-action-content {\r\n            width: 154px;\r\n        }\r\n    }\r\n\r\n    .source-file-action-extend {\r\n        position: absolute;\r\n        top: 50%;\r\n        right: 16px;\r\n        z-index: 9;\r\n        display: flex;\r\n        width: 30px;\r\n        height: 30px;\r\n        font-size: 16px;\r\n        font-weight: normal;\r\n        color: #979ba5;\r\n        cursor: pointer;\r\n        border-radius: 50%;\r\n        transform: translateY(-50%);\r\n        user-select: none;\r\n        align-items: center;\r\n        justify-content: center;\r\n\r\n        &:hover,\r\n        &.tippy-active {\r\n            z-index: 10;\r\n            color: #3a84ff;\r\n            background: #dcdee5;\r\n        }\r\n    }\r\n\r\n    .source-file-action-extend-popover-theme {\r\n        padding: 0 !important;\r\n\r\n        .tippy-arrow {\r\n            display: none;\r\n        }\r\n\r\n        .source-file-action-content {\r\n            width: 93px;\r\n            font-size: 14px;\r\n            line-height: 32px;\r\n            color: #63656e;\r\n            background: #fff;\r\n            border: 1px solid #f0f1f5;\r\n            box-shadow: 0 2px 1px 0 rgb(185 203 222 / 50%);\r\n\r\n            .action-item {\r\n                padding-left: 15px;\r\n                cursor: pointer;\r\n\r\n                &:hover {\r\n                    color: #3a84ff;\r\n                    background: #e5efff;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n</style>\r\n","\r\n\r\n<template functional>\r\n    <div class=\"list-action-layout\">\r\n        <div class=\"right-box\">\r\n            <slot />\r\n        </div>\r\n        <div class=\"left-box\">\r\n            <slot name=\"right\" />\r\n        </div>\r\n    </div>\r\n</template>\r\n<style lang=\"postcss\">\r\n    .list-action-layout {\r\n        display: flex;\r\n        align-items: center;\r\n        margin-bottom: 20px;\r\n\r\n        .right-box {\r\n            display: flex;\r\n\r\n            & > * {\r\n                margin-right: 8px;\r\n            }\r\n        }\r\n\r\n        .left-box {\r\n            display: flex;\r\n            margin-left: auto;\r\n\r\n            & > * {\r\n                margin-left: 8px;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"render-related-script\">\r\n        <div class=\"tab-wraper\">\r\n            <div\r\n                class=\"tab-item\"\r\n                :class=\"{ active: listTab === 'template' }\"\r\n                @click=\"handleTabChange('template')\">\r\n                <div class=\"tab-name\">{{ '作业模板引用' }}</div>\r\n                <div class=\"tab-nums\">{{ info.relatedTaskTemplateNum }}</div>\r\n            </div>\r\n            <div\r\n                class=\"tab-item\"\r\n                :class=\"{ active: listTab === 'plan' }\"\r\n                @click=\"handleTabChange('plan')\">\r\n                <div class=\"tab-name\">{{ '执行方案引用' }}</div>\r\n                <div class=\"tab-nums\">{{ info.relatedTaskPlanNum }}</div>\r\n            </div>\r\n        </div>\r\n        <component\r\n            :is=\"listCom\"\r\n            :params=\"params\" />\r\n    </div>\r\n</template>\r\n<script>\r\n    import TemplateList from './template-list.vue';\r\n    import PlanList from './plan-list.vue';\r\n\r\n    export default {\r\n        name: 'RenderRelatedScript',\r\n        \r\n        props: {\r\n            mode: {\r\n                type: String,\r\n                validator (value) {\r\n                    return [\r\n                        'scriptList',\r\n                        'scriptVersionList',\r\n                    ].includes(value);\r\n                },\r\n                default: 'scriptList',\r\n            },\r\n            info: {\r\n                type: Object,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                listTab: 'template',\r\n            };\r\n        },\r\n        computed: {\r\n            listCom () {\r\n                const componentMap = {\r\n                    template: TemplateList,\r\n                    plan: PlanList,\r\n                };\r\n                return componentMap[this.listTab];\r\n            },\r\n            params () {\r\n                const params = {\r\n                    scriptId: this.info.id,\r\n                };\r\n                if (this.mode === 'scriptVersionList') {\r\n                    params.scriptVersionId = this.info.scriptVersionId;\r\n                }\r\n                return params;\r\n            },\r\n        },\r\n        methods: {\r\n            handleTabChange (tab) {\r\n                this.listTab = tab;\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    .render-related-script {\r\n        .tab-wraper {\r\n            display: flex;\r\n            padding: 20px 30px 0;\r\n            margin: -20px -30px 20px;\r\n            background: #f5f6fa;\r\n            border-bottom: 1px solid #dcdee5;\r\n\r\n            .tab-item {\r\n                display: flex;\r\n                height: 32px;\r\n                padding: 0 12px;\r\n                margin-right: 20px;\r\n                margin-bottom: -1px;\r\n                font-size: 13px;\r\n                line-height: 32px;\r\n                color: #63656e;\r\n                cursor: pointer;\r\n                background: #e1e3eb;\r\n                border: 1px solid #e1e3eb;\r\n                border-bottom: none;\r\n                border-top-right-radius: 4px;\r\n                border-top-left-radius: 4px;\r\n                transition: all 0.15s;\r\n                align-items: center;\r\n\r\n                &.active {\r\n                    color: ##313238;\r\n                    background: #fff;\r\n                    border-color: #dcdee5;\r\n\r\n                    .tab-nums {\r\n                        color: #63656e;\r\n                        background: #ebecf0;\r\n                    }\r\n\r\n                    .loading-flag {\r\n                        color: #fff;\r\n                    }\r\n                }\r\n            }\r\n\r\n            .tab-name {\r\n                margin-right: 4px;\r\n            }\r\n\r\n            .tab-nums {\r\n                height: 16px;\r\n                padding: 0 4px;\r\n                font-size: 12px;\r\n                line-height: 16px;\r\n                color: #63656e;\r\n                background: #ebecf0;\r\n                border-radius: 8px;\r\n                transition: all 0.15s;\r\n            }\r\n\r\n            .loading-flag {\r\n                color: #3a84ff;\r\n                animation: sync-fetch-loading 1s linear infinite;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"list-operation-extend\">\r\n        <Icon type=\"more\" class=\"icon\" />\r\n        <div\r\n            ref=\"content\"\r\n            class=\"list-operation-extend-wrapper\"\r\n            @click=\"handleClick\">\r\n            <slot />\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n\r\n    const instanceMap = {};\r\n\r\n    export default {\r\n        created () {\r\n            this.id = `${_.random(1, 1000)}_${Date.now()}_PopoverRef`;\r\n            this.timer = '';\r\n        },\r\n        mounted () {\r\n            this.init();\r\n        },\r\n        methods: {\r\n            init () {\r\n                instanceMap[this.id] = this.$bkPopover(this.$el, {\r\n                    theme: 'list-operation-extend-popover light',\r\n                    interactive: true,\r\n                    placement: 'bottom',\r\n                    content: this.$refs.content,\r\n                    trigger: 'click',\r\n                    arrow: true,\r\n                    size: 'small',\r\n                    onShow: () => {\r\n                        Object.keys(instanceMap).forEach((key) => {\r\n                            if (key !== this.id) {\r\n                                instanceMap[key].hide();\r\n                            }\r\n                        });\r\n                    },\r\n                });\r\n            },\r\n            handleClick () {\r\n                instanceMap[this.id].hide();\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .list-operation-extend {\r\n        display: inline-block;\r\n        width: 32px;\r\n        height: 32px;\r\n        margin-left: -14px;\r\n        line-height: 30px;\r\n        color: #868b97;\r\n        text-align: center;\r\n        cursor: pointer;\r\n        background: transparent;\r\n        border-radius: 50%;\r\n\r\n        .icon {\r\n            font-size: 14px;\r\n        }\r\n\r\n        &:hover {\r\n            background: #dcdee5;\r\n\r\n            .icon {\r\n                color: #3a84ff;\r\n            }\r\n        }\r\n    }\r\n\r\n    .list-operation-extend-wrapper {\r\n        display: flex;\r\n        flex-direction: column;\r\n\r\n        .action-item {\r\n            font-size: 14px;\r\n            line-height: 32px;\r\n            color: #868b97;\r\n            text-align: center;\r\n            cursor: pointer;\r\n\r\n            &:hover {\r\n                color: #3a84ff;\r\n            }\r\n\r\n            &.disabled {\r\n                color: #dcdee5;\r\n                cursor: not-allowed;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div v-if=\"isNotPermission\" class=\"apply-permission-page\">\r\n        <div class=\"page-main\">\r\n            <ask-permission :permission-list=\"authResult.requiredPermissions\" />\r\n            <div class=\"footer\">\r\n                <bk-button theme=\"primary\" class=\"mr10\" @click=\"handleApply\" v-if=\"isAppleFlag\">{{ applyText }}</bk-button>\r\n                <bk-button theme=\"primary\" @click=\"handleReload\" v-else>{{ appliedText }}</bk-button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div v-else>\r\n        <slot />\r\n    </div>\r\n</template>\r\n<script>\r\n    import EventBus from '@utils/event-bus';\r\n       import AskPermission from './index';\r\n\r\n    export default {\r\n        components: {\r\n            AskPermission,\r\n        },\r\n        data () {\r\n            return {\r\n                isAppleFlag: true,\r\n                isNotPermission: false,\r\n            };\r\n        },\r\n        created () {\r\n            this.applyText = '去申请';\r\n            this.appliedText = '已申请';\r\n            EventBus.$once('permission-catch', this.permissionHold);\r\n            this.$once('hook:beforeDestroy', () => {\r\n                EventBus.$off('permission-catch', this.permissionHold);\r\n            });\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 捕获权限异常\r\n             */\r\n            permissionHold (authResult) {\r\n                this.isNotPermission = true;\r\n                this.authResult = authResult;\r\n            },\r\n            /**\r\n             * @desc 跳转权限中心\r\n             */\r\n            handleApply () {\r\n                window.open(this.authResult.applyUrl, '_blank');\r\n                this.isAppleFlag = false;\r\n            },\r\n            /**\r\n             * @desc 已申请刷新页面\r\n             */\r\n            handleReload () {\r\n                location.reload();\r\n            },\r\n            \r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    .apply-permission-page {\r\n        display: flex;\r\n        align-items: center;\r\n        height: 100%;\r\n        margin-top: -30px;\r\n\r\n        .page-main {\r\n            width: 768px;\r\n            padding: 24px;\r\n            margin: 60px auto;\r\n            background-color: #fff;\r\n            border-radius: 2px;\r\n            box-shadow: 0 1px 2px 0 rgb(0 0 0 / 5%);\r\n        }\r\n\r\n        .footer {\r\n            margin: 24px auto 6px;\r\n            text-align: center;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"variable-use-guide\">\r\n        <div class=\"header\">\r\n            <div>{{ '使用指引' }}</div>\r\n            <div class=\"tab-container\">\r\n                <div\r\n                    class=\"tab-item\"\r\n                    :class=\"{ active: tab === 'global' }\"\r\n                    @click=\"handleTabToggle('global')\">\r\n                    {{ '全局变量'}}\r\n                </div>\r\n                <div\r\n                    class=\"tab-item\"\r\n                    :class=\"{ active: tab === 'magic' }\"\r\n                    @click=\"handleTabToggle('magic')\">\r\n                    {{ '魔法变量' }}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <scroll-faker style=\"height: calc(100% - 88px);\">\r\n            <div class=\"content\">\r\n                <div v-html=\"contentHtml\" style=\"margin-top: -24px;\" />\r\n            </div>\r\n        </scroll-faker>\r\n        <div class=\"close-btn\" @click=\"handleClose\">\r\n            <Icon type=\"close\" />\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import 'highlight.js/styles/googlecode.css';\r\n    import globalVariable from './global-variable.md';\r\n    import globalVariableEN from './global-variable.en.md';\r\n    import magicVariable from './magic-variable.md';\r\n    import magicVariableEN from './magic-variable.en.md';\r\n\r\n    export default {\r\n        name: '',\r\n        data () {\r\n            return {\r\n                tab: 'global',\r\n            };\r\n        },\r\n        computed: {\r\n            contentHtml () {\r\n                const contentMap = {\r\n                    global: globalVariableEN,\r\n                    magic: magicVariableEN,\r\n                };\r\n                if ('zh-CN' === 'zh-CN') {\r\n                    Object.assign(contentMap, {\r\n                        global: globalVariable,\r\n                        magic: magicVariable,\r\n                    });\r\n                }\r\n                return contentMap[this.tab];\r\n            },\r\n        },\r\n        methods: {\r\n            handleTabToggle (tab) {\r\n                this.tab = tab;\r\n                console.log('fromasasd = =', this.tab);\r\n            },\r\n            handleClose () {\r\n                this.$emit('on-close');\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    html[lang=\"en-US\"] {\r\n        .variable-use-guide {\r\n            .tab-container {\r\n                .tab-item {\r\n                    width: 120px;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    .variable-use-guide {\r\n        position: relative;\r\n        width: 366px;\r\n        height: 100%;\r\n        background: #fff;\r\n        border-left: 1px solid #dcdee5;\r\n\r\n        .header {\r\n            padding-top: 16px;\r\n            padding-left: 20px;\r\n            font-size: 16px;\r\n            color: #313238;\r\n            background: #f0f1f5;\r\n            border-bottom: 1px solid #dcdee5;\r\n\r\n            .tab-container {\r\n                display: flex;\r\n                margin-top: 15px;\r\n\r\n                .tab-item {\r\n                    width: 84px;\r\n                    height: 35px;\r\n                    margin-right: 8px;\r\n                    margin-bottom: -1px;\r\n                    font-size: 13px;\r\n                    line-height: 35px;\r\n                    color: #63656e;\r\n                    text-align: center;\r\n                    cursor: pointer;\r\n                    background: #dcdee5;\r\n                    border: 1px solid #dcdee5;\r\n                    border-bottom: none;\r\n                    border-top-right-radius: 4px;\r\n                    border-top-left-radius: 4px;\r\n                    transition: all 0.1s;\r\n\r\n                    &.active {\r\n                        color: #313238;\r\n                        background: #fff;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        .content {\r\n            padding: 15px 20px;\r\n            overflow: hidden;\r\n            line-height: 18px;\r\n            color: #63656e;\r\n\r\n            h1 {\r\n                margin-top: 24px;\r\n                font-size: 13px;\r\n                font-weight: bold;\r\n            }\r\n\r\n            p {\r\n                margin-top: 6px;\r\n            }\r\n\r\n            code {\r\n                padding: 0 4px;\r\n                font-size: 12px;\r\n                color: #ea3636;\r\n                white-space: nowrap;\r\n                background: #fffafa;\r\n                border: 1px solid #ffecec;\r\n                border-radius: 2px;\r\n            }\r\n\r\n            pre {\r\n                code {\r\n                    display: block;\r\n                    width: 100%;\r\n                    padding: 8px 12px;\r\n                    margin-top: 10px;\r\n                    overflow-x: auto;\r\n                    line-height: 22px;\r\n                    color: #6a9a7b;\r\n                    text-align: left;\r\n                    white-space: pre;\r\n                    background: #f5f6fa;\r\n                    border: none;\r\n                }\r\n            }\r\n\r\n            ul {\r\n                & > li {\r\n                    position: relative;\r\n                    padding-left: 11px;\r\n                    color: #313238;\r\n\r\n                    &::before {\r\n                        position: absolute;\r\n                        top: 6px;\r\n                        left: 0;\r\n                        width: 5px;\r\n                        height: 5px;\r\n                        margin-right: 6px;\r\n                        vertical-align: middle;\r\n                        background: #979ba5;\r\n                        border-radius: 50%;\r\n                        content: \"\";\r\n                    }\r\n\r\n                    &:nth-child(n+2) {\r\n                        margin-top: 20px;\r\n                    }\r\n                }\r\n            }\r\n\r\n            ol {\r\n                color: #63656e;\r\n            }\r\n\r\n            li {\r\n                margin-top: 6px;\r\n            }\r\n        }\r\n\r\n        .close-btn {\r\n            position: absolute;\r\n            top: 10px;\r\n            right: 10px;\r\n            width: 26px;\r\n            height: 26px;\r\n            font-size: 18px;\r\n            line-height: 26px;\r\n            color: #979ba5;\r\n            text-align: center;\r\n            cursor: pointer;\r\n            border-radius: 50%;\r\n\r\n            &:hover {\r\n                background-color: #dcdee5;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <jb-form :model=\"formData\" :rules=\"rules\" ref=\"varStringForm\">\r\n        <jb-form-item :label=\"'变量名称'\" required property=\"name\">\r\n            <jb-input\r\n                v-model=\"formData.name\"\r\n                :placeholder=\"'变量名仅支持大小写英文字母或下划线 [必填]'\"\r\n                :maxlength=\"30\" />\r\n        </jb-form-item>\r\n        <jb-form-item\r\n            ref=\"defaultValue\"\r\n            :label=\"'初始值'\"\r\n            :desc=\"'仅作用于创建执行方案时的初始变量值，后续更改不会同步到执行方案'\"\r\n            property=\"defaultValue\">\r\n            <bk-input\r\n                class=\"var-default-value\"\r\n                :placeholder=\"'请输入变量的初始值 [可选]'\"\r\n                v-model=\"formData.defaultValue\" />\r\n        </jb-form-item>\r\n        <jb-form-item :label=\"'变量描述'\">\r\n            <bk-input\r\n                v-model=\"formData.description\"\r\n                type=\"textarea\"\r\n                :placeholder=\"'这里可以备注变量的用途、使用说明等信息 [可选]'\"\r\n                maxlength=\"100\" />\r\n        </jb-form-item>\r\n        <jb-form-item ext-cls=\"changeable-cls\">\r\n            <bk-checkbox\r\n                v-model=\"formData.changeable\"\r\n                :true-value=\"1\"\r\n                :false-value=\"0\"\r\n                v-bk-tooltips.right=\"'变量的值在执行中可变'\">\r\n                {{ '赋值可变' }}\r\n            </bk-checkbox>\r\n        </jb-form-item>\r\n        <jb-form-item style=\"margin-bottom: 0;\">\r\n            <bk-checkbox\r\n                v-model=\"formData.required\"\r\n                :true-value=\"1\"\r\n                :false-value=\"0\">\r\n                {{ '执行时必填' }}\r\n            </bk-checkbox>\r\n        </jb-form-item>\r\n    </jb-form>\r\n</template>\r\n<script>\r\n       import {\r\n        globalVariableNameRule,\r\n    } from '@utils/validator';\r\n    import JbInput from '@components/jb-input';\r\n\r\n    export default {\r\n        name: 'VarString',\r\n        components: {\r\n            JbInput,\r\n        },\r\n        props: {\r\n            variable: {\r\n                type: Array,\r\n                default () {\r\n                    return [];\r\n                },\r\n            },\r\n            data: {\r\n                type: Object,\r\n                default: () => ({}),\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                formData: { ...this.data },\r\n            };\r\n        },\r\n        created () {\r\n            this.rules = {\r\n                name: [\r\n                    {\r\n                        required: true,\r\n                        message: '变量名称必填',\r\n                        trigger: 'blur',\r\n                    },\r\n                    {\r\n                        validator: globalVariableNameRule.validator,\r\n                        message: globalVariableNameRule.message,\r\n                        trigger: 'blur',\r\n                    },\r\n                    {\r\n                        validator: val => !this.variable.some(item => item.name === val),\r\n                        message: '变量名称已存在，请重新输入',\r\n                        trigger: 'blur',\r\n                    },\r\n                ],\r\n            };\r\n        },\r\n        methods: {\r\n            submit () {\r\n                return this.$refs.varStringForm.validate()\r\n                    .then(() => {\r\n                        this.$emit('on-change', {\r\n                            ...this.formData,\r\n                            type: 1,\r\n                        });\r\n                    }, validator => Promise.reject(validator.content));\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .changeable-cls {\r\n        .bk-form-checkbox .bk-checkbox-text {\r\n            padding-bottom: 2px;\r\n            border-bottom: 1px dashed #c4c6cc;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div>\r\n        <jb-form ref=\"varHostForm\" :model=\"formData\" :rules=\"rules\">\r\n            <jb-form-item :label=\"'变量名称'\" required :property=\"'name'\">\r\n                <jb-input\r\n                    v-model=\"formData.name\"\r\n                    :maxlength=\"30\"\r\n                    :placeholder=\"'变量名仅支持大小写英文字母或下划线 [必填]'\" />\r\n            </jb-form-item>\r\n            <jb-form-item\r\n                ref=\"defaultTargetValue\"\r\n                :label=\"'初始值'\"\r\n                :desc=\"'仅作用于创建执行方案时的初始变量值，后续更改不会同步到执行方案'\"\r\n                property=\"defaultTargetValue\">\r\n                <div>\r\n                    <bk-button class=\"mr10\" @click=\"handleOpenChooseIp\">\r\n                        <Icon type=\"plus\" />\r\n                        {{ '选择主机' }}\r\n                    </bk-button>\r\n                    <bk-button v-if=\"isShowClear\" @click=\"handleClearDefault\">\r\n                        {{ '清空' }}\r\n                    </bk-button>\r\n                </div>\r\n                <server-panel\r\n                    v-if=\"isShowClear\"\r\n                    class=\"view-server-panel\"\r\n                    :host-node-info=\"formData.defaultTargetValue.hostNodeInfo\"\r\n                    editable\r\n                    detail-fullscreen\r\n                    @on-change=\"handleHostChange\" />\r\n            </jb-form-item>\r\n            <jb-form-item :label=\"'变量描述'\">\r\n                <bk-input\r\n                    v-model=\"formData.description\"\r\n                    :placeholder=\"'这里可以备注变量的用途、使用说明等信息 [可选]'\"\r\n                    type=\"textarea\"\r\n                    maxlength=\"100\" />\r\n            </jb-form-item>\r\n            <jb-form-item style=\"margin-bottom: 0;\">\r\n                <bk-checkbox v-model=\"formData.required\" :true-value=\"1\" :false-value=\"0\">\r\n                    {{ '执行时必填' }}\r\n                </bk-checkbox>\r\n            </jb-form-item>\r\n        </jb-form>\r\n        <choose-ip\r\n            v-model=\"isShowChooseIp\"\r\n            :host-node-info=\"formData.defaultTargetValue.hostNodeInfo\"\r\n            @on-change=\"handleHostChange\" />\r\n    </div>\r\n</template>\r\n<script>\r\n       import TaskGlobalVariableModel from '@model/task/global-variable';\r\n    import TaskHostNodeModel from '@model/task-host-node';\r\n    import {\r\n        globalVariableNameRule,\r\n    } from '@utils/validator';\r\n    import JbInput from '@components/jb-input';\r\n    import ChooseIp from '@components/choose-ip';\r\n    import ServerPanel from '@components/choose-ip/server-panel';\r\n\r\n    export default {\r\n        name: 'VarHost',\r\n        components: {\r\n            JbInput,\r\n            ChooseIp,\r\n            ServerPanel,\r\n        },\r\n        props: {\r\n            variable: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n            data: {\r\n                type: Object,\r\n                default: () => ({}),\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                formData: { ...this.data },\r\n                isShowChooseIp: false,\r\n            };\r\n        },\r\n        computed: {\r\n            /**\r\n             * @desc 显示清空按钮\r\n             * @returns { Boolean }\r\n             */\r\n            isShowClear () {\r\n                return !TaskHostNodeModel.isHostNodeInfoEmpty(this.formData.defaultTargetValue.hostNodeInfo);\r\n            },\r\n        },\r\n        created () {\r\n            this.rules = {\r\n                name: [\r\n                    {\r\n                        required: true,\r\n                        message: '变量名称必填',\r\n                        trigger: 'blur',\r\n                    },\r\n                    {\r\n                        validator: globalVariableNameRule.validator,\r\n                        message: globalVariableNameRule.message,\r\n                        trigger: 'blur',\r\n                    },\r\n                    {\r\n                        validator: val => !this.variable.some(item => item.name === val),\r\n                        message: '变量名称已存在，请重新输入',\r\n                        trigger: 'blur',\r\n                    },\r\n                ],\r\n            };\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 编辑主机信息\r\n             * @param { hostNodeInfo } 主机信息\r\n             */\r\n            handleHostChange (hostNodeInfo) {\r\n                this.formData.defaultTargetValue.hostNodeInfo = hostNodeInfo;\r\n            },\r\n            /**\r\n             * @desc 显示 IP 选择器\r\n             */\r\n            handleOpenChooseIp () {\r\n                this.isShowChooseIp = true;\r\n            },\r\n            /**\r\n             * @desc 清空主机信息\r\n             */\r\n            handleClearDefault () {\r\n                const { hostNodeInfo } = new TaskHostNodeModel({});\r\n                this.formData.defaultTargetValue.hostNodeInfo = hostNodeInfo;\r\n            },\r\n            /**\r\n             * @desc 保存变量\r\n             */\r\n            submit () {\r\n                return this.$refs.varHostForm.validate()\r\n                    .then(() => {\r\n                        this.$emit('on-change', {\r\n                            ...this.formData,\r\n                            type: TaskGlobalVariableModel.TYPE_HOST,\r\n                        });\r\n                    }, validator => Promise.reject(validator.content));\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\" scoped>\r\n    .view-server-panel {\r\n        margin-top: 10px;\r\n    }\r\n</style>\r\n","<template>\r\n    <jb-form :model=\"formData\" :rules=\"rules\" ref=\"varArrayForm\">\r\n        <jb-form-item :label=\"'数组类型'\" required property=\"name\">\r\n            <div class=\"array-type-group\">\r\n                <bk-radio-group :value=\"arrayType\" @change=\"handleArrayTypeChange\">\r\n                    <bk-radio-button\r\n                        class=\"item\"\r\n                        :value=\"5\"\r\n                        >\r\n                        {{ '关联数组' }}\r\n                    </bk-radio-button>\r\n                    <bk-radio-button\r\n                        class=\"item\"\r\n                        :value=\"6\"\r\n                        >\r\n                        {{ '索引数组' }}\r\n                    </bk-radio-button>\r\n                </bk-radio-group>\r\n            </div>\r\n        </jb-form-item>\r\n        <jb-form-item :label=\"'变量名称'\" required property=\"name\">\r\n            <jb-input\r\n                v-model=\"formData.name\"\r\n                :placeholder=\"'变量名仅支持大小写英文字母或下划线 [必填]'\"\r\n                :maxlength=\"30\" />\r\n        </jb-form-item>\r\n        <jb-form-item\r\n            ref=\"defaultValue\"\r\n            :label=\"'初始值'\"\r\n            :desc=\"'仅作用于创建执行方案时的初始变量值，后续更改不会同步到执行方案'\"\r\n            property=\"defaultValue\">\r\n            <bk-input\r\n                class=\"var-default-value\"\r\n                :placeholder=\"'请输入变量的初始值 [可选]'\"\r\n                v-model=\"formData.defaultValue\" />\r\n        </jb-form-item>\r\n        <jb-form-item :label=\"'变量描述'\">\r\n            <bk-input\r\n                v-model=\"formData.description\"\r\n                type=\"textarea\"\r\n                :placeholder=\"'这里可以备注变量的用途、使用说明等信息 [可选]'\"\r\n                maxlength=\"100\" />\r\n        </jb-form-item>\r\n        <jb-form-item class=\"form-item-changeable\">\r\n            <bk-checkbox\r\n                v-model=\"formData.changeable\"\r\n                :true-value=\"1\"\r\n                :false-value=\"0\"\r\n                v-bk-tooltips.right=\"'变量的值在执行中可变'\">\r\n                {{ '赋值可变' }}\r\n            </bk-checkbox>\r\n        </jb-form-item>\r\n        <jb-form-item style=\"margin-bottom: 0;\">\r\n            <bk-checkbox\r\n                v-model=\"formData.required\"\r\n                :true-value=\"1\"\r\n                :false-value=\"0\">\r\n                {{ '执行时必填' }}\r\n            </bk-checkbox>\r\n        </jb-form-item>\r\n    </jb-form>\r\n</template>\r\n<script>\r\n       import {\r\n        globalVariableNameRule,\r\n    } from '@utils/validator';\r\n    import JbInput from '@components/jb-input';\r\n\r\n    export default {\r\n        name: 'VarArray',\r\n        components: {\r\n            JbInput,\r\n        },\r\n        props: {\r\n            variable: {\r\n                type: Array,\r\n                default () {\r\n                    return [];\r\n                },\r\n            },\r\n            data: {\r\n                type: Object,\r\n                default () {\r\n                    return {};\r\n                },\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                arrayType: 5,\r\n                formData: { ...this.data },\r\n            };\r\n        },\r\n        computed: {\r\n            isEdit () {\r\n                return !!this.data.name;\r\n            },\r\n        },\r\n        watch: {\r\n            data: {\r\n                handler (data) {\r\n                    if (data.name) {\r\n                        this.arrayType = data.type;\r\n                    }\r\n                },\r\n                immediate: true,\r\n            },\r\n            \r\n        },\r\n        created () {\r\n            this.rules = {\r\n                name: [\r\n                    {\r\n                        required: true,\r\n                        message: '变量名称必填',\r\n                        trigger: 'blur',\r\n                    },\r\n                    {\r\n                        validator: globalVariableNameRule.validator,\r\n                        message: globalVariableNameRule.message,\r\n                        trigger: 'blur',\r\n                    },\r\n                    {\r\n                        validator: val => !this.variable.some(item => item.name === val),\r\n                        message: '变量名称已存在，请重新输入',\r\n                        trigger: 'blur',\r\n                    },\r\n                ],\r\n            };\r\n        },\r\n        methods: {\r\n            handleArrayTypeChange (value) {\r\n                this.arrayType = value;\r\n            },\r\n            submit () {\r\n                return this.$refs.varArrayForm.validate()\r\n                    .then(() => {\r\n                        this.$emit('on-change', {\r\n                            ...this.formData,\r\n                            type: this.arrayType,\r\n                        });\r\n                    }, validator => Promise.reject(validator.content));\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .form-item-changeable {\r\n        .bk-form-checkbox .bk-checkbox-text {\r\n            padding-bottom: 2px;\r\n            border-bottom: 1px dashed #c4c6cc;\r\n        }\r\n    }\r\n\r\n    .array-type-group {\r\n        position: relative;\r\n        z-index: 1;\r\n\r\n        .item {\r\n            .bk-radio-button-text {\r\n                width: 108px;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div ref=\"detailLayout\" class=\"jb-detail-layout\" :class=\"[mode, layout]\">\r\n        <slot />\r\n    </div>\r\n</template>\r\n<script>\r\n    export default {\r\n        name: 'JbDetailLayout',\r\n        props: {\r\n            mode: {\r\n                type: String,\r\n                default: 'normal', // normal, see\r\n            },\r\n            layout: {\r\n                type: String,\r\n                default: 'horizontal', // horizontal, vertical\r\n            },\r\n            isWarp: {\r\n                type: Boolean,\r\n            },\r\n        },\r\n        created () {\r\n            this.childrenNum = this.$slots.default;\r\n        },\r\n        updated () {\r\n            const childrenNum = this.$slots.default;\r\n            if (this.childrenNum !== childrenNum) {\r\n                this.init();\r\n                this.childrenNum = childrenNum;\r\n            }\r\n        },\r\n        mounted () {\r\n            const isShowLayout = this.$refs.detailLayout.getBoundingClientRect().width > 0;\r\n            if (isShowLayout) {\r\n                this.init();\r\n            }\r\n        },\r\n        methods: {\r\n            init () {\r\n                if (this.layout === 'vertical') {\r\n                    return;\r\n                }\r\n                const $layoutEle = this.$refs.detailLayout;\r\n                const $layoutDetailList = $layoutEle.querySelectorAll('.detail-label');\r\n\r\n                let max = 0;\r\n                $layoutDetailList.forEach((item) => {\r\n                    const { width } = item.getBoundingClientRect();\r\n                    max = Math.max(max, width);\r\n                });\r\n                $layoutDetailList.forEach((item) => {\r\n                    item.style.width = `${max}px`;\r\n                });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .jb-detail-layout {\r\n        &.see {\r\n            .detail-label {\r\n                color: #b2b5bd;\r\n            }\r\n        }\r\n\r\n        &.vertical {\r\n            .detail-label {\r\n                justify-content: flex-start;\r\n            }\r\n\r\n            .detail-item {\r\n                flex-direction: column;\r\n                align-items: stretch;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"detail-item\" :class=\"`design-layout-${layout}`\">\r\n        <div class=\"detail-label\">\r\n            <span>{{ label }}</span>\r\n        </div>\r\n        <div class=\"detail-content\">\r\n            <slot />\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    export default {\r\n        name: '',\r\n        props: {\r\n            label: {\r\n                type: String,\r\n                default: '',\r\n            },\r\n            layout: {\r\n                type: String,\r\n                default: '', // horizontal, vertical\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    .detail-item {\r\n        display: flex;\r\n        font-size: 14px;\r\n        line-height: 32px;\r\n        color: #313238;\r\n        align-items: flex-start;\r\n        justify-content: flex-end;\r\n\r\n        &.design-layout-horizontal {\r\n            flex-direction: row !important;\r\n        }\r\n\r\n        &.design-layout-vertical {\r\n            flex-direction: column !important;\r\n\r\n            .detail-content {\r\n                width: 100%;\r\n            }\r\n        }\r\n    }\r\n\r\n    .detail-label {\r\n        display: flex;\r\n        padding-right: 2px;\r\n        color: #63656e;\r\n        text-align: right;\r\n        word-break: keep-all;\r\n        white-space: pre;\r\n        align-items: center;\r\n        justify-content: flex-end;\r\n        flex: 0 0 auto;\r\n    }\r\n\r\n    .detail-content {\r\n        flex: 1;\r\n        color: #63656e;\r\n        word-break: break-all;\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"jb-edit-textarea\" :class=\"mode\">\r\n        <div\r\n            v-if=\"!isEditing\"\r\n            class=\"render-value-box\"\r\n            @click.stop=\"handleBlockShowEdit\">\r\n            <div\r\n                class=\"render-text-box\"\r\n                ref=\"valueTextBox\"\r\n                @copy=\"handleCopy\"\r\n                :style=\"boxStyles\">\r\n                <slot v-bind:value=\"newVal\">{{ renderText }}</slot>\r\n                <span\r\n                    v-if=\"isShowMore\"\r\n                    class=\"text-whole\"\r\n                    @click.stop=\"handleExpandAll\">\r\n                    <template v-if=\"isExpand\">\r\n                        <Icon type=\"angle-double-up\" style=\"font-size: 12px;\" />\r\n                        <span>收起</span>\r\n                    </template>\r\n                    <template v-else>\r\n                        <Icon type=\"angle-double-down\" style=\"font-size: 12px;\" />\r\n                        <span>展开</span>\r\n                    </template>\r\n                </span>\r\n            </div>\r\n            <div v-if=\"!readonly\" class=\"edit-action-box\">\r\n                <Icon\r\n                    v-if=\"!isBlock && !isSubmiting\"\r\n                    type=\"edit-2\"\r\n                    class=\"edit-action\"\r\n                    @click.self.stop=\"handleShowInput\" />\r\n                <Icon\r\n                    v-if=\"isSubmiting\"\r\n                    type=\"loading-circle\"\r\n                    class=\"edit-loading\" />\r\n            </div>\r\n        </div>\r\n        <div v-else @click.stop=\"\">\r\n            <jb-textarea\r\n                v-model=\"newVal\"\r\n                class=\"edit-value-box\"\r\n                ref=\"input\"\r\n                :rows=\"rows\"\r\n                v-bind=\"$attrs\"\r\n                @blur=\"handleInputBlur\" />\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n       import JbTextarea from '@components/jb-textarea';\r\n\r\n    export default {\r\n        name: 'JbEditTextarea',\r\n        components: {\r\n            JbTextarea,\r\n        },\r\n        props: {\r\n            /**\r\n             * @value block 块级交互\r\n             * @value ‘’ 默认鼠标点击编辑按钮\r\n             */\r\n            mode: {\r\n                type: String,\r\n                default: '',\r\n            },\r\n            field: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            value: {\r\n                type: String,\r\n                default: '',\r\n            },\r\n            // 忽略换行强制文本在一行显示\r\n            singleRowRender: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n            rows: {\r\n                type: Number,\r\n                default: 3,\r\n            },\r\n            remoteHander: {\r\n                type: Function,\r\n                default: () => Promise.resolve(),\r\n            },\r\n            rules: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n            readonly: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isEditing: false,\r\n                isSubmiting: false,\r\n                isExpand: false,\r\n                newVal: this.value,\r\n                renderLength: 0,\r\n            };\r\n        },\r\n        computed: {\r\n            renderText () {\r\n                if (this.newVal.length === this.renderLength) {\r\n                    return this.newVal;\r\n                }\r\n                if (this.isExpand) {\r\n                    return this.newVal;\r\n                }\r\n                if (this.renderLength < 1) {\r\n                    if (!this.newVal) {\r\n                        return '--';\r\n                    }\r\n                    return this.newVal;\r\n                }\r\n                return `${this.newVal.slice(0, this.renderLength)}...`;\r\n            },\r\n            isShowMore () {\r\n                return this.newVal.length > this.renderLength && this.renderLength > 0;\r\n            },\r\n            boxStyles () {\r\n                const styles = {\r\n                    'max-height': this.isExpand ? 'unset' : '78px',\r\n                };\r\n                if (this.singleRowRender) {\r\n                    styles.height = '26px';\r\n                    styles['max-width'] = '100%';\r\n                    styles['text-overflow'] = 'ellipsis';\r\n                    styles['white-space'] = 'nowrap';\r\n                }\r\n                return styles;\r\n            },\r\n            isBlock () {\r\n                return this.mode === 'block';\r\n            },\r\n        },\r\n        watch: {\r\n            value: {\r\n                handler (newVal) {\r\n                    this.newVal = newVal;\r\n                    if (this.newVal) {\r\n                        this.calcEllTextLength();\r\n                    }\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        mounted () {\r\n            document.body.addEventListener('click', this.handleHideInput);\r\n            this.$once('hook:beforeDestroy', () => {\r\n                document.body.removeEventListener('click', this.handleHideInput);\r\n            });\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 计算默认展示的文本宽度\r\n             *\r\n             * settimeout 保证计算过程在组件渲染之后\r\n             */\r\n            calcEllTextLength () {\r\n                if (this.$slots.default) {\r\n                    return;\r\n                }\r\n                if (this.isExpand) {\r\n                    return;\r\n                }\r\n                setTimeout(() => {\r\n                    const valLength = this.newVal.length;\r\n                    const $el = document.createElement('div');\r\n                    $el.style.opacity = 0;\r\n                    $el.style.zIndex = '-1';\r\n                    if (this.singleRowRender) {\r\n                        $el.style.wordBreak = 'keep-all';\r\n                        $el.style.whiteSpace = 'pre';\r\n                    }\r\n                    \r\n                    this.$refs.valueTextBox.appendChild($el);\r\n\r\n                    const lineHeight = 24;\r\n                    const maxLine = 3;\r\n                    const maxHeight = lineHeight * maxLine;\r\n                    let realHeight = 0;\r\n                    let realLength = 1;\r\n                \r\n                    const calcLength = () => {\r\n                        const text = this.newVal.slice(0, realLength);\r\n                        $el.innerText = `${text} 展开展开`;\r\n                        Promise.resolve()\r\n                            .then(() => {\r\n                                realHeight = $el.getBoundingClientRect().height;\r\n                                if (realHeight <= maxHeight && realLength < valLength) {\r\n                                    realLength += 2;\r\n                                    calcLength();\r\n                                }\r\n                            });\r\n                    };\r\n                    calcLength();\r\n                    setTimeout(() => {\r\n                        this.renderLength = 0;\r\n                        if (realHeight > lineHeight) {\r\n                            this.renderLength = realLength >= valLength ? valLength : realLength - 4;\r\n                        }\r\n                        this.$refs.valueTextBox.removeChild($el);\r\n                    });\r\n                });\r\n            },\r\n            /**\r\n             * @desc 切换编辑状态\r\n             */\r\n            handleBlockShowEdit () {\r\n                if (!this.isBlock) {\r\n                    return;\r\n                }\r\n                this.handleShowInput();\r\n            },\r\n            /**\r\n             * @desc 开始编辑\r\n             *\r\n             * 阻止事件的冒泡\r\n             * 手动触发body的 click 事件，\r\n             */\r\n            handleShowInput () {\r\n                document.body.click();\r\n                this.isEditing = true;\r\n                this.$nextTick(() => {\r\n                    this.$refs.input.focus();\r\n                });\r\n            },\r\n            /**\r\n             * @desc 输入框失去焦点\r\n             *\r\n             * 值没有改变不需要提交\r\n             */\r\n            handleInputBlur () {\r\n                this.isEditing = false;\r\n                if (this.newVal === this.value) {\r\n                    return;\r\n                }\r\n                this.isSubmiting = true;\r\n                this.remoteHander({\r\n                    [this.field]: this.newVal,\r\n                }).then(() => {\r\n                    this.$emit('on-change', {\r\n                        [this.field]: this.newVal,\r\n                    });\r\n                    this.calcEllTextLength();\r\n                    this.messageSuccess('编辑成功');\r\n                })\r\n                    .finally(() => {\r\n                        this.isSubmiting = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 退出编辑状态\r\n             */\r\n            handleHideInput (event) {\r\n                if (event.path && event.path.length > 0) {\r\n                    // eslint-disable-next-line no-plusplus\r\n                    for (let i = 0; i < event.path.length; i++) {\r\n                        const target = event.path[i];\r\n                        if (target.className === 'jb-edit-textarea') {\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n                this.isEditing = false;\r\n            },\r\n            /**\r\n             * @desc 复制内容\r\n             * @param { Object } event 复制事件\r\n             *\r\n             * 删除内容的开头和结尾的换行符\r\n             */\r\n            handleCopy (event) {\r\n                const clipboardData = event.clipboardData || window.clipboardData;\r\n                if (!clipboardData) {\r\n                    return;\r\n                }\r\n                let text = window.getSelection().toString();\r\n                if (text && text.indexOf(this.renderText) > -1) {\r\n                    text = this.value;\r\n                }\r\n                if (text) {\r\n                    event.preventDefault();\r\n                    clipboardData.setData('text/plain', _.trim(text, '\\n'));\r\n                }\r\n            },\r\n            /**\r\n             * @desc 查看态的文本展开收起\r\n             */\r\n            handleExpandAll () {\r\n                this.isExpand = !this.isExpand;\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    .jb-edit-textarea {\r\n        position: relative;\r\n\r\n        &.block {\r\n            position: relative;\r\n            cursor: pointer;\r\n\r\n            .render-value-box,\r\n            .edit-value-box {\r\n                margin-left: -10px;\r\n            }\r\n\r\n            .render-value-box {\r\n                padding-left: 10px;\r\n\r\n                &:hover {\r\n                    background: #f0f1f5;\r\n                }\r\n            }\r\n\r\n            .edit-action-box {\r\n                position: absolute;\r\n                top: 0;\r\n                right: 10px;\r\n                width: 16px;\r\n            }\r\n        }\r\n\r\n        .render-value-box {\r\n            position: relative;\r\n            display: flex;\r\n            align-items: center;\r\n            min-width: 30px;\r\n            min-height: 30px;\r\n            padding: 3px 0;\r\n\r\n            &:hover {\r\n                .edit-action {\r\n                    opacity: 1;\r\n                    transform: scale(1);\r\n                }\r\n            }\r\n\r\n            .text-whole {\r\n                color: #3a84ff;\r\n                white-space: nowrap;\r\n                cursor: pointer;\r\n                user-select: none;\r\n            }\r\n        }\r\n\r\n        .render-text-box {\r\n            position: relative;\r\n            overflow: hidden;\r\n            line-height: 24px;\r\n            white-space: pre-wrap;\r\n        }\r\n\r\n        .edit-action-box {\r\n            display: flex;\r\n            align-items: center;\r\n            align-self: flex-start;\r\n            height: 26px;\r\n            margin-right: auto;\r\n            font-size: 16px;\r\n\r\n            .edit-action {\r\n                padding: 4px 15px 4px 2px;\r\n                color: #979ba5;\r\n                cursor: pointer;\r\n                opacity: 0;\r\n                transform: scale(0);\r\n                transition: 0.15s;\r\n                transform-origin: left center;\r\n\r\n                &:hover {\r\n                    color: #3a84ff;\r\n                }\r\n            }\r\n\r\n            .edit-loading {\r\n                position: absolute;\r\n                top: 8px;\r\n                margin-left: 2px;\r\n                animation: rotate-loading 1s linear infinite;\r\n            }\r\n        }\r\n\r\n        .edit-value-box {\r\n            width: 100%;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"jb-edit-host\" :class=\"mode\">\r\n        <div class=\"render-value-box\" @click.stop=\"handleBlockShowEdit\">\r\n            <div class=\"value-text\">\r\n                <slot v-bind:value=\"localValue\">\r\n                    <div v-html=\"renderHtml\" style=\"margin-left: -4px;\" />\r\n                </slot>\r\n            </div>\r\n            <div class=\"edit-action-box\">\r\n                <Icon\r\n                    v-if=\"!isBlock && !isSubmiting\"\r\n                    type=\"edit-2\"\r\n                    class=\"edit-action\"\r\n                    @click.self.stop=\"handleShowEdit\" />\r\n                <Icon\r\n                    v-if=\"isSubmiting\"\r\n                    type=\"loading-circle\"\r\n                    class=\"edit-loading\" />\r\n            </div>\r\n        </div>\r\n        <choose-ip\r\n            v-model=\"isShowChooseIp\"\r\n            :host-node-info=\"localValue.hostNodeInfo\"\r\n            @on-change=\"handleHostChange\" />\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n       import TaskHostNodeModel from '@model/task-host-node';\r\n    import ChooseIp from '@components/choose-ip';\r\n\r\n    export default {\r\n        name: 'JbEditHost',\r\n        components: {\r\n            ChooseIp,\r\n        },\r\n        props: {\r\n            /**\r\n             * @value block 块级交互\r\n             * @value ‘’ 默认鼠标点击编辑按钮\r\n             */\r\n            mode: {\r\n                type: String,\r\n                default: 'block',\r\n            },\r\n            /**\r\n             * @desc 编辑操作对应的字段名称\r\n             */\r\n            field: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            /**\r\n             * @desc 默认值\r\n             */\r\n            value: {\r\n                type: Object,\r\n                default: new TaskHostNodeModel({}),\r\n            },\r\n            /**\r\n             * @desc 宽度\r\n             */\r\n            width: {\r\n                type: String,\r\n                default: 'auto',\r\n            },\r\n            remoteHander: {\r\n                type: Function,\r\n                default: () => Promise.resolve(),\r\n            },\r\n            /**\r\n             * @desc 值验证规则\r\n             */\r\n            rules: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                localValue: this.value,\r\n                isShowChooseIp: false,\r\n                error: '',\r\n                isEditing: false,\r\n                isSubmiting: false,\r\n            };\r\n        },\r\n        computed: {\r\n            renderHtml () {\r\n                if (!this.localValue) {\r\n                    return '--';\r\n                }\r\n                const {\r\n                    dynamicGroupList,\r\n                    ipList,\r\n                    topoNodeList,\r\n                } = this.localValue.hostNodeInfo || {};\r\n                const strs = [];\r\n                if (ipList.length > 0) {\r\n                    strs.push(`<span class=\"number strong\">${ipList.length}</span>${'台主机'}`);\r\n                }\r\n                if (topoNodeList.length > 0) {\r\n                    strs.push(`<span class=\"number strong\">${topoNodeList.length}</span>${'个节点'}`);\r\n                }\r\n                if (dynamicGroupList.length > 0) {\r\n                    strs.push(`<span class=\"number strong\">${dynamicGroupList.length}</span>${'个分组'}`);\r\n                }\r\n                return strs.length > 0 ? strs.join('\\n') : '--';\r\n            },\r\n            styles () {\r\n                return {\r\n                    width: this.width,\r\n                };\r\n            },\r\n            isBlock () {\r\n                return this.mode === 'block';\r\n            },\r\n        },\r\n        watch: {\r\n            value: {\r\n                handler (value) {\r\n                    this.localValue = Object.freeze(_.cloneDeep(value));\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 值验证\r\n             */\r\n            doValidator () {\r\n                const checkValidator = (rule, value) => new Promise((resolve, reject) => {\r\n                    if (rule.required && !value) {\r\n                        reject(rule.message);\r\n                    }\r\n                    // 通过自定义方法来检测\r\n                    if (rule.validator && (typeof rule.validator === 'function')) {\r\n                        const result = rule.validator(value);\r\n                        if (result.then) {\r\n                            result.then((data) => {\r\n                                if (data) {\r\n                                    return resolve();\r\n                                }\r\n                                return reject(rule.message);\r\n                            }).catch(() => {\r\n                                reject(rule.message);\r\n                            });\r\n                        } else if (result) {\r\n                            return resolve();\r\n                        } else {\r\n                            return reject(rule.message);\r\n                        }\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                });\r\n                \r\n                const allPromise = this.rules.map(rule => checkValidator(rule, this.localValue));\r\n                this.isValidatoring = true;\r\n                return Promise.all(allPromise).finally(() => {\r\n                    this.isValidatoring = false;\r\n                });\r\n            },\r\n            /**\r\n             * @desc 提交编辑\r\n             */\r\n            triggerChange () {\r\n                this.doValidator()\r\n                    .then(() => {\r\n                        this.isEditing = false;\r\n                        if (this.localValue === this.value) {\r\n                            return;\r\n                        }\r\n                        this.isSubmiting = true;\r\n                        this.remoteHander({\r\n                            [this.field]: this.localValue,\r\n                        }).then(() => {\r\n                            this.$emit('on-change', {\r\n                                [this.field]: this.localValue,\r\n                            });\r\n                            this.messageSuccess('编辑成功');\r\n                        })\r\n                            .catch(() => {\r\n                                this.localValue = this.value;\r\n                            })\r\n                            .finally(() => {\r\n                                this.isSubmiting = false;\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        this.error = error;\r\n                    });\r\n            },\r\n            handleBlockShowEdit () {\r\n                if (!this.isBlock) {\r\n                    return;\r\n                }\r\n                this.handleShowEdit();\r\n            },\r\n            /**\r\n             * @desc 显示input\r\n             */\r\n            handleShowEdit () {\r\n                document.body.click();\r\n                this.isShowChooseIp = true;\r\n            },\r\n            \r\n            handleHostChange (hostNodeInfo) {\r\n                this.localValue = Object.freeze({\r\n                    ...this.localValue,\r\n                    hostNodeInfo,\r\n                });\r\n                this.triggerChange();\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .jb-edit-host {\r\n        &.block {\r\n            position: relative;\r\n            cursor: pointer;\r\n\r\n            .render-value-box {\r\n                padding-top: 5px;\r\n                padding-left: 10px;\r\n                margin-left: -10px;\r\n\r\n                &:hover {\r\n                    background: #f0f1f5;\r\n                }\r\n            }\r\n\r\n            .edit-action-box {\r\n                position: absolute;\r\n                top: 0;\r\n                right: 10px;\r\n                width: 16px;\r\n            }\r\n        }\r\n\r\n        .render-value-box {\r\n            position: relative;\r\n            display: flex;\r\n            min-width: 36px;\r\n            min-height: 28px;\r\n\r\n            &:hover {\r\n                .edit-action {\r\n                    opacity: 1;\r\n                    transform: scale(1);\r\n                }\r\n            }\r\n        }\r\n\r\n        .value-text {\r\n            line-height: 18px;\r\n            white-space: pre;\r\n        }\r\n\r\n        .edit-action-box {\r\n            display: flex;\r\n            align-items: center;\r\n            min-height: 1em;\r\n            margin-right: auto;\r\n            font-size: 16px;\r\n            color: #979ba5;\r\n\r\n            .edit-action {\r\n                padding: 6px 0 6px 2px;\r\n                cursor: pointer;\r\n                opacity: 0;\r\n                transform: scale(0);\r\n                transition: 0.15s;\r\n                transform-origin: left center;\r\n\r\n                &:hover {\r\n                    color: #3a84ff;\r\n                }\r\n            }\r\n\r\n            .edit-loading {\r\n                position: absolute;\r\n                top: 9px;\r\n                margin-left: 2px;\r\n                animation: rotate-loading 1s linear infinite;\r\n            }\r\n        }\r\n\r\n        .edit-value-container {\r\n            position: relative;\r\n            width: 100%;\r\n            font-size: 0;\r\n\r\n            &.edit-error {\r\n                .bk-form-input {\r\n                    border-color: #ea3636 !important;\r\n                }\r\n            }\r\n\r\n            .input-edit-info {\r\n                position: absolute;\r\n                top: 0;\r\n                right: 0;\r\n                bottom: 0;\r\n                z-index: 1;\r\n                display: flex;\r\n                align-items: center;\r\n                padding: 0 10px;\r\n                font-size: 16px;\r\n                color: #ea3636;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <tr class=\"global-variable-create-row\">\r\n        <td>\r\n            <bk-select\r\n                class=\"offset-left\"\r\n                :clearable=\"false\"\r\n                :value=\"formData.type\"\r\n                @change=\"value => handleChange('type', value)\">\r\n                <bk-option\r\n                    v-for=\"item in typeList\"\r\n                    :key=\"item.id\"\r\n                    :id=\"item.id\"\r\n                    :name=\"item.name\" />\r\n            </bk-select>\r\n        </td>\r\n        <td>\r\n            <div\r\n                class=\"variable-name-box offset-left\"\r\n                :class=\"{\r\n                    'edit-error': isNameError,\r\n                }\">\r\n                <bk-input\r\n                    :value=\"formData.name\"\r\n                    @blur=\"handleShowNameError\"\r\n                    @change=\"value => handleChange('name', value)\" />\r\n                <Icon\r\n                    v-if=\"isNameError\"\r\n                    v-bk-tooltips=\"errorNameText\"\r\n                    type=\"info\"\r\n                    class=\"input-error\" />\r\n            </div>\r\n        </td>\r\n        <td>\r\n            <template v-if=\"isHostVarialbe\">\r\n                <div\r\n                    v-if=\"formData.defaultTargetValue.isEmpty\"\r\n                    class=\"add-host-btn offset-left\"\r\n                    @click=\"handleShowChooseIp\">\r\n                    <Icon type=\"plus\" style=\"margin-right: 6px;\" />\r\n                    {{ '添加服务器' }}\r\n                </div>\r\n                <jb-edit-host\r\n                    v-else\r\n                    field=\"defaultTargetValue\"\r\n                    :value=\"formData.defaultTargetValue\" />\r\n            </template>\r\n            <template v-else>\r\n                <bk-input\r\n                    class=\"offset-left\"\r\n                    :value=\"formData.defaultValue\"\r\n                    @change=\"value => handleChange('defaultValue', value)\" />\r\n            </template>\r\n        </td>\r\n        <td>\r\n            <jb-textarea\r\n                class=\"offset-left\"\r\n                :value=\"formData.description\"\r\n                @change=\"value => handleChange('description', value)\" />\r\n        </td>\r\n        <td>\r\n            <bk-checkbox\r\n                v-if=\"withChangable\"\r\n                :value=\"formData.changeable\"\r\n                @change=\"value => handleChange('changeable', value)\"\r\n                :true-value=\"1\"\r\n                :false-value=\"0\" />\r\n            <span v-else>--</span>\r\n        </td>\r\n        <td>\r\n            <bk-checkbox\r\n                :value=\"formData.required\"\r\n                @change=\"value => handleChange('required', value)\"\r\n                :true-value=\"1\"\r\n                :false-value=\"0\" />\r\n        </td>\r\n        <td class=\"action-row\">\r\n            <Icon type=\"add-fill\" @click=\"handleCreate\" class=\"action-btn\" />\r\n            <Icon type=\"reduce-fill\" @click=\"handleDelete\" class=\"action-btn\" />\r\n        </td>\r\n        <choose-ip\r\n            v-model=\"isShowChooseIp\"\r\n            :host-node-info=\"formData.defaultTargetValue.hostNodeInfo\"\r\n            @on-change=\"handleHostChange\" />\r\n    </tr>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n       import { globalVariableNameRule } from '@utils/validator';\r\n    import GlobalVariableModel from '@model/task/global-variable';\r\n    import ChooseIp from '@components/choose-ip';\r\n    import JbEditHost from '@components/jb-edit/host';\r\n    import { createVariable } from '../util';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            ChooseIp,\r\n            JbEditHost,\r\n        },\r\n        props: {\r\n            variableNameList: {\r\n                type: Array,\r\n            },\r\n            data: {\r\n                type: Object,\r\n                require: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                formData: _.cloneDeep(this.data),\r\n                isShowChooseIp: false,\r\n                isShowNameError: false,\r\n                errorNameText: '',\r\n            };\r\n        },\r\n        computed: {\r\n            /**\r\n             * @desc 是否有赋值可变选项\r\n             * @returns { Boolean }\r\n             */\r\n            withChangable () {\r\n                return [\r\n                    GlobalVariableModel.TYPE_STRING,\r\n                    GlobalVariableModel.TYPE_RELATE_ARRAY,\r\n                    GlobalVariableModel.TYPE_INDEX_ARRAY,\r\n                ].includes(this.formData.type);\r\n            },\r\n            /**\r\n             * @desc 主机变量\r\n             * @returns { Boolean }\r\n             */\r\n            isHostVarialbe () {\r\n                return [\r\n                    GlobalVariableModel.TYPE_HOST,\r\n                ].includes(this.formData.type);\r\n            },\r\n            /**\r\n             * @desc 变量名验证失败\r\n             * @returns { Boolean }\r\n             */\r\n            isNameError () {\r\n                return this.isShowNameError && this.errorNameText;\r\n            },\r\n        },\r\n        created () {\r\n            this.typeList = [\r\n                {\r\n                    id: GlobalVariableModel.TYPE_STRING,\r\n                    name: '字符串',\r\n                },\r\n                {\r\n                    id: GlobalVariableModel.TYPE_NAMESPACE,\r\n                    name: '命名空间',\r\n                },\r\n                {\r\n                    id: GlobalVariableModel.TYPE_HOST,\r\n                    name: '主机列表',\r\n                },\r\n                {\r\n                    id: GlobalVariableModel.TYPE_PASSWORD,\r\n                    name: '密文',\r\n                },\r\n                {\r\n                    id: GlobalVariableModel.TYPE_RELATE_ARRAY,\r\n                    name: '关联数组',\r\n                },\r\n                {\r\n                    id: GlobalVariableModel.TYPE_INDEX_ARRAY,\r\n                    name: '索引数组',\r\n                },\r\n            ];\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 验证变量名\r\n             */\r\n            validate () {\r\n                this.isShowNameError = true;\r\n                this.errorNameText = '';\r\n                if (!this.formData.name) {\r\n                    this.errorNameText = '变量名称必填';\r\n                }\r\n                if (!globalVariableNameRule.validator(this.formData.name)) {\r\n                    this.errorNameText = globalVariableNameRule.message;\r\n                }\r\n                if (this.variableNameList.includes(this.formData.name)) {\r\n                    this.errorNameText = '变量名称已存在，请重新输入';\r\n                }\r\n                if (this.errorNameText) {\r\n                    return Promise.reject(new Error(this.errorNameText));\r\n                }\r\n                return Promise.resolve();\r\n            },\r\n            /**\r\n             * @desc 触发 change 事件\r\n             */\r\n            triggerChange () {\r\n                this.$emit('on-change', this.formData);\r\n            },\r\n            /**\r\n             * @desc name 编辑框失去焦点时进行验证\r\n             */\r\n            handleShowNameError () {\r\n                this.validate();\r\n            },\r\n            /**\r\n             * @desc 设置主机变量的值\r\n             */\r\n            handleShowChooseIp () {\r\n                this.isShowChooseIp = true;\r\n            },\r\n            /**\r\n             * @desc 更新主机变量\r\n             * @param { Object } hostNodeInfo 主机信息\r\n             */\r\n            handleHostChange (hostNodeInfo) {\r\n                this.formData.defaultTargetValue.hostNodeInfo = hostNodeInfo;\r\n                this.triggerChange();\r\n            },\r\n            /**\r\n             * @desc 字段值更新\r\n             * @param { String } field 字段名\r\n             * @param { Any } value 字段值\r\n             */\r\n            handleChange (field, value) {\r\n                if (field === 'type') {\r\n                    this.formData = createVariable(this.formData.id);\r\n                }\r\n                this.formData[field] = value;\r\n                this.isShowNameError = false;\r\n                this.triggerChange();\r\n            },\r\n            /**\r\n             * @desc 添加新变量\r\n             */\r\n            handleCreate () {\r\n                this.$emit('on-append');\r\n            },\r\n            /**\r\n             * @desc 删除自己\r\n             */\r\n            handleDelete () {\r\n                this.$emit('on-delete');\r\n            },\r\n            \r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .global-variable-create-row {\r\n        .offset-left {\r\n            margin-left: -10px;\r\n        }\r\n\r\n        .bk-select {\r\n            height: 30px;\r\n            line-height: 30px;\r\n            background: #f7f8fa;\r\n            border: 1px solid transparent;\r\n\r\n            &:hover {\r\n                background: #f0f1f5;\r\n            }\r\n\r\n            .bk-select-name {\r\n                height: 30px;\r\n                padding-right: 16px;\r\n                padding-left: 10px;\r\n                line-height: 30px;\r\n            }\r\n        }\r\n\r\n        .bk-input-text {\r\n            .bk-form-input {\r\n                height: 30px;\r\n                line-height: 30px;\r\n                background: #f7f8fa;\r\n                border: 1px solid transparent;\r\n\r\n                &:hover {\r\n                    background: #f0f1f5;\r\n                }\r\n            }\r\n        }\r\n\r\n        .job-textarea {\r\n            .job-textarea-edit {\r\n                background: #f7f8fa;\r\n                border: 1px solid transparent;\r\n\r\n                &:hover {\r\n                    background: #f0f1f5;\r\n                }\r\n            }\r\n        }\r\n\r\n        .add-host-btn {\r\n            display: flex;\r\n            height: 30px;\r\n            padding: 0 10px;\r\n            font-size: 12px;\r\n            cursor: pointer;\r\n            background: #f7f8fa;\r\n            border-radius: 2px;\r\n            align-items: center;\r\n            justify-content: center;\r\n\r\n            &:hover {\r\n                background: #f0f1f5;\r\n            }\r\n        }\r\n\r\n        .edit-error {\r\n            .bk-input-text {\r\n                .bk-form-input {\r\n                    border-color: #ea3636;\r\n                }\r\n            }\r\n        }\r\n\r\n        .variable-name-box {\r\n            position: relative;\r\n\r\n            .input-error {\r\n                position: absolute;\r\n                top: 0;\r\n                right: 0;\r\n                bottom: 0;\r\n                z-index: 1;\r\n                display: flex;\r\n                align-items: center;\r\n                padding: 0 10px;\r\n                font-size: 16px;\r\n                color: #ea3636;\r\n                cursor: pointer;\r\n            }\r\n        }\r\n\r\n        .bk-form-control {\r\n            display: block;\r\n            width: auto;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"global-bariable-batch-operation\">\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th style=\"width: 130px;\">{{ '变量类型' }}<span class=\"require-flag\" /></th>\r\n                    <th>{{ '变量名称' }}<span class=\"require-flag\" /></th>\r\n                    <th>\r\n                        <span v-bk-tooltips=\"'请输入变量的初始值 [可选]'\" class=\"hover-tips\">\r\n                            {{ '初始值' }}\r\n                        </span>\r\n                    </th>\r\n                    <th style=\"width: 320px;\">{{ '变量描述' }}</th>\r\n                    <th style=\"width: 80px;\">\r\n                        <span v-bk-tooltips=\"'变量的值在执行中可变'\" class=\"hover-tips\">\r\n                            {{ '赋值可变' }}\r\n                        </span>\r\n                    </th>\r\n                    <th style=\"width: 100px;\">{{ '执行时必填' }}</th>\r\n                    <th style=\"width: 80px;\">{{ '操作' }}</th>\r\n                </tr>\r\n            </thead>\r\n            <template v-for=\"(variableItem, index) in variableList\">\r\n                <render-table-row\r\n                    v-if=\"variableItem.id > 0 && variableItem.delete !== 1\"\r\n                    ref=\"variableEdit\"\r\n                    :variable-name-list=\"calcExcludeNameList(variableItem)\"\r\n                    :data=\"variableItem\"\r\n                    :key=\"variableItem.id\"\r\n                    @on-change=\"value => handleChange(index, value)\"\r\n                    @on-delete=\"handleDelete(index)\"\r\n                    @on-append=\"handleAppendVariable(index)\" />\r\n                <!-- 自定义表格进行, 行内增删 -->\r\n                <create-table-row\r\n                    v-else-if=\"variableItem.id < 0\"\r\n                    ref=\"variableCreate\"\r\n                    :key=\"variableItem.id\"\r\n                    :variable-name-list=\"calcExcludeNameList(variableItem)\"\r\n                    :data=\"variableItem\"\r\n                    @on-change=\"value => handleChange(index, value)\"\r\n                    @on-delete=\"handleDelete(index)\"\r\n                    @on-append=\"handleAppendVariable(index)\" />\r\n            </template>\r\n        </table>\r\n        <div\r\n            v-if=\"isEmpty\"\r\n            class=\"empty-box\"\r\n            @click=\"handleAppendVariable(0)\">\r\n            <Icon type=\"add-fill\" />\r\n            <span>{{ '全局变量' }}</span>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n    import GlobalVariableModel from '@model/task/global-variable';\r\n    import RenderTableRow from './render-table-row.vue';\r\n    import CreateTableRow from './create-table-row.vue';\r\n    import { createVariable } from '../util';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            RenderTableRow,\r\n            CreateTableRow,\r\n        },\r\n        props: {\r\n            variable: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                variableList: _.cloneDeep(this.variable),\r\n            };\r\n        },\r\n        computed: {\r\n            isEmpty () {\r\n                // eslint-disable-next-line no-plusplus\r\n                for (let i = 0; i < this.variableList.length; i++) {\r\n                    if (!this.variableList[i].delete) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            },\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 不包含当前索引变量的变量名列表\r\n             * @param { Object } variableData 变量数据\r\n             * @returns { Array }\r\n             *\r\n             * 不包含变量名为空和已删除的变量\r\n             */\r\n            calcExcludeNameList (variableData) {\r\n                return this.variableList.reduce((result, item) => {\r\n                    if (variableData.id !== item.id\r\n                        && item.name\r\n                        && item.delete !== 1) {\r\n                        result.push(item.name);\r\n                    }\r\n                    return result;\r\n                }, []);\r\n            },\r\n            /**\r\n             * @desc 更新变量信息\r\n             * @param {Number} index 编辑的变量索引\r\n             * @param {Object} variableData 全局变量数据\r\n             */\r\n            handleChange (index, variableData) {\r\n                const variableList = [...this.variableList];\r\n                const variable = new GlobalVariableModel(variableData);\r\n                variableList.splice(index, 1, variable);\r\n                this.variableList = variableList;\r\n                window.changeAlert = true;\r\n            },\r\n            /**\r\n             * @desc 删除指定索引的变量\r\n             * @param {Number} index 编辑的变量索引\r\n             */\r\n            handleDelete (index) {\r\n                const variableList = [...this.variableList];\r\n                const editVariable = variableList[index];\r\n                if (editVariable.id > 0) {\r\n                    // 删除已存在的变量——设置delete\r\n                    editVariable.delete = 1;\r\n                } else {\r\n                    // 删除新建的变量——直接删除\r\n                    variableList.splice(index, 1);\r\n                }\r\n                this.variableList = variableList;\r\n                window.changeAlert = true;\r\n            },\r\n            /**\r\n             * @desc 在指定索引位置添加一个新变量\r\n             * @param {Number} index 编辑的变量索引\r\n             */\r\n            handleAppendVariable (index) {\r\n                this.variableList.splice(index + 1, 0, createVariable());\r\n                window.changeAlert = true;\r\n            },\r\n            /**\r\n             * @desc 提交编辑\r\n             * @returns {Promise}\r\n             */\r\n            submit () {\r\n                const queue = [];\r\n                if (this.$refs.variableEdit) {\r\n                    queue.push(...this.$refs.variableEdit.map(item => item.validate()));\r\n                }\r\n                if (this.$refs.variableCreate) {\r\n                    queue.push(...this.$refs.variableCreate.map(item => item.validate()));\r\n                }\r\n                return Promise.all(queue)\r\n                    .then(() => this.$emit('on-change', this.variableList));\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .global-bariable-batch-operation {\r\n        table {\r\n            width: 100%;\r\n            font-size: 12px;\r\n            line-height: 18px;\r\n            color: #63656e;\r\n            border: 1px solid #dcdee5;\r\n            border-radius: 2px;\r\n            table-layout: fixed;\r\n\r\n            thead {\r\n                background: #fafbfd;\r\n            }\r\n\r\n            th,\r\n            td {\r\n                height: 41px;\r\n                padding-right: 5px;\r\n                padding-left: 15px;\r\n                text-align: left;\r\n            }\r\n\r\n            th {\r\n                font-weight: normal;\r\n                color: #313238;\r\n            }\r\n\r\n            td {\r\n                padding-top: 5px;\r\n                padding-bottom: 5px;\r\n                border-top: 1px solid #dcdee5;\r\n            }\r\n\r\n            .hover-tips {\r\n                padding-bottom: 2px;\r\n                border-bottom: 1px dashed #c4c6cc;\r\n            }\r\n\r\n            .require-flag {\r\n                &::after {\r\n                    display: inline-block;\r\n                    height: 8px;\r\n                    font-size: 12px;\r\n                    line-height: 1;\r\n                    color: #ea3636;\r\n                    vertical-align: middle;\r\n                    content: \"*\";\r\n                }\r\n            }\r\n\r\n            .action-row {\r\n                user-select: none;\r\n\r\n                .action-btn {\r\n                    font-size: 18px;\r\n                    color: #c4c6cc;\r\n                    cursor: pointer;\r\n                }\r\n            }\r\n        }\r\n\r\n        .empty-box {\r\n            display: flex;\r\n            height: 32px;\r\n            margin-top: 6px;\r\n            font-size: 12px;\r\n            color: #979ba5;\r\n            cursor: pointer;\r\n            background: #fcfdff;\r\n            border: 1px dashed #c4c6cc;\r\n            border-radius: 2px;\r\n            align-items: center;\r\n            justify-content: center;\r\n\r\n            i {\r\n                margin-right: 7px;\r\n                font-size: 14px;\r\n                color: #c4c6cc;\r\n            }\r\n\r\n            &:hover {\r\n                color: #3a84ff;\r\n                border-color: #3a84ff;\r\n\r\n                i {\r\n                    color: #3a84ff;\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"job-variable-detail\">\r\n        <table class=\"info-table\">\r\n            <tr\r\n                v-for=\"(item, index) in describeMap\"\r\n                :key=\"index\"\r\n                class=\"variable-item\">\r\n                <td class=\"info-label\">{{ item.label }}</td>\r\n                <td class=\"info-value\">\r\n                    <jb-edit-textarea :field=\"item.filed\" :value=\"data[item.filed]\" readonly />\r\n                </td>\r\n            </tr>\r\n        </table>\r\n        <template v-if=\"data.isHost\">\r\n            <server-panel\r\n                style=\"margin-top: 20px;\"\r\n                detail-fullscreen\r\n                :host-node-info=\"data.defaultTargetValue.hostNodeInfo\" />\r\n        </template>\r\n    </div>\r\n</template>\r\n<script>\r\n       import GlobalVariableModel from '@model/task/global-variable';\r\n    import ServerPanel from '@components/choose-ip/server-panel';\r\n    import JbEditTextarea from '@components/jb-edit/textarea';\r\n\r\n    const type = () => ({ label: '变量类型', filed: 'typeText' });\r\n    const name = () => ({ label: '变量名称', filed: 'name' });\r\n    const defaultValue = (defaultField = '初始值') => ({ label: defaultField, filed: 'valueText' });\r\n    const description = () => ({ label: '变量描述', filed: 'description' });\r\n    const changeable = () => ({ label: '赋值可变', filed: 'changeableText' });\r\n    const required = () => ({ label: '必填', filed: 'requiredText' });\r\n\r\n    const generateVariableDescribeMap = (defaultField = '初始值') => ({\r\n        [GlobalVariableModel.TYPE_STRING]: [type(), name(), defaultValue(defaultField), description(), changeable(), required()],\r\n        [GlobalVariableModel.TYPE_NAMESPACE]: [type(), name(), defaultValue(defaultField), description(), required()],\r\n        [GlobalVariableModel.TYPE_HOST]: [type(), name(), defaultValue(defaultField), description(), required()],\r\n        [GlobalVariableModel.TYPE_PASSWORD]: [type(), name(), defaultValue(defaultField), description(), required()],\r\n        [GlobalVariableModel.TYPE_RELATE_ARRAY]: [type(), name(), defaultValue(defaultField), description(), required()],\r\n        [GlobalVariableModel.TYPE_INDEX_ARRAY]: [type(), name(), defaultValue(defaultField), description(), required()],\r\n    });\r\n    \r\n    export default {\r\n        name: 'GlobalVarView',\r\n        components: {\r\n            ServerPanel,\r\n            JbEditTextarea,\r\n        },\r\n        props: {\r\n            data: {\r\n                type: Object,\r\n                default () {\r\n                    return {};\r\n                },\r\n            },\r\n            defaultField: {\r\n                type: String,\r\n                default: '初始值',\r\n            },\r\n        },\r\n        computed: {\r\n            describeMap () {\r\n                return generateVariableDescribeMap(this.defaultField)[this.data.type];\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    .job-variable-detail {\r\n        padding-bottom: 20px;\r\n        font-size: 14px;\r\n        color: #63656e;\r\n\r\n        .info-table {\r\n            width: 100%;\r\n            line-height: 24px;\r\n\r\n            td {\r\n                padding-top: 9px;\r\n                padding-bottom: 9px;\r\n                border: 1px solid #dde4eb;\r\n            }\r\n        }\r\n\r\n        .info-label {\r\n            width: 110px;\r\n            padding-right: 20px;\r\n            color: #b2b5bd;\r\n            text-align: right;\r\n        }\r\n\r\n        .info-value {\r\n            padding-left: 21px;\r\n            word-break: break-all;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <jb-form :model=\"formData\" ref=\"varHostForm\">\r\n        <jb-form-item :label=\"'变量名称'\">\r\n            <bk-input v-model=\"formData.name\" disabled />\r\n        </jb-form-item>\r\n        <jb-form-item :label=\"'变量值'\">\r\n            <section>\r\n                <bk-button @click=\"handleShowChooseIp\">\r\n                    <Icon type=\"plus\" />\r\n                    {{ '选择主机' }}\r\n                </bk-button>\r\n                <bk-button style=\"margin-left: 10px;\" v-if=\"isShowClear\" @click=\"handleClear\">\r\n                    {{ '清空' }}\r\n                </bk-button>\r\n            </section>\r\n            <server-panel\r\n                class=\"view-server-panel\"\r\n                :host-node-info=\"formData.defaultTargetValue.hostNodeInfo\"\r\n                editable\r\n                detail-fullscreen\r\n                @on-change=\"handleHostChange\" />\r\n        </jb-form-item>\r\n        <jb-form-item :label=\"'变量描述'\">\r\n            <bk-input v-model=\"formData.description\" disabled type=\"textarea\" :row=\"5\" maxlength=\"100\" />\r\n        </jb-form-item>\r\n        <jb-form-item>\r\n            <bk-checkbox v-model=\"formData.required\" disabled :true-value=\"1\" :false-value=\"0\">{{ '必填' }}</bk-checkbox>\r\n        </jb-form-item>\r\n        <choose-ip\r\n            v-model=\"isShowChooseIp\"\r\n            :host-node-info=\"formData.defaultTargetValue.hostNodeInfo\"\r\n            @on-change=\"handleHostChange\" />\r\n    </jb-form>\r\n</template>\r\n<script>\r\n    import TaskGlobalVariableModel from '@model/task/global-variable';\r\n    import TaskHostNodeModel from '@model/task-host-node';\r\n    import ChooseIp from '@components/choose-ip';\r\n    import ServerPanel from '@components/choose-ip/server-panel';\r\n\r\n    const getDefaultData = () => ({\r\n        id: 0,\r\n        delete: 0,\r\n        // 变量名\r\n        name: '',\r\n        // 执行目标信息\r\n        defaultTargetValue: {\r\n            hostNodeInfo: {},\r\n            variable: '',\r\n        },\r\n        // 变量描述\r\n        description: '',\r\n        // 必填 0-非必填 1-必填\r\n        required: 0,\r\n    });\r\n\r\n    export default {\r\n        name: 'VarHost',\r\n        components: {\r\n            ChooseIp,\r\n            ServerPanel,\r\n        },\r\n        props: {\r\n            data: {\r\n                type: Object,\r\n                default: () => ({}),\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                formData: {},\r\n                isShowChooseIp: false,\r\n            };\r\n        },\r\n        computed: {\r\n            isShowClear () {\r\n                return !TaskHostNodeModel.isHostNodeInfoEmpty(this.formData.defaultTargetValue.hostNodeInfo);\r\n            },\r\n        },\r\n        watch: {\r\n            data: {\r\n                handler (data) {\r\n                    this.formData = new TaskGlobalVariableModel(data);\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        methods: {\r\n            handleHostChange (hostNodeInfo) {\r\n                this.formData.defaultTargetValue.hostNodeInfo = Object.freeze(hostNodeInfo);\r\n            },\r\n            handleShowChooseIp () {\r\n                this.isShowChooseIp = true;\r\n            },\r\n\r\n            handleClear () {\r\n                const { hostNodeInfo } = new TaskHostNodeModel({});\r\n                this.formData.defaultTargetValue.hostNodeInfo = hostNodeInfo;\r\n            },\r\n            submit () {\r\n                return Promise.resolve({\r\n                    ...this.formData,\r\n                    type: TaskGlobalVariableModel.TYPE_HOST,\r\n                });\r\n            },\r\n\r\n            reset () {\r\n                this.formData = new TaskGlobalVariableModel(getDefaultData);\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\" scoped>\r\n    .view-server-panel {\r\n        margin-top: 10px;\r\n    }\r\n</style>\r\n","<template>\r\n    <jb-form :model=\"formData\" ref=\"varArrayForm\">\r\n        <jb-form-item :label=\"'数组类型'\">\r\n            <div class=\"array-type-group\">\r\n                <bk-radio-group :value=\"arrayType\">\r\n                    <bk-radio-button\r\n                        class=\"item\"\r\n                        :value=\"5\"\r\n                        >\r\n                        {{ '关联数组' }}\r\n                    </bk-radio-button>\r\n                    <bk-radio-button\r\n                        class=\"item\"\r\n                        :value=\"6\"\r\n                        >\r\n                        {{ '索引数组' }}\r\n                    </bk-radio-button>\r\n                </bk-radio-group>\r\n            </div>\r\n        </jb-form-item>\r\n        <jb-form-item :label=\"'变量名称'\">\r\n            <bk-input v-model=\"formData.name\" disabled />\r\n        </jb-form-item>\r\n        <jb-form-item :label=\"'变量值'\">\r\n            <bk-input\r\n                v-model=\"formData.defaultValue\"\r\n                :native-attributes=\"{ autofocus: 'autofocus' }\" />\r\n        </jb-form-item>\r\n        <jb-form-item :label=\"'变量描述'\">\r\n            <bk-input v-model=\"formData.description\" disabled type=\"textarea\" :row=\"5\" maxlength=\"100\" />\r\n        </jb-form-item>\r\n        <jb-form-item>\r\n            <bk-checkbox\r\n                v-model=\"formData.changeable\"\r\n                disabled\r\n                :true-value=\"1\"\r\n                :false-value=\"0\">\r\n                {{ '赋值可变' }}\r\n            </bk-checkbox>\r\n        </jb-form-item>\r\n        <jb-form-item>\r\n            <bk-checkbox\r\n                v-model=\"formData.required\"\r\n                disabled\r\n                :true-value=\"1\"\r\n                :false-value=\"0\">\r\n                {{ '必填' }}\r\n            </bk-checkbox>\r\n        </jb-form-item>\r\n    </jb-form>\r\n</template>\r\n<script>\r\n    const getDefaultData = () => ({\r\n        id: 0,\r\n        delete: 0,\r\n        // 变量名\r\n        name: '',\r\n        // 默认值\r\n        defaultValue: '',\r\n        // 变量描述\r\n        description: '',\r\n        // 赋值可变 0-不可变 1-可变\r\n        changeable: 0,\r\n        // 必填 0-非必填 1-必填\r\n        required: 0,\r\n    });\r\n    export default {\r\n        name: 'VarString',\r\n        props: {\r\n            data: {\r\n                type: Object,\r\n                default () {\r\n                    return {};\r\n                },\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                arrayType: 5,\r\n                formData: getDefaultData(),\r\n            };\r\n        },\r\n        watch: {\r\n            data: {\r\n                handler (value) {\r\n                    if (Object.keys(value).length) {\r\n                        const { name, defaultValue, description, changeable, required, id, type } = value;\r\n                        this.formData = {\r\n                            name,\r\n                            defaultValue,\r\n                            description,\r\n                            changeable,\r\n                            required,\r\n                            id,\r\n                            delete: value.delete,\r\n                        };\r\n                        this.arrayType = type;\r\n                    }\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        methods: {\r\n            submit () {\r\n                return Promise.resolve({\r\n                    ...this.formData,\r\n                    type: this.arrayType,\r\n                });\r\n            },\r\n\r\n            reset () {\r\n                this.formData = getDefaultData();\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .array-type-group {\r\n        position: relative;\r\n        z-index: 1;\r\n\r\n        .item {\r\n            .bk-radio-button-text {\r\n                width: 108px;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <jb-form form-type=\"vertical\">\r\n        <jb-form-item\r\n            :label=\"'变量类型'\"\r\n            required\r\n            :desc=\"nametips\">\r\n            <bk-radio-group v-model=\"globalType\">\r\n                <bk-radio-button\r\n                    class=\"item\"\r\n                    value=\"string\"\r\n                    \r\n                    :name=\"'字符串'\">\r\n                    {{ '字符串' }}\r\n                </bk-radio-button>\r\n                <bk-radio-button\r\n                    class=\"item\"\r\n                    value=\"namespace\"\r\n                    >\r\n                    {{ '命名空间' }}\r\n                </bk-radio-button>\r\n                <bk-radio-button\r\n                    class=\"item\"\r\n                    value=\"host\"\r\n                    >\r\n                    {{ '主机列表' }}\r\n                </bk-radio-button>\r\n                <bk-radio-button\r\n                    class=\"item\"\r\n                    value=\"password\"\r\n                    >\r\n                    {{ '密文' }}\r\n                </bk-radio-button>\r\n                <bk-radio-button\r\n                    class=\"item\"\r\n                    value=\"array\"\r\n                    >\r\n                    {{ '数组' }}\r\n                </bk-radio-button>\r\n            </bk-radio-group>\r\n        </jb-form-item>\r\n        <component\r\n            ref=\"handler\"\r\n            :is=\"globalVarCom\"\r\n            :variable=\"variable\"\r\n            :data=\"data\" />\r\n    </jb-form>\r\n</template>\r\n<script>\r\n       import VarString from './string';\r\n    import VarNamespace from './namespace';\r\n    import VarHost from './host';\r\n    import VarPassword from './password';\r\n    import VarArray from './array';\r\n\r\n    export default {\r\n        name: 'GlobalVar',\r\n        components: {\r\n            VarString,\r\n            VarNamespace,\r\n            VarHost,\r\n            VarPassword,\r\n            VarArray,\r\n        },\r\n        props: {\r\n            variable: {\r\n                type: Array,\r\n                default () {\r\n                    return [];\r\n                },\r\n            },\r\n            data: {\r\n                type: Object,\r\n                default () {\r\n                    return {};\r\n                },\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                globalType: 'string',\r\n            };\r\n        },\r\n        computed: {\r\n            globalVarCom () {\r\n                const globalVarMap = {\r\n                    string: VarString,\r\n                    namespace: VarNamespace,\r\n                    host: VarHost,\r\n                    password: VarPassword,\r\n                    array: VarArray,\r\n                };\r\n                if (!Object.prototype.hasOwnProperty.call(globalVarMap, this.globalType)) {\r\n                    return 'div';\r\n                }\r\n                return globalVarMap[this.globalType];\r\n            },\r\n            isTypeDisabled () {\r\n                return !!Object.keys(this.data).length;\r\n            },\r\n        },\r\n        watch: {\r\n            data: {\r\n                handler (value) {\r\n                    if (Object.keys(value).length) {\r\n                        this.globalType = value.typeDescription;\r\n                    }\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        created () {\r\n            this.nametips = {\r\n                theme: 'dark',\r\n                content: '在步骤参数或脚本内使用 ${变量名} 即可获取到变量值',\r\n                width: 200,\r\n            };\r\n        },\r\n        methods: {\r\n            submit () {\r\n                return this.$refs.handler.submit()\r\n                    .then((data) => {\r\n                        this.$emit('on-change', data);\r\n                    });\r\n            },\r\n            reset () {\r\n                this.globalType = 1;\r\n                return this.$refs.handler.reset();\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .variable-type-wraper {\r\n        .item {\r\n            .bk-radio-button-text {\r\n                width: 108px;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div\r\n        ref=\"detail\"\r\n        class=\"global-variable-popover-detail\"\r\n        :class=\"classes\"\r\n        :style=\"styles\">\r\n        <div class=\"wraper\">\r\n            <div class=\"header\">\r\n                <span>{{ data.name }}</span>\r\n                <span\r\n                    v-if=\"editOfPlan && !selectValue.includes(data.name)\"\r\n                    class=\"tag\">\r\n                    {{ '未引用' }}\r\n                </span>\r\n            </div>\r\n            <detail-layout>\r\n                <detail-item :label=\"'变量类型：'\">\r\n                    {{ data.typeText }}\r\n                </detail-item>\r\n                <detail-item :label=\"`${defaultField}：`\">\r\n                    {{ data.valueText }}\r\n                </detail-item>\r\n                <detail-item :label=\"'变量描述：'\">\r\n                    {{ data.description || '--' }}\r\n                </detail-item>\r\n                <detail-item :label=\"'必填：'\">\r\n                    {{ data.requiredText }}\r\n                </detail-item>\r\n                <detail-item :label=\"'赋值可变：'\">\r\n                    {{ data.changeableText }}\r\n                </detail-item>\r\n            </detail-layout>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n       import DetailLayout from '@components/detail-layout';\r\n    import DetailItem from '@components/detail-layout/item';\r\n\r\n    export default {\r\n        name: 'GlobalVariablePopoverDetail',\r\n        components: {\r\n            DetailLayout,\r\n            DetailItem,\r\n        },\r\n        props: {\r\n            data: {\r\n                type: Object,\r\n                required: true,\r\n            },\r\n            selectValue: {\r\n                type: Array,\r\n                required: true,\r\n            },\r\n            editOfPlan: {\r\n                type: Boolean,\r\n                DEFAULT: false,\r\n            },\r\n            defaultField: {\r\n                type: String,\r\n                default: '初始值',\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                position: 'left',\r\n                width: 300,\r\n                top: 0,\r\n                left: 0,\r\n            };\r\n        },\r\n        computed: {\r\n            classes () {\r\n                return {\r\n                    [`arrow-position-${this.position}`]: true,\r\n                };\r\n            },\r\n            styles () {\r\n                return {\r\n                    position: 'absolute',\r\n                    top: `${this.top}px`,\r\n                    left: `${this.left}px`,\r\n                    'z-index': window.__bk_zIndex_manager.nextZIndex(), // eslint-disable-line no-underscore-dangle\r\n                    width: `${this.width}px`,\r\n                };\r\n            },\r\n        },\r\n        mounted () {\r\n            this.init();\r\n        },\r\n        beforeDestroy () {\r\n            try {\r\n                if (this.$refs.detail && document.body.hasChildNodes(this.$refs.detail)) {\r\n                    document.body.removeChild(this.$refs.detail);\r\n                }\r\n            } catch (error) {}\r\n        },\r\n        methods: {\r\n            init () {\r\n                const windowWidth = window.innerWidth;\r\n                const $target = document.querySelector(`#globalVariableWithName_${this.data.name}`);\r\n                const { top, left } = $target.getBoundingClientRect();\r\n                this.top = top + 50;\r\n                this.left = left - 11;\r\n                if (windowWidth <= left + this.width) {\r\n                    this.left = left - 150;\r\n                    this.position = 'right';\r\n                }\r\n                document.body.appendChild(this.$refs.detail);\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .global-variable-popover-detail {\r\n        border: 1px solid #dcdee5;\r\n        border-radius: 2px;\r\n        box-shadow: 0 0 5px 0 rgb(0 0 0 / 9%);\r\n\r\n        &.arrow-position-right {\r\n            &::before {\r\n                right: 128px;\r\n                left: unset;\r\n            }\r\n        }\r\n\r\n        &::before {\r\n            position: absolute;\r\n            top: -5px;\r\n            left: 20px;\r\n            width: 11px;\r\n            height: 11px;\r\n            background: #fff;\r\n            border: 1px solid #dcdee5;\r\n            content: \"\";\r\n            transform: rotateZ(45deg);\r\n            box-shadow: 0 0 5px 0 rgb(0 0 0 / 9%);\r\n        }\r\n\r\n        .wraper {\r\n            position: relative;\r\n            padding: 12px 13px;\r\n            background: #fff;\r\n            border-radius: 2px;\r\n\r\n            .header {\r\n                padding-bottom: 8px;\r\n                margin-bottom: 8px;\r\n                font-size: 14px;\r\n                color: #313238;\r\n                border-bottom: 1px solid #f0f1f5;\r\n\r\n                .tag {\r\n                    display: inline-block;\r\n                    height: 18px;\r\n                    padding: 0 6px;\r\n                    font-size: 12px;\r\n                    line-height: 18px;\r\n                    color: #979ba5;\r\n                    background-color: #f0f1f5;\r\n                    border-radius: 2px;\r\n                }\r\n            }\r\n\r\n            .detail-item {\r\n                margin-bottom: 0;\r\n                font-size: 12px;\r\n                line-height: 20px;\r\n            }\r\n\r\n            .detail-label {\r\n                color: #b2b5bd;\r\n            }\r\n\r\n            .detail-content {\r\n                /* stylelint-disable value-no-vendor-prefix */\r\n                display: -webkit-box;\r\n                max-height: 60px;\r\n                overflow: hidden;\r\n                text-overflow: ellipsis;\r\n                word-break: break-all;\r\n                -webkit-box-orient: vertical;\r\n                -webkit-line-clamp: 3;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div id=\"templateVariableRender\">\r\n        <div v-if=\"showEmpty\">--</div>\r\n        <template v-else>\r\n            <div class=\"variable-batch-action\">\r\n                <bk-button\r\n                    v-if=\"isOperation\"\r\n                    text\r\n                    @click=\"handleShowBatchOperation\">\r\n                    <Icon type=\"bulk-edit\" />\r\n                    {{ '批量编辑' }}\r\n                </bk-button>\r\n                <bk-button\r\n                    v-if=\"isEditOfPlan\"\r\n                    text\r\n                    @click=\"handleShowBatchEditOfPlan\">\r\n                    <Icon type=\"bulk-edit\" />\r\n                    {{ '批量编辑变量值' }}\r\n                </bk-button>\r\n            </div>\r\n            <div class=\"task-global-variable-box\">\r\n                <template v-for=\"(item, index) in variable\">\r\n                    <div\r\n                        v-if=\"item.delete !== 1\"\r\n                        :key=\"`${item.name}_${index}`\"\r\n                        class=\"render-global-variable\"\r\n                        :class=\"[\r\n                            {\r\n                                'step-mode-diff': isDiff,\r\n                            },\r\n                            isSelect ?\r\n                                selectValue.includes(item.name) ? 'selected' : 'not-selected'\r\n                                : '',\r\n                        ]\">\r\n                        <div\r\n                            class=\"global-variable-content\"\r\n                            :class=\"[diff[item.id] && diff[item.id].type]\"\r\n                            @mouseenter=\"handleShowPopoverDetail(item)\"\r\n                            @mouseleave=\"handleHidePopoverDetail\"\r\n                            @click=\"handlerOperation(item, index)\">\r\n                            <div\r\n                                :id=\"`globalVariableWithName_${item.name}`\"\r\n                                class=\"variable-type\">\r\n                                <Icon :type=\"item.icon\" />\r\n                            </div>\r\n                            <div class=\"variable-info\">\r\n                                <div class=\"variable-name\">{{ item.name }}</div>\r\n                                <div class=\"variable-description\">{{ item.valueText }}</div>\r\n                            </div>\r\n                            <Icon\r\n                                v-if=\"isOperation\"\r\n                                type=\"close\"\r\n                                class=\"variable-delete-btn\"\r\n                                @click.stop=\"handleDelete(index)\" />\r\n                        </div>\r\n                    </div>\r\n                </template>\r\n                <div\r\n                    v-if=\"isOperation\"\r\n                    key=\"create\"\r\n                    class=\"global-variable-new\">\r\n                    <div\r\n                        class=\"new-btn\"\r\n                        v-test=\"{ type: 'button', value: 'create_global_variable' }\"\r\n                        @click=\"handleCreate\">\r\n                        <Icon type=\"plus\" class=\"create-flag\" />\r\n                        <span>{{ '全局变量' }}</span>\r\n                    </div>\r\n                    <div\r\n                        class=\"use-guide\"\r\n                        :class=\"{\r\n                            active: isShowUseGuide,\r\n                        }\"\r\n                        v-bk-tooltips=\"'使用指引'\"\r\n                        @click.stop=\"handleUseGuideToggle\">\r\n                        <Icon type=\"help-document-fill\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <popover-detail\r\n                v-if=\"currentPopoverDetail.name\"\r\n                :data=\"currentPopoverDetail\"\r\n                :select-value=\"selectValue\"\r\n                :edit-of-plan=\"isEditOfPlan\"\r\n                :default-field=\"defaultField\" />\r\n            <element-teleport\r\n                v-if=\"isOperation\"\r\n                target=\"#templateOperationLayoutRight\">\r\n                <variable-use-guide\r\n                    v-if=\"isShowUseGuide\"\r\n                    @on-close=\"handleUseGuideClose\" />\r\n            </element-teleport>\r\n            <jb-sideslider\r\n                v-if=\"isView || isEditOfPlan\"\r\n                :is-show.sync=\"isShowDetail\"\r\n                :title=\"'查看全局变量'\"\r\n                :show-footer=\"false\"\r\n                ref=\"variableView\"\r\n                :media=\"detailMedia\">\r\n                <detail\r\n                    v-if=\"isShowDetail\"\r\n                    :data=\"currentData\"\r\n                    :default-field=\"defaultField\" />\r\n            </jb-sideslider>\r\n            <jb-sideslider\r\n                v-if=\"isEditOfPlan\"\r\n                :is-show.sync=\"isShowEditOfPlan\"\r\n                :title=\"'编辑全局变量'\"\r\n                :width=\"960\">\r\n                <edit-of-plan\r\n                    v-if=\"isShowEditOfPlan\"\r\n                    ref=\"planGlobalVar\"\r\n                    :data=\"currentData\"\r\n                    @on-change=\"handlePlanEditSubmit\" />\r\n            </jb-sideslider>\r\n            <jb-sideslider\r\n                v-if=\"isEditOfPlan\"\r\n                :is-show.sync=\"isShowBatchEditOfPlan\"\r\n                :title=\"'批量编辑变量值'\"\r\n                :width=\"960\"\r\n                :ok-text=\"'确定'\"\r\n                footer-offset-target=\"variable-value\">\r\n                <batch-edit-of-plan\r\n                    v-if=\"isShowBatchEditOfPlan\"\r\n                    ref=\"planGlobalVar\"\r\n                    :selected-list=\"selectValue\"\r\n                    :variable-list=\"variable\"\r\n                    @on-change=\"handleBatchPlanEditSubmit\" />\r\n            </jb-sideslider>\r\n            <jb-sideslider\r\n                v-if=\"isOperation\"\r\n                :is-show.sync=\"isShowOperation\"\r\n                v-bind=\"operationSideSliderInfo\"\r\n                :width=\"960\">\r\n                <operation\r\n                    v-if=\"isShowOperation\"\r\n                    ref=\"globalVar\"\r\n                    :variable=\"realVariable\"\r\n                    :data=\"currentData\"\r\n                    @on-change=\"handleOperationSubmit\" />\r\n            </jb-sideslider>\r\n            <jb-sideslider\r\n                v-if=\"isOperation\"\r\n                :is-show.sync=\"isShowBatchOperation\"\r\n                :title=\"'批量编辑变量'\"\r\n                :media=\"batchOperationMediaQuery\">\r\n                <batch-operation\r\n                    v-if=\"isShowBatchOperation\"\r\n                    :variable=\"variable\"\r\n                    @on-change=\"handleBatchOperationSubmit\" />\r\n            </jb-sideslider>\r\n        </template>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n       import VariableModel from '@model/task/global-variable';\r\n    import VariableUseGuide from '@/views/task-manage/common/variable-use-guide';\r\n    import Operation from './operation';\r\n    import BatchOperation from './batch-operation';\r\n    import Detail from './detail';\r\n    import EditOfPlan from './edit-of-plan';\r\n    import BatchEditOfPlan from './batch-edit-of-plan';\r\n    import PopoverDetail from './popover-detail';\r\n\r\n    export default {\r\n        name: 'RenderGlobalVar',\r\n        components: {\r\n            VariableUseGuide,\r\n            Operation,\r\n            BatchOperation,\r\n            Detail,\r\n            EditOfPlan,\r\n            BatchEditOfPlan,\r\n            PopoverDetail,\r\n        },\r\n        props: {\r\n            list: {\r\n                type: Array,\r\n                required: true,\r\n            },\r\n            /*\r\n             * @value ''：仅可查看详情\r\n             * @value 'operate': 可编辑可新建可删除\r\n             * @value 'select': 选择模式\r\n             * @value 'editOfPlan'：不可删除，使用执行方案的编辑功能\r\n             * @value 'viewOfPlan': 执行方案的查看功能\r\n             * @value 'diff'：diff场景\r\n             */\r\n            mode: {\r\n                type: String,\r\n                default: '',\r\n            },\r\n            selectValue: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n            defaultField: {\r\n                type: String,\r\n                default: '初始值',\r\n            },\r\n            diff: {\r\n                type: Object,\r\n                default: () => ({}),\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isShowDetail: false,\r\n                isShowUseGuide: false,\r\n                isShowOperation: false,\r\n                isShowBatchOperation: false,\r\n                isShowEditOfPlan: false,\r\n                isShowBatchEditOfPlan: false,\r\n                variable: [],\r\n                currentPopoverDetail: {},\r\n                currentData: {},\r\n                currentIndex: -1,\r\n                currentOperation: 'create',\r\n                detailMedia: [],\r\n            };\r\n        },\r\n        computed: {\r\n            /**\r\n             * @desc 展示数据为空时的文本\r\n             * @returns { Boolean }\r\n             */\r\n            showEmpty () {\r\n                if (this.isOperation) {\r\n                    return false;\r\n                }\r\n                return this.variable.length < 1;\r\n            },\r\n            /**\r\n             * @desc 新建、编辑全局变量\r\n             * @returns { Boolean }\r\n             */\r\n            isOperation () {\r\n                return this.mode === 'operate';\r\n            },\r\n            /**\r\n             * @desc 选择全局变量\r\n             * @returns { Boolean }\r\n             */\r\n            isSelect () {\r\n                return this.mode === 'select' || this.mode === 'editOfPlan';\r\n            },\r\n            /**\r\n             * @desc 编辑执行方案中的全局变量\r\n             * @returns { Boolean }\r\n             */\r\n            isEditOfPlan () {\r\n                return this.mode === 'editOfPlan';\r\n            },\r\n            /**\r\n             * @desc 查看全局变量\r\n             * @returns { Boolean }\r\n             */\r\n            isView () {\r\n                return !this.mode;\r\n            },\r\n            /**\r\n             * @desc 插卡全局变量同步对比差异\r\n             * @returns { Boolean }\r\n             */\r\n            isDiff () {\r\n                return this.mode === 'diff';\r\n            },\r\n            /**\r\n             * @desc 展示的全局变量不包含已删除\r\n             * @returns { Array }\r\n             */\r\n            realVariable () {\r\n                // 过滤掉已经删除的变量\r\n                const validVariable = this.variable.filter(item => !item.delete);\r\n                // 编辑操作不包含正在编辑的变量\r\n                if (this.currentOperation === 'edit') {\r\n                    return validVariable.filter(item => item.name !== this.currentData.name);\r\n                }\r\n                return validVariable;\r\n            },\r\n            /**\r\n             * @desc 变量编辑侧栏的展示信息\r\n             * @returns { Object }\r\n             */\r\n            operationSideSliderInfo () {\r\n                if (Object.keys(this.currentData).length < 1) {\r\n                    return {\r\n                        title: '新建全局变量',\r\n                        okText: '提交',\r\n                    };\r\n                }\r\n                return {\r\n                    title: '编辑全局变量',\r\n                    okText: '保存',\r\n                };\r\n            },\r\n        },\r\n        watch: {\r\n            list: {\r\n                handler (value) {\r\n                    this.variable = _.cloneDeep(value);\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        created () {\r\n            this.batchOperationMediaQuery = [1080, 1280, 1520, 1800];\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 更新外部数据\r\n             */\r\n            triggerChange () {\r\n                this.$emit('on-change', this.variable);\r\n            },\r\n            /**\r\n             * @desc 显示全局变量详情tips\r\n             * @param {Object} variableInfo 全局变量详情\r\n             */\r\n            handleShowPopoverDetail (variableInfo) {\r\n                this.currentPopoverDetail = variableInfo;\r\n            },\r\n            /**\r\n             * @desc 隐藏全局变量详情tips\r\n             */\r\n            handleHidePopoverDetail () {\r\n                this.currentPopoverDetail = {};\r\n            },\r\n            /**\r\n             * @desc 批量编辑\r\n             */\r\n            handleShowBatchOperation () {\r\n                this.isShowBatchOperation = true;\r\n            },\r\n            /**\r\n             * @desc 批量编辑执行方案中变量值\r\n             */\r\n            handleShowBatchEditOfPlan () {\r\n                this.isShowBatchEditOfPlan = true;\r\n            },\r\n            /**\r\n             * @desc 点击全局变量\r\n             * @param {Object} variableInfo 全局变量详情\r\n             * @param {Index} index 点击变量的索引\r\n             */\r\n            handlerOperation (variableInfo, index) {\r\n                this.currentData = variableInfo;\r\n                if (this.isView) {\r\n                    this.detailMedia = variableInfo.type === VariableModel.TYPE_HOST ? [960] : [600, 660, 720, 780];\r\n                    this.isShowDetail = true;\r\n                    return;\r\n                }\r\n                this.currentOperation = 'edit';\r\n                this.currentIndex = index;\r\n                if (this.isEditOfPlan) {\r\n                    this.isShowEditOfPlan = true;\r\n                    return;\r\n                }\r\n                this.isShowOperation = true;\r\n            },\r\n            /**\r\n             * @desc 删除全局变量\r\n             * @param {Number} index 删除变量的索引\r\n             */\r\n            handleDelete (index) {\r\n                this.$bkInfo({\r\n                    title: '确定删除该全局变量？',\r\n                    subTitle: '若该变量被步骤引用，请及时检查并更新步骤设置',\r\n                    confirmFn: () => {\r\n                        const currentVar = this.variable[index];\r\n                        if (currentVar.id > 0) {\r\n                            // 删除已存在的变量\r\n                            //  —设置delete\r\n                            currentVar.delete = 1;\r\n                        } else {\r\n                            // 删除新建的变量\r\n                            //  —直接删除\r\n                            this.variable.splice(index, 1);\r\n                        }\r\n                        this.triggerChange();\r\n                    },\r\n                });\r\n            },\r\n            /**\r\n             * @desc 显示新建全局变量弹层\r\n             */\r\n            handleCreate () {\r\n                this.currentOperation = 'create';\r\n                this.currentData = {};\r\n                this.isShowOperation = true;\r\n                this.$refs.globalVar && this.$refs.globalVar.reset();\r\n            },\r\n            /**\r\n             * @desc 执行方案全局变量编辑\r\n             * @param {Object} payload 全局变量数据\r\n             */\r\n            handlePlanEditSubmit (payload) {\r\n                const variable = new VariableModel(payload);\r\n                this.variable.splice(this.currentIndex, 1, variable);\r\n                this.triggerChange();\r\n            },\r\n            /**\r\n             * @desc 批量编辑执行方案全局变量\r\n             * @param {Array} variableList 全局变量列表\r\n             */\r\n            handleBatchPlanEditSubmit (variableList) {\r\n                const variables = variableList.map(item => new VariableModel(item));\r\n                this.variable = variables;\r\n                this.triggerChange();\r\n            },\r\n            /**\r\n             * @desc 全局变量编辑\r\n             * @param {Object} payload 全局变量数据\r\n             */\r\n            handleOperationSubmit (payload) {\r\n                const payloadModel = new VariableModel(payload);\r\n                if (this.currentOperation === 'create') {\r\n                    // 新建变量——追加\r\n                    this.variable.push(payloadModel);\r\n                } else {\r\n                    // 编辑变量——替换\r\n                    this.variable.splice(this.currentIndex, 1, payloadModel);\r\n                }\r\n                this.triggerChange();\r\n                this.currentOperation = '';\r\n            },\r\n            /**\r\n             * @desc 全局变量批量编辑\r\n             * @param {Array} variableList 全局变量数据\r\n             */\r\n            handleBatchOperationSubmit (variableList) {\r\n                this.variable = variableList;\r\n                this.triggerChange();\r\n            },\r\n            handleUseGuideToggle () {\r\n                this.isShowUseGuide = !this.isShowUseGuide;\r\n            },\r\n            handleUseGuideClose () {\r\n                this.isShowUseGuide = false;\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    @import \"@/css/mixins/media\";\r\n\r\n    .task-global-variable-box {\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        align-items: center;\r\n        margin-top: -10px;\r\n\r\n        .render-global-variable {\r\n            margin-top: 10px;\r\n            margin-right: 10px;\r\n            cursor: pointer;\r\n            border-color: #3a84ff;\r\n\r\n            &.selected {\r\n                .global-variable-content {\r\n                    border-color: #3a84ff;\r\n                }\r\n            }\r\n\r\n            &.not-selected {\r\n                .variable-type {\r\n                    background: #dcdee5;\r\n                }\r\n            }\r\n        }\r\n\r\n        .global-variable-content {\r\n            position: relative;\r\n            display: flex;\r\n            width: 160px;\r\n            height: 50px;\r\n            padding: 0 10px;\r\n            background: #fff;\r\n            border: 1px solid #c4c6cc;\r\n            border-radius: 2px;\r\n            box-sizing: border-box;\r\n            transition: all 0.15s;\r\n            align-items: center;\r\n\r\n            &:hover {\r\n                background: #e1ecff;\r\n                border-color: #3a84ff;\r\n\r\n                .variable-delete-btn {\r\n                    opacity: 100%;\r\n                    visibility: visible;\r\n                    transform: scale(1);\r\n                }\r\n            }\r\n        }\r\n\r\n        .variable-type {\r\n            display: flex;\r\n            width: 30px;\r\n            height: 30px;\r\n            font-size: 18px;\r\n            color: #fff;\r\n            background: #3a84ff;\r\n            border-radius: 2px;\r\n            align-items: center;\r\n            justify-content: center;\r\n            flex: 0 0 30px;\r\n            transition: all 0.15s;\r\n        }\r\n\r\n        .variable-delete-btn {\r\n            position: absolute;\r\n            top: -9px;\r\n            right: -9px;\r\n            width: 18px;\r\n            height: 18px;\r\n            font-size: 14px;\r\n            line-height: 18px;\r\n            color: #fff;\r\n            cursor: pointer;\r\n            background: #c4c6cc;\r\n            border-radius: 50%;\r\n            opacity: 0%;\r\n            visibility: hidden;\r\n            transform: scale(0.8);\r\n            transition: all 0.25s;\r\n        }\r\n\r\n        .variable-info {\r\n            display: flex;\r\n            padding-left: 10px;\r\n            font-size: 12px;\r\n            line-height: 1;\r\n            color: #979ba5;\r\n            flex-direction: column;\r\n\r\n            .variable-name {\r\n                height: 16px;\r\n                max-width: 100px;\r\n                margin-bottom: 2px;\r\n                overflow: hidden;\r\n                font-size: 14px;\r\n                color: #63656e;\r\n                text-overflow: ellipsis;\r\n                white-space: nowrap;\r\n            }\r\n\r\n            .variable-description {\r\n                height: 14px;\r\n                max-width: 138px;\r\n                overflow: hidden;\r\n                text-overflow: ellipsis;\r\n                white-space: nowrap;\r\n            }\r\n        }\r\n\r\n        .global-variable-new {\r\n            position: relative;\r\n            width: 160px;\r\n            margin-top: 10px;\r\n\r\n            .new-btn,\r\n            .use-guide {\r\n                cursor: pointer;\r\n\r\n                &:hover,\r\n                &.active {\r\n                    color: #3a84ff;\r\n                    border-color: #3a84ff;\r\n\r\n                    i {\r\n                        color: #3a84ff;\r\n                    }\r\n                }\r\n            }\r\n\r\n            .new-btn {\r\n                display: flex;\r\n                width: 100%;\r\n                height: 50px;\r\n                font-size: 14px;\r\n                color: #979ba5;\r\n                border: 1px dashed #c4c6cc;\r\n                border-radius: 2px;\r\n                box-sizing: border-box;\r\n                align-items: center;\r\n                justify-content: center;\r\n\r\n                .create-flag {\r\n                    margin-right: 5px;\r\n                    color: #c4c6cc;\r\n                }\r\n            }\r\n\r\n            .use-guide {\r\n                position: absolute;\r\n                top: 50%;\r\n                right: -29px;\r\n                display: flex;\r\n                width: 30px;\r\n                font-size: 14px;\r\n                color: #979ba5;\r\n                justify-content: center;\r\n                align-items: center;\r\n                transform: translateY(-50%);\r\n            }\r\n        }\r\n\r\n        .global-variable-content,\r\n        .global-variable-new {\r\n            @media (--small-viewports) {\r\n                width: 160px;\r\n            }\r\n\r\n            @media (--medium-viewports) {\r\n                width: 180px;\r\n            }\r\n\r\n            @media (--large-viewports) {\r\n                width: 200px;\r\n            }\r\n\r\n            @media (--huge-viewports) {\r\n                width: 220px;\r\n            }\r\n        }\r\n\r\n        .step-mode-diff {\r\n            cursor: default;\r\n\r\n            &::after {\r\n                position: absolute;\r\n                top: 0;\r\n                left: 0;\r\n                width: 100%;\r\n                height: 100%;\r\n                content: \"\";\r\n            }\r\n\r\n            .global-variable-content {\r\n                &.same {\r\n                    border-color: #c4c6cc;\r\n\r\n                    .variable-type {\r\n                        background: #979ba5;\r\n                    }\r\n                }\r\n\r\n                &.new {\r\n                    &::after {\r\n                        position: absolute;\r\n                        top: -6px;\r\n                        right: -6px;\r\n                        width: 28px;\r\n                        height: 14px;\r\n                        font-size: 12px;\r\n                        line-height: 14px;\r\n                        color: #fff;\r\n                        text-align: center;\r\n                        background: #ffa86e;\r\n                        content: \"new\";\r\n                    }\r\n                }\r\n\r\n                &.new,\r\n                &.different {\r\n                    position: relative;\r\n                    border-color: #f9c9a9;\r\n\r\n                    .variable-type {\r\n                        background: #f5c09e;\r\n                    }\r\n                }\r\n\r\n                &.delete {\r\n                    border-color: #dcdee5;\r\n\r\n                    .variable-type {\r\n                        background: #dcdee5;\r\n                    }\r\n\r\n                    .variable-info {\r\n                        .variable-name,\r\n                        .variable-description {\r\n                            color: #c4c6cc;\r\n                            text-decoration: line-through;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"render-server-agent\">\r\n        <Icon\r\n            v-if=\"isLoading\"\r\n            class=\"rotate-loading\"\r\n            svg\r\n            type=\"sync-pending\" />\r\n        <div\r\n            v-else\r\n            class=\"agent-text\"\r\n            @click=\"handleShowDetail\">\r\n            <div v-if=\"data.normalNum > 0\">\r\n                {{ '正常' }}:<span class=\"success number\">{{ data.normalNum }}</span>\r\n            </div>\r\n            <div v-if=\"data.abnormalNum > 0\">\r\n                <span v-if=\"data.normalNum > 0\" class=\"splite\" />\r\n                {{ '异常' }}:<span class=\"error number\">{{ data.abnormalNum }}</span>\r\n            </div>\r\n            <span v-if=\"isEmpty\">--</span>\r\n        </div>\r\n        <lower-component level=\"custom\" :custom=\"isShowDetail\">\r\n            <jb-dialog\r\n                v-model=\"isShowDetail\"\r\n                :width=\"1020\"\r\n                :ok-text=\"'关闭'\"\r\n                class=\"render-server-detail-dialog\">\r\n                <template #header>\r\n                    <div class=\"variable-title\">\r\n                        <span>{{ title }}</span>\r\n                        <i class=\"global-variable-dialog-close bk-icon icon-close\" @click=\"handleClose\" />\r\n                    </div>\r\n                </template>\r\n                <div class=\"content-wraper\">\r\n                    <scroll-faker>\r\n                        <server-panel\r\n                            detail-mode=\"dialog\"\r\n                            :host-node-info=\"hostNodeInfo\" />\r\n                    </scroll-faker>\r\n                </div>\r\n            </jb-dialog>\r\n        </lower-component>\r\n    </div>\r\n</template>\r\n<script>\r\n    import AppManageService from '@service/app-manage';\r\n    import TaskHostNodeModel from '@model/task-host-node';\r\n    import ServerPanel from '@components/choose-ip/server-panel';\r\n    \r\n    export default {\r\n        name: '',\r\n        components: {\r\n            ServerPanel,\r\n        },\r\n        props: {\r\n            title: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            hostNodeInfo: {\r\n                type: Object,\r\n                required: true,\r\n            },\r\n            separator: {\r\n                type: String,\r\n                default: '，',\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: false,\r\n                isShowDetail: false,\r\n                data: {\r\n                    normalNum: 0,\r\n                    abnormalNum: 0,\r\n                },\r\n            };\r\n        },\r\n        computed: {\r\n            isEmpty () {\r\n                return TaskHostNodeModel.isHostNodeInfoEmpty(this.hostNodeInfo);\r\n            },\r\n        },\r\n        watch: {\r\n            hostNodeInfo () {\r\n                this.fetchData();\r\n            },\r\n        },\r\n        created () {\r\n            this.fetchData();\r\n        },\r\n        methods: {\r\n            fetchData () {\r\n                if (this.isEmpty || this.isLoading) {\r\n                    this.isLoading = false;\r\n                    return;\r\n                }\r\n                this.isLoading = true;\r\n                const { dynamicGroupList, ipList, topoNodeList } = this.hostNodeInfo;\r\n                AppManageService.fetchHostStatistics({\r\n                    appTopoNodeList: topoNodeList.map(topo => ({\r\n                        objectId: topo.type,\r\n                        instanceId: topo.id,\r\n                    })),\r\n                    dynamicGroupIds: dynamicGroupList,\r\n                    ipList: ipList.map(host => `${host.cloudAreaInfo.id}:${host.ip}`),\r\n                }).then((data) => {\r\n                    this.data = data;\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            handleShowDetail () {\r\n                this.isShowDetail = true;\r\n            },\r\n            handleClose () {\r\n                this.isShowDetail = false;\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .render-server-agent {\r\n        .agent-text {\r\n            display: flex;\r\n            flex-wrap: wrap;\r\n            align-items: center;\r\n            cursor: pointer;\r\n\r\n            .strong {\r\n                color: #3a84ff;\r\n            }\r\n\r\n            .error {\r\n                color: #ea3636;\r\n            }\r\n\r\n            .success {\r\n                color: #3fc06d;\r\n            }\r\n\r\n            .number {\r\n                padding: 0 4px;\r\n                font-weight: bold;\r\n            }\r\n\r\n            .splite {\r\n                padding-left: 16px;\r\n            }\r\n        }\r\n    }\r\n\r\n    .render-server-detail-dialog {\r\n        .bk-dialog-tool {\r\n            display: none;\r\n        }\r\n\r\n        .bk-dialog-header,\r\n        .bk-dialog-footer {\r\n            position: relative;\r\n            z-index: 99999;\r\n            background: #fff;\r\n        }\r\n\r\n        .bk-dialog-header {\r\n            padding: 0;\r\n        }\r\n\r\n        .bk-dialog-wrapper .bk-dialog-header .bk-dialog-header-inner {\r\n            font-size: 20px;\r\n            color: #000;\r\n            text-align: left;\r\n        }\r\n\r\n        .bk-dialog-wrapper .bk-dialog-body {\r\n            padding: 0;\r\n\r\n            .server-panel {\r\n                height: 100%;\r\n\r\n                &.show-detail {\r\n                    overflow: hidden;\r\n                }\r\n\r\n                .host-detail.show {\r\n                    padding-left: 20%;\r\n                }\r\n            }\r\n        }\r\n\r\n        .content-wraper {\r\n            height: 450px;\r\n            max-height: 450px;\r\n            min-height: 450px;\r\n            margin-top: -1px;\r\n        }\r\n\r\n        button[name=\"cancel\"] {\r\n            display: none;\r\n        }\r\n\r\n        .variable-title {\r\n            position: relative;\r\n            height: 68px;\r\n            padding-top: 0;\r\n            padding-bottom: 0;\r\n            padding-left: 25px;\r\n            font-size: 20px;\r\n            line-height: 68px;\r\n            color: #000;\r\n            text-align: left;\r\n            border-bottom: 1px solid #dcdee5;\r\n        }\r\n\r\n        .global-variable-dialog-close {\r\n            position: absolute;\r\n            top: 0;\r\n            right: 0;\r\n            font-size: 32px;\r\n            color: #c4c6cc;\r\n            cursor: pointer;\r\n            transition: all 0.15s;\r\n\r\n            &:hover {\r\n                transform: rotateZ(90deg);\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"job-smart-input\">\r\n        <div\r\n            ref=\"input\"\r\n            class=\"job-smart-input-area\"\r\n            contenteditable=\"true\"\r\n            spellcheck=\"false\"\r\n            :style=\"stylees\"\r\n            @input=\"handleInput\"\r\n            @focus=\"handleFocus\"\r\n            @blur=\"handleBlur\"\r\n            @paste=\"handlePaste\" />\r\n        <div v-if=\"showPlaceholder\" class=\"job-smart-input-placeholder\" @click=\"handleInputFocus\">{{ placeholder }}</div>\r\n    </div>\r\n</template>\r\n<script>\r\n    export default {\r\n        name: '',\r\n        props: {\r\n            value: {\r\n                type: String,\r\n                default: '',\r\n            },\r\n            placeholder: String,\r\n            resize: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                localValue: this.value,\r\n                focused: false,\r\n            };\r\n        },\r\n        computed: {\r\n            stylees () {\r\n                const styles = {};\r\n                if (this.focused) {\r\n                    styles['z-index'] = 1999;\r\n                } else {\r\n                    styles.height = '30px';\r\n                    styles.overflow = 'hidden';\r\n                    styles['white-space'] = 'pre';\r\n                    styles['text-overflow'] = 'ellipsis';\r\n                }\r\n                return styles;\r\n            },\r\n            showPlaceholder () {\r\n                if (this.focused) {\r\n                    return false;\r\n                }\r\n                return !this.localValue;\r\n            },\r\n        },\r\n        mounted () {\r\n            this.init();\r\n        },\r\n        methods: {\r\n            init () {\r\n                this.$refs.input.innerText = this.value;\r\n            },\r\n            focus () {\r\n                this.$refs.input.focus();\r\n            },\r\n            handleInputFocus () {\r\n                this.focus();\r\n                setTimeout(() => {\r\n                    this.$refs.input.selectionStart = this.localValue.length;\r\n                    this.$refs.input.selectionEnd = this.localValue.length;\r\n                });\r\n            },\r\n            handleInput (event) {\r\n                const value = event.target.outerText;\r\n                this.localValue = value.trim();\r\n                this.$emit('input', this.localValue);\r\n                this.$emit('change', this.localValue);\r\n            },\r\n            handleFocus () {\r\n                this.focused = true;\r\n            },\r\n            handleBlur () {\r\n                this.focused = false;\r\n                this.$refs.input.scrollTop = 0;\r\n                this.$emit('blur', this.localValue);\r\n            },\r\n            handlePaste (e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                let text = '';\r\n                const event = (e.originalEvent || e);\r\n                if (event.clipboardData && event.clipboardData.getData) {\r\n                    text = event.clipboardData.getData('text/plain');\r\n                } else if (window.clipboardData && window.clipboardData.getData) {\r\n                    text = window.clipboardData.getData('Text');\r\n                }\r\n                if (document.queryCommandSupported('insertText')) {\r\n                    document.execCommand('insertText', false, text);\r\n                } else {\r\n                    document.execCommand('paste', false, text);\r\n                }\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    @import \"@/css/mixins/scroll\";\r\n\r\n    .job-smart-input {\r\n        position: relative;\r\n        height: 30px;\r\n        padding: 0 10px;\r\n        font-size: 12px;\r\n        line-height: 18px;\r\n        word-break: break-all;\r\n        cursor: pointer;\r\n        background: #fff;\r\n\r\n        .job-smart-input-area {\r\n            @mixin scroller;\r\n\r\n            position: absolute;\r\n            top: 0;\r\n            right: 0;\r\n            left: 0;\r\n            max-height: 300px;\r\n            min-height: 32px;\r\n            padding: 6px 10px;\r\n            overflow-y: scroll;\r\n            font-size: 12px;\r\n            color: #63656e;\r\n            background: inherit;\r\n            border: 1px solid #c4c6cc;\r\n            border-radius: 2px;\r\n            outline: none;\r\n\r\n            &:focus {\r\n                background: #fff !important;\r\n                border: 1px solid #3a84ff !important;\r\n            }\r\n        }\r\n\r\n        .job-smart-input-placeholder {\r\n            position: absolute;\r\n            top: 1px;\r\n            right: 1px;\r\n            bottom: 1px;\r\n            left: 1px;\r\n            height: 30px;\r\n            padding: 6px 10px;\r\n            overflow: hidden;\r\n            color: #c4c6cc;\r\n            text-overflow: ellipsis;\r\n            white-space: nowrap;\r\n            background: transparent;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div\r\n        ref=\"editBox\"\r\n        class=\"edit-source-file\"\r\n        :class=\"{ 'path-error': !!error }\"\r\n        :data-error=\"error\">\r\n        <template v-if=\"mode === 'edit'\">\r\n            <div class=\"path-text\" :style=\"styles\" @click=\"handleShowEdit\">\r\n                <bk-popover placement=\"right\">\r\n                    <div v-for=\"(item, index) in displayRows\" :key=\"index\" class=\"path-text-row\">\r\n                        {{ item }}\r\n                    </div>\r\n                    <div v-if=\"hasMore\">...</div>\r\n                    <ul slot=\"content\" class=\"source-file-tips-box\">\r\n                        <li\r\n                            v-for=\"(item, index) in renderValue\"\r\n                            :key=\"index\"\r\n                            class=\"row\">\r\n                            <span class=\"dot\" />\r\n                            {{ item }}\r\n                        </li>\r\n                    </ul>\r\n                </bk-popover>\r\n            </div>\r\n            <smart-input\r\n                v-if=\"showEdit\"\r\n                ref=\"pathEdit\"\r\n                class=\"file-path-edit\"\r\n                :placeholder=\"'Enter 换行可输入多个路径'\"\r\n                :value=\"tempValue\"\r\n                @input=\"handleEditChange\"\r\n                @blur=\"handleEditSubmit\" />\r\n        </template>\r\n        <template v-if=\"mode === 'input'\">\r\n            <smart-input\r\n                class=\"file-path-create\"\r\n                ref=\"pathSubmit\"\r\n                :placeholder=\"'Enter 换行可输入多个路径'\"\r\n                @input=\"handleCreateSubmit\"\r\n                @blur=\"handleCreteaBlur\" />\r\n        </template>\r\n        <div v-if=\"error\" class=\"error-flag\" v-bk-tooltips=\"error\">\r\n            <Icon type=\"info\" />\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n       import SmartInput from '@components/smart-input';\r\n    import {\r\n        filePathRule,\r\n    } from '@utils/validator';\r\n\r\n    const formatValue = str => str.split('\\n').reduce((result, item) => {\r\n        const realValue = _.trim(item);\r\n        if (realValue) {\r\n            result.push(realValue);\r\n        }\r\n        return result;\r\n    }, []);\r\n\r\n    const DISPLAY_ROW_NUMS = 3;\r\n\r\n    export default {\r\n        name: '',\r\n\r\n        components: {\r\n            SmartInput,\r\n        },\r\n        props: {\r\n            value: {\r\n                type: Array,\r\n                default: '',\r\n            },\r\n            mode: {\r\n                type: String,\r\n                default: 'edit',\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                showEdit: false,\r\n                isError: false,\r\n                renderValue: [],\r\n                tempValue: '',\r\n                error: '',\r\n            };\r\n        },\r\n        computed: {\r\n            displayRows () {\r\n                return this.renderValue.slice(0, DISPLAY_ROW_NUMS);\r\n            },\r\n            hasMore () {\r\n                return this.renderValue.length > DISPLAY_ROW_NUMS;\r\n            },\r\n            styles () {\r\n                if (this.showEdit) {\r\n                    return {\r\n                        visibility: 'hidden',\r\n                    };\r\n                }\r\n                return {\r\n                    visibility: 'visible',\r\n                };\r\n            },\r\n        },\r\n        watch: {\r\n            value: {\r\n                handler  (newValue) {\r\n                    this.renderValue = newValue;\r\n                    this.tempValue = newValue.join('\\n');\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        methods: {\r\n            handleShowEdit () {\r\n                this.showEdit = true;\r\n                this.$nextTick(() => {\r\n                    this.$refs.pathEdit.focus();\r\n                });\r\n            },\r\n            handleEditChange (value) {\r\n                this.error = '';\r\n                if (!value) {\r\n                    this.error = '路径不能为空';\r\n                }\r\n                this.tempValue = value;\r\n            },\r\n            handleEditSubmit () {\r\n                if (this.error) {\r\n                    this.$refs.pathEdit.focused = true;\r\n                    return;\r\n                }\r\n                \r\n                const realValue = formatValue(this.tempValue);\r\n                \r\n                const hasError = !realValue.every(item => filePathRule.validator(item));\r\n                if (hasError) {\r\n                    this.error = '路径格式不正确';\r\n                    this.showEdit = true;\r\n                    this.$refs.pathEdit.focused = true;\r\n                    return;\r\n                }\r\n                this.showEdit = false;\r\n                this.renderValue = realValue;\r\n                this.$emit('on-change', realValue);\r\n            },\r\n            handleCreateSubmit (value) {\r\n                this.tempValue = value;\r\n                const realValue = formatValue(this.tempValue);\r\n                const isError = !realValue.every(item => filePathRule.validator(item));\r\n                if (isError) {\r\n                    this.error = '路径格式不正确';\r\n                    return;\r\n                }\r\n                this.error = '';\r\n                this.renderValue = realValue;\r\n                this.$emit('on-change', realValue);\r\n            },\r\n            handleCreteaBlur () {\r\n                if (this.error) {\r\n                    this.$refs.pathSubmit.focused = true;\r\n                }\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    @import \"@/css/mixins/scroll\";\r\n\r\n    .edit-source-file {\r\n        position: relative;\r\n        display: flex;\r\n        width: 100%;\r\n        margin-left: -10px;\r\n        font-size: 12px;\r\n        border-radius: 2px;\r\n\r\n        &.path-error {\r\n            .file-path-edit,\r\n            .file-path-create {\r\n                .job-smart-input-area {\r\n                    border-color: #ea3636;\r\n                }\r\n            }\r\n        }\r\n\r\n        .path-text {\r\n            width: 100%;\r\n            padding: 6px 10px;\r\n            cursor: pointer;\r\n            border: 1px solid transparent !important;\r\n            border-radius: 2px;\r\n\r\n            &:hover {\r\n                background: #f0f1f5;\r\n            }\r\n\r\n            .bk-tooltip,\r\n            .bk-tooltip-ref {\r\n                display: flex;\r\n                flex-direction: column;\r\n            }\r\n\r\n            .path-text-row {\r\n                width: 100%;\r\n                height: 18px;\r\n                max-width: 100%;\r\n                overflow: hidden;\r\n                line-height: 18px;\r\n                text-overflow: ellipsis;\r\n                word-break: keep-all;\r\n                white-space: normal;\r\n            }\r\n        }\r\n\r\n        .file-path-edit,\r\n        .file-path-create {\r\n            width: 100%;\r\n\r\n            .job-smart-input-area {\r\n                min-height: 30px;\r\n                border-color: transparent;\r\n            }\r\n        }\r\n\r\n        .file-path-edit {\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n        }\r\n\r\n        .file-path-create {\r\n            background: #f7f8fa;\r\n\r\n            &:hover {\r\n                background: #f0f1f5;\r\n            }\r\n        }\r\n\r\n        .error-flag {\r\n            position: absolute;\r\n            top: 0;\r\n            right: 0;\r\n            z-index: 1999;\r\n            display: flex;\r\n            align-items: center;\r\n            height: 30px;\r\n            padding: 0 6px;\r\n            font-size: 16px;\r\n            color: #ea3636;\r\n            cursor: pointer;\r\n        }\r\n    }\r\n\r\n    .source-file-tips-box {\r\n        max-width: 300px;\r\n        max-height: 280px;\r\n        min-width: 60px;\r\n        overflow-y: auto;\r\n\r\n        @mixin scroller;\r\n\r\n        .row {\r\n            word-break: break-all;\r\n        }\r\n\r\n        .dot {\r\n            display: inline-block;\r\n            width: 6px;\r\n            height: 6px;\r\n            background: currentColor;\r\n            border-radius: 50%;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"server-file-edit-box\" v-bkloading=\"{ isLoading }\">\r\n        <table>\r\n            <thead>\r\n                <th>{{ '文件路径' }}</th>\r\n                <th>{{ '服务器列表' }}</th>\r\n                <th>{{ 'Agent 状态' }}</th>\r\n                <th>{{ '服务器账号' }}</th>\r\n                <th>{{ '操作' }}</th>\r\n            </thead>\r\n            <tbody>\r\n                <tr v-for=\"(row, index) in serverFileList\" :key=\"index\">\r\n                    <td>\r\n                        <edit-file-path\r\n                            :value=\"row.fileLocation\"\r\n                            @on-change=\"value => handleFilePathEdit(value, index)\" />\r\n                    </td>\r\n                    <td>\r\n                        <!-- 编辑主机变量 -->\r\n                        <div\r\n                            v-if=\"row.isVar\"\r\n                            class=\"global-variable-render-box\"\r\n                            :class=\"{ 'value-error': !row.host.variable }\"\r\n                            style=\"margin-left: -10px;\">\r\n                            <bk-select\r\n                                class=\"variable-edit-select\"\r\n                                :value=\"row.host.variable\"\r\n                                :clearable=\"false\"\r\n                                @change=\"value => handleVariableChange(value, index)\"\r\n                                searchable>\r\n                                <bk-option\r\n                                    v-for=\"(option, variableIndex) in variable\"\r\n                                    :key=\"variableIndex\"\r\n                                    :id=\"option.name\"\r\n                                    :name=\"option.name\" />\r\n                            </bk-select>\r\n                            <Icon\r\n                                v-if=\"!row.host.variable\"\r\n                                type=\"info\"\r\n                                class=\"error-tips\"\r\n                                v-bk-tooltips=\"'全局变量被删除，重新设置'\" />\r\n                        </div>\r\n                        <!-- 手动添加主机 -->\r\n                        <div\r\n                            v-else\r\n                            class=\"server-edit-btn\"\r\n                            @click=\"handleHostEdit(index)\"\r\n                            v-html=\"row.serverDesc\" />\r\n                    </td>\r\n                    <td>\r\n                        <!-- 展示服务器列表主机信息 -->\r\n                        <render-server-agent\r\n                            v-if=\"!row.isVar\"\r\n                            :title=\"`${'服务器文件-服务器列表'}`\"\r\n                            :host-node-info=\"row.host.hostNodeInfo\"\r\n                            key=\"host\"\r\n                            :separator=\"agentSeparator\" />\r\n                        <!-- 展示变量的主机信息 -->\r\n                        <render-server-agent\r\n                            v-else\r\n                            :title=\"`${'全局变量'} - ${row.host.variable}`\"\r\n                            :host-node-info=\"findVariableValue(row.serverDesc)\"\r\n                            :key=\"row.serverDesc\"\r\n                            :separator=\"agentSeparator\" />\r\n                    </td>\r\n                    <td>\r\n                        <account-select\r\n                            class=\"account-add-btn\"\r\n                            :value=\"row.account\"\r\n                            type=\"system\"\r\n                            @change=\"value => handleAccountChange(value, index)\" />\r\n                    </td>\r\n                    <td>\r\n                        <bk-button text @click=\"handlerRemove(index)\">\r\n                            {{ '移除' }}\r\n                        </bk-button>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n            <component\r\n                :is=\"addCom\"\r\n                key=\"add\"\r\n                v-bind=\"$attrs\"\r\n                :data=\"serverFileList\"\r\n                :account=\"accountList\"\r\n                :variable=\"variable\"\r\n                @on-change=\"handleAddSave\"\r\n                @on-cancel=\"handleAddCancel\" />\r\n        </table>\r\n        <lower-component level=\"custom\" :custom=\"isShowChooseIp\">\r\n            <choose-ip\r\n                v-model=\"isShowChooseIp\"\r\n                required\r\n                :host-node-info=\"currentHost\"\r\n                @on-change=\"handleHostChange\" />\r\n        </lower-component>\r\n    </div>\r\n</template>\r\n<script>\r\n    import { mapMutations } from 'vuex';\r\n    import AccountManageService from '@service/account-manage';\r\n    import TaskHostNodeModel from '@model/task-host-node';\r\n    import ChooseIp from '@components/choose-ip';\r\n    import RenderServerAgent from '@components/render-server-agent';\r\n    import AccountSelect from '@components/account-select';\r\n    import AddOnlyHost from './only-host';\r\n    import AddHostAndVariable from './host-and-variable';\r\n    import EditFilePath from '../../components/edit-file-path';\r\n\r\n    export default {\r\n        name: 'SourceFileServer',\r\n        components: {\r\n            ChooseIp,\r\n            RenderServerAgent,\r\n            AccountSelect,\r\n            AddOnlyHost,\r\n            AddHostAndVariable,\r\n            EditFilePath,\r\n        },\r\n        inheritAttrs: false,\r\n        props: {\r\n            data: {\r\n                type: Array,\r\n                required: true,\r\n            },\r\n            mode: {\r\n                type: String,\r\n                default: '',\r\n            },\r\n            variable: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: true,\r\n                serverFileList: [{},{},{}],\r\n                currentHost: {},\r\n                accountList: [{},{},{}],\r\n                isShowChooseIp: false,\r\n                currentIndex: 0,\r\n            };\r\n        },\r\n        computed: {\r\n            addCom () {\r\n                if (this.isLoading) {\r\n                    return 'div';\r\n                }\r\n                if (this.mode === 'onlyHost') {\r\n                    return AddOnlyHost;\r\n                }\r\n                return AddHostAndVariable;\r\n            },\r\n            agentSeparator () {\r\n                if (this.mode === 'onlyHost') {\r\n                    return '、';\r\n                }\r\n                return '\\n';\r\n            },\r\n        },\r\n        watch: {\r\n            data: {\r\n                handler (newData) {\r\n                    if (this.innerChange) {\r\n                        this.innerChange = false;\r\n                        return;\r\n                    }\r\n                    this.serverFileList = newData;\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        created () {\r\n            this.fetchAccount();\r\n            this.editNewSourceFile(false);\r\n        },\r\n        methods: {\r\n            ...mapMutations('distroFile', [\r\n                'editNewSourceFile',\r\n            ]),\r\n            /**\r\n             * @desc 获取系统账号列表\r\n             */\r\n            fetchAccount () {\r\n                AccountManageService.fetchAccountWhole({\r\n                    category: 1,\r\n                }).then((data) => {\r\n                    this.accountList = data;\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 从全局变量列表中查找指定全局变量的值\r\n             * @param {String} variableName 全局变量名\r\n             */\r\n            findVariableValue (variableName) {\r\n                const curVariable = this.variable.find(item => item.name === variableName);\r\n                if (!curVariable) {\r\n                    const {\r\n                        hostNodeInfo,\r\n                    } = new TaskHostNodeModel({});\r\n                    return hostNodeInfo;\r\n                }\r\n                return curVariable.defaultTargetValue.hostNodeInfo;\r\n            },\r\n            /**\r\n             * @desc 服务器文件更新\r\n             */\r\n            triggerChange () {\r\n                this.innerChange = true;\r\n                this.$emit('on-change', [\r\n                    ...this.serverFileList,\r\n                ]);\r\n            },\r\n            /**\r\n             * @desc 编辑服务器文件的路径\r\n             * @param {Array} fileLocation 服务器文件\r\n             * @param {Number} index 编辑中的服务器文件的索引\r\n             */\r\n            handleFilePathEdit (fileLocation, index) {\r\n                this.serverFileList[index].fileLocation = fileLocation;\r\n                this.triggerChange();\r\n            },\r\n            /**\r\n             * @desc 开始编辑服务器文件的主机——显示ip选择器弹框\r\n             * @param {Number} index 编辑中的服务器文件的索引\r\n             */\r\n            handleHostEdit (index) {\r\n                this.isShowChooseIp = true;\r\n                this.currentIndex = index;\r\n                this.currentHost = this.data[index].host.hostNodeInfo;\r\n            },\r\n            /**\r\n             * @desc 更新编辑服务器文件的主机\r\n             * @param {Object} hostNodeInfo 服务器主机信息\r\n             */\r\n            handleHostChange (hostNodeInfo) {\r\n                this.serverFileList[this.currentIndex].host.hostNodeInfo = hostNodeInfo;\r\n                this.triggerChange();\r\n            },\r\n            /**\r\n             * @desc 更新编辑服务器文件的全局变量\r\n             * @param {Array} variable 服务器主机信息\r\n             * @param {Number} index 编辑中的服务器文件的索引\r\n             */\r\n            handleVariableChange (variable, index) {\r\n                this.serverFileList[index].host.variable = variable;\r\n                this.triggerChange();\r\n            },\r\n            /**\r\n             * @desc 开始编辑服务器文件的服务器账号\r\n             * @param {Number} index 编辑中的服务器文件的索引\r\n             */\r\n            handleEditAccount (index) {\r\n                this.serverFileList[index].isEditAccount = true;\r\n                this.editAccountIndex = index;\r\n                this.triggerChange();\r\n            },\r\n            /**\r\n             * @desc 更新编辑服务器文件的服务器账号\r\n             * @param {Number} account 服务器账号id\r\n             * @param {Number} index 编辑中的服务器文件的索引\r\n             */\r\n            handleAccountChange (account, index) {\r\n                const serverFile = this.serverFileList[index];\r\n                serverFile.account = account;\r\n                this.triggerChange();\r\n            },\r\n            /**\r\n             * @desc 删除指定的服务器文件\r\n             * @param {Number} index 服务器文件的索引\r\n             */\r\n            handlerRemove (index) {\r\n                this.serverFileList.splice(index, 1);\r\n                this.triggerChange();\r\n            },\r\n            /**\r\n             * @desc 添加一条服务器文件\r\n             * @param {Object} serverFile 服务器文件\r\n             */\r\n            handleAddSave (serverFile) {\r\n                this.serverFileList.push(serverFile);\r\n                this.triggerChange();\r\n            },\r\n            /**\r\n             * @desc 取消添加一条服务器文件\r\n             */\r\n            handleAddCancel () {\r\n                if (this.serverFileList.length < 1) {\r\n                    this.$emit('on-close');\r\n                }\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .server-file-edit-box {\r\n        .global-variable-render-box {\r\n            position: relative;\r\n            border: 1px solid transparent;\r\n            border-radius: 2px;\r\n\r\n            &.value-error {\r\n                border-color: #ea3636;\r\n            }\r\n\r\n            .error-tips {\r\n                position: absolute;\r\n                top: 0;\r\n                right: 0;\r\n                z-index: 1999;\r\n                display: flex;\r\n                height: 30px;\r\n                padding: 0 6px;\r\n                font-size: 16px;\r\n                color: #ea3636;\r\n                cursor: pointer;\r\n                align-items: center;\r\n            }\r\n        }\r\n\r\n        .variable-edit-select,\r\n        .account-add-btn {\r\n            &:hover,\r\n            &.is-focus {\r\n                .bk-select-angle {\r\n                    display: block;\r\n                }\r\n            }\r\n\r\n            .bk-select-angle {\r\n                display: none;\r\n                font-size: 20px;\r\n            }\r\n        }\r\n\r\n        .account-add-btn,\r\n        .server-edit-btn,\r\n        .server-add-only-host-btn {\r\n            margin-left: -10px;\r\n        }\r\n\r\n        .server-add-btn,\r\n        .server-edit-btn,\r\n        .server-add-host {\r\n            cursor: pointer;\r\n            border-radius: 2px;\r\n\r\n            &:hover {\r\n                background: #f0f1f5;\r\n            }\r\n        }\r\n\r\n        .server-add-btn,\r\n        .server-add-host {\r\n            height: 30px;\r\n            line-height: 30px;\r\n        }\r\n\r\n        .server-edit-btn {\r\n            min-height: 30px;\r\n            padding: 5px 10px;\r\n            line-height: 20px;\r\n        }\r\n\r\n        .server-add-btn {\r\n            display: flex;\r\n            height: 30px;\r\n            margin-left: -10px;\r\n            font-size: 12px;\r\n            cursor: pointer;\r\n            background: #f7f8fa;\r\n            border-radius: 2px;\r\n            align-items: center;\r\n\r\n            .server-type-select {\r\n                flex: 0 0 auto;\r\n            }\r\n\r\n            .line {\r\n                height: 16px;\r\n                background: #dcdee5;\r\n                flex: 0 0 1px;\r\n            }\r\n\r\n            .server-add-variable {\r\n                flex: 1;\r\n            }\r\n\r\n            .server-add-host {\r\n                display: flex;\r\n                height: 30px;\r\n                font-size: 12px;\r\n                border-radius: 2px;\r\n                flex: 1;\r\n                align-items: center;\r\n                justify-content: center;\r\n            }\r\n        }\r\n\r\n        .server-add-only-host-btn {\r\n            display: flex;\r\n            height: 30px;\r\n            padding: 0 10px;\r\n            font-size: 12px;\r\n            cursor: pointer;\r\n            background: #f7f8fa;\r\n            border-radius: 2px;\r\n            align-items: center;\r\n            justify-content: center;\r\n\r\n            &:hover {\r\n                color: #979ba5;\r\n                background: #f0f1f5;\r\n            }\r\n\r\n            .add-flag {\r\n                margin-right: 6px;\r\n                margin-bottom: 2px;\r\n            }\r\n        }\r\n\r\n        .create-server-file {\r\n            tr {\r\n                td {\r\n                    border-top: 1px solid #dcdee5;\r\n                }\r\n            }\r\n        }\r\n\r\n        .bk-select {\r\n            height: 30px;\r\n            line-height: 30px;\r\n            border: none;\r\n\r\n            &:hover {\r\n                background: #f0f1f5;\r\n            }\r\n\r\n            .bk-select-name {\r\n                height: 30px;\r\n                padding-right: 16px;\r\n                padding-left: 10px;\r\n                line-height: 30px;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"sleect-source-file\">\r\n        <list-action-layout>\r\n            <jb-breadcrumb :width=\"645\">\r\n                <jb-breadcrumb-item>\r\n                    <Icon type=\"folder-open\" style=\"font-size: 20px;\" />\r\n                    <span>{{ '请选择文件源' }}</span>\r\n                </jb-breadcrumb-item>\r\n            </jb-breadcrumb>\r\n            <template #right>\r\n                <jb-input\r\n                    :placeholder=\"'搜索“所有文件源”'\"\r\n                    right-icon=\"bk-icon icon-search\"\r\n                    style=\"width: 480px;\"\r\n                    @change=\"handleSearch\" />\r\n            </template>\r\n        </list-action-layout>\r\n        <bk-table\r\n            :data=\"tableData\"\r\n            max-height=\"500\"\r\n            :highlight-current-row=\"true\"\r\n            v-bkloading=\"{ isLoading }\">\r\n            <bk-table-column width=\"50\">\r\n                <template slot-scope=\"{ row }\">\r\n                    <span v-html=\"row.publicFlagHtml\" />\r\n                </template>\r\n            </bk-table-column>\r\n            <bk-table-column\r\n                :label=\"'文件源别名'\"\r\n                prop=\"alias\"\r\n                sortable>\r\n                <template slot-scope=\"{ row }\">\r\n                    <auth-button\r\n                        v-if=\"row.isAvailable\"\r\n                        auth=\"file_source/view\"\r\n                        :permission=\"row.canView\"\r\n                        :resource-id=\"row.id\"\r\n                        text\r\n                        @click=\"handleGoBucket(row)\">\r\n                        {{ row.alias }}\r\n                    </auth-button>\r\n                    <span\r\n                        v-else\r\n                        v-bk-tooltips=\"'接入点异常，暂时不可用'\">\r\n                        <bk-button disabled text>{{ row.alias }}</bk-button>\r\n                    </span>\r\n                </template>\r\n            </bk-table-column>\r\n            <bk-table-column\r\n                :label=\"'文件源标识'\"\r\n                prop=\"code\"\r\n                show-overflow-tooltip\r\n                sortable />\r\n            <bk-table-column\r\n                :label=\"'状态'\"\r\n                prop=\"status\">\r\n                <template slot-scope=\"{ row }\">\r\n                    <Icon :type=\"row.statusIcon\" svg />\r\n                    {{ row.statusText }}\r\n                </template>\r\n            </bk-table-column>\r\n            <bk-table-column\r\n                :label=\"'类型'\"\r\n                prop=\"create_time\">\r\n                <template slot-scope=\"{ row }\">\r\n                    {{ row.storageTypeText }}\r\n                </template>\r\n            </bk-table-column>\r\n            <bk-table-column\r\n                :label=\"'更新人'\"\r\n                prop=\"creator\" />\r\n            <bk-table-column\r\n                :label=\"'更新时间'\"\r\n                prop=\"lastModifyTime\" />\r\n        </bk-table>\r\n    </div>\r\n</template>\r\n<script>\r\n    import FileSourceManageService from '@service/file-source-manage';\r\n    import ListActionLayout from '@components/list-action-layout';\r\n    \r\n    export default {\r\n        components: {\r\n            ListActionLayout,\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: false,\r\n                tableData: [],\r\n                searchParams: [],\r\n            };\r\n        },\r\n        created () {\r\n            this.fetchData();\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 获取文件源数据列表\r\n             */\r\n            fetchData () {\r\n                this.isLoading = true;\r\n                FileSourceManageService.availableSourceList(this.searchParams).then(({ data }) => {\r\n                    this.tableData = Object.freeze(data);\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n\r\n            /**\r\n             * @desc 过滤表格数据\r\n             * @param {String} alias 列表筛选值\r\n             *\r\n             * 重新拉取数据\r\n             */\r\n            handleSearch (alias) {\r\n                this.searchParams = {\r\n                    alias,\r\n                };\r\n                this.fetchData();\r\n            },\r\n\r\n            /**\r\n             * @desc 对话框页面显示跳转到bucket存储桶列表模板\r\n             * @param {Object} fileSource 选中的文件源数据\r\n             *\r\n             * 选中数据与将要跳转的组件名称传递到父组件\r\n             */\r\n            handleGoBucket (fileSource) {\r\n                this.$emit('on-source-change', fileSource);\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .sleect-source-file {\r\n        padding-top: 14px;\r\n\r\n        .list-action-layout {\r\n            margin-bottom: 14px;\r\n        }\r\n    }\r\n</style>\r\n","\r\n<template>\r\n    <div class=\"select-bucket\">\r\n        <list-action-layout>\r\n            <jb-breadcrumb\r\n                :width=\"645\"\r\n                @on-last=\"handleBackLast\"\r\n                :key=\"`${fileSourceInfo.alias}_${path}`\">\r\n                <jb-breadcrumb-item>\r\n                    <Icon type=\"folder-open\" style=\"font-size: 20px;\" />\r\n                    <span @click=\"handleGoSourceList\">{{ '文件源列表' }}</span>\r\n                </jb-breadcrumb-item>\r\n                <jb-breadcrumb-item>\r\n                    <span @click=\"handlePathLocation('')\">{{ fileSourceInfo.alias }}</span>\r\n                </jb-breadcrumb-item>\r\n                <jb-breadcrumb-item v-for=\"(item) in pathStack\" :key=\"item.path\">\r\n                    <span @click=\"handlePathLocation(item.path)\">{{ item.name }}</span>\r\n                </jb-breadcrumb-item>\r\n            </jb-breadcrumb>\r\n            <template #right>\r\n                <jb-input\r\n                    :placeholder=\"'搜索关键字'\"\r\n                    right-icon=\"bk-icon icon-search\"\r\n                    style=\"width: 480px;\"\r\n                    enter-trigger\r\n                    @submit=\"handleSearch\" />\r\n            </template>\r\n        </list-action-layout>\r\n        <div v-bkloading=\"{ isLoading }\">\r\n            <bk-table\r\n                :pagination=\"pagination\"\r\n                :data=\"tableData\"\r\n                @page-change=\"handlePageChange\">\r\n                <template v-for=\"(column, index) in renderColumns\">\r\n                    <render-file-list-column\r\n                        :column=\"column\"\r\n                        :row-selection=\"rowSelectMemo\"\r\n                        :render-header=\"renderHeader\"\r\n                        :link-handler=\"handleLink\"\r\n                        :select-handler=\"handleRowSelect\"\r\n                        :key=\"`${path}_${index}_${isLoading}_${wholeTableRowSelect}`\" />\r\n                </template>\r\n            </bk-table>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n    import FileService from '@service/file';\r\n    import ListActionLayout from '@components/list-action-layout';\r\n    import RenderFileListColumn, {\r\n        checkIsCheckboxColumn,\r\n        parseCondition,\r\n    } from '@components/render-file-list-column';\r\n\r\n    export default {\r\n        components: {\r\n            ListActionLayout,\r\n            RenderFileListColumn,\r\n        },\r\n        props: {\r\n            fileSourceId: {\r\n                type: Number,\r\n                required: true,\r\n            },\r\n            fileLocation: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: false,\r\n                renderColumns: {},\r\n                tableData: [],\r\n                path: '',\r\n                name: '',\r\n                pagination: {\r\n                    count: 0,\r\n                    current: 1,\r\n                    limit: 10,\r\n                    'limit-list': [10],\r\n                    small: true,\r\n                    'show-total-count': true,\r\n                    'show-limit': false,\r\n                },\r\n                rowSelectMemo: {},\r\n                fileSourceInfo: { alias: 'alias' },\r\n            };\r\n        },\r\n        computed: {\r\n            /**\r\n             * @desc 面包屑路径\r\n             * @return {Array}\r\n             */\r\n            pathStack () {\r\n                return this.path.split('/').reduce((result, item) => {\r\n                    if (item) {\r\n                        const last = result.length > 0 ? result[result.length - 1].path : '';\r\n                         \r\n                        result.push({\r\n                            path: `${last}${item}/`,\r\n                            name: item,\r\n                        });\r\n                    }\r\n                    return result;\r\n                }, []);\r\n            },\r\n            /**\r\n             * @desc 列表选择状态\r\n             * @return {Object}\r\n             */\r\n            isPageCheckedInfo () {\r\n                let checkNums = 0;\r\n                let dirNums = 0;\r\n                const listNums = this.tableData.length;\r\n                if (Object.keys(this.rowSelectMemo).length > 0) {\r\n                    // eslint-disable-next-line no-plusplus\r\n                    for (let i = 0; i < listNums; i++) {\r\n                        const currentRow = this.tableData[i];\r\n                        if (currentRow.dir) {\r\n                            dirNums += 1;\r\n                            continue;\r\n                        }\r\n                        if (this.rowSelectMemo[currentRow.completePath]) {\r\n                            checkNums += 1;\r\n                        }\r\n                    }\r\n                }\r\n                return {\r\n                    checked: listNums > 0 && checkNums + dirNums === listNums,\r\n                    indeterminate: listNums > 0 && checkNums > 0,\r\n                };\r\n            },\r\n        },\r\n        watch: {\r\n            fileLocation: {\r\n                /**\r\n                 * @desc 编辑状态处理默认显示路径\r\n                 */\r\n                handler (fileLocation) {\r\n                    if (this.isInnerChange) {\r\n                        this.isInnerChange = false;\r\n                        return;\r\n                    }\r\n\r\n                    this.rowSelectMemo = Object.freeze(fileLocation.reduce((result, item) => {\r\n                        result[item] = true;\r\n                        return result;\r\n                    }, {}));\r\n                    const getLength = path => path.split('/').length;\r\n                    // 查找最短文件路径\r\n                    if (fileLocation.length > 0) {\r\n                        let [shortestPath] = fileLocation;\r\n                        fileLocation.forEach((currentFileLocation) => {\r\n                            if (getLength(shortestPath) > getLength(currentFileLocation)) {\r\n                                shortestPath = currentFileLocation;\r\n                            }\r\n                        });\r\n                        this.path = shortestPath.split('/').slice(0, -1)\r\n                            .join('/');\r\n                    }\r\n                    setTimeout(() => {\r\n                        this.fetchData();\r\n                    });\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        created () {\r\n            this.wholeTableRowSelect = false;\r\n            this.isInnerChange = false;\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 获取bucket存储桶数据列表\r\n             */\r\n            fetchData () {\r\n                this.isLoading = true;\r\n                FileService.fetchgetListFileNode({\r\n                    fileSourceId: this.fileSourceId,\r\n                    path: this.path,\r\n                    name: this.name,\r\n                    pageSize: this.pagination.limit,\r\n                    start: parseInt(this.pagination.current - 1, 10) * this.pagination.limit,\r\n                }).then((data) => {\r\n                    this.tableData = Object.freeze(data.data);\r\n                    // 不显示文件操作列\r\n                    this.renderColumns = Object.freeze(data.metaData.properties.filter(_ => _.type !== 'buttonGroup'));\r\n                    this.fileSourceInfo = Object.freeze(data.fileSourceInfo);\r\n                    this.pagination = {\r\n                        ...this.pagination,\r\n                        count: data.total,\r\n                    };\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            renderHeader (h) {\r\n                return (\r\n                <bk-checkbox value={this.wholeTableRowSelect} onChange={this.handlePageSelectToggle} />\r\n                );\r\n            },\r\n            /**\r\n             * @desc 重置文件筛选条件\r\n             */\r\n            resetSearchParams () {\r\n                this.wholeTableRowSelect = false;\r\n                this.name = '';\r\n                this.pagination.current = 1;\r\n            },\r\n            triggerChange () {\r\n                this.isInnerChange = true;\r\n                this.$emit('on-file-change', Object.keys(this.rowSelectMemo));\r\n            },\r\n            /**\r\n             * @desc 文件路径返回上一级\r\n             */\r\n            handleBackLast () {\r\n                const lastPath = this.pathStack[this.pathStack.length - 2];\r\n                this.handlePathLocation(lastPath.path);\r\n            },\r\n            /**\r\n             * @desc 对话框页面显示跳转到文件源列表模板\r\n             *\r\n             * 重置已选的文件源\r\n             */\r\n            handleGoSourceList () {\r\n                this.$emit('on-source-change', {\r\n                    id: '',\r\n                });\r\n            },\r\n            /**\r\n             * @desc 面包屑切换列表\r\n             * @param {String} path 文件路径\r\n             *\r\n             * 重置 name 筛选\r\n             * 重置翻页\r\n             */\r\n            handlePathLocation (path) {\r\n                if (_.trim(path, '/') === _.trim(this.path, '/')) {\r\n                    return;\r\n                }\r\n                this.resetSearchParams();\r\n                this.path = path;\r\n                this.fetchData();\r\n            },\r\n            /**\r\n             * @desc 行数据跳转链接\r\n             * @param {String} path 文件路径\r\n             *\r\n             * 重置 name 筛选\r\n             * 重置翻页\r\n             */\r\n            handleLink (path) {\r\n                this.resetSearchParams();\r\n                this.path = path;\r\n                this.fetchData();\r\n            },\r\n            /**\r\n             * @desc 文件搜索\r\n             * @param {String} name 文件名\r\n             *\r\n             * 重置翻页\r\n             */\r\n            handleSearch (name) {\r\n                this.resetSearchParams();\r\n                this.name = name;\r\n                this.fetchData();\r\n            },\r\n            /**\r\n             * @desc 切换表格的全选状态\r\n             * @param {Boolean} isChecked 最新选中状态\r\n             */\r\n            handlePageSelectToggle (isChecked) {\r\n                this.isLoading = true;\r\n                FileService.fetchgetListFileNode({\r\n                    fileSourceId: this.fileSourceId,\r\n                    path: this.path,\r\n                    name: this.name,\r\n                    pageSize: -1,\r\n                    start: 0,\r\n                }).then((data) => {\r\n                    const tableData = data.data;\r\n                    const renderColumns = data.metaData.properties;\r\n\r\n                    const selectColumn = renderColumns.find(({ type }) => checkIsCheckboxColumn(type));\r\n                    if (!selectColumn) {\r\n                        return;\r\n                    }\r\n\r\n                    const rowSelectMemo = Object.assign({}, this.rowSelectMemo);\r\n\r\n                    tableData.forEach((rowData) => {\r\n                        if (!isChecked) {\r\n                            delete rowSelectMemo[rowData.completePath];\r\n                        } else if (parseCondition(selectColumn.enable, rowData)) {\r\n                            rowSelectMemo[rowData.completePath] = true;\r\n                        }\r\n                    });\r\n                    this.rowSelectMemo = Object.freeze(rowSelectMemo);\r\n                    this.triggerChange();\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 单行数据切换\r\n             * @param {String} completePath 最新展示页\r\n             * @param {Boolean} isChecked 最新选中状态\r\n             */\r\n            handleRowSelect (completePath, isChecked) {\r\n                const rowSelectMemo = Object.assign({}, this.rowSelectMemo);\r\n                if (isChecked) {\r\n                    rowSelectMemo[completePath] = true;\r\n                } else {\r\n                    delete rowSelectMemo[completePath];\r\n                }\r\n                this.rowSelectMemo = Object.freeze(rowSelectMemo);\r\n                this.triggerChange();\r\n            },\r\n            /**\r\n             * @desc 翻页\r\n             * @param {Number} current 最新展示页\r\n             */\r\n            handlePageChange (current) {\r\n                this.pagination.current = current;\r\n                this.fetchData();\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .select-bucket {\r\n        padding-top: 14px;\r\n\r\n        .list-action-layout {\r\n            margin-bottom: 14px;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <jb-dialog\r\n        :value=\"value\"\r\n        class=\"choose-source-file\"\r\n        header-position=\"left\"\r\n        :esc-close=\"false\"\r\n        :mask-close=\"false\"\r\n        :width=\"1200\"\r\n        :title=\"'选择文件源文件'\"\r\n        @input=\"handleCancle\">\r\n        <div v-bkloading=\"{ isLoading }\">\r\n            <component\r\n                v-if=\"value\"\r\n                :is=\"panelCom\"\r\n                class=\"dialog-content\"\r\n                :file-source-id=\"fileSourceId\"\r\n                :file-location=\"fileLocation\"\r\n                @on-source-change=\"handleSourceChange\"\r\n                @on-file-change=\"handelFileChange\" />\r\n        </div>\r\n        <template #footer>\r\n            <bk-button\r\n                class=\"mr10\"\r\n                theme=\"primary\"\r\n                \r\n                @click=\"handleSubmit\">\r\n                <span>{{ '添加' }}</span>\r\n                <span v-if=\"!isSelectedEmpty\" class=\"result-nums\">{{ fileLocation.length }}</span>\r\n            </bk-button>\r\n            <bk-button @click=\"handleCancle\">{{ '取消' }}</bk-button>\r\n        </template>\r\n    </jb-dialog>\r\n</template>\r\n<script>\r\n    import SourceFileVO from '@domain/variable-object/source-file';\r\n    import SelectFileSource from './select-file-source';\r\n    import SelectFile from './select-file';\r\n\r\n    const SELECT_FILE_SOURCE = 'selectFileSource';\r\n    const SELECT_FILE = 'selectFile';\r\n    \r\n    export default {\r\n        components: {\r\n            SelectFileSource,\r\n            SelectFile,\r\n        },\r\n        props: {\r\n            value: {\r\n                type: Boolean,\r\n                defaule: false,\r\n            },\r\n            sourceFile: {\r\n                type: Object,\r\n                defaule: () => ({}),\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: false,\r\n                selectStep: SELECT_FILE_SOURCE,\r\n                fileSourceId: '',\r\n                fileLocation: [],\r\n            };\r\n        },\r\n        computed: {\r\n            panelCom () {\r\n                if (!this.fileSourceId) {\r\n                    return SelectFileSource;\r\n                }\r\n                const comMap = {\r\n                    [SELECT_FILE_SOURCE]: SelectFileSource,\r\n                    [SELECT_FILE]: SelectFile,\r\n                };\r\n                return comMap[this.selectStep];\r\n            },\r\n            isSelectedEmpty () {\r\n                return this.fileLocation.length < 1;\r\n            },\r\n        },\r\n        watch: {\r\n            value: {\r\n                /**\r\n                 * @desc 显示源文件选择框\r\n                 *\r\n                 * 1，有指定fileSourceId进入编辑状态\r\n                 * 解析fileSourceId、bucketName，定位到已选的文件夹\r\n                 * 2，没有指定fileSourceId进行新建状态\r\n                 *  先选择文件源\r\n                 *\r\n                 */\r\n                handler (value) {\r\n                    if (!value) {\r\n                        return;\r\n                    }\r\n                    if (this.sourceFile.fileSourceId) {\r\n                        const {\r\n                            fileSourceId,\r\n                            fileLocation,\r\n                        } = this.sourceFile;\r\n                        this.fileSourceId = fileSourceId;\r\n                        this.fileLocation = fileLocation;\r\n                        this.selectStep = SELECT_FILE;\r\n                    } else {\r\n                        this.fileSourceId = '';\r\n                        this.fileLocation = [];\r\n                        this.selectStep = SELECT_FILE_SOURCE;\r\n                    }\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 选中文件源\r\n             * @param {Object} fileSource 选中的文件源\r\n             *\r\n             * 选中fileSource时列表需要切换成bucket列表\r\n             *\r\n             */\r\n            handleSourceChange (fileSource) {\r\n                this.fileSourceId = fileSource.id;\r\n                this.selectStep = SELECT_FILE;\r\n                this.fileLocation = [];\r\n            },\r\n            /**\r\n             * @desc 选中文件\r\n             * @param {Array} fileLocation 选中的文件源\r\n             */\r\n            handelFileChange (fileLocation) {\r\n                this.fileLocation = Object.freeze([...fileLocation]);\r\n            },\r\n\r\n            /**\r\n             * @desc 确认按钮事件\r\n             *\r\n             * 选中文件后,过滤重新选择的文件与已选中文件\r\n             * 数据传递到父组件,关闭对话框\r\n             */\r\n            handleSubmit () {\r\n                const fileSourceObj = new SourceFileVO({\r\n                    fileSourceId: this.fileSourceId,\r\n                    fileType: 3,\r\n                    fileLocation: this.fileLocation,\r\n                });\r\n                this.$emit('on-change', fileSourceObj);\r\n                this.handleCancle();\r\n            },\r\n\r\n            /**\r\n             * @desc 取消按钮事件\r\n             */\r\n            handleCancle () {\r\n                this.$emit('input', false);\r\n            },\r\n\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .choose-source-file {\r\n        .result-nums {\r\n            display: inline-block;\r\n            min-width: 18px;\r\n            min-height: 18px;\r\n            padding: 0 5px;\r\n            font-size: 12px;\r\n            line-height: 18px;\r\n            color: #3a84ff;\r\n            text-align: center;\r\n            background-color: #fff;\r\n            border-radius: 10px;\r\n        }\r\n\r\n        .dialog-content {\r\n            height: 570px;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"render-file-source-name\" v-bkloading=\"{ isLoading }\">\r\n        <div @click=\"handleGoFileSource(fileSourceId)\">\r\n            {{ fileSourceAlias || '--' }}\r\n            <Icon type=\"edit\" class=\"link-flag\" svg />\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import FileManageService from '@service/file-source-manage';\r\n\r\n    export default {\r\n        props: {\r\n            fileSourceId: {\r\n                type: Number,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: false,\r\n                fileSourceAlias: '',\r\n            };\r\n        },\r\n        created () {\r\n            this.fetchSourceFileInfo();\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 通过文件源id获取文件详细信息\r\n             */\r\n            fetchSourceFileInfo () {\r\n                FileManageService.getSourceInfo({\r\n                    id: this.fileSourceId,\r\n                }).then((data) => {\r\n                    this.fileSourceAlias = data.alias;\r\n                });\r\n            },\r\n            /**\r\n             * @desc 新窗口打开文件源列表页面\r\n             */\r\n            handleGoFileSource () {\r\n                const { href } = this.$router.resolve({\r\n                    name: 'fileList',\r\n                    query: {\r\n                        fileSourceId: this.fileSourceId,\r\n                    },\r\n                });\r\n                window.open(href, '_blank');\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .render-file-source-name {\r\n        cursor: pointer;\r\n\r\n        .link-flag {\r\n            opacity: 0%;\r\n        }\r\n\r\n        &:hover {\r\n            color: #3a84ff !important;\r\n\r\n            .link-flag {\r\n                opacity: 100%;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"render-source-file-name\">\r\n        <bk-popover placement=\"left\">\r\n            <div v-for=\"(item, fileIndex) in renderData\" :key=\"fileIndex\" class=\"path-text-row\">\r\n                {{ item }}\r\n            </div>\r\n            <div v-if=\"hasMore\">...</div>\r\n            <ul slot=\"content\" class=\"source-file-tips-box\">\r\n                <li v-for=\"(item, fileIndex) in data\" :key=\"fileIndex\" class=\"row\">\r\n                    <span class=\"dot\" />\r\n                    {{ item }}\r\n                </li>\r\n            </ul>\r\n        </bk-popover>\r\n    </div>\r\n</template>\r\n<script>\r\n    const DISPLAY_ROW_NUMS = 3;\r\n\r\n    export default {\r\n        name: '',\r\n        props: {\r\n            data: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n        },\r\n        data () {\r\n            return {};\r\n        },\r\n        computed: {\r\n            renderData () {\r\n                return this.data.slice(0, DISPLAY_ROW_NUMS);\r\n            },\r\n            hasMore () {\r\n                return this.data.length > DISPLAY_ROW_NUMS;\r\n            },\r\n        },\r\n        methods: {},\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    @import \"@/css/mixins/scroll\";\r\n\r\n    .render-source-file-name {\r\n        padding: 6px 10px;\r\n        margin-left: -10px;\r\n\r\n        &:hover {\r\n            background: #f0f1f5;\r\n        }\r\n    }\r\n\r\n    .source-file-tips-box {\r\n        max-width: 300px;\r\n        max-height: 280px;\r\n        min-width: 60px;\r\n        overflow-y: auto;\r\n\r\n        @mixin scroller;\r\n\r\n        .row {\r\n            word-break: break-all;\r\n        }\r\n\r\n        .dot {\r\n            display: inline-block;\r\n            width: 6px;\r\n            height: 6px;\r\n            background: currentColor;\r\n            border-radius: 50%;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div\r\n        v-show=\"isShow\"\r\n        class=\"source-file-edit-view-box\"\r\n        :class=\"mode ? mode : 'normal'\">\r\n        <bk-collapse v-model=\"activeResult\">\r\n            <jb-collapse-item\r\n                v-show=\"isShowLocalFile\"\r\n                content-hidden-type=\"hidden\"\r\n                name=\"local\"\r\n                :active=\"activeResult\">\r\n                <span>\r\n                    <span>{{ '已选择'}}<span class=\"number strong\">{{ localFileList.length }}</span>{{ '个本地文件' }}</span>\r\n                    <action-extend>\r\n                        <div class=\"action-item\" @click=\"handleRemoveAllLocal\">{{ '移除全部' }}</div>\r\n                    </action-extend>\r\n                </span>\r\n                <template #content>\r\n                    <local-file\r\n                        ref=\"localFile\"\r\n                        v-bind=\"$attrs\"\r\n                        :data=\"localFileList\"\r\n                        @on-change=\"handleLocalFileChange\" />\r\n                </template>\r\n            </jb-collapse-item>\r\n            <jb-collapse-item\r\n                v-show=\"isShowSourceFile\"\r\n                content-hidden-type=\"hidden\"\r\n                name=\"source\"\r\n                :active=\"activeResult\">\r\n                <span>{{ '已选择'}}<span class=\"number strong\">{{ sourceFileList.length }}</span>{{ '个源文件文件' }}</span>\r\n                <template #content>\r\n                    <source-file\r\n                        ref=\"sourceFile\"\r\n                        :data=\"sourceFileList\"\r\n                        @on-change=\"handleSourceFileChange\" />\r\n                </template>\r\n            </jb-collapse-item>\r\n            <jb-collapse-item\r\n                v-show=\"isShowServerFile\"\r\n                content-hidden-type=\"hidden\"\r\n                name=\"server\"\r\n                :active=\"activeResult\">\r\n                <span>{{ '已选择'}}<span class=\"number strong\">{{ serverFileList.length }}</span>{{ '个服务器文件' }}</span>\r\n                <template #content>\r\n                    <server-file\r\n                        v-bind=\"$attrs\"\r\n                        :mode=\"mode\"\r\n                        :data=\"serverFileList\"\r\n                        @on-change=\"handleServerFileChange\"\r\n                        @on-close=\"handleServerClose\" />\r\n                </template>\r\n            </jb-collapse-item>\r\n        </bk-collapse>\r\n    </div>\r\n</template>\r\n<script>\r\n    import JbCollapseItem from '@components/jb-collapse-item';\r\n    import ActionExtend from '../components/action-extend';\r\n    import LocalFile from './local';\r\n    import ServerFile from './server';\r\n    import SourceFile from './source';\r\n\r\n    export default {\r\n        name: 'SourceFileView',\r\n        components: {\r\n            JbCollapseItem,\r\n            ActionExtend,\r\n            LocalFile,\r\n            ServerFile,\r\n            SourceFile,\r\n        },\r\n        inheritAttrs: false,\r\n        model: {\r\n            prop: 'showAddServerFile',\r\n            event: 'update',\r\n        },\r\n        props: {\r\n            showAddServerFile: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n            isAddSourceFile: {\r\n                type: Boolean,\r\n                defaule: false,\r\n            },\r\n            /**\r\n             * @desc 文件来源使用场景\r\n             * @value onlyhost 快速执行执行场景，只会使用服务器主机\r\n             * @value normal 作业文件分发步骤，使用主机和主机变量\r\n             */\r\n            mode: {\r\n                type: String,\r\n                default: '',\r\n            },\r\n            data: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n            account: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                activeResult: [],\r\n                localFileList: [{},{},{}],\r\n                serverFileList: [{},{},{}],\r\n                sourceFileList: [{},{},{}],\r\n            };\r\n        },\r\n        computed: {\r\n            isShow () {\r\n                return this.isShowLocalFile || this.isShowServerFile || this.isShowSourceFile;\r\n            },\r\n            isShowLocalFile () {\r\n                return this.localFileList.length > 0;\r\n            },\r\n            isShowServerFile () {\r\n                return this.showAddServerFile;\r\n            },\r\n            isShowSourceFile () {\r\n                return this.sourceFileList.length > 0;\r\n            },\r\n        },\r\n        watch: {\r\n            data: {\r\n                handler (allSourceFile) {\r\n                    if (this.isInnerChange) {\r\n                        this.isInnerChange = false;\r\n                        return;\r\n                    }\r\n                    this.activeResult = [];\r\n                    this.localFileList = [];\r\n                    this.serverFileList = [];\r\n                    this.sourceFileList = [];\r\n                    allSourceFile.forEach((item) => {\r\n                        if (item.isServerFile) {\r\n                            this.serverFileList.push(item);\r\n                        } else if (item.isLocalFile) {\r\n                            this.localFileList.push(item);\r\n                        } else if (item.isSourceFile) {\r\n                            this.sourceFileList.push(item);\r\n                        }\r\n                    });\r\n                    if (this.localFileList.length > 0) {\r\n                        this.activeResult.push('local');\r\n                    }\r\n                    if (this.showAddServerFile || this.serverFileList.length > 0) {\r\n                        this.activeResult.push('server');\r\n                    }\r\n                    if (this.sourceFileList.length > 0) {\r\n                        this.activeResult.push('source');\r\n                    }\r\n                },\r\n                immediate: true,\r\n            },\r\n            showAddServerFile (value) {\r\n                if (value) {\r\n                    this.activeResult.push('server');\r\n                }\r\n            },\r\n            isAddSourceFile (value) {\r\n                if (value) this.activeResult.push('source');\r\n            },\r\n        },\r\n        methods: {\r\n            trigger () {\r\n                this.isInnerChange = true;\r\n                this.$emit('on-change', [...this.localFileList, ...this.serverFileList, ...this.sourceFileList]);\r\n            },\r\n            /**\r\n             * @desc 隐藏添加服务器文件输入框\r\n             */\r\n            handleServerClose () {\r\n                this.$emit('update', false);\r\n            },\r\n            /**\r\n             * @desc 服务器文件更新\r\n             * @param {Array} serverFileList\r\n             */\r\n            handleServerFileChange (serverFileList) {\r\n                if (serverFileList.length > 0) {\r\n                    this.activeResult = [...new Set([...this.activeResult, 'server'])];\r\n                }\r\n                this.serverFileList = Object.freeze(serverFileList);\r\n                this.trigger();\r\n            },\r\n            /**\r\n             * @desc 添加文件源文件\r\n             */\r\n            handleAddSourceFile () {\r\n                this.$refs.sourceFile.handleShowSourceDialog();\r\n            },\r\n            /**\r\n             * @desc 文件源文件更新\r\n             * @param {Array} sourceFileList\r\n             */\r\n            handleSourceFileChange (sourceFileList) {\r\n                if (sourceFileList.length > 0) {\r\n                    this.activeResult = [...new Set([...this.activeResult, 'source'])];\r\n                }\r\n                this.sourceFileList = Object.freeze(sourceFileList);\r\n                this.trigger();\r\n            },\r\n            /**\r\n             * @desc 开始上传本地文件\r\n             */\r\n            startUploadLocalFile () {\r\n                this.$refs.localFile.startUpload();\r\n            },\r\n            /**\r\n             * @desc 本地文件更新\r\n             * @param {Array} localFileList\r\n             */\r\n            handleLocalFileChange (localFileList) {\r\n                if (localFileList.length > 0) {\r\n                    this.activeResult = [...new Set([...this.activeResult, 'local'])];\r\n                }\r\n                this.localFileList = Object.freeze(localFileList);\r\n                this.trigger();\r\n            },\r\n            /**\r\n             * @desc 移除所有本地文件\r\n             */\r\n            handleRemoveAllLocal () {\r\n                this.localFileList = [];\r\n                this.trigger();\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n.source-file-edit-view-box {\r\n    flex: 1;\r\n\r\n    table {\r\n        width: 100%;\r\n        background: #fff;\r\n        table-layout: fixed;\r\n\r\n        tr:nth-child(n + 2) {\r\n            td {\r\n                border-top: 1px solid #dcdee5;\r\n            }\r\n        }\r\n\r\n        th,\r\n        td {\r\n            height: 41px;\r\n            padding: 5px 10px;\r\n            font-size: 12px;\r\n            text-align: left;\r\n            box-sizing: border-box;\r\n\r\n            &:first-child {\r\n                width: 40%;\r\n                padding-left: 60px;\r\n            }\r\n\r\n            &:nth-child(2) {\r\n                width: 15%;\r\n            }\r\n\r\n            &:nth-child(4) {\r\n                width: 20%;\r\n            }\r\n\r\n            &:last-child {\r\n                width: 105px !important;\r\n                text-align: left;\r\n\r\n                .bk-button-text ~ .bk-button-text {\r\n                    margin-left: 10px;\r\n                }\r\n            }\r\n        }\r\n\r\n        th {\r\n            font-weight: normal;\r\n            color: #313238;\r\n            border-bottom: 1px solid #dcdee5;\r\n        }\r\n\r\n        td {\r\n            line-height: 18px;\r\n            color: #63656e;\r\n            word-break: break-all;\r\n        }\r\n    }\r\n\r\n    &.normal {\r\n        .render-server-agent {\r\n            .agent-text {\r\n                flex-direction: column;\r\n                align-items: flex-start;\r\n            }\r\n\r\n            .splite {\r\n                display: none;\r\n            }\r\n        }\r\n\r\n        .upload-progress {\r\n            position: absolute;\r\n            width: 160px;\r\n        }\r\n\r\n        .file-server-agent,\r\n        .server-edit-btn,\r\n        .file-edit-server {\r\n            white-space: pre;\r\n        }\r\n    }\r\n    /* stylelint-disable selector-class-pattern */\r\n    &.onlyHost {\r\n        th,\r\n        td {\r\n            &:nth-child(3) {\r\n                width: 20%;\r\n            }\r\n        }\r\n\r\n        .upload-progress {\r\n            position: absolute;\r\n            width: 257px;\r\n        }\r\n\r\n        .sep-location {\r\n            &::before {\r\n                content: \"，\";\r\n            }\r\n        }\r\n    }\r\n\r\n    .bk-table-empty-block {\r\n        display: none;\r\n    }\r\n\r\n    .bk-button,\r\n    .bk-button-text {\r\n        font-size: 12px;\r\n    }\r\n}\r\n</style>\r\n","<template>\r\n    <div>\r\n        <jb-form-item\r\n            ref=\"item\"\r\n            :label=\"'源文件'\"\r\n            required\r\n            :property=\"field\"\r\n            :rules=\"rules\">\r\n            <div>\r\n                <bk-button\r\n                    class=\"mr10\"\r\n                    @click=\"handleAddServerFile\">\r\n                    <Icon type=\"plus\" />\r\n                    {{ '添加服务器文件' }}\r\n                </bk-button>\r\n                <bk-button\r\n                    v-if=\"ENABLE_FEATURE_FILE_MANAGE\"\r\n                    class=\"mr10\"\r\n                    @click=\"handleAddSourceFile\">\r\n                    <Icon type=\"plus\" />\r\n                    {{ '添加文件源文件' }}\r\n                </bk-button>\r\n                <bk-button\r\n                    class=\"mr10\"\r\n                    :loading=\"isConfigLoading\"\r\n                    @click=\"handlerUploadLocalFile\">\r\n                    <Icon type=\"plus\" />\r\n                    {{ '添加本地文件' }}\r\n                </bk-button>\r\n                <span class=\"source-file-tips\">\r\n                    {{ '添加本地文件会有同名文件覆盖风险' }}\r\n                    <Icon\r\n                        type=\"info\"\r\n                        class=\"tips-flag\"\r\n                        v-bk-tooltips=\"uploadFileTipsConfig\" />\r\n                </span>\r\n            </div>\r\n            <view-file\r\n                v-show=\"showFileView\"\r\n                v-model=\"isAddServerFile\"\r\n                ref=\"serverFileView\"\r\n                class=\"source-file-view\"\r\n                :data=\"sourceFileList\"\r\n                v-bind=\"$attrs\"\r\n                @on-change=\"handleSourceFileChange\" />\r\n        </jb-form-item>\r\n        <div id=\"uploadFileTips\" class=\"upload-file-tips\">\r\n            <div class=\"row\">{{ '支持中文文件名，本地上传文件大小不能超过' }} {{ fileMaxUploadSize }}</div>\r\n            <div class=\"row\">{{ '文件名支持使用通配符，如： /tmp/jobsvr_2020*'}}</div>\r\n            <div class=\"row\">{{ '文件名支持正则表达式写法以匹配多个文件，文件名前 需加 REGEX: 前缀，如：/tmp/REGEX:myfile-[A-Za-z]{0,10}'}}</div>\r\n            <div class=\"row\">{{ '如需分发文件目录，文件名请以/结束' }}</div>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n    import { mapMutations } from 'vuex';\r\n       import QuertGlobalSettingService from '@service/query-global-setting';\r\n    import ViewFile from './view';\r\n\r\n    export default {\r\n        name: 'SourceFileBase',\r\n        components: {\r\n            ViewFile,\r\n        },\r\n        inheritAttrs: false,\r\n        props: {\r\n            field: {\r\n                type: String,\r\n                default: '',\r\n            },\r\n            data: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isConfigLoading: true,\r\n                isAddServerFile: false,\r\n                sourceFileList: [{},{},{}],\r\n                showFileView: false,\r\n                fileMaxUploadSize: '2GB',\r\n                ENABLE_FEATURE_FILE_MANAGE: false,\r\n            };\r\n        },\r\n        watch: {\r\n            data: {\r\n                handler (newSourceFileList) {\r\n                    if (this.isSelfChange) {\r\n                        this.isSelfChange = false;\r\n                        return;\r\n                    }\r\n                    if (newSourceFileList.length < 1 && this.sourceFileList.length > 0) {\r\n                        this.sourceFileList = [];\r\n                        return;\r\n                    }\r\n                    if (this.sourceFileList.length < 1) {\r\n                        this.sourceFileList = _.cloneDeep(newSourceFileList);\r\n                        this.isAddServerFile = this.sourceFileList.some(item => item.isServerFile);\r\n                    }\r\n                },\r\n                immediate: true,\r\n            },\r\n            sourceFileList (sourceFileList) {\r\n                if (sourceFileList.length > 0) {\r\n                    this.$refs.item.clearValidator();\r\n                }\r\n            },\r\n        },\r\n        created () {\r\n            this.rules = [\r\n                {\r\n                    validator: () => {\r\n                        if (this.sourceFileList.length < 1) {\r\n                            this.updateFileUploadFailed(false);\r\n                            this.updateFileUploading(false);\r\n                        }\r\n                        return this.sourceFileList.length;\r\n                    },\r\n                    message: '源文件必填',\r\n                    trigger: 'blur',\r\n                },\r\n                {\r\n                    validator: () => {\r\n                        // eslint-disable-next-line no-plusplus\r\n                        for (let i = 0; i < this.sourceFileList.length; i++) {\r\n                            const currentFile = this.sourceFileList[i];\r\n                            if (currentFile.isLocalFile\r\n                                && currentFile.uploadStatus === 'danger') {\r\n                                // 标记有本地文件上传失败\r\n                                this.updateFileUploadFailed(true);\r\n                                return false;\r\n                            }\r\n                        }\r\n                        this.updateFileUploadFailed(false);\r\n                        return true;\r\n                    },\r\n                    message: '本地源文件上传失败',\r\n                    trigger: 'blur',\r\n                },\r\n                {\r\n                    validator: () => {\r\n                        // eslint-disable-next-line no-plusplus\r\n                        for (let i = 0; i < this.sourceFileList.length; i++) {\r\n                            const currentFile = this.sourceFileList[i];\r\n                            if (currentFile.isLocalFile\r\n                                && currentFile.uploadStatus === 'primary') {\r\n                                // 标记有本地文件正在上传\r\n                                this.updateFileUploading(true);\r\n                                return false;\r\n                            }\r\n                        }\r\n                        this.updateFileUploading(false);\r\n                        return true;\r\n                    },\r\n                    message: '本地源文件上传未完成',\r\n                    trigger: 'change',\r\n                },\r\n                {\r\n                    validator: () => {\r\n                        // eslint-disable-next-line no-plusplus\r\n                        for (let i = 0; i < this.sourceFileList.length; i++) {\r\n                            const currentFile = this.sourceFileList[i];\r\n                            if (!currentFile.isServerFile) {\r\n                                continue;\r\n                            }\r\n                            // 服务器文件路径不能为空\r\n                            if (currentFile.fileLocation.length < 1) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                        return true;\r\n                    },\r\n                    message: '服务器源文件路径必填',\r\n                    trigger: 'change',\r\n                },\r\n                {\r\n                    validator: () => {\r\n                        // eslint-disable-next-line no-plusplus\r\n                        for (let i = 0; i < this.sourceFileList.length; i++) {\r\n                            const currentFile = this.sourceFileList[i];\r\n                            if (!currentFile.isServerFile) {\r\n                                continue;\r\n                            }\r\n                            // 如果服务器列表使用的是主机变量\r\n                            if (currentFile.isVar && currentFile.host.isEmpty) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                        return true;\r\n                    },\r\n                    message: '服务器源文件中服务器列表不能为空',\r\n                    trigger: 'change',\r\n                },\r\n            ];\r\n            this.uploadFileTipsConfig = {\r\n                allowHtml: true,\r\n                width: '335px',\r\n                theme: 'light',\r\n                trigger: 'mouseenter',\r\n                content: '#uploadFileTips',\r\n                placement: 'right-start',\r\n            };\r\n            this.fetchJobConfig();\r\n        },\r\n        mounted () {\r\n            const unWatch = this.$watch(() => this.$refs.serverFileView.isShow, (value) => {\r\n                this.showFileView = value;\r\n            }, {\r\n                immediate: true,\r\n            });\r\n            this.$once('hook:beforeDestroy', () => {\r\n                unWatch();\r\n            });\r\n        },\r\n        methods: {\r\n            ...mapMutations('distroFile', [\r\n                'updateFileUploading',\r\n                'updateFileUploadFailed',\r\n            ]),\r\n            /**\r\n             * @desc 获取系统配置\r\n             *\r\n             * 本地文件上传大小限制\r\n             */\r\n            fetchJobConfig () {\r\n                this.isConfigLoading = true;\r\n                QuertGlobalSettingService.fetchJobConfig()\r\n                    .then((data) => {\r\n                        const { amount, unit } = data.FILE_UPLOAD_SETTING;\r\n                        this.fileMaxUploadSize = `${amount}${unit}`;\r\n                        this.ENABLE_FEATURE_FILE_MANAGE = data.ENABLE_FEATURE_FILE_MANAGE;\r\n                    })\r\n                    .finally(() => {\r\n                        this.isConfigLoading = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 触发change事件\r\n             */\r\n            triggerChange () {\r\n                this.isSelfChange = true;\r\n                this.$emit('on-change', this.sourceFileList);\r\n            },\r\n            /**\r\n             * @desc 显示添加服务器文件输入框\r\n             */\r\n            handleAddServerFile () {\r\n                this.isAddServerFile = true;\r\n            },\r\n            /**\r\n             * @desc 显示添加文件源文件弹框\r\n             */\r\n            handleAddSourceFile () {\r\n                this.$refs.serverFileView.handleAddSourceFile();\r\n            },\r\n            /**\r\n             * @desc 选择本地文件开始上传\r\n             */\r\n            handlerUploadLocalFile () {\r\n                this.isAddLocalFile = true;\r\n                this.$refs.serverFileView.startUploadLocalFile();\r\n            },\r\n            /**\r\n             * @desc 更新文件来源的值\r\n             * @param {Array} souceFileList 文件源文件\r\n             */\r\n            handleSourceFileChange (souceFileList) {\r\n                this.sourceFileList = Object.freeze(souceFileList);\r\n                this.triggerChange();\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    .source-file-view {\r\n        margin-top: 16px;\r\n    }\r\n\r\n    .upload-file-tips {\r\n        font-size: 12px;\r\n        line-height: 16px;\r\n        color: #63656e;\r\n\r\n        .row {\r\n            position: relative;\r\n            padding-left: 12px;\r\n\r\n            &::before {\r\n                position: absolute;\r\n                top: 6px;\r\n                left: 0;\r\n                width: 4px;\r\n                height: 4px;\r\n                background: currentcolor;\r\n                border-radius: 50%;\r\n                content: \"\";\r\n            }\r\n        }\r\n    }\r\n\r\n    .source-file-tips {\r\n        font-size: 12px;\r\n        color: #979ba5;\r\n\r\n        .tips-flag {\r\n            margin-left: 8px;\r\n            font-size: 14px;\r\n            color: #c4c6cc;\r\n            cursor: pointer;\r\n        }\r\n    }\r\n\r\n</style>\r\n","<template>\r\n    <div>\r\n        <jb-form-item\r\n            :label=\"'目标路径'\"\r\n            required\r\n            :property=\"field\"\r\n            :rules=\"rules\">\r\n            <div\r\n                class=\"form-item-content\"\r\n                @mouseenter=\"handleMouseenter\"\r\n                @mouseleave=\"handleMouseleave\">\r\n                <bk-input\r\n                    ref=\"input\"\r\n                    :placeholder=\"'请填写分发路径'\"\r\n                    @focus=\"handleInputFocus\"\r\n                    @blur=\"handleInputBlur\"\r\n                    @change=\"handleChange\"\r\n                    :value=\"formData[field]\" />\r\n            </div>\r\n        </jb-form-item>\r\n        <div style=\"display: none;\">\r\n            <div\r\n                ref=\"targetPathTips\"\r\n                class=\"target-path-tips\"\r\n                @mouseleave=\"handleMouseleave\"\r\n                @mouseenter=\"handleTipsMouseenter\">\r\n                <div class=\"row\">{{ '传输至linux服务器需以\\/开头的绝对路径，如：/data/xx' }}</div>\r\n                <div class=\"row\">{{ '传输至Windows服务器需包含盘符开头，如：D:\\\\tmp\\\\' }}</div>\r\n                <div class=\"row\">\r\n                    <div>{{ '目标路径支持的内置变量：（点击可直接复制使用）' }}</div>\r\n                    <table class=\"target-path-demo\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>{{ '变量名称' }}</th>\r\n                                <th>{{ '含义' }}</th>\r\n                                <th>{{ '示例' }}</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td @click=\"handleCopy('[FILESRCIP]')\">\r\n                                    <div class=\"copy-box\">\r\n                                        <span class=\"copy-value\">[FILESRCIP]</span>\r\n                                        <span class=\"copy-tips\">{{ '点击复制' }}</span>\r\n                                    </div>\r\n                                </td>\r\n                                <td>{{ '源服务器IP' }}</td>\r\n                                <td>0_192.168.0.100</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td @click=\"handleCopy('[DATE:yyyy-MM-dd]')\">\r\n                                    <div class=\"copy-box\">\r\n                                        <span class=\"copy-value\">[DATE:yyyy-MM-dd]</span>\r\n                                        <span class=\"copy-tips\">{{ '点击复制' }}</span>\r\n                                    </div>\r\n                                </td>\r\n                                <td>{{ '当前日期' }}</td>\r\n                                <td>2021-01-01</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div class=\"row\">{{ '（日期变量可传入标准的日期时间格式，如 yyyy-MM-dd_HH:mm:ss）' }}</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n    import Tippy from 'bk-magic-vue/lib/utils/tippy';\r\n       import {\r\n        execCopy,\r\n    } from '@utils/assist';\r\n    import {\r\n        filePathRule,\r\n    } from '@utils/validator';\r\n\r\n    export default {\r\n        props: {\r\n            field: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            formData: {\r\n                type: Object,\r\n                default: () => ({}),\r\n            },\r\n            tipsPlacement: {\r\n                type: String,\r\n                default: 'right-start',\r\n            },\r\n        },\r\n        watch: {\r\n            tipsPlacement (tipsPlacement) {\r\n                this.popperInstance && this.popperInstance.set({\r\n                    placement: tipsPlacement,\r\n                });\r\n            },\r\n        },\r\n        created () {\r\n            this.rules = [\r\n                {\r\n                    required: true,\r\n                    message: '目标路径必填',\r\n                    trigger: 'blur',\r\n                },\r\n                {\r\n                    validator: filePathRule.validator,\r\n                    message: '目标路径格式错误',\r\n                    trigger: 'blur',\r\n                },\r\n            ];\r\n            this.isMouseenter = false;\r\n        },\r\n        beforeDestroy () {\r\n            if (this.popperInstance) {\r\n                this.popperInstance.hide();\r\n                this.popperInstance.destroy();\r\n            }\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 显示tips\r\n             */\r\n            showTips () {\r\n                if (!this.popperInstance) {\r\n                    this.popperInstance = Tippy(this.$refs.input.$el, {\r\n                        arrow: true,\r\n                        placement: this.tipsPlacement,\r\n                        trigger: 'manual',\r\n                        theme: 'light',\r\n                        interactive: true,\r\n                        hideOnClick: false,\r\n                        animation: 'slide-toggle',\r\n                        lazy: false,\r\n                        size: 'small',\r\n                        boundary: 'window',\r\n                        distance: 20,\r\n                        zIndex: window.__bk_zIndex_manager.nextZIndex(), // eslint-disable-line no-underscore-dangle\r\n                    });\r\n                    this.popperInstance.setContent(this.$refs.targetPathTips);\r\n                }\r\n                \r\n                this.popperInstance.show();\r\n            },\r\n            /**\r\n             * @desc 隐藏tips\r\n             */\r\n            hideTips () {\r\n                if (this.isMouseenter) {\r\n                    return;\r\n                }\r\n                this.popperInstance.hide();\r\n            },\r\n            /**\r\n             * @desc 鼠标移入的时候显示tips\r\n             */\r\n            handleMouseenter () {\r\n                clearTimeout(this.hideTimer);\r\n                this.showTips();\r\n            },\r\n            /**\r\n             * @desc 鼠标移出的时候隐藏tips\r\n             */\r\n            handleMouseleave () {\r\n                this.isMouseenter = false;\r\n                this.hideTimer = setTimeout(() => {\r\n                    if (!this.isInputFocus) {\r\n                        this.hideTips();\r\n                    }\r\n                }, 100);\r\n            },\r\n            /**\r\n             * @desc 获得焦点是显示ips\r\n             */\r\n            handleInputFocus () {\r\n                this.isInputFocus = true;\r\n                this.showTips();\r\n            },\r\n            /**\r\n             * @desc 失去焦点是显示ips\r\n             */\r\n            handleInputBlur () {\r\n                this.isInputFocus = false;\r\n                this.hideTips();\r\n            },\r\n            /**\r\n             * @desc 鼠标在tips内部时取消隐藏tips定时器\r\n             */\r\n            handleTipsMouseenter () {\r\n                clearTimeout(this.hideTimer);\r\n                this.isMouseenter = true;\r\n            },\r\n            /**\r\n             * @desc 复制变量\r\n             * @param {String} variable 目标路径支持的内置变量\r\n             */\r\n            handleCopy (variable) {\r\n                execCopy(variable);\r\n            },\r\n            /**\r\n             * @desc 更新字段值\r\n             */\r\n            handleChange (value) {\r\n                this.$emit('on-change', this.field, _.trim(value));\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    .target-path-tips {\r\n        font-size: 12px;\r\n        line-height: 16px;\r\n        color: #63656e;\r\n\r\n        .row {\r\n            position: relative;\r\n            padding-left: 12px;\r\n            margin-bottom: 6px;\r\n\r\n            &::before {\r\n                position: absolute;\r\n                top: 6px;\r\n                left: 0;\r\n                width: 4px;\r\n                height: 4px;\r\n                background: currentColor;\r\n                border-radius: 50%;\r\n                content: \"\";\r\n            }\r\n        }\r\n\r\n        .target-path-demo {\r\n            width: 100%;\r\n            margin-top: 6px;\r\n\r\n            th,\r\n            td {\r\n                height: 40px;\r\n                padding: 0 10px;\r\n                border-bottom: 1px solid #dfe0e5;\r\n            }\r\n\r\n            th {\r\n                background-color: #fafbfd;\r\n            }\r\n\r\n            .copy-box {\r\n                display: flex;\r\n                width: 160px;\r\n                height: 26px;\r\n                padding: 0 10px;\r\n                margin: 0 -10px;\r\n                overflow: hidden;\r\n                line-height: 26px;\r\n                cursor: pointer;\r\n                border-radius: 2px;\r\n\r\n                &:hover {\r\n                    background: #f0f1f5;\r\n\r\n                    .copy-tips {\r\n                        display: block;\r\n                    }\r\n                }\r\n\r\n                .copy-value {\r\n                    overflow: hidden;\r\n                    text-overflow: ellipsis;\r\n                    white-space: nowrap;\r\n                }\r\n\r\n                .copy-tips {\r\n                    display: none;\r\n                    margin-left: auto;\r\n                    flex: 0 0 auto;\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <jb-form-item :label=\"'传输模式'\" required>\r\n        <div class=\"form-item-content\">\r\n            <div class=\"file-step-transfer-mode-wraper\">\r\n                <bk-radio-group class=\"radio-check\" :value=\"formData[field]\" @change=\"handleChange\">\r\n                    <bk-radio v-bk-tooltips=\"constraintTips\" :value=\"2\">{{ '强制模式' }}</bk-radio>\r\n                    <bk-radio v-bk-tooltips=\"strictTips\" :value=\"1\">{{ '严谨模式' }}</bk-radio>\r\n                </bk-radio-group>\r\n            </div>\r\n        </div>\r\n    </jb-form-item>\r\n</template>\r\n<script>\r\n   \r\n    export default {\r\n        name: '',\r\n        props: {\r\n            field: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            formData: {\r\n                type: Object,\r\n                default: () => ({}),\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                radioValue: 2,\r\n            };\r\n        },\r\n        computed: {\r\n            // radio 选择框的值是-1表示是保险模式\r\n            // 保险模式有两种类型可选\r\n            showSelectCheck () {\r\n                return this.radioValue === -1;\r\n            },\r\n        },\r\n        watch: {\r\n            formData: {\r\n                // 值是3、4归类为保险模式\r\n                handler  (formData) {\r\n                    const transferMode = parseInt(formData[this.field], 10);\r\n                    if ([\r\n                        3,\r\n                        4,\r\n                    ].includes(transferMode)) {\r\n                        this.radioValue = -1;\r\n                    } else {\r\n                        this.radioValue = transferMode;\r\n                    }\r\n                },\r\n                immediate: true,\r\n                deep: true,\r\n            },\r\n        },\r\n        created () {\r\n            this.strictTips = {\r\n                content: '严谨判断目标路径是否存在，若不存在将直接终止任务。',\r\n                width: 180,\r\n            };\r\n            this.constraintTips = {\r\n                content: '不论目标路径是否存在，都将强制按照用户填写的目标路径进行传输（路径不存在会自动创建）。',\r\n                width: 210,\r\n            };\r\n            this.safeTips = {\r\n                content: '避免因源或目标机器有同名文件时被覆盖，该模式下将按用户选择的规则在目标路径后面追加创建相应的文件夹。',\r\n                width: 210,\r\n            };\r\n        },\r\n        methods: {\r\n            handleChange (transferMode) {\r\n                const realValue = transferMode === -1 ? 3 : transferMode;\r\n                this.$emit('on-change', this.field, realValue);\r\n            },\r\n            handleSelectChange (transferMode) {\r\n                this.$emit('on-change', this.field, transferMode);\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .file-step-transfer-mode-wraper {\r\n        display: flex;\r\n        align-items: center;\r\n        height: 32px;\r\n\r\n        .radio-check {\r\n            flex: 0 0 auto;\r\n            width: auto;\r\n\r\n            .bk-form-radio {\r\n                &:nth-child(n+2) {\r\n                    margin-left: 32px;\r\n                }\r\n            }\r\n\r\n            .bk-radio-text {\r\n                border-bottom: 1px dashed #c4c6cc;\r\n            }\r\n        }\r\n\r\n        .select-check {\r\n            flex: 1;\r\n            min-width: 295px;\r\n            margin-left: 12px;\r\n        }\r\n    }\r\n</style>\r\n",".compose-form-item {\r\n    display: inline-block;\r\n\r\n    & > .bk-form-control,\r\n    & > .bk-select,\r\n    & > .bk-cascade,\r\n    & > .bk-color-picker,\r\n    & > .bk-date-picker,\r\n    & > .bk-tag-input,\r\n    & > .bk-tag-selector,\r\n    & > .search-select-wrap,\r\n    & > .bk-button {\r\n        float: left;\r\n        width: auto;\r\n        margin-left: -1px;\r\n    }\r\n\r\n    .bk-form-input,\r\n    .bk-form-password,\r\n    .bk-form-textarea,\r\n    .bk-select,\r\n    .bk-cascade,\r\n    .bk-color-picker,\r\n    .bk-date-picker .bk-date-picker-editor,\r\n    .bk-tag-input,\r\n    .bk-search-select,\r\n    .bk-button {\r\n        border-radius: 0;\r\n    }\r\n\r\n    .bk-form-control.control-active,\r\n    .bk-select.is-focus,\r\n    .bk-cascade.is-focus,\r\n    .bk-color-picker.bk-color-picker-show-dropdown,\r\n    .bk-color-picker:hover,\r\n    .bk-date-picker .bk-date-picker-editor:focus,\r\n    .bk-tag-input.active,\r\n    .bk-tag-selector,\r\n    .bk-search-select.is-focus {\r\n        z-index: 0;\r\n        opacity: 100%;\r\n    }\r\n\r\n    .compose-form-item-first {\r\n        .bk-form-input,\r\n        .bk-form-password,\r\n        .bk-form-textarea,\r\n        &.bk-select,\r\n        &.bk-cascade,\r\n        &.bk-color-picker,\r\n        &.bk-date-picker .bk-date-picker-editor,\r\n        &.bk-tag-input,\r\n        .bk-tag-input,\r\n        .bk-search-select,\r\n        .bk-button {\r\n            margin-left: 0;\r\n            border-bottom-left-radius: 2px;\r\n            border-top-left-radius: 2px;\r\n        }\r\n    }\r\n\r\n    .compose-form-item-last {\r\n        .bk-form-input,\r\n        .bk-form-password,\r\n        .bk-form-textarea,\r\n        &.bk-select,\r\n        &.bk-cascade,\r\n        &.bk-color-picker,\r\n        &.bk-date-picker .bk-date-picker-editor,\r\n        &.bk-tag-input,\r\n        .bk-tag-input,\r\n        .bk-search-select,\r\n        .bk-button {\r\n            border-top-right-radius: 2px;\r\n            border-bottom-right-radius: 2px;\r\n        }\r\n    }\r\n}\r\n","<template>\r\n    <div class=\"script-source-of-execution\">\r\n        <jb-form-item class=\"script-source-item\" :label=\"'脚本来源'\" required>\r\n            <bk-radio-group @change=\"handleScriptSourceChange\" :value=\"scriptSource\">\r\n                <bk-radio-button value=\"local\">{{ '手工录入' }}</bk-radio-button>\r\n                <bk-radio-button value=\"refer\">{{ '脚本引用' }}</bk-radio-button>\r\n            </bk-radio-group>\r\n        </jb-form-item>\r\n        <jb-form-item\r\n            ref=\"scriptId\"\r\n            v-if=\"isScriptRefer\"\r\n            :label=\"'脚本引用'\"\r\n            required\r\n            property=\"scriptId\"\r\n            :rules=\"rules\">\r\n            <div class=\"form-item-content refer-script-box\">\r\n                <compose-form-item>\r\n                    <bk-select\r\n                        style=\"width: 120px;\"\r\n                        @change=\"handleReferScriptTypeChange\"\r\n                        :value=\"referType\"\r\n                        :clearable=\"false\">\r\n                        <bk-option :id=\"2\" :name=\"'业务脚本'\">{{ '业务脚本' }}</bk-option>\r\n                        <bk-option :id=\"3\" :name=\"'公共脚本'\">{{ '公共脚本' }}</bk-option>\r\n                    </bk-select>\r\n                    <bk-select\r\n                        :key=\"referType\"\r\n                        :placeholder=\"'选择引用脚本'\"\r\n                        class=\"refer-script-list\"\r\n                        :value=\"formData[scriptVersionIdField]\"\r\n                        @change=\"handleScriptVersionIdChange\"\r\n                        :clearable=\"false\"\r\n                        searchable>\r\n                        <auth-option\r\n                            v-for=\"option in scripListDisplay\"\r\n                            :key=\"option.scriptVersionId\"\r\n                            :id=\"option.scriptVersionId\"\r\n                            :permission=\"option.canView\"\r\n                            :resource-id=\"option.id\"\r\n                            :name=\"option.name\"\r\n                            :auth=\"authView\" />\r\n                        <template slot=\"extension\">\r\n                            <auth-component :auth=\"authCreate\">\r\n                                <div @click=\"handleGoCreate\" style=\"cursor: pointer;\">\r\n                                    <i class=\"bk-icon icon-plus-circle mr10\" />{{ newBtnText }}\r\n                                </div>\r\n                                <div slot=\"forbid\">\r\n                                    <i class=\"bk-icon icon-plus-circle mr10\" />{{ newBtnText }}\r\n                                </div>\r\n                            </auth-component>\r\n                        </template>\r\n                    </bk-select>\r\n                </compose-form-item>\r\n                <div\r\n                    v-if=\"formData[scriptVersionIdField]\"\r\n                    class=\"refer-script-detail\"\r\n                    :tippy-tips=\"'脚本详情'\"\r\n                    @click=\"handleGoScriptDetail\">\r\n                    <Icon type=\"jump\" />\r\n                </div>\r\n            </div>\r\n        </jb-form-item>\r\n    </div>\r\n</template>\r\n<script>\r\n       import ScriptService from '@service/script-manage';\r\n    import PublicScriptService from '@service/public-script-manage';\r\n    import TaskStepModel from '@model/task/task-step';\r\n    import ComposeFormItem from '@components/compose-form-item';\r\n\r\n    export default {\r\n        components: {\r\n            ComposeFormItem,\r\n        },\r\n        props: {\r\n            // 脚本来源字段名\r\n            scriptSourceField: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            // 脚本id字段名\r\n            scriptIdField: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            // 脚本版本id字段名\r\n            scriptVersionIdField: {\r\n                type: String,\r\n            },\r\n            // 脚本内容字段名\r\n            contentField: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            // 脚本语言字段名\r\n            languageField: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            formData: {\r\n                type: Object,\r\n                default: () => ({}),\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                scripList: [{},{},{}],\r\n                publicScripList: [{},{},{}],\r\n                scriptSource: 'local',\r\n                referType: 2,\r\n            };\r\n        },\r\n        computed: {\r\n            /**\r\n             * @desc 使用脚本资源需要的权限\r\n             * @returns {String}\r\n             */\r\n            authView () {\r\n                return this.formData[this.scriptSourceField] === TaskStepModel.scriptStep.TYPE_SOURCE_BUSINESS\r\n                    ? 'script/view'\r\n                    : 'public_script/view';\r\n            },\r\n            /**\r\n             * @desc 脚本新建的权限\r\n             * @returns { String }\r\n             */\r\n            authCreate () {\r\n                return this.formData[this.scriptSourceField] === TaskStepModel.scriptStep.TYPE_SOURCE_BUSINESS\r\n                    ? 'script/create'\r\n                    : 'public_script/create';\r\n            },\r\n            /**\r\n             * @desc 引用脚本类型\r\n             * @returns { Boolean }\r\n             */\r\n            isScriptRefer () {\r\n                return this.scriptSource === 'refer';\r\n            },\r\n            /**\r\n             * @desc 脚本列表\r\n             * @returns { Array }\r\n             */\r\n            scripListDisplay () {\r\n                const scriptSource = this.formData[this.scriptSourceField];\r\n                \r\n                if (scriptSource === TaskStepModel.scriptStep.TYPE_SOURCE_BUSINESS) {\r\n                    return this.scripList;\r\n                }\r\n                if (scriptSource === TaskStepModel.scriptStep.TYPE_SOURCE_PUBLIC) {\r\n                    return this.publicScripList;\r\n                }\r\n                return [];\r\n            },\r\n            /**\r\n             * @desc 按钮的文本\r\n             * @returns { String }\r\n             */\r\n            newBtnText () {\r\n                return this.formData[this.scriptSourceField] === TaskStepModel.scriptStep.TYPE_SOURCE_BUSINESS\r\n                    ? '新建业务脚本'\r\n                    : '新建公共脚本';\r\n            },\r\n            /**\r\n             * @desc 表单想验证规则\r\n             * @returns { Array }\r\n             *\r\n             * 引用类型的脚本时 scriptId 不能为空\r\n             */\r\n            rules () {\r\n                if (this.isScriptRefer) {\r\n                    return [{\r\n                        required: true,\r\n                        message: '请选择引用脚本',\r\n                        trigger: 'blur',\r\n                    }];\r\n                }\r\n                return [];\r\n            },\r\n        },\r\n        watch: {\r\n            formData: {\r\n                handler () {\r\n                    this.initScriptSource();\r\n                },\r\n                immediate: true,\r\n            },\r\n            'formData.scriptId' (value) {\r\n                if (value) {\r\n                    this.$refs.scriptId.clearValidator();\r\n                }\r\n            },\r\n        },\r\n        created () {\r\n            if (this.formData[this.scriptVersionIdField]) {\r\n                this.handleScriptVersionIdChange(this.formData[this.scriptVersionIdField]);\r\n            }\r\n            this.fetchScriptList();\r\n            this.fetchPublicScriptList();\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 获取业务脚本列表\r\n             */\r\n            fetchScriptList () {\r\n                ScriptService.getOnlineScriptList()\r\n                    .then((data) => {\r\n                        this.scripList = data;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 获公共脚本列表\r\n             */\r\n            fetchPublicScriptList () {\r\n                PublicScriptService.getOnlineScriptList()\r\n                    .then((data) => {\r\n                        this.publicScripList = data;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 初始化脚本来源\r\n             */\r\n            initScriptSource () {\r\n                if (this.formData[this.scriptSourceField] === TaskStepModel.scriptStep.TYPE_SOURCE_LOCAL) {\r\n                    this.scriptSource = 'local';\r\n                    return;\r\n                }\r\n                this.scriptSource = 'refer';\r\n                // 如果是引用脚本，还需初始化引用类型\r\n                this.referType = this.formData[this.scriptSourceField];\r\n            },\r\n            /**\r\n             * @desc 更新脚本来源\r\n             * @param {String} source 脚本来源\r\n             */\r\n            handleScriptSourceChange (source) {\r\n                // 脚本来源改变重置脚本相关的信息\r\n                const scriptSource = source === 'local'\r\n                    ? TaskStepModel.scriptStep.TYPE_SOURCE_LOCAL\r\n                    : TaskStepModel.scriptStep.TYPE_SOURCE_BUSINESS;\r\n                this.$emit('on-reset', {\r\n                    [this.scriptSourceField]: scriptSource,\r\n                    [this.scriptIdField]: '',\r\n                    [this.scriptVersionIdField]: '',\r\n                });\r\n            },\r\n            /**\r\n             * @desc 更新脚本引用来源类型\r\n             * @param {String} scriptSource 脚本引用来源类型\r\n             */\r\n            handleReferScriptTypeChange (scriptSource) {\r\n                if (scriptSource === this.formData[this.scriptSourceField]) {\r\n                    return;\r\n                }\r\n                this.$emit('on-reset', {\r\n                    [this.scriptSourceField]: scriptSource,\r\n                    [this.scriptIdField]: '',\r\n                    [this.scriptVersionIdField]: '',\r\n                });\r\n            },\r\n            /**\r\n             * @desc 更新脚本引用版本\r\n             * @param {String} scriptVersionId 脚本引用来源类型\r\n             */\r\n            handleScriptVersionIdChange (scriptVersionId) {\r\n                if (!scriptVersionId) {\r\n                    return;\r\n                }\r\n\r\n                this.$emit('on-reset', {\r\n                    isScriptContentLoading: true,\r\n                });\r\n                ScriptService.versionDetail({\r\n                    id: scriptVersionId,\r\n                }).then(({ id, content, type, publicScript }) => {\r\n                    let scriptSource = TaskStepModel.scriptStep.TYPE_SOURCE_BUSINESS;\r\n                    if (publicScript) {\r\n                        scriptSource = TaskStepModel.scriptStep.TYPE_SOURCE_PUBLIC;\r\n                    }\r\n                    this.$emit('on-reset', {\r\n                        [this.scriptSourceField]: scriptSource,\r\n                        [this.scriptIdField]: id,\r\n                        [this.contentField]: content,\r\n                        [this.languageField]: type,\r\n                        [this.scriptVersionIdField]: scriptVersionId,\r\n                    });\r\n                })\r\n                    .finally(() => {\r\n                        this.$emit('on-reset', {\r\n                            isScriptContentLoading: false,\r\n                        });\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 跳转到选择的脚本版本详情\r\n             */\r\n            handleGoScriptDetail () {\r\n                const routerName = this.formData[this.scriptSourceField] === TaskStepModel.scriptStep.TYPE_SOURCE_PUBLIC\r\n                    ? 'publicScriptVersion'\r\n                    : 'scriptVersion';\r\n\r\n                const { href } = this.$router.resolve({\r\n                    name: routerName,\r\n                    params: {\r\n                        id: this.formData[this.scriptIdField],\r\n                    },\r\n                    query: {\r\n                        scriptVersionId: this.formData[this.scriptVersionIdField],\r\n                    },\r\n                });\r\n                \r\n                window.open(href);\r\n            },\r\n            /**\r\n             * @desc 跳转新建脚本页面\r\n             */\r\n            handleGoCreate () {\r\n                const routerName = this.formData[this.scriptSourceField] === TaskStepModel.scriptStep.TYPE_SOURCE_PUBLIC\r\n                    ? 'createPublicScript'\r\n                    : 'createScript';\r\n\r\n                const { href } = this.$router.resolve({\r\n                    name: routerName,\r\n                });\r\n                \r\n                window.open(href);\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    @import \"@/css/mixins/media\";\r\n\r\n    .script-source-of-execution {\r\n        .script-source-item {\r\n            .bk-radio-button-text {\r\n                width: 120px;\r\n                text-align: center;\r\n            }\r\n        }\r\n\r\n        .refer-script-box {\r\n            position: relative;\r\n            display: flex;\r\n\r\n            .refer-script-detail {\r\n                position: absolute;\r\n                top: 0;\r\n                right: -40px;\r\n                bottom: 0;\r\n                display: flex;\r\n                align-items: center;\r\n                justify-content: center;\r\n                width: 40px;\r\n                font-size: 16px;\r\n                color: #3a84ff;\r\n                cursor: pointer;\r\n            }\r\n\r\n            .refer-script-list {\r\n                width: calc(500px - 120px);\r\n\r\n                @media (--small-viewports) {\r\n                    width: calc(500px - 120px);\r\n                }\r\n\r\n                @media (--medium-viewports) {\r\n                    width: calc(560px - 120px);\r\n                }\r\n\r\n                @media (--large-viewports) {\r\n                    width: calc(620px - 120px);\r\n                }\r\n\r\n                @media (--huge-viewports) {\r\n                    width: calc(680px - 120px);\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div\r\n        class=\"task-step-execute-target\"\r\n        :class=\"{\r\n            'only-host': mode === 'onlyHost',\r\n        }\">\r\n        <jb-form-item\r\n            :label=\"'目标服务器'\"\r\n            required\r\n            ref=\"targetServerRef\"\r\n            :property=\"property\"\r\n            :rules=\"rules\">\r\n            <div style=\"display: flex;\">\r\n                <template v-if=\"mode === 'onlyHost'\">\r\n                    <!-- 快速执行场景只能操作主机列表 -->\r\n                    <bk-button class=\"mr10\" @click=\"handleShowChooseIp\">\r\n                        <Icon type=\"plus\" />\r\n                        {{ '添加服务器' }}\r\n                    </bk-button>\r\n                </template>\r\n                <template v-else>\r\n                    <!-- 作业步骤场景可以切换主机列表和主机变量 -->\r\n                    <compose-form-item>\r\n                        <bk-select\r\n                            :style=\"targetSelectorStyle\"\r\n                            :value=\"targetType\"\r\n                            :clearable=\"false\"\r\n                            @change=\"handleTargetTypeChange\">\r\n                            <bk-option id=\"variable\" :name=\"'全局变量'\" />\r\n                            <bk-option id=\"hostNodeInfo\" :name=\"'手动添加'\" />\r\n                        </bk-select>\r\n                        <template v-if=\"isGolbalVariableType\">\r\n                            <bk-select\r\n                                class=\"server-global-variable-select\"\r\n                                :placeholder=\"'请选择主机列表变量'\"\r\n                                :value=\"localVariable\"\r\n                                @change=\"handleVariableChange\"\r\n                                :clearable=\"false\">\r\n                                <bk-option\r\n                                    v-for=\"(item, index) in variable\"\r\n                                    :key=\"index\"\r\n                                    :id=\"item.name\"\r\n                                    :name=\"item.name\" />\r\n                            </bk-select>\r\n                        </template>\r\n                        <template v-else>\r\n                            <bk-button class=\"w120 mr10\" @click=\"handleShowChooseIp\">\r\n                                <Icon type=\"plus\" />\r\n                                {{ '添加服务器' }}\r\n                            </bk-button>\r\n                        </template>\r\n                    </compose-form-item>\r\n                </template>\r\n                <template v-if=\"isShowServerAction\">\r\n                    <bk-dropdown-menu>\r\n                        <bk-button class=\"mr10\" type=\"primary\" slot=\"dropdown-trigger\">\r\n                            <span>{{ '复制IP' }}</span>\r\n                            <Icon type=\"down-small\" class=\"action-flag\" />\r\n                        </bk-button>\r\n                        <ul class=\"bk-dropdown-list\" slot=\"dropdown-content\">\r\n                            <li><a @click=\"handleCopyAll\">{{ '全部IP' }}</a></li>\r\n                            <li><a @click=\"handleCopyFail\">{{ '异常IP' }}</a></li>\r\n                        </ul>\r\n                    </bk-dropdown-menu>\r\n                    <bk-button class=\"mr10\" @click=\"handleClearAll\">\r\n                        <span>{{ '清空' }}</span>\r\n                    </bk-button>\r\n                    <bk-button type=\"primary\" @click=\"handleRefreshHost\">\r\n                        {{ '刷新状态' }}\r\n                    </bk-button>\r\n                </template>\r\n                <bk-input\r\n                    v-if=\"isShowHostSearchInput\"\r\n                    class=\"ip-search\"\r\n                    :value=\"searchText\"\r\n                    :placeholder=\"'筛选主机'\"\r\n                    right-icon=\"bk-icon icon-search\"\r\n                    @change=\"handleHostSearch\" />\r\n            </div>\r\n            <lower-component level=\"custom\" :custom=\"isShowServerPanel\">\r\n                <server-panel\r\n                    v-show=\"isShowServerPanel\"\r\n                    ref=\"serverPanel\"\r\n                    class=\"view-server-panel\"\r\n                    :host-node-info=\"localHost\"\r\n                    :search-mode=\"Boolean(searchText)\"\r\n                    :search-data=\"searchData\"\r\n                    editable\r\n                    @on-change=\"handleHostChange\" />\r\n            </lower-component>\r\n        </jb-form-item>\r\n        <choose-ip\r\n            v-model=\"isShowChooseIp\"\r\n            :host-node-info=\"localHost\"\r\n            @on-change=\"handleHostChange\" />\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n    import TaskHostNodeModel from '@model/task-host-node';\r\n       import { execCopy } from '@utils/assist';\r\n    import ComposeFormItem from '@components/compose-form-item';\r\n    import ChooseIp from '@components/choose-ip';\r\n    import ServerPanel from '@components/choose-ip/server-panel';\r\n\r\n    export default {\r\n        components: {\r\n            ComposeFormItem,\r\n            ChooseIp,\r\n            ServerPanel,\r\n        },\r\n        inheritAttrs: false,\r\n        props: {\r\n            taskHostNode: {\r\n                type: Object,\r\n                required: true,\r\n            },\r\n            variable: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n            property: {\r\n                type: String,\r\n            },\r\n            mode: {\r\n                type: String,\r\n                default: '', // onlyHost: 快速执行只可以选择主机列表\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isShowChooseIp: false,\r\n                searchText: '',\r\n                isSearchMode: false,\r\n                searchData: [],\r\n                targetType: 'variable', // variable：主机变量；hostNodeInfo：手动添加\r\n                localVariable: '',\r\n                localHost: {},\r\n            };\r\n        },\r\n        computed: {\r\n            /**\r\n             * @desc 执行目标是否是全局变量\r\n             * @returns {Boolean}\r\n             */\r\n            isGolbalVariableType () {\r\n                return this.targetType === 'variable';\r\n            },\r\n            /**\r\n             * @desc 是否显示主机结果面板\r\n             * @returns {Boolean}\r\n             */\r\n            isShowServerPanel () {\r\n                if (this.isGolbalVariableType) {\r\n                    return false;\r\n                }\r\n                return !TaskHostNodeModel.isHostNodeInfoEmpty(this.localHost);\r\n            },\r\n            /**\r\n             * @desc 是否显示主机结果快捷操作\r\n             * @returns {Boolean}\r\n             */\r\n            isShowServerAction () {\r\n                if (this.isGolbalVariableType) {\r\n                    return false;\r\n                }\r\n                return !TaskHostNodeModel.isHostNodeInfoEmpty(this.localHost);\r\n            },\r\n            /**\r\n             * @desc 清除异常主机是否可用\r\n             * @returns {Boolean}\r\n             */\r\n            isClearFailDisabled () {\r\n                return this.localHost.ipList.length < 1;\r\n            },\r\n            /**\r\n             * @desc 选择的主机才显示主机搜索框\r\n             * @returns {Boolean}\r\n             */\r\n            isShowHostSearchInput () {\r\n                if (this.isGolbalVariableType) {\r\n                    return false;\r\n                }\r\n                return this.localHost.ipList.length > 0;\r\n            },\r\n            /**\r\n             * @desc 切换执行目标选择的展示样式\r\n             * @returns {Object}\r\n             */\r\n            targetSelectorStyle () {\r\n                return {\r\n                    width: 'zh-CN' === 'en-US' ? '156px' : '120px',\r\n                };\r\n            },\r\n        },\r\n        watch: {\r\n            taskHostNode: {\r\n                handler (taskHostNode) {\r\n                    const {\r\n                        hostNodeInfo,\r\n                        variable,\r\n                    } = taskHostNode;\r\n\r\n                    this.localHost = hostNodeInfo;\r\n                    this.localVariable = variable;\r\n                    if (this.mode !== 'onlyHost') {\r\n                        // 编辑态，执行目标为服务器列表\r\n                        if (!TaskHostNodeModel.isHostNodeInfoEmpty(this.localHost)) {\r\n                            this.targetType = 'hostNodeInfo';\r\n                        }\r\n                    } else {\r\n                        this.targetType = 'hostNodeInfo';\r\n                    }\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        created () {\r\n            // 执行目标是主机变量\r\n            if (this.isGolbalVariableType) {\r\n                if (this.localVariable) {\r\n                    // 编辑态\r\n                    // 如果被引用的主机变量被删除，则将执行目标的值重置为空\r\n                    // 主机变量被删除\r\n                    if (!this.variable.find(_ => _.name === this.localVariable)) {\r\n                        setTimeout(() => {\r\n                            this.handleVariableChange('');\r\n                        });\r\n                    }\r\n                } else {\r\n                    // 主机变量为空，默认选中第一个\r\n                    if (this.variable.length > 0) {\r\n                        setTimeout(() => {\r\n                            this.handleVariableChange(this.variable[0].name);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            \r\n            this.rules = [\r\n                {\r\n                    validator: () => {\r\n                        if (this.isGolbalVariableType) {\r\n                            return Boolean(this.localVariable);\r\n                        }\r\n                        return !TaskHostNodeModel.isHostNodeInfoEmpty(this.localHost);\r\n                    },\r\n                    message: '目标服务器必填',\r\n                    trigger: 'change',\r\n                },\r\n            ];\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 执行目标值更新\r\n             */\r\n            triggerChange () {\r\n                const taskHostNode = new TaskHostNodeModel({});\r\n                if (this.isGolbalVariableType) {\r\n                    taskHostNode.variable = this.localVariable;\r\n                } else {\r\n                    taskHostNode.hostNodeInfo = this.localHost;\r\n                }\r\n                if (!taskHostNode.isEmpty) {\r\n                    this.$refs.targetServerRef.clearValidator();\r\n                }\r\n                this.$emit('on-change', Object.freeze(taskHostNode));\r\n            },\r\n            /**\r\n             * @desc 执行目标类型改变\r\n             */\r\n            handleTargetTypeChange (value) {\r\n                this.targetType = value;\r\n                this.triggerChange();\r\n            },\r\n            /**\r\n             * @desc 弹出ip选择器弹层\r\n             */\r\n            handleShowChooseIp () {\r\n                this.isShowChooseIp = true;\r\n                this.searchText = '';\r\n            },\r\n            /**\r\n             * @desc 选择全局变量\r\n             * @param {String} value 全局变量名\r\n             */\r\n            handleVariableChange (value) {\r\n                this.localVariable = value;\r\n                this.triggerChange();\r\n            },\r\n            /**\r\n             * @desc 主机值更新\r\n             * @param {Object} hostNodeInfo 主机信息\r\n             */\r\n            handleHostChange (hostNodeInfo) {\r\n                this.localHost = Object.freeze(hostNodeInfo);\r\n                this.triggerChange();\r\n            },\r\n            /**\r\n             * @desc 复制所有主机\r\n             */\r\n            handleCopyAll () {\r\n                const allIP = this.$refs.serverPanel.getAllIP();\r\n                if (allIP.length < 1) {\r\n                    this.messageWarn('你还未选择主机');\r\n                    return;\r\n                }\r\n                \r\n                execCopy(allIP.join('\\n'), `${'复制成功'}（${allIP.length}${'个IP'}）`);\r\n            },\r\n            /**\r\n             * @desc 复制所有异常主机\r\n             */\r\n            handleCopyFail () {\r\n                const allFailIP = this.$refs.serverPanel.getAllIP(true);\r\n                if (allFailIP.length < 1) {\r\n                    this.messageWarn('暂无异常主机');\r\n                    return;\r\n                }\r\n                \r\n                execCopy(allFailIP.join('\\n'), `${'复制成功'}（${allFailIP.length}${'个IP'}）`);\r\n            },\r\n            /**\r\n             * @desc 复制所有主机数据\r\n             */\r\n            handleClearAll () {\r\n                const { hostNodeInfo } = new TaskHostNodeModel({});\r\n                this.localHost = Object.freeze(hostNodeInfo);\r\n                this.messageSuccess('清空成功');\r\n                this.triggerChange();\r\n            },\r\n            /**\r\n             * @desc 刷新所有主机的状态信息\r\n             */\r\n            handleRefreshHost () {\r\n                this.$refs.serverPanel.refresh();\r\n            },\r\n            /**\r\n             * @desc 筛选主机\r\n             * @param {String} search 筛选值\r\n             */\r\n            handleHostSearch (search) {\r\n                this.searchText = _.trim(search);\r\n                this.searchData = Object.freeze(this.$refs.serverPanel.getAllHost(search));\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    html[lang=\"en-US\"] {\r\n        .compose-form-item {\r\n            .server-global-variable-select {\r\n                width: 341px;\r\n            }\r\n        }\r\n\r\n        .ip-search {\r\n            width: 162px;\r\n        }\r\n\r\n        .only-host {\r\n            .ip-search {\r\n                width: 314px;\r\n            }\r\n        }\r\n    }\r\n\r\n    .task-step-execute-target {\r\n        &.only-host {\r\n            .ip-search {\r\n                width: 620px;\r\n            }\r\n        }\r\n\r\n        .bk-button {\r\n            font-size: 14px !important;\r\n        }\r\n\r\n        .action-flag {\r\n            font-size: 18px;\r\n        }\r\n\r\n        .view-server-panel {\r\n            margin-top: 14px;\r\n        }\r\n\r\n        .ip-search {\r\n            flex: 0 0 auto;\r\n            width: 245px;\r\n            margin-left: auto;\r\n        }\r\n\r\n        .compose-form-item {\r\n            .server-global-variable-select {\r\n                width: 376px;\r\n            }\r\n        }\r\n    }\r\n\r\n    .execute-target-host-clear {\r\n        user-select: none;\r\n\r\n        .disabled {\r\n            a {\r\n                color: #c4c6cc !important;\r\n                cursor: not-allowed;\r\n                background-color: #fafafa !important;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"push-speed-limit\">\r\n        <jb-form-item :label=\"label\">\r\n            <div class=\"speed-limit-wraper\">\r\n                <div class=\"speed-limit-content form-item-content\">\r\n                    <bk-checkbox :value=\"enabled\" @change=\"handleEnableChange\">\r\n                        {{ '启用限速' }}\r\n                    </bk-checkbox>\r\n                    <bk-input v-show=\"enabled\" class=\"speed-limit-input\" @change=\"handleChange\" :value=\"formData[field]\">\r\n                        <template slot=\"append\">\r\n                            <div class=\"group-text\">MB/s</div>\r\n                        </template>\r\n                    </bk-input>\r\n                </div>\r\n                <Icon v-show=\"enabled\" type=\"info\" class=\"tips-flag\" v-bk-tooltips=\"speedLimitTipsConfig\" />\r\n            </div>\r\n        </jb-form-item>\r\n        <div id=\"targetPathTips\" class=\"speed-limit-tips\">\r\n            <div class=\"row\">{{ '请根据机器的网卡情况酌情配置速率，以免影响其他服务的正常使用；' }}</div>\r\n            <div class=\"row\">{{ '未开启时，将按 Agent 默认配置规则限速 （Agent会根据机器资源使用情况，有自身保护机制）' }}</div>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n   \r\n    export default {\r\n        name: '',\r\n        props: {\r\n            field: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            label: {\r\n                type: String,\r\n                default: '限速',\r\n            },\r\n            formData: {\r\n                type: Object,\r\n                default: () => ({}),\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                enabled: false,\r\n            };\r\n        },\r\n        watch: {\r\n            formData: {\r\n                handler (formData) {\r\n                    if (formData[this.field] > 0) {\r\n                        this.enabled = true;\r\n                    }\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        created () {\r\n            this.speedLimitTipsConfig = {\r\n                allowHtml: true,\r\n                width: '325px',\r\n                theme: 'light',\r\n                trigger: 'mouseenter',\r\n                content: '#targetPathTips',\r\n                placement: 'right-start',\r\n                delay: [0, 10000000],\r\n            };\r\n        },\r\n        methods: {\r\n            handleEnableChange (enabled) {\r\n                this.enabled = enabled;\r\n                this.$emit('on-change', this.field, enabled ? 10 : 0);\r\n            },\r\n            handleChange (value) {\r\n                this.$emit('on-change', this.field, value);\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .push-speed-limit {\r\n        .bk-label {\r\n            white-space: normal;\r\n        }\r\n\r\n        .speed-limit-wraper {\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: flex-start;\r\n        }\r\n\r\n        .speed-limit-content {\r\n            display: flex;\r\n            align-items: center;\r\n            height: 32px;\r\n        }\r\n\r\n        .speed-limit-input {\r\n            width: calc(100% - 100px);\r\n            margin-left: auto;\r\n        }\r\n\r\n        .tips-flag {\r\n            margin-left: 8px;\r\n            font-size: 14px;\r\n            line-height: 32px;\r\n            color: #c4c6cc;\r\n            cursor: pointer;\r\n        }\r\n    }\r\n\r\n    .speed-limit-tips {\r\n        font-size: 12px;\r\n        line-height: 16px;\r\n        color: #63656e;\r\n\r\n        .row {\r\n            position: relative;\r\n            padding-left: 12px;\r\n\r\n            &::before {\r\n                position: absolute;\r\n                top: 6px;\r\n                left: 0;\r\n                width: 4px;\r\n                height: 4px;\r\n                background: currentColor;\r\n                border-radius: 50%;\r\n                content: \"\";\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"step-distro-file\">\r\n        <jb-form ref=\"form\" :model=\"formData\" fixed :label-width=\"formMarginLeftWidth\">\r\n            <card-layout :title=\"'基本信息'\" class=\"block\">\r\n                <item-factory\r\n                    name=\"stepName\"\r\n                    field=\"name\"\r\n                    :placeholder=\"'推荐按步骤实际处理的场景行为来取名...'\"\r\n                    :form-data=\"formData\"\r\n                    @on-change=\"handleChange\" />\r\n                <item-factory\r\n                    name=\"timeout\"\r\n                    field=\"timeout\"\r\n                    :form-data=\"formData\"\r\n                    @on-change=\"handleChange\" />\r\n                <item-factory\r\n                    name=\"errorHandle\"\r\n                    field=\"ignoreError\"\r\n                    :form-data=\"formData\"\r\n                    @on-change=\"handleChange\" />\r\n                <item-factory\r\n                    name=\"speedLimit\"\r\n                    field=\"uploadSpeedLimit\"\r\n                    :label=\"'上传限速'\"\r\n                    :form-data=\"formData\"\r\n                    @on-change=\"handleChange\" />\r\n                <item-factory\r\n                    name=\"speedLimit\"\r\n                    field=\"downloadSpeedLimit\"\r\n                    :label=\"'下载限速'\"\r\n                    :form-data=\"formData\"\r\n                    @on-change=\"handleChange\" />\r\n            </card-layout>\r\n            <card-layout :title=\"'文件来源'\" class=\"block\">\r\n                <item-factory\r\n                    name=\"sourceFileOfTemplate\"\r\n                    field=\"fileSourceList\"\r\n                    :variable=\"variable\"\r\n                    :form-data=\"formData\"\r\n                    @on-change=\"handleChange\" />\r\n            </card-layout>\r\n            <card-layout :title=\"'传输目标'\" class=\"block\">\r\n                <item-factory\r\n                    ref=\"targetPath\"\r\n                    name=\"targetPath\"\r\n                    field=\"path\"\r\n                    tips-placement=\"top\"\r\n                    :form-data=\"formData\"\r\n                    @on-change=\"handleChange\" />\r\n                <item-factory\r\n                    name=\"transferMode\"\r\n                    field=\"transferMode\"\r\n                    :form-data=\"formData\"\r\n                    @on-change=\"handleChange\" />\r\n                <item-factory\r\n                    name=\"executeAccount\"\r\n                    field=\"account\"\r\n                    :form-data=\"formData\"\r\n                    @on-change=\"handleChange\" />\r\n                <item-factory\r\n                    name=\"targetServerOfTemplate\"\r\n                    field=\"server\"\r\n                    :variable=\"variable\"\r\n                    :form-data=\"formData\"\r\n                    @on-change=\"handleChange\" />\r\n            </card-layout>\r\n        </jb-form>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n       import { mapState } from 'vuex';\r\n    import TaskStepModel from '@model/task/task-step';\r\n    import TaskHostNodeModel from '@model/task-host-node';\r\n    import CardLayout from '@components/task-step/file/card-layout';\r\n    import ItemFactory from '@components/task-step/file/item-factory';\r\n    import {\r\n        genDefaultName,\r\n        compareHost,\r\n        detectionSourceFileDupLocation,\r\n    } from '@utils/assist';\r\n\r\n    const getDefaultData = () => ({\r\n        id: 0,\r\n        // 步骤名称\r\n        name: genDefaultName('步骤分发文件'),\r\n        // 源文件列表\r\n        fileSourceList: [{},{},{}],\r\n        // 超时\r\n        timeout: 7200,\r\n        // 上传文件限速\r\n        uploadSpeedLimit: 0,\r\n        // 传输模式： 1 - 严谨模式； 2 - 强制模式；3 - 安全模式\r\n        transferMode: 2,\r\n        // 忽略错误 0 - 不忽略 1 - 忽略\r\n        ignoreError: 0,\r\n        // 下载文件限速\r\n        downloadSpeedLimit: 0,\r\n\r\n        // 目标路径，通过三个输入框（account、path、server）赋值\r\n        // 最终组合成一个 fileDestination\r\n        // fileDestination: {\r\n        //     account: '', // 执行账号\r\n        //     path: '', // 目标路径\r\n        //     server: {} // 执行目标\r\n        // }\r\n        account: '',\r\n        path: '',\r\n        server: new TaskHostNodeModel({}),\r\n    });\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            CardLayout,\r\n            ItemFactory,\r\n        },\r\n        inheritAttrs: false,\r\n        props: {\r\n            variable: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n            data: {\r\n                type: Object,\r\n                default: () => [],\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                formData: getDefaultData(),\r\n            };\r\n        },\r\n        computed: {\r\n            ...mapState('distroFile', {\r\n                isEditNewSourceFile: state => state.isEditNewSourceFile,\r\n                isLocalFileUploading: state => state.isLocalFileUploading,\r\n                isLocalFileUploadFailed: state => state.isLocalFileUploadFailed,\r\n            }),\r\n            formMarginLeftWidth () {\r\n                return 'zh-CN' === 'en-US' ? 140 : 110;\r\n            },\r\n        },\r\n        watch: {\r\n            data: {\r\n                handler (newData) {\r\n                    if (_.isEmpty(newData)) {\r\n                        return;\r\n                    }\r\n                    const {\r\n                        account,\r\n                        path,\r\n                        server,\r\n                    } = newData.fileDestination;\r\n\r\n                    const originData = { ...newData };\r\n                    delete originData.fileDestination;\r\n\r\n                    this.formData = {\r\n                        ...this.formData,\r\n                        ...originData,\r\n                        account,\r\n                        path,\r\n                        server,\r\n                    };\r\n                    setTimeout(() => {\r\n                        this.$refs.form.validate();\r\n                    });\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        mounted () {\r\n            window.IPInputScope = 'FILE_DISTRIBUTION';\r\n            this.$once('hook:beforeDestroy', () => {\r\n                window.IPInputScope = '';\r\n            });\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 表单字段更新\r\n             * @param {String} field 字段名\r\n             * @param {Any} value 字段值\r\n             */\r\n            handleChange (field, value) {\r\n                this.formData[field] = value;\r\n            },\r\n            /**\r\n             * @desc 提交表单\r\n             *\r\n             * 1，首先检测是否有没保存的源文件\r\n             * 2，表单验证\r\n             *   - 表单验证失败检测是否有本地文件上传未完成或者本地文件上传失败\r\n             */\r\n            submit () {\r\n                return Promise.resolve()\r\n                    // 检测没有保存的源文件\r\n                    .then(() => new Promise((resolve, reject) => {\r\n                        if (!this.isEditNewSourceFile) {\r\n                            return resolve();\r\n                        }\r\n                        this.$bkInfo({\r\n                            title: '您有未保存的源文件',\r\n                            type: 'warning',\r\n                            okText: '继续提交',\r\n                            cancelText: '去保存',\r\n                            confirmFn: () => {\r\n                                resolve();\r\n                            },\r\n                            cancelFn: () => {\r\n                                reject(new Error('save'));\r\n                            },\r\n                        });\r\n                    }))\r\n                    // 检测服务器源文件的主机和执行目标服务器主机相同\r\n                    .then(() => new Promise((resolve, reject) => {\r\n                        let sameHost = false;\r\n                        // eslint-disable-next-line no-plusplus\r\n                        for (let i = 0; i < this.formData.fileSourceList.length; i++) {\r\n                            const currentFileSource = this.formData.fileSourceList[i];\r\n                            // 服务器源文件\r\n                            if (currentFileSource.fileType === TaskStepModel.fileStep.TYPE_SERVER) {\r\n                                if (compareHost(this.formData.server, currentFileSource.host)) {\r\n                                    sameHost = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        if (sameHost) {\r\n                            this.$bkInfo({\r\n                                title: '源和目标服务器相同',\r\n                                subTitle: '检测到文件传输源和目标服务器是同一批，若是单台建议使用本地 cp 方式效率会更高，请问你是否确定参数无误？',\r\n                                width: 500,\r\n                                okText: '好的，我调整一下',\r\n                                cancelText: '是的，确定无误',\r\n                                confirmFn: () => {\r\n                                    reject(new Error('save'));\r\n                                },\r\n                                cancelFn: () => {\r\n                                    resolve();\r\n                                },\r\n                            });\r\n                        } else {\r\n                            resolve();\r\n                        }\r\n                    }))\r\n                    // 检测源文件的同名文件和目录\r\n                    .then(() => new Promise((resolve, reject) => {\r\n                        if (detectionSourceFileDupLocation(this.formData.fileSourceList)) {\r\n                            // 有重名目录和文件\r\n                            this.$bkInfo({\r\n                                title: '源文件可能出现同名',\r\n                                subTitle: '多文件源传输场景下容易出现同名文件覆盖的问题，你可以在目标路径中使用 [源服务器IP] 的变量来尽可能规避风险。',\r\n                                okText: '好的，我调整一下',\r\n                                cancelText: '已知悉，确定执行',\r\n                                closeIcon: false,\r\n                                width: 500,\r\n                                confirmFn: () => {\r\n                                    // 聚焦到目标路径输入框\r\n                                    this.$refs.targetPath.$el.scrollIntoView();\r\n                                    this.$refs.targetPath.$el.querySelector('.bk-form-input').focus();\r\n                                    reject(new Error('transferMode change'));\r\n                                },\r\n                                cancelFn: () => {\r\n                                    resolve();\r\n                                },\r\n                            });\r\n                        } else {\r\n                            resolve();\r\n                        }\r\n                    }))\r\n                    // 提交步骤\r\n                    .then(() => {\r\n                        const {\r\n                            id,\r\n                            name,\r\n                            timeout,\r\n                            uploadSpeedLimit,\r\n                            downloadSpeedLimit,\r\n                            transferMode,\r\n                            ignoreError,\r\n                            fileSourceList,\r\n                            account,\r\n                            path,\r\n                            server,\r\n                        } = this.formData;\r\n\r\n                        const result = {\r\n                            id,\r\n                            name,\r\n                            delete: 0,\r\n                            type: 2,\r\n                            fileStepInfo: {\r\n                                timeout,\r\n                                uploadSpeedLimit,\r\n                                downloadSpeedLimit,\r\n                                transferMode,\r\n                                ignoreError,\r\n                                fileSourceList,\r\n                                fileDestination: {\r\n                                    account,\r\n                                    path,\r\n                                    server,\r\n                                },\r\n                                \r\n                            },\r\n                        };\r\n                        return this.$refs.form.validate()\r\n                            // 表单验证通过直接提交\r\n                            .then(() => {\r\n                                this.$emit('on-change', result, true);\r\n                            })\r\n                            // 表单验证失败时，检测本地文件上传状态\r\n                            .catch(() => new Promise((resolve, reject) => {\r\n                                let confirmInfo = null;\r\n                                const handleClose = () => {\r\n                                    confirmInfo.close();\r\n                                    reject(new Error('not save'));\r\n                                };\r\n                                const subHeader = () => (\r\n                                <div>\r\n                                    <div style=\"text-align: center\">\r\n                                        <bk-button\r\n                                            onClick={handleClose}\r\n                                            style=\"width: 96px\"\r\n                                            theme=\"primary\">\r\n                                            { '去处理' }\r\n                                        </bk-button>\r\n                                    </div>\r\n                                </div>\r\n                                );\r\n                                if (this.isLocalFileUploading) {\r\n                                    confirmInfo = this.$bkInfo({\r\n                                        type: 'error',\r\n                                        title: '本地源文件上传未完成',\r\n                                        subHeader: subHeader(),\r\n                                        showFooter: false,\r\n                                    });\r\n                                } else if (this.isLocalFileUploadFailed) {\r\n                                    confirmInfo = this.$bkInfo({\r\n                                        type: 'error',\r\n                                        title: '本地源文件上传失败',\r\n                                        subHeader: subHeader(),\r\n                                        showFooter: false,\r\n                                    });\r\n                                } else {\r\n                                    this.$emit('on-change', result, false);\r\n                                    resolve();\r\n                                }\r\n                            }));\r\n                    });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .step-distro-file {\r\n        .card-box {\r\n            padding-left: 0;\r\n            margin-bottom: 6px;\r\n\r\n            .card-title {\r\n                padding-left: 30px;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"script-source-of-template\">\r\n        <jb-form-item class=\"script-source-item\" :label=\"'脚本来源'\" required>\r\n            <bk-radio-group @change=\"handleScriptSourceChange\" :value=\"sourceType\">\r\n                <bk-radio-button value=\"local\">{{ '手工录入' }}</bk-radio-button>\r\n                <bk-radio-button value=\"refer\">{{ '脚本引用' }}</bk-radio-button>\r\n            </bk-radio-group>\r\n        </jb-form-item>\r\n        <jb-form-item\r\n            ref=\"scriptId\"\r\n            :label=\"'脚本引用'\"\r\n            v-show=\"isScriptRefer\"\r\n            required\r\n            property=\"scriptId\"\r\n            :rules=\"rules\">\r\n            <div class=\"refer-script-item\">\r\n                <compose-form-item class=\"form-item-content\" type=\"select\">\r\n                    <bk-select\r\n                        style=\"width: 120px;\"\r\n                        @change=\"handleReferScriptTypeChange\"\r\n                        :value=\"referType\"\r\n                        :clearable=\"false\">\r\n                        <bk-option\r\n                            :id=\"2\"\r\n                            :name=\"'业务脚本'\">\r\n                            {{ '业务脚本' }}\r\n                        </bk-option>\r\n                        <bk-option\r\n                            :id=\"3\"\r\n                            :name=\"'公共脚本'\">\r\n                            {{ '公共脚本' }}\r\n                        </bk-option>\r\n                    </bk-select>\r\n                    <bk-select\r\n                        :placeholder=\"'选择引用脚本'\"\r\n                        style=\"width: 375px;\"\r\n                        :value=\"formData[scriptVersionIdField]\"\r\n                        @change=\"handleScriptVersionIdChange\"\r\n                        :clearable=\"false\"\r\n                        searchable>\r\n                        <component\r\n                            :is=\"scriptGroupComponent\"\r\n                            v-for=\"(group, index) in scriptListDisplay\"\r\n                            :name=\"index === 0 ? '当前脚本' : '其它脚本'\"\r\n                            :key=\"index\">\r\n                            <auth-option\r\n                                v-for=\"(option, itemIndex) in group\"\r\n                                :key=\"`${option.scriptVersionId}_${itemIndex}`\"\r\n                                :id=\"option.scriptVersionId\"\r\n                                :name=\"option.name\"\r\n                                :permission=\"option.canView\"\r\n                                :resource-id=\"option.id\"\r\n                                :auth=\"authView\" />\r\n                        </component>\r\n                        <template slot=\"extension\">\r\n                            <auth-component :auth=\"authCreate\">\r\n                                <div @click=\"handleGoCreate\" style=\"cursor: pointer;\">\r\n                                    <i class=\"bk-icon icon-plus-circle mr10\" />{{ newBtnText }}\r\n                                </div>\r\n                                <div slot=\"forbid\">\r\n                                    <i class=\"bk-icon icon-plus-circle mr10\" />{{ newBtnText }}\r\n                                </div>\r\n                            </auth-component>\r\n                        </template>\r\n                    </bk-select>\r\n                </compose-form-item>\r\n                <Icon\r\n                    v-if=\"formData[scriptStatusField]\"\r\n                    type=\"script-update\"\r\n                    class=\"update-flag\"\r\n                    :tippy-tips=\"'引用脚本待更新'\" />\r\n                <div\r\n                    v-if=\"formData[scriptVersionIdField]\"\r\n                    class=\"refer-script-detail\"\r\n                    :tippy-tips=\"'脚本详情'\"\r\n                    @click=\"handleGoScriptDetail\">\r\n                    <Icon type=\"jump\" />\r\n                </div>\r\n            </div>\r\n        </jb-form-item>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n       import ScriptManageService from '@service/script-manage';\r\n    import PublicScriptManageService from '@service/public-script-manage';\r\n    import TaskStepModel from '@model/task/task-step';\r\n    import ComposeFormItem from '@components/compose-form-item';\r\n\r\n    export default {\r\n        components: {\r\n            ComposeFormItem,\r\n        },\r\n        props: {\r\n            // 脚本来源字段名\r\n            scriptSourceField: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            // 脚本id字段名\r\n            scriptIdField: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            // 脚本版本id字段名\r\n            scriptVersionIdField: {\r\n                type: String,\r\n            },\r\n            // 脚本内容字段名\r\n            contentField: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            languageField: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            // 脚本语言字段名\r\n            scriptStatusField: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            formData: {\r\n                type: Object,\r\n                default: () => ({}),\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                defaultScript: {},\r\n                scriptGroup: [],\r\n                publicScriptGroup: [],\r\n                sourceType: 'local',\r\n                referType: 2,\r\n            };\r\n        },\r\n        computed: {\r\n            /**\r\n             * @desc 使用脚本资源需要的权限\r\n             */\r\n            authView () {\r\n                return this.formData[this.scriptSourceField] === TaskStepModel.scriptStep.TYPE_SOURCE_BUSINESS\r\n                    ? 'script/view'\r\n                    : 'public_script/view';\r\n            },\r\n            /**\r\n             * @desc 脚本新建的权限\r\n             * @returns { String }\r\n             */\r\n            authCreate () {\r\n                return this.formData[this.scriptSourceField] === TaskStepModel.scriptStep.TYPE_SOURCE_BUSINESS\r\n                    ? 'script/create'\r\n                    : 'public_script/create';\r\n            },\r\n            /**\r\n             * @desc 脚本下拉列表显示格式\r\n             * @returns { String }\r\n             */\r\n            scriptGroupComponent () {\r\n                if (this.scriptListDisplay.length > 1) {\r\n                    return 'bk-option-group';\r\n                }\r\n                return 'div';\r\n            },\r\n            /**\r\n             * @desc 引用脚本类型\r\n             * @returns { Boolean }\r\n             */\r\n            isScriptRefer () {\r\n                return this.sourceType === 'refer';\r\n            },\r\n            /**\r\n             * @desc 脚本列表\r\n             * @returns { Array }\r\n             */\r\n            scriptListDisplay () {\r\n                const scriptSource = this.formData[this.scriptSourceField];\r\n                \r\n                if (scriptSource === TaskStepModel.scriptStep.TYPE_SOURCE_BUSINESS) {\r\n                    return this.scriptGroup;\r\n                }\r\n                if (scriptSource === TaskStepModel.scriptStep.TYPE_SOURCE_PUBLIC) {\r\n                    return this.publicScriptGroup;\r\n                }\r\n                return [];\r\n            },\r\n            /**\r\n             * @desc 按钮的文本\r\n             * @returns { String }\r\n             */\r\n            newBtnText () {\r\n                return this.formData[this.scriptSourceField] === TaskStepModel.scriptStep.TYPE_SOURCE_BUSINESS\r\n                    ? '新建业务脚本'\r\n                    : '新建公共脚本';\r\n            },\r\n            /**\r\n             * @desc 表单想验证规则\r\n             * @returns { Array }\r\n             *\r\n             * 引用类型的脚本时 scriptId 不能为空\r\n             */\r\n            rules () {\r\n                if (this.isScriptRefer) {\r\n                    return [{\r\n                        required: true,\r\n                        message: '请选择引用脚本',\r\n                        trigger: 'blur',\r\n                    }];\r\n                }\r\n                return [];\r\n            },\r\n        },\r\n        watch: {\r\n            formData: {\r\n                handler () {\r\n                    this.initScriptSource();\r\n                },\r\n                immediate: true,\r\n            },\r\n            'formData.scriptId' (value) {\r\n                if (value) {\r\n                    this.$refs.scriptId.clearValidator();\r\n                }\r\n            },\r\n        },\r\n        created () {\r\n            this.scriptListMemo = [];\r\n            this.publicScriptListMemo = [];\r\n            this.initScriptContent();\r\n            this.fetchScriptList();\r\n            this.fetchPublicScriptList();\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 获取业务脚本列表\r\n             */\r\n            fetchScriptList () {\r\n                ScriptManageService.getOnlineScriptList()\r\n                    .then((data) => {\r\n                        this.scriptGroup = [data];\r\n                        this.scriptListMemo = data;\r\n                        this.composeGroup();\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 获公共脚本列表\r\n             */\r\n            fetchPublicScriptList () {\r\n                PublicScriptManageService.getOnlineScriptList()\r\n                    .then((data) => {\r\n                        this.publicScriptGroup = [data];\r\n                        this.publicScriptListMemo = data;\r\n                        this.composeGroup();\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 获取指定的脚本版本数据\r\n             * @param {Object} params 脚本数据\r\n             */\r\n            fetchScriptVersionDetail (params) {\r\n                return ScriptManageService.versionDetail(params);\r\n            },\r\n            /**\r\n             * @desc 初始化脚本来源\r\n             */\r\n            initScriptSource () {\r\n                if (this.formData[this.scriptSourceField] === TaskStepModel.scriptStep.TYPE_SOURCE_LOCAL) {\r\n                    this.sourceType = 'local';\r\n                    return;\r\n                }\r\n                this.sourceType = 'refer';\r\n                // 如果是引用脚本，还需初始化引用类型\r\n                this.referType = this.formData[this.scriptSourceField];\r\n            },\r\n            /**\r\n             * @desc 初始化脚本内容\r\n             */\r\n            initScriptContent () {\r\n                // 有默认的脚本版本，获取对应版本的脚本内容\r\n                if (!this.formData[this.scriptIdField] && !this.formData[this.scriptVersionIdField]) {\r\n                    return;\r\n                }\r\n                this.$emit('on-reset', {\r\n                    isScriptContentLoading: true,\r\n                });\r\n                this.fetchScriptVersionDetail({\r\n                    id: this.formData[this.scriptVersionIdField],\r\n                }).then((script) => {\r\n                    const { content, publicScript } = script;\r\n                    const scriptSource = publicScript\r\n                        ? TaskStepModel.scriptStep.TYPE_SOURCE_PUBLIC\r\n                        : TaskStepModel.scriptStep.TYPE_SOURCE_BUSINESS;\r\n                    this.defaultScript = script;\r\n                    this.composeGroup();\r\n                    this.$emit('on-reset', {\r\n                        [this.contentField]: content,\r\n                        [this.scriptSourceField]: scriptSource,\r\n                    });\r\n                })\r\n                    .finally(() => {\r\n                        this.$emit('on-reset', {\r\n                            isScriptContentLoading: false,\r\n                        });\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 脚本版本有更新时需要将最新的脚本版本组合到脚本列表中\r\n             */\r\n            composeGroup () {\r\n                if (!this.defaultScript.id) {\r\n                    return;\r\n                }\r\n                const { publicScript } = this.defaultScript;\r\n                const targetList = publicScript\r\n                    ? _.cloneDeep(this.publicScriptListMemo)\r\n                    : _.cloneDeep(this.scriptListMemo);\r\n                if (targetList.length < 1) {\r\n                    return;\r\n                }\r\n                if (!this.formData[this.scriptStatusField]) {\r\n                    this.scriptGroup = Object.freeze([this.scriptListMemo]);\r\n                    this.publicScriptGroup = Object.freeze([this.publicScriptListMemo]);\r\n                    return;\r\n                }\r\n                const currentScriptList = [];\r\n                const oldVersionScript = {\r\n                    ...this.defaultScript,\r\n                    name: `${this.defaultScript.name}（${'当前版本'}）`,\r\n                };\r\n                currentScriptList.push(oldVersionScript);\r\n                const [newVersionScript] = _.remove(targetList, item => item.id === oldVersionScript.id);\r\n                if (newVersionScript) {\r\n                    newVersionScript.name = `${newVersionScript.name}（${'新版本'}）`;\r\n                    currentScriptList.unshift(newVersionScript);\r\n                }\r\n                \r\n                if (publicScript) {\r\n                    this.scriptGroup = Object.freeze([this.scriptListMemo]);\r\n                    this.publicScriptGroup = Object.freeze([currentScriptList, targetList]);\r\n                } else {\r\n                    this.scriptGroup = Object.freeze([currentScriptList, targetList]);\r\n                    this.publicScriptGroup = Object.freeze([this.publicScriptListMemo]);\r\n                }\r\n            },\r\n            /**\r\n             * @desc 更新脚本来源\r\n             * @param {String} source 脚本来源\r\n             */\r\n            handleScriptSourceChange (source) {\r\n                // 脚本来源改变重置脚本相关的信息\r\n                const scriptSource = source === 'local'\r\n                    ? TaskStepModel.scriptStep.TYPE_SOURCE_LOCAL\r\n                    : TaskStepModel.scriptStep.TYPE_SOURCE_BUSINESS;\r\n                this.$emit('on-reset', {\r\n                    [this.scriptIdField]: '',\r\n                    [this.scriptVersionIdField]: '',\r\n                    [this.scriptSourceField]: scriptSource,\r\n                });\r\n            },\r\n            /**\r\n             * @desc 更新脚本引用来源类型\r\n             * @param {String} scriptSource 脚本引用来源类型\r\n             */\r\n            handleReferScriptTypeChange (scriptSource) {\r\n                this.$emit('on-reset', {\r\n                    [this.scriptSourceField]: scriptSource,\r\n                    [this.scriptIdField]: '',\r\n                    [this.scriptVersionIdField]: '',\r\n                });\r\n            },\r\n            /**\r\n             * @desc 更新脚本引用版本\r\n             * @param {String} scriptVersionId 脚本引用来源类型\r\n             */\r\n            handleScriptVersionIdChange (scriptVersionId) {\r\n                if (!scriptVersionId) {\r\n                    return;\r\n                }\r\n                this.$emit('on-reset', {\r\n                    isScriptContentLoading: true,\r\n                });\r\n                this.fetchScriptVersionDetail({\r\n                    id: scriptVersionId,\r\n                }).then(({ id, type, content }) => {\r\n                    this.$emit('on-reset', {\r\n                        [this.scriptIdField]: id,\r\n                        [this.contentField]: content,\r\n                        [this.languageField]: type,\r\n                        [this.scriptVersionIdField]: scriptVersionId,\r\n                        [this.scriptStatusField]: 0,\r\n                        isScriptContentLoading: false,\r\n                    });\r\n                })\r\n                    .finally(() => {\r\n                        this.$emit('on-reset', {\r\n                            isScriptContentLoading: false,\r\n                        });\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 跳转到选择的脚本版本详情\r\n             */\r\n            handleGoScriptDetail () {\r\n                const routerName = this.formData[this.scriptSourceField] === TaskStepModel.scriptStep.TYPE_SOURCE_PUBLIC\r\n                    ? 'publicScriptVersion'\r\n                    : 'scriptVersion';\r\n\r\n                const router = this.$router.resolve({\r\n                    name: routerName,\r\n                    params: {\r\n                        id: this.formData[this.scriptIdField],\r\n                    },\r\n                    query: {\r\n                        scriptVersionId: this.formData[this.scriptVersionIdField],\r\n                    },\r\n                });\r\n                window.open(router.href);\r\n            },\r\n            /**\r\n             * @desc 跳转新建脚本页面\r\n             */\r\n            handleGoCreate () {\r\n                const routerName = this.formData[this.scriptSourceField] === TaskStepModel.scriptStep.TYPE_SOURCE_PUBLIC\r\n                    ? 'createPublicScript'\r\n                    : 'createScript';\r\n\r\n                const { href } = this.$router.resolve({\r\n                    name: routerName,\r\n                });\r\n                \r\n                window.open(href);\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .script-source-of-template {\r\n        .script-source-item {\r\n            .bk-radio-button-text {\r\n                width: 120px;\r\n                text-align: center;\r\n            }\r\n        }\r\n\r\n        .update-flag {\r\n            margin-left: 4px;\r\n            color: #ff5656;\r\n        }\r\n\r\n        .refer-script-item {\r\n            position: relative;\r\n            display: flex;\r\n            align-items: center;\r\n\r\n            .refer-script-detail {\r\n                display: flex;\r\n                align-items: center;\r\n                justify-content: center;\r\n                margin-left: 4px;\r\n                font-size: 16px;\r\n                color: #3a84ff;\r\n                cursor: pointer;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div\r\n        class=\"jb-user-selector\"\r\n        :class=\"{ disabled: isLoading }\"\r\n        v-bkloading=\"{ isLoading }\">\r\n        <user-selector\r\n            v-if=\"!isLoading\"\r\n            v-bind=\"$attrs\"\r\n            :value=\"defaultValue\"\r\n            :disabled-users=\"disabledUsers\"\r\n            :list-scroll-height=\"300\"\r\n            :history-key=\"historyKey\"\r\n            :default-alternate=\"formatDefaultAlternate\"\r\n            :fuzzy-search-method=\"handleFuzzySearch\"\r\n            :render-tag=\"renderTag\"\r\n            :render-list=\"renterMerberItem\"\r\n            @change=\"handleChange\" />\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n       import NotifyService from '@service/notify';\r\n    import { encodeRegexp } from '@utils/assist';\r\n    import UserSelector from '@blueking/user-selector';\r\n\r\n    const CACHE_KEY = 'job-user-selector-cache';\r\n\r\n    export default {\r\n        name: 'JobUserSelector',\r\n        components: {\r\n            UserSelector,\r\n        },\r\n        props: {\r\n            // 已选 user\r\n            user: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n            // 已选 role\r\n            role: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n            // 筛选时每页条数\r\n            limit: {\r\n                type: Number,\r\n                default: 10,\r\n            },\r\n            // 支持选择角色\r\n            showRole: {\r\n                type: Boolean,\r\n                default: true,\r\n            },\r\n            // 在下拉面板中显示禁用用户\r\n            showDisableUser: {\r\n                type: Boolean,\r\n                default: true,\r\n            },\r\n            // 不在下拉列表中显示设置的 user\r\n            filterList: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: false,\r\n                checkedUserNums: 0,\r\n                roleList: [{},{},{}],\r\n                defaultValue: [],\r\n                disabledUsers: [],\r\n            };\r\n        },\r\n        computed: {\r\n            realLimit () {\r\n                return this.limit + this.checkedUserNums;\r\n            },\r\n        },\r\n        watch: {\r\n            user: {\r\n                handler () {\r\n                    let valueList = [...this.user];\r\n                    if (this.showRole) {\r\n                        valueList = [...this.role].concat(valueList);\r\n                    }\r\n                    this.defaultValue = valueList.filter(name => !this.filterList.includes(name));\r\n                },\r\n                immediate: true,\r\n            },\r\n            role: {\r\n                handler () {\r\n                    const valueList = [\r\n                        ...this.role,\r\n                        ...this.user,\r\n                    ];\r\n                    this.defaultValue = valueList.filter(name => !this.filterList.includes(name));\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        created () {\r\n            this.historyKey = CACHE_KEY;\r\n            this.roleCacheMap = {};\r\n            this.fetchRoleList();\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 获取角色列表\r\n             *\r\n             * 如果不需要显示角色则不用请求接口\r\n             */\r\n            fetchRoleList () {\r\n                if (!this.showRole) {\r\n                    return;\r\n                }\r\n                this.isLoading = true;\r\n                NotifyService.fetchRoleList()\r\n                    .then((data) => {\r\n                        const roleList = [];\r\n                        const roleCacheMap = {};\r\n                        data.forEach((role) => {\r\n                            if (this.filterList.includes(role.code)) {\r\n                                return;\r\n                            }\r\n                            roleList.push({\r\n                                display_name: role.name,\r\n                                username: role.code,\r\n                                type: 'role',\r\n                            });\r\n                            roleCacheMap[role.code] = role.name;\r\n                        });\r\n                        // 角色列表\r\n                        this.roleList = Object.freeze(roleList);\r\n                        this.roleCacheMap = roleCacheMap;\r\n                    })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 检测用户是否被过滤掉\r\n             * @param { String } username\r\n             * @returns { Boolean }\r\n             */\r\n            checkUsernameFilter (username) {\r\n                return this.filterList.includes(username);\r\n            },\r\n            /**\r\n             * @desc 输入框获得焦点时面板数据\r\n             *\r\n             * 显示角色列表，显示用户最近输入缓存\r\n             */\r\n            formatDefaultAlternate () {\r\n                const stack = [];\r\n                \r\n                if (this.roleList.length > 0) {\r\n                    stack.push({\r\n                        display_name: '角色',\r\n                        username: 'role',\r\n                        children: _.cloneDeep(this.roleList),\r\n                    });\r\n                }\r\n\r\n                // 最近选择的数据\r\n                if (localStorage.getItem(this.historyKey)) {\r\n                    const historyList = JSON.parse(localStorage.getItem(this.historyKey)) || [];\r\n                    // 只显示最近输入的用户\r\n                    const children = historyList.reduce((result, item) => {\r\n                        if (item.type === 'user'\r\n                            && !this.checkUsernameFilter(item.username)) {\r\n                            result.push(item);\r\n                        }\r\n                        return result;\r\n                    }, []);\r\n                    stack.push({\r\n                        display_name: '最近输入',\r\n                        username: 'history',\r\n                        children,\r\n                    });\r\n                }\r\n                return stack;\r\n            },\r\n            /**\r\n             * @desc 模糊搜索\r\n             * @param { String } keyword 用户搜索关键字\r\n             */\r\n            handleFuzzySearch (keyword) {\r\n                const params = {\r\n                    limit: this.realLimit,\r\n                    prefixStr: keyword,\r\n                };\r\n                const formatData = (target) => {\r\n                    const stack = [];\r\n                    // 匹配角色\r\n                    if (this.showRole) {\r\n                        const filterReg = new RegExp(encodeRegexp(keyword));\r\n                        const filterRoleList = this.roleList.filter(role => filterReg.test(role.display_name)\r\n                            || filterReg.test(role.username));\r\n                        if (filterRoleList.length > 0) {\r\n                            stack.push({\r\n                                display_name: '角色',\r\n                                username: 'role',\r\n                                children: filterRoleList,\r\n                            });\r\n                        }\r\n                    }\r\n                    // 用户接口数据为空\r\n                    if (target.length < 1) {\r\n                        return stack;\r\n                    }\r\n                    \r\n                    this.disabledUsers = [];\r\n                    const userList = [];\r\n                \r\n                    target.forEach((curUser) => {\r\n                        // 被过滤掉的用户\r\n                        if (this.filterList.includes(curUser.englishName)) {\r\n                            return;\r\n                        }\r\n                        // 黑名单用户\r\n                        if (!this.showDisableUser && !curUser.enable) {\r\n                            return;\r\n                        }\r\n                        if (!curUser.enable) {\r\n                            this.disabledUsers.push(curUser.englishName);\r\n                        }\r\n                        userList.push({\r\n                            display_name: curUser.englishName,\r\n                            username: curUser.englishName,\r\n                            type: 'user',\r\n                        });\r\n                    });\r\n                \r\n                    stack.push({\r\n                        display_name: '用户',\r\n                        username: 'user',\r\n                        children: Object.freeze(userList),\r\n                    });\r\n                    return stack;\r\n                };\r\n                return NotifyService.fetchAllUsers(params)\r\n                    .then(data => ({\r\n                        next: false,\r\n                        results: formatData(data, keyword),\r\n                    }));\r\n            },\r\n            renderTag (h, node) {\r\n                let { username } = node;\r\n                let iconType = 'user';\r\n                // 角色\r\n                if (this.roleCacheMap[node.username]) {\r\n                    username = this.roleCacheMap[node.username];\r\n                    iconType = 'user-group-gray';\r\n                }\r\n                \r\n                return (\r\n                    <div class='jb-user-seletor-member-tag' key={node.index} title={username}>\r\n                        <icon type={iconType} class='tag-icon' />\r\n                        <span class='text'>{username}</span>\r\n                    </div>\r\n                );\r\n            },\r\n            renterMerberItem (h, payload) {\r\n                const curData = payload.user;\r\n                \r\n                const renderLogoHtml = () => {\r\n                    if (curData.logo) {\r\n                        return (\r\n                            <img class='img' src={curData.logo} />\r\n                        );\r\n                    }\r\n                    return (\r\n                        <icon type={curData.type === 'role' ? 'user-group-gray' : 'user'} class='item-icon' />\r\n                    );\r\n                };\r\n\r\n                const isDisabled = payload.disabled;\r\n                const isEnLang = 'zh-CN' === 'en-US';\r\n\r\n                const renderForbidHtml = () => {\r\n                    if (isDisabled) {\r\n                        return (\r\n                            <icon type={isEnLang ? 'forbid-en' : 'forbid'} class='forbid-icon' svg />\r\n                        );\r\n                    }\r\n                    return '';\r\n                };\r\n                \r\n                return (\r\n                    <div\r\n                        class={{\r\n                            'jb-user-selector-member-item': true,\r\n                            'is-disabled': isDisabled,\r\n                        }}\r\n                        title={curData.display_name}>\r\n                        {renderLogoHtml()}\r\n                        <span class='text'>{curData.display_name}</span>\r\n                        {renderForbidHtml()}\r\n                    </div>\r\n                );\r\n            },\r\n            handleChange (payload) {\r\n                const role = [];\r\n                const user = [];\r\n                payload.forEach((item) => {\r\n                    if (this.roleCacheMap[item]) {\r\n                        role.push(item);\r\n                    } else {\r\n                        user.push(item);\r\n                    }\r\n                });\r\n                this.checkedUserNums = user.length;\r\n                this.$emit('on-change', user, role);\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .jb-user-selector {\r\n        width: 100%;\r\n\r\n        &.disabled {\r\n            height: 32px;\r\n        }\r\n\r\n        .user-selector {\r\n            width: 100%;\r\n        }\r\n    }\r\n\r\n    .jb-user-seletor-member-tag {\r\n        padding-right: 2px;\r\n\r\n        .tag-icon {\r\n            font-size: 16px;\r\n            color: #979ba5;\r\n        }\r\n\r\n        .text {\r\n            display: inline-block;\r\n            max-width: 150px;\r\n            margin-left: 4px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n            white-space: nowrap;\r\n            vertical-align: top;\r\n        }\r\n    }\r\n\r\n    .jb-user-selector-member-item {\r\n        position: relative;\r\n        display: flex;\r\n        padding-left: 10px;\r\n        align-items: center;\r\n\r\n        &.is-disabled {\r\n            cursor: not-allowed;\r\n            user-select: none;\r\n\r\n            .text,\r\n            .item-icon {\r\n                color: #c4c6cc;\r\n            }\r\n        }\r\n\r\n        .img {\r\n            width: 20px;\r\n            border-radius: 50%;\r\n        }\r\n\r\n        .item-icon {\r\n            font-size: 20px;\r\n            color: #979ba5;\r\n        }\r\n\r\n        .text {\r\n            display: inline-block;\r\n            max-width: 150px;\r\n            margin-left: 5px;\r\n            overflow: hidden;\r\n            color: #63656e;\r\n            text-overflow: ellipsis;\r\n            white-space: nowrap;\r\n            vertical-align: top;\r\n        }\r\n\r\n        .forbid-icon {\r\n            position: absolute;\r\n            right: 0;\r\n            margin-left: 4px;\r\n            font-size: 30px;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"global-variable-detail\" :class=\"classes\">\r\n        <div class=\"variable-name\">\r\n            <span>{{ data.name }}：</span>\r\n        </div>\r\n        <div class=\"variable-value\">\r\n            <component\r\n                ref=\"value\"\r\n                :is=\"typeCom\"\r\n                :data=\"data\"\r\n                v-bind=\"$attrs\"\r\n                v-on=\"$listeners\" />\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import TypeText from './text';\r\n    import TypeHost from './host';\r\n\r\n    export default {\r\n        props: {\r\n            type: {\r\n                type: Number,\r\n                required: true,\r\n            },\r\n            valueWidth: {\r\n                type: String,\r\n                default: '500px',\r\n            },\r\n            data: {\r\n                type: Object,\r\n                required: true,\r\n            },\r\n            layout: {\r\n                type: String,\r\n                default: 'horizontal', // 水平：horizontal；垂直：vertical\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isError: false,\r\n                isEmpty: false,\r\n            };\r\n        },\r\n        computed: {\r\n            typeCom () {\r\n                const comMap = {\r\n                    1: TypeText,\r\n                    2: TypeText,\r\n                    3: TypeHost,\r\n                    4: TypeText,\r\n                    5: TypeText,\r\n                    6: TypeText,\r\n                };\r\n                if (!Object.prototype.hasOwnProperty.call(comMap, this.type)) {\r\n                    return 'div';\r\n                }\r\n                \r\n                return comMap[this.type];\r\n            },\r\n            classes () {\r\n                const classes = {};\r\n                if (this.isEmpty) {\r\n                    return classes;\r\n                }\r\n                if (this.layout === 'vertical') {\r\n                    classes.vertical = true;\r\n                }\r\n                return classes;\r\n            },\r\n        },\r\n        mounted () {\r\n            const unWatch = this.$watch(() => this.$refs.value.isEmpty, (value) => {\r\n                this.isEmpty = Boolean(value);\r\n            }, {\r\n                immediate: true,\r\n            });\r\n            this.$once('hook:beforeDestroy', () => {\r\n                unWatch();\r\n            });\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .global-variable-detail {\r\n        display: flex;\r\n        flex: 1;\r\n        font-size: 14px;\r\n        line-height: 36px;\r\n\r\n        &.vertical {\r\n            flex-direction: column;\r\n        }\r\n\r\n        .variable-name {\r\n            padding-right: 2px;\r\n            color: #b2b5bd;\r\n            text-align: right;\r\n            white-space: normal;\r\n            box-sizing: content-box;\r\n        }\r\n\r\n        .variable-value {\r\n            flex: 1 0;\r\n            color: #63656e;\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template functional>\r\n    <div class=\"task-exection-status-bar\">\r\n        <div v-if=\"props.data.name\" class=\"title\">\r\n            （<div class=\"title-text\">{{ props.data.name }}</div>）\r\n        </div>\r\n        <div class=\"status-box\">\r\n            <div class=\"status\">\r\n                <span>{{ '状态'}}：</span>\r\n                <span class=\"status-text\">{{ props.data.statusDesc }}</span>\r\n            </div>\r\n            <div class=\"time\">\r\n                <span>{{ '总耗时' }}：</span>\r\n                <span\r\n                    class=\"value\"\r\n                    :style=\"{\r\n                        width: `${((props.data.totalTimeText && props.data.totalTimeText.length) || 1) * 9}px`,\r\n                    }\">\r\n                    {{ props.data.totalTimeText }}\r\n                </span>\r\n            </div>\r\n            <div class=\"action\">\r\n                <slot />\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n<style lang='postcss'>\r\n    .task-exection-status-bar {\r\n        .step-instance-action {\r\n            border: 1px solid #c4c6cc;\r\n\r\n            &:hover {\r\n                border-color: #ea3636;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"exection-status-bar\" :class=\"[data.displayStyle]\">\r\n        <component :is=\"themeCom\" :data=\"data\" :title-max-width=\"titleMaxWidth\">\r\n            <slot />\r\n        </component>\r\n    </div>\r\n</template>\r\n<script>\r\n    import Task from './task';\r\n    import Step from './step';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            Task,\r\n            Step,\r\n        },\r\n        props: {\r\n            type: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            data: {\r\n                type: Object,\r\n                default: () => ({}),\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                titleMaxWidth: 100,\r\n                offsetRight: 'unset',\r\n                initialStatusWidth: 0,\r\n            };\r\n        },\r\n        computed: {\r\n            themeCom () {\r\n                const comMap = {\r\n                    task: Task,\r\n                    step: Step,\r\n                };\r\n                if (!Object.prototype.hasOwnProperty.call(comMap, this.type)) {\r\n                    return 'div';\r\n                }\r\n                return comMap[this.type];\r\n            },\r\n        },\r\n        mounted () {\r\n            const $container = document.querySelector('#sitePageTitle');\r\n            const containerWidth = $container.getBoundingClientRect().width;\r\n            const $target = document.querySelector('#siteHeaderStatusBar');\r\n\r\n            $target.appendChild(this.$el);\r\n            const statusWidth = $target.getBoundingClientRect().width;\r\n            if (!this.initialStatusWidth) {\r\n                this.initialStatusWidth = statusWidth;\r\n            }\r\n            \r\n            const titleMaxWidth = containerWidth - statusWidth - 40;\r\n            this.titleMaxWidth = titleMaxWidth < 100 ? 100 : titleMaxWidth;\r\n\r\n            this.$once('hook:beforeDestroy', () => {\r\n                if (!this.$el) {\r\n                    return;\r\n                }\r\n                try {\r\n                    $target.removeChild(this.$el);\r\n                } catch {}\r\n            });\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .exection-status-bar {\r\n        flex: 1;\r\n        font-size: 14px;\r\n        color: #63656e;\r\n        white-space: nowrap;\r\n\r\n        &.fail,\r\n        &.confirm-forced {\r\n            .status-text {\r\n                color: #ea3636;\r\n            }\r\n        }\r\n\r\n        &.loading {\r\n            .status-text {\r\n                color: #3a84ff;\r\n            }\r\n        }\r\n\r\n        &.ingore {\r\n            .status-text {\r\n                color: #abd88a;\r\n            }\r\n        }\r\n\r\n        &.success,\r\n        &.forced {\r\n            .status-text {\r\n                color: #2dcb8d;\r\n            }\r\n        }\r\n\r\n        &.confirm {\r\n            .status-text {\r\n                color: #ff9c01;\r\n            }\r\n        }\r\n\r\n        &.disable {\r\n            .status-text {\r\n                color: #c4c6cc;\r\n            }\r\n        }\r\n\r\n        .title {\r\n            display: flex;\r\n            align-items: center;\r\n            margin-right: 54px;\r\n            font-size: 12px;\r\n\r\n            .title-text {\r\n                height: 21px;\r\n            }\r\n        }\r\n\r\n        .status-box {\r\n            position: absolute;\r\n            top: 0;\r\n            bottom: 0;\r\n            left: 50%;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            width: 500px;\r\n            transform: translateX(-50%);\r\n        }\r\n\r\n        .status {\r\n            margin-right: 30px;\r\n        }\r\n\r\n        .time {\r\n            min-width: 120px;\r\n            padding-right: 10px;\r\n\r\n            .value {\r\n                display: inline-block;\r\n                color: #313238;\r\n            }\r\n        }\r\n\r\n        .step-instance-action {\r\n            margin-right: 0;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <jb-popover-confirm\r\n        class=\"step-action-confirm\"\r\n        :title=\"confirmInfo.title\"\r\n        :content=\"confirmInfo.desc\"\r\n        :confirm-handler=\"handleConfirm\"\r\n        @show=\"handleConfirmShow\"\r\n        @cancel=\"handleConfirmCancel\">\r\n        <component\r\n            :is=\"actionCom\"\r\n            class=\"step-instance-action\"\r\n            :class=\"displayStyle\" />\r\n    </jb-popover-confirm>\r\n</template>\r\n<script>\r\n       import ActionConfirm from './confirm';\r\n    import ActionConfirmForced from './confirm-forced';\r\n    import ActionConfirmRetry from './confirm-retry';\r\n    import ActionAllRetry from './all-retry';\r\n    import ActionFailIpRetry from './fail-ip-retry';\r\n    import ActionSkip from './skip';\r\n    import ActionForced from './forced';\r\n    import ActionForcedRetry from './forced-retry';\r\n    import ActionForcedSkip from './forced-skip';\r\n    import ActionNext from './next';\r\n\r\n    const ACTION_FAIL_IP_RETRY = 2;\r\n    const ACTION_SKIP = 3;\r\n    const ACTION_CONFIRM = 6;\r\n    const ACTION_ALL_RETRY = 8;\r\n    const ACTION_CONFIRM_FORCED = 9;\r\n    const ACTION_CONFIRM_RETRY = 10;\r\n    const ACTION_NEXT = 11;\r\n    const ACTION_FORCED_SKIP = 12;\r\n\r\n    const actionMap = {\r\n        confirm: {\r\n            operationCode: ACTION_CONFIRM,\r\n            title: '确定继续执行？',\r\n            desc: '将继续执行后面的步骤',\r\n        },\r\n        confirmForced: {\r\n            operationCode: ACTION_CONFIRM_FORCED,\r\n            title: '确定终止流程？',\r\n            desc: '人工确认步骤终止后，需「重新发起确认」才可恢复',\r\n        },\r\n        confirmRetry: {\r\n            operationCode: ACTION_CONFIRM_RETRY,\r\n            title: '确定重新发起确认？',\r\n            desc: '将会再次发送消息通知相关的确认人',\r\n        },\r\n        allRetry: {\r\n            operationCode: ACTION_ALL_RETRY,\r\n            title: '确定全部重试？',\r\n            desc: '该步骤的所有IP 都将重新执行',\r\n        },\r\n        failIpRetry: {\r\n            operationCode: ACTION_FAIL_IP_RETRY,\r\n            title: '确定失败IP重试？',\r\n            desc: '仅作用于本次执行失败的 IP',\r\n        },\r\n        skip: {\r\n            operationCode: ACTION_SKIP,\r\n            title: '确定进入下一步？',\r\n            desc: '跳过当前步骤进入下一步',\r\n        },\r\n        forced: {\r\n            operationCode: '',\r\n            title: '确定终止执行任务？',\r\n            desc: '终止动作仅对当前还未执行完成的IP有效',\r\n        },\r\n        forcedRetry: {\r\n            operationCode: ACTION_ALL_RETRY,\r\n            title: '确定重试并继续？',\r\n            desc: '该步骤的所有IP 都将重新执行',\r\n        },\r\n        forcedSkip: {\r\n            operationCode: ACTION_FORCED_SKIP,\r\n            title: '确定跳过并进入下一步？',\r\n            desc: '将不再等待强制终止动作的结果，直接进入下一步',\r\n        },\r\n        next: {\r\n            operationCode: ACTION_NEXT,\r\n            title: '确定进入下一步？',\r\n            desc: '跳过当前步骤进入下一步',\r\n        },\r\n    };\r\n\r\n    export default {\r\n        props: {\r\n            name: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            displayStyle: {\r\n                type: String,\r\n                default: 'task',\r\n            },\r\n            confirmHandler: {\r\n                type: Function,\r\n                default: () => {},\r\n            },\r\n        },\r\n        computed: {\r\n            actionCom () {\r\n                const comMap = {\r\n                    confirm: ActionConfirm,\r\n                    confirmForced: ActionConfirmForced,\r\n                    confirmRetry: ActionConfirmRetry,\r\n                    allRetry: ActionAllRetry,\r\n                    failIpRetry: ActionFailIpRetry,\r\n                    skip: ActionSkip,\r\n                    forced: ActionForced,\r\n                    forcedRetry: ActionForcedRetry,\r\n                    forcedSkip: ActionForcedSkip,\r\n                    next: ActionNext,\r\n                };\r\n                return comMap[this.name];\r\n            },\r\n            confirmInfo () {\r\n                return actionMap[this.name];\r\n            },\r\n        },\r\n        methods: {\r\n            handleConfirm () {\r\n                return this.confirmHandler(this.confirmInfo.operationCode);\r\n            },\r\n            handleConfirmShow () {\r\n                this.$emit('on-show');\r\n            },\r\n            handleConfirmCancel () {\r\n                this.$emit('on-cancel');\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .step-action-confirm {\r\n        display: inline-flex;\r\n    }\r\n\r\n    .step-instance-action {\r\n        display: flex;\r\n        height: 32px;\r\n        padding: 0 12px 0 8px;\r\n        margin-right: 10px;\r\n        font-size: 14px;\r\n        color: #63656e;\r\n        cursor: pointer;\r\n        background: #fff;\r\n        border-radius: 16px;\r\n        align-items: center;\r\n        justify-content: center;\r\n\r\n        &:hover {\r\n            i {\r\n                color: currentColor;\r\n            }\r\n        }\r\n\r\n        &.task-detail {\r\n            box-shadow: 0 2px 6px #ddd;\r\n        }\r\n\r\n        &.step-detail {\r\n            border: 1px solid #c4c6cc;\r\n        }\r\n\r\n        &.stop,\r\n        &.confirm-forced {\r\n            &:hover {\r\n                color: #ea3636;\r\n                border-color: #c4c6cc;\r\n            }\r\n        }\r\n\r\n        &.retry,\r\n        &.skip,\r\n        &.next,\r\n        &.confirm {\r\n            &:hover {\r\n                color: #3a84ff;\r\n                border-color: #3a84ff;\r\n            }\r\n        }\r\n\r\n        i {\r\n            margin-right: 6px;\r\n            font-size: 16px;\r\n            color: #979ba5;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"execute-global-variable\" v-bkloading=\"{ isLoading }\">\r\n        <template v-if=\"!isLoading\">\r\n            <global-variable-layout v-if=\"taskVariables.length > 0\">\r\n                <global-variable\r\n                    v-for=\"variable in taskVariables\"\r\n                    ref=\"variable\"\r\n                    :type=\"variable.type\"\r\n                    :key=\"variable.id\"\r\n                    :layout=\"variable.type === 3 ? 'vertical' : ''\"\r\n                    :data=\"variable\" />\r\n            </global-variable-layout>\r\n            <empty v-else class=\"empty\" />\r\n        </template>\r\n    </div>\r\n</template>\r\n<script>\r\n    import TaskExecuteService from '@service/task-execute';\r\n    import TaskHostNodeModel from '@model/task-host-node';\r\n    import GlobalVariableLayout from '@components/global-variable/layout';\r\n    import GlobalVariable from '@components/global-variable/view';\r\n    import Empty from '@components/empty';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            GlobalVariableLayout,\r\n            GlobalVariable,\r\n            Empty,\r\n        },\r\n        props: {\r\n            id: {\r\n                type: [Number, String],\r\n                default: 0,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: false,\r\n                taskVariables: [{}, {}, {}],\r\n            };\r\n        },\r\n        computed: {\r\n            isShowVar () {\r\n                return this.taskVariables.length > 0;\r\n            },\r\n        },\r\n        watch: {\r\n            id: {\r\n                handler  (id) {\r\n                    if (!id) {\r\n                        return;\r\n                    }\r\n                    this.fetchTaskVariables(id);\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        methods: {\r\n            fetchTaskVariables (id) {\r\n                this.$request(TaskExecuteService.fetchStepInstanceParam({\r\n                    id,\r\n                }), () => {\r\n                    this.isLoading = true;\r\n                }).then((data) => {\r\n                    this.taskVariables = Object.freeze(data.map(({ id, name, type, value, targetValue }) => ({\r\n                        id,\r\n                        name,\r\n                        type,\r\n                        defaultValue: value,\r\n                        defaultTargetValue: new TaskHostNodeModel(targetValue || {}),\r\n                    })));\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    .execute-global-variable {\r\n        min-height: calc(100vh - 120px);\r\n    }\r\n\r\n    .empty {\r\n        padding-top: 80px;\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"job-execute-record\" v-bkloading=\"{ isLoading }\">\r\n        <template v-if=\"!isLoading\">\r\n            <bk-table v-if=\"data.length > 0\" :data=\"data\">\r\n                <bk-table-column :label=\"'时间'\" prop=\"createTime\" width=\"180\" />\r\n                <bk-table-column :label=\"'操作人'\" prop=\"operator\" width=\"120\" />\r\n                <bk-table-column :label=\"'操作'\" prop=\"operationName\" width=\"120\" />\r\n                <bk-table-column\r\n                    :label=\"'步骤'\"\r\n                    prop=\"stepName\"\r\n                    show-overflow-tooltip\r\n                    class-name=\"step-name\" />\r\n                <bk-table-column :label=\"'详情'\">\r\n                    <template slot-scope=\"{ row }\">\r\n                        <bk-button\r\n                            v-if=\"row.detailEnable\"\r\n                            theme=\"primary\"\r\n                            text\r\n                            @click=\"handleView(row)\">{{ row.detail }}</bk-button>\r\n                        <div v-else>{{ row.detail }}</div>\r\n                    </template>\r\n                </bk-table-column>\r\n            </bk-table>\r\n            <empty v-else class=\"empty\" />\r\n        </template>\r\n    </div>\r\n</template>\r\n<script>\r\n       import TaskExecuteService from '@service/task-execute';\r\n    import Empty from '@components/empty';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            Empty,\r\n        },\r\n        props: {\r\n            id: {\r\n                type: [Number, String],\r\n                default: 0,\r\n            },\r\n            from: {\r\n                type: String,\r\n                default: '',\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: true,\r\n                data: [{},{},{}],\r\n            };\r\n        },\r\n        created () {\r\n            this.fetchTaskOperationLog();\r\n        },\r\n        methods: {\r\n            fetchTaskOperationLog (id) {\r\n                this.$request(TaskExecuteService.fetchTaskOperationLog({\r\n                    id: this.id,\r\n                }), () => {\r\n                    this.isLoading = true;\r\n                }).then((data) => {\r\n                    this.data = data;\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            handleView (payload) {\r\n                const routerInfo = {\r\n                    name: 'historyStep',\r\n                    params: {\r\n                        taskInstanceId: payload.taskInstanceId,\r\n                    },\r\n                    query: {\r\n                        stepInstanceId: payload.stepInstanceId,\r\n                        retryCount: payload.retry,\r\n                        from: this.from || this.$route.query.from,\r\n                    },\r\n                };\r\n                // 跳转路由没变\r\n                const { stepInstanceId, retryCount = 0 } = this.$route.query;\r\n                if (parseInt(stepInstanceId, 10) === payload.stepInstanceId\r\n                    && parseInt(retryCount, 10) === payload.retry) {\r\n                    this.messageWarn('正在查看');\r\n                    return;\r\n                }\r\n                \r\n                this.$emit('on-change');\r\n                this.$router.push(routerInfo);\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .job-execute-record {\r\n        min-height: calc(100vh - 120px);\r\n\r\n        .empty {\r\n            padding-top: 80px;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"render-file-path-box\">\r\n        <bk-popover placement=\"left\">\r\n            <div v-for=\"(item, fileIndex) in renderData\" :key=\"fileIndex\" class=\"path-text-row\">\r\n                {{ item }}\r\n            </div>\r\n            <div v-if=\"hasMore\">...</div>\r\n            <ul slot=\"content\" class=\"source-file-tips-box\">\r\n                <li v-for=\"(item, fileIndex) in data\" :key=\"fileIndex\" class=\"row\">\r\n                    <span class=\"dot\" />\r\n                    {{ item }}\r\n                </li>\r\n            </ul>\r\n        </bk-popover>\r\n    </div>\r\n</template>\r\n<script>\r\n    const DISPLAY_ROW_NUMS = 3;\r\n\r\n    export default {\r\n        name: '',\r\n        props: {\r\n            data: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n        },\r\n        data () {\r\n            return {};\r\n        },\r\n        computed: {\r\n            renderData () {\r\n                return this.data.slice(0, DISPLAY_ROW_NUMS);\r\n            },\r\n            hasMore () {\r\n                return this.data.length > DISPLAY_ROW_NUMS;\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    @import \"@/css/mixins/scroll\";\r\n\r\n    .render-file-path-box {\r\n        padding: 6px 10px;\r\n        margin-left: -10px;\r\n\r\n        &:hover {\r\n            background: #f0f1f5;\r\n        }\r\n    }\r\n\r\n    .source-file-tips-box {\r\n        max-width: 300px;\r\n        max-height: 280px;\r\n        min-width: 60px;\r\n        overflow-y: auto;\r\n\r\n        @mixin scroller;\r\n\r\n        .row {\r\n            word-break: break-all;\r\n        }\r\n\r\n        .dot {\r\n            display: inline-block;\r\n            width: 6px;\r\n            height: 6px;\r\n            background: currentColor;\r\n            border-radius: 50%;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"step-view-global-variable\" @click=\"handlerView\">\r\n        <div class=\"flag\">\r\n            <Icon type=\"host\" />\r\n        </div>\r\n        <div class=\"name\" :title=\"name\">{{ name }}</div>\r\n        <jb-dialog\r\n            v-model=\"isShowDetail\"\r\n            :title=\"title\"\r\n            :width=\"1020\"\r\n            :ok-text=\"'关闭'\"\r\n            class=\"global-host-variable-detail-dialog\">\r\n            <template #header>\r\n                <div class=\"variable-title\">\r\n                    <span>{{ title }}</span>\r\n                    <i class=\"global-variable-dialog-close bk-icon icon-close\" @click=\"handleClose\" />\r\n                </div>\r\n            </template>\r\n            <div class=\"content-wraper\">\r\n                <Empty v-if=\"isEmpty\" :title=\"'变量值为空'\" style=\"height: 100%;\" />\r\n                <scroll-faker v-else>\r\n                    <server-panel\r\n                        detail-mode=\"dialog\"\r\n                        :host-node-info=\"hostNodeInfo\" />\r\n                </scroll-faker>\r\n            </div>\r\n        </jb-dialog>\r\n    </div>\r\n</template>\r\n<script>\r\n       import TaskHostNodeModel from '@model/task-host-node';\r\n    import ScrollFaker from '@components/scroll-faker';\r\n    import ServerPanel from '@components/choose-ip/server-panel';\r\n    import Empty from '@components/empty';\r\n\r\n    export default {\r\n        name: 'StepViewGlobalVariable',\r\n        components: {\r\n            ScrollFaker,\r\n            ServerPanel,\r\n            Empty,\r\n        },\r\n        props: {\r\n            type: {\r\n                type: String,\r\n                default: '',\r\n            },\r\n            name: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            data: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n        },\r\n        data () {\r\n            const { hostNodeInfo } = new TaskHostNodeModel({});\r\n            \r\n            return {\r\n                isShowDetail: false,\r\n                hostNodeInfo,\r\n            };\r\n        },\r\n        computed: {\r\n            title () {\r\n                if (this.type) {\r\n                    return this.type;\r\n                }\r\n                return `${'全局变量'} - ${this.name}`;\r\n            },\r\n            isEmpty () {\r\n                return TaskHostNodeModel.isHostNodeInfoEmpty(this.hostNodeInfo);\r\n            },\r\n        },\r\n        methods: {\r\n            handlerView () {\r\n                const curVariable = this.data.find(item => item.name === this.name);\r\n                this.hostNodeInfo = Object.freeze(curVariable.defaultTargetValue.hostNodeInfo);\r\n                \r\n                this.isShowDetail = true;\r\n            },\r\n            handleClose () {\r\n                this.isShowDetail = false;\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .global-host-variable-detail-dialog {\r\n        .bk-dialog-tool {\r\n            display: none;\r\n        }\r\n\r\n        .bk-dialog-header,\r\n        .bk-dialog-footer {\r\n            position: relative;\r\n            z-index: 99999;\r\n            background: #fff;\r\n        }\r\n\r\n        .bk-dialog-header {\r\n            padding: 0;\r\n        }\r\n\r\n        .bk-dialog-wrapper .bk-dialog-header .bk-dialog-header-inner {\r\n            font-size: 20px;\r\n            color: #000;\r\n            text-align: left;\r\n        }\r\n\r\n        .bk-dialog-wrapper .bk-dialog-body {\r\n            padding: 0;\r\n\r\n            .server-panel {\r\n                height: 100%;\r\n\r\n                &.show-detail {\r\n                    overflow: hidden;\r\n                }\r\n\r\n                .host-detail.show {\r\n                    padding-left: 20%;\r\n                }\r\n            }\r\n        }\r\n\r\n        .content-wraper {\r\n            height: 450px;\r\n            max-height: 450px;\r\n            min-height: 450px;\r\n            margin-top: -1px;\r\n        }\r\n\r\n        button[name=\"cancel\"] {\r\n            display: none;\r\n        }\r\n\r\n        .variable-title {\r\n            position: relative;\r\n            height: 68px;\r\n            padding-top: 0;\r\n            padding-bottom: 0;\r\n            padding-left: 25px;\r\n            font-size: 20px;\r\n            line-height: 68px;\r\n            color: #000;\r\n            text-align: left;\r\n            border-bottom: 1px solid #dcdee5;\r\n        }\r\n\r\n        .global-variable-dialog-close {\r\n            position: absolute;\r\n            top: 0;\r\n            right: 0;\r\n            font-size: 32px;\r\n            color: #c4c6cc;\r\n            cursor: pointer;\r\n            transition: all 0.15s;\r\n\r\n            &:hover {\r\n                transform: rotateZ(90deg);\r\n            }\r\n        }\r\n    }\r\n</style>\r\n<style lang='postcss' scoped>\r\n    .step-view-global-variable {\r\n        display: inline-flex;\r\n        height: 24px;\r\n        padding-right: 10px;\r\n        line-height: 1;\r\n        cursor: pointer;\r\n        background: #fff;\r\n\r\n        .flag {\r\n            display: flex;\r\n            height: 24px;\r\n            font-size: 13px;\r\n            color: #fff;\r\n            background: #3a84ff;\r\n            border-bottom-left-radius: 2px;\r\n            border-top-left-radius: 2px;\r\n            flex: 0 0 24px;\r\n            align-items: center;\r\n            justify-content: center;\r\n        }\r\n\r\n        .name {\r\n            display: flex;\r\n            padding: 0 10px;\r\n            white-space: nowrap;\r\n            border: 1px solid #dcdee5;\r\n            border-left: none;\r\n            border-top-right-radius: 2px;\r\n            border-bottom-right-radius: 2px;\r\n            align-items: center;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div ref=\"aceEditor\" class=\"jd-ace-editor\" :style=\"{ height: `${height}px` }\">\r\n        <div\r\n            ref=\"contentWrapper\"\r\n            class=\"jb-ace-content\"\r\n            :class=\"{ readonly }\"\r\n            :style=\"boxStyle\"\r\n            v-bkloading=\"{ isLoading: isLoading, opacity: 0.2 }\">\r\n            <div\r\n                v-if=\"showTabHeader\"\r\n                class=\"jb-ace-title\"\r\n                :style=\"{ height: `${tabHeight}px` }\">\r\n                <template v-for=\"(val, key) in tabList\">\r\n                    <div\r\n                        class=\"jb-ace-mode-item\"\r\n                        @click=\"handleLangChange(key)\"\r\n                        :key=\"val\"\r\n                        :class=\"{ 'active': currentLang === key }\">\r\n                        {{ key }}\r\n                    </div>\r\n                </template>\r\n            </div>\r\n            <div class=\"jb-ace-main\">\r\n                <div class=\"ace-edit-content\">\r\n                    <div :id=\"selfId\" :style=\"editorStyle\" />\r\n                </div>\r\n                <div class=\"right-side-panel\">\r\n                    <slot name=\"side\" />\r\n                </div>\r\n            </div>\r\n            <div class=\"jb-ace-action\" :style=\"{ height: `${tabHeight}px` }\">\r\n                <slot name=\"action\" />\r\n                <template v-if=\"!readonly && !isFullScreen\">\r\n                    <Icon\r\n                        type=\"upload\"\r\n                        @click=\"handleUploadScript\"\r\n                        v-bk-tooltips=\"'上传脚本'\" />\r\n                    <Icon\r\n                        type=\"history\"\r\n                        @click.stop=\"handleShowHistory\"\r\n                        v-bk-tooltips=\"'历史缓存'\" />\r\n                </template>\r\n                <Icon\r\n                    v-if=\"!isFullScreen\"\r\n                    type=\"full-screen\"\r\n                    v-bk-tooltips=\"'全屏'\"\r\n                    @click=\"handleFullScreen\" />\r\n                <Icon\r\n                    v-if=\"isFullScreen\"\r\n                    type=\"un-full-screen\"\r\n                    v-bk-tooltips=\"'还原'\"\r\n                    @click=\"handleExitFullScreen\" />\r\n            </div>\r\n            <div\r\n                v-if=\"isShowHistoryPanel\"\r\n                ref=\"historyPanel\"\r\n                class=\"jb-ace-history-panel\"\r\n                @click.stop=\"\">\r\n                <div class=\"panel-header\">\r\n                    <div>{{ '历史缓存' }}</div>\r\n                    <div class=\"save-btn\" @click.stop=\"handleSaveHistory\">{{ '手动保存' }}</div>\r\n                </div>\r\n                <div v-if=\"historyList.length > 0\" style=\"max-height: 250px;\">\r\n                    <scroll-faker>\r\n                        <div class=\"panel-body\">\r\n                            <div v-for=\"item in historyList\" :key=\"item.name\" class=\"item\">\r\n                                <div class=\"history-name\" v-bk-overflow-tips>{{ item.name }}</div>\r\n                                <div class=\"history-action\" @click=\"handleChangeValueFromHistory(item)\">{{ '载入' }}</div>\r\n                            </div>\r\n                        </div>\r\n                    </scroll-faker>\r\n                </div>\r\n                <empty v-else class=\"history-empty\" :width=\"100\" />\r\n            </div>\r\n            <input\r\n                ref=\"upload\"\r\n                type=\"file\"\r\n                style=\"position: absolute; width: 0; height: 0;\"\r\n                @change=\"handleStartUpload\">\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n    import { Base64 } from 'js-base64';\r\n    import ace from 'ace/ace';\r\n    import 'ace/mode-sh';\r\n    import 'ace/snippets/sh';\r\n    import 'ace/mode-batchfile';\r\n    import 'ace/snippets/batchfile';\r\n    import 'ace/mode-perl';\r\n    import 'ace/snippets/perl';\r\n    import 'ace/mode-python';\r\n    import 'ace/snippets/python';\r\n    import 'ace/mode-powershell';\r\n    import 'ace/snippets/powershell';\r\n    import 'ace/mode-sql';\r\n    import 'ace/snippets/sql';\r\n    import 'ace/theme-monokai';\r\n    import 'ace/ext-error_marker';\r\n    import 'ace/ext-language_tools';\r\n    import 'ace/ext-keybinding_menu';\r\n    import 'ace/ext-elastic_tabstops_lite';\r\n    import ScriptTemplateService from '@service/script-template';\r\n    import ScriptService from '@service/script-manage';\r\n    import PublicScriptService from '@service/public-script-manage';\r\n    import UserService from '@service/user';\r\n    import ScrollFaker from '@components/scroll-faker';\r\n    import Empty from '@components/empty';\r\n    import {\r\n        formatScriptTypeValue,\r\n        prettyDateTimeFormat,\r\n    } from '@utils/assist';\r\n    import DefaultScript from './default-script';\r\n\r\n    export const builtInScript = Object.keys(DefaultScript).reduce((result, item) => {\r\n        result[item] = Base64.encode(DefaultScript[item]);\r\n        return result;\r\n    }, {});\r\n\r\n    const languageTools = ace.require('ace/ext/language_tools');\r\n\r\n    const TAB_HEIGHT = 40;\r\n    const LANG_MAP = {\r\n        Shell: 'sh',\r\n        Bat: 'batchfile',\r\n        Perl: 'perl',\r\n        Python: 'python',\r\n        Powershell: 'powershell',\r\n        SQL: 'sql',\r\n    };\r\n    const LOCAL_STORAGE_KEY = 'ace_editor_history';\r\n    \r\n    const escapeHTML = str => str.replace(/&/g, '&#38;').replace(/\"/g, '&#34;')\r\n        .replace(/'/g, '&#39;')\r\n        .replace(/</g, '&#60;');\r\n    const HTMLEncode = (value) => {\r\n        const temp = document.createElement('textarea');\r\n        temp.value = value;\r\n        return temp.value;\r\n    };\r\n    \r\n    export default {\r\n        name: 'AceEditor',\r\n        components: {\r\n            ScrollFaker,\r\n            Empty,\r\n        },\r\n        inheritAttrs: false,\r\n        props: {\r\n            // 脚本内容\r\n            value: {\r\n                type: String,\r\n            },\r\n            height: {\r\n                type: Number,\r\n                default: 480,\r\n            },\r\n            // 只读模式\r\n            readonly: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n            readonlyTips: {\r\n                type: String,\r\n                default: '只读模式不支持编辑',\r\n            },\r\n            // 当前的脚本语言\r\n            lang: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            // 可支持切换的脚本类型（array：显示tab; string: 不显示tab）\r\n            options: {\r\n                type: [\r\n                    String,\r\n                    Array,\r\n                ],\r\n                default: () => Object.keys(LANG_MAP),\r\n            },\r\n            // 默认脚本是否显示用户自定义内容，默认为 true\r\n            customEnable: {\r\n                type: Boolean,\r\n                default: true,\r\n            },\r\n            // 自定义全局变量\r\n            constants: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n            // 切换脚本语言前的确认动作\r\n            beforeLangChange: {\r\n                type: Function,\r\n                default: () => Promise.resolve(),\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: false,\r\n                content: '',\r\n                currentLang: this.lang,\r\n                isFullScreen: false,\r\n                isShowHistoryPanel: false,\r\n                tabHeight: TAB_HEIGHT,\r\n                historyList: [{},{},{}],\r\n                currentUser: {},\r\n            };\r\n        },\r\n        computed: {\r\n            /**\r\n             * @desc 脚本编辑器块的样式\r\n             * @returns {Object}\r\n            */\r\n            boxStyle () {\r\n                const style = {\r\n                    position: 'absolute',\r\n                    top: 0,\r\n                    left: 0,\r\n                    width: '100%',\r\n                    height: '100%',\r\n                };\r\n                if (this.isFullScreen) {\r\n                    style.position = 'fixed';\r\n                    style.zIndex = window.__bk_zIndex_manager.nextZIndex(); // eslint-disable-line no-underscore-dangle\r\n                    style.height = '100vh';\r\n                }\r\n                return style;\r\n            },\r\n            /**\r\n             * @desc 脚本输入区的样式\r\n             * @returns {Object}\r\n            */\r\n            editorStyle () {\r\n                const tabHeight = this.showTabHeader ? TAB_HEIGHT : 0;\r\n                return {\r\n                    height: this.isFullScreen ? `calc(100vh - ${tabHeight}px)` : `${this.height - tabHeight}px`,\r\n                };\r\n            },\r\n            /**\r\n             * @desc 是否显示脚本类型切换 TAB, 当options 配置 String 时不显示\r\n             * @returns {Boolean}\r\n            */\r\n            showTabHeader () {\r\n                return typeof this.options !== 'string';\r\n            },\r\n            /**\r\n             * @desc 显示类型显示列表\r\n             * @returns {Object}\r\n            */\r\n            tabList () {\r\n                if (!Array.isArray(this.options)) {\r\n                    return [];\r\n                }\r\n                return this.options.reduce((res, item) => {\r\n                    if (Object.prototype.hasOwnProperty.call(LANG_MAP, item)) {\r\n                        res[item] = LANG_MAP[item];\r\n                    }\r\n                    return res;\r\n                }, {});\r\n            },\r\n            /**\r\n             * @desc 脚本编辑器语言模式\r\n             * @returns {String}\r\n            */\r\n            mode () {\r\n                return `ace/mode/${LANG_MAP[this.currentLang]}`;\r\n            },\r\n        },\r\n        watch: {\r\n            value: {\r\n                handler (value) {\r\n                    // 只读模式没有默认值，直接使用输入值\r\n                    if (this.readonly) {\r\n                        this.editor.setValue(Base64.decode(value));\r\n                        this.editor.clearSelection();\r\n                    }\r\n                    // 外部传入空置直接清空编辑器\r\n                    if (value === '' && this.content !== '') {\r\n                        this.editor.setValue('');\r\n                        return;\r\n                    }\r\n                    const parseValue = Base64.decode(value);\r\n                    // 避免编辑造成的重复更新\r\n                    if (this.content !== parseValue) {\r\n                        this.editor.setValue(parseValue);\r\n                        this.editor.clearSelection();\r\n                    }\r\n                },\r\n            },\r\n            lang (newLang) {\r\n                if (this.currentLang !== newLang) {\r\n                    this.currentLang = newLang;\r\n                    setTimeout(() => {\r\n                        this.editor.getSession().setMode(this.mode);\r\n                    });\r\n                }\r\n            },\r\n            readonly (readonly) {\r\n                this.editor.setReadOnly(readonly);\r\n            },\r\n            constants: {\r\n                handler () {\r\n\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        created () {\r\n            this.selfId = `ace_editor_${_.random(1, 1000)}_${Date.now()}`;\r\n            this.valueMemo = {};\r\n            this.hasChanged = false;\r\n            this.historyEnable = false;\r\n            this.historyTimer = '';\r\n            this.fetchUserInfo();\r\n            this.fetchTemplate();\r\n            this.syntaxCheck = _.debounce((content) => {\r\n                ScriptService.getScriptValidation({\r\n                    content,\r\n                    scriptType: formatScriptTypeValue(this.currentLang),\r\n                }).then((data) => {\r\n                    // 高危语句报错状态需要全局保存\r\n                    this.$store.commit('setScriptCheckError', _.some(data, _ => _.isDangerous));\r\n                    this.editor.getSession().setAnnotations(data);\r\n                });\r\n            }, 300);\r\n\r\n            // 自定义语法提示\r\n            this.completer = {\r\n                getCompletions: (editor, session, pos, prefix, callback) => {\r\n                    const keywords = this.constants.map(item => ({\r\n                        name: item.name,\r\n                        value: `$\\{${item.name}}`,\r\n                        caption: item.name,\r\n                        meta: 'Global Variable',\r\n                        type: item.typeDescription,\r\n                        description: item.description,\r\n                        score: 1000, // 让自定义全局变量排在最上面\r\n                    }));\r\n                    callback(null, keywords);\r\n                },\r\n                getDocTooltip (item) {\r\n                    if (item.meta === 'Global Variable' && item.description) {\r\n                        item.docHTML = [\r\n                            '<b>description</b>',\r\n                            '<hr />',\r\n                            escapeHTML(item.description),\r\n                        ].join('');\r\n                    }\r\n                },\r\n            };\r\n        },\r\n        beforeDestroy () {\r\n            this.handleExitFullScreen();\r\n        },\r\n        mounted () {\r\n            this.initEditor();\r\n            languageTools.addCompleter(this.completer);\r\n            document.body.addEventListener('click', this.handleHideHistory);\r\n            document.body.addEventListener('keyup', this.handleExitByESC);\r\n            this.$once('hook:beforeDestroy', () => {\r\n                clearTimeout(this.historyTimer);\r\n                if (this.isChange) {\r\n                    this.pushLocalStorage();\r\n                }\r\n                _.remove(this.editor.completers, _ => _ === this.completer);\r\n                document.body.removeEventListener('click', this.handleHideHistory);\r\n                document.body.removeEventListener('keyup', this.handleExitByESC);\r\n            });\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 获取登陆用户信息\r\n             */\r\n            fetchUserInfo () {\r\n                UserService.fetchUserInfo()\r\n                    .then((data) => {\r\n                        this.currentUser = Object.freeze(data);\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 获取默认脚本\r\n             */\r\n            fetchTemplate () {\r\n                this.isLoading = true;\r\n                const handlePromise = this.customEnable ? ScriptTemplateService.fetchTemplate() : Promise.resolve([]);\r\n                handlePromise.then((data) => {\r\n                    const customScriptMap = data.reduce((result, item) => {\r\n                        result[formatScriptTypeValue(item.scriptLanguage)] = Base64.decode(item.scriptContent);\r\n                        return result;\r\n                    }, {});\r\n                    this.defaultScriptMap = Object.assign({}, DefaultScript, customScriptMap);\r\n                        \r\n                    // 只读或有传入值默认脚本使用prop.value\r\n                    // 其它情况使用脚本编辑器提供的默认值\r\n                    this.content = this.readonly || this.value\r\n                        ? Base64.decode(this.value || '')\r\n                        : this.defaultScriptMap[this.lang];\r\n                    this.editor.setValue(this.content);\r\n                    this.editor.scrollToLine(Infinity);\r\n                    this.editor.clearSelection();\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 初始化脚本编辑器\r\n             */\r\n            initEditor () {\r\n                const editor = ace.edit(this.selfId);\r\n                editor.getSession().setMode(this.mode);\r\n                editor.setOptions({\r\n                    fontSize: 13,\r\n                    enableBasicAutocompletion: true,\r\n                    enableLiveAutocompletion: true,\r\n                    enableSnippets: true,\r\n                    wrapBehavioursEnabled: true,\r\n                    autoScrollEditorIntoView: true,\r\n                    copyWithEmptySelection: true,\r\n                    useElasticTabstops: true,\r\n                    printMarginColumn: true,\r\n                    printMargin: 80,\r\n                    scrollPastEnd: 0.2,\r\n                });\r\n                editor.setTheme('ace/theme/monokai');\r\n                editor.setShowPrintMargin(false);\r\n                editor.$blockScrolling = Infinity;\r\n                editor.setReadOnly(this.readonly);\r\n                \r\n                editor.on('change', () => {\r\n                    this.content = editor.getValue();\r\n                    const content = Base64.encode(this.content);\r\n                    if (this.content && !this.readonly) {\r\n                        this.syntaxCheck(content);\r\n                    }\r\n                    this.editor.getSession().setAnnotations([]);\r\n                    if (this.historyEnable) {\r\n                        this.hasChanged = true;\r\n                    }\r\n                    this.$emit('input', content);\r\n                    this.$emit('change', content);\r\n                });\r\n                editor.on('focus', () => {\r\n                    this.historyEnable = true;\r\n                });\r\n                editor.on('paste', (event) => {\r\n                    event.text = HTMLEncode(event.text);\r\n                });\r\n                // 先保存 editor 在设置 value\r\n                this.editor = editor;\r\n                \r\n                this.$once('hook:beforeDestroy', () => {\r\n                    editor.destroy();\r\n                    editor.container.remove();\r\n                });\r\n                \r\n                this.watchEditAction();\r\n\r\n                const $handler = document.querySelector(`#${this.selfId}`);\r\n                $handler.addEventListener('keydown', this.handleReadonlyWarning);\r\n                this.$once('hook:beforeDestroy', () => {\r\n                    $handler.removeEventListener('keydown', this.handleReadonlyWarning);\r\n                });\r\n            },\r\n            /**\r\n             * @desc 外部调用\r\n             */\r\n            resize () {\r\n                this.$nextTick(() => {\r\n                    this.editor.resize();\r\n                });\r\n            },\r\n            /**\r\n             * @desc 外部调用-设置脚本编辑器内容\r\n             * @param {String} 经过 base64 编码的脚本内容\r\n             */\r\n            setValue (value) {\r\n                this.editor.setValue(Base64.decode(value));\r\n                this.editor.clearSelection();\r\n                this.editor.scrollToLine(Infinity);\r\n            },\r\n            /**\r\n             * @desc 外部调用-重置脚本编辑内容使用默认脚本\r\n             */\r\n            resetValue () {\r\n                this.editor.setValue(this.defaultScriptMap[this.lang]);\r\n                this.editor.clearSelection();\r\n                this.editor.scrollToLine(Infinity);\r\n            },\r\n            /**\r\n             * @desc 监听脚本的编辑状态\r\n             *\r\n             * 每分钟自动缓存一次\r\n             */\r\n            watchEditAction () {\r\n                if (this.readonly) {\r\n                    return;\r\n                }\r\n                this.historyTimer = setTimeout(() => {\r\n                    if (this.historyEnable && this.hasChanged) {\r\n                        this.pushLocalStorage();\r\n                    }\r\n                    this.hasChanged = false;\r\n                    this.watchEditAction();\r\n                }, 60000);\r\n            },\r\n            /**\r\n             * @desc 缓存脚本内容\r\n             * @param {String} type 缓存类型（自动缓存、手动换粗）\r\n             */\r\n            pushLocalStorage (type = '自动保存') {\r\n                // 当前脚本内容为空不缓存\r\n                if (!this.value) {\r\n                    return;\r\n                }\r\n                // eslint-disable-next-line max-len\r\n                const newCacheKey = `${type}_${window.PROJECT_CONFIG.SCOPE_TYPE}_${window.PROJECT_CONFIG.SCOPE_ID}_${this.currentUser.username}_${prettyDateTimeFormat(Date.now())}`;\r\n                let historyList = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\r\n                if (!_.isArray(historyList)) {\r\n                    historyList = [];\r\n                }\r\n                if (historyList.length > 0) {\r\n                    // 最新缓存内容和上一次缓存内容相同不缓存\r\n                    if (historyList[0].content === this.value) {\r\n                        return;\r\n                    }\r\n                }\r\n                historyList.unshift({\r\n                    name: newCacheKey,\r\n                    content: this.value,\r\n                    lang: this.lang,\r\n                });\r\n                localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(historyList.slice(0, 25)));\r\n            },\r\n            /**\r\n             * @desc readonly模式下键盘操作提示\r\n             * @param {Object} event keydown事件\r\n             */\r\n            handleReadonlyWarning (event) {\r\n                if (!this.readonly) {\r\n                    return;\r\n                }\r\n                const { target } = event;\r\n                // 脚本编辑器获得焦点的状态\r\n                if (target.type !== 'textarea') {\r\n                    return;\r\n                }\r\n                \r\n                if ([\r\n                    'Escape',\r\n                    'Meta',\r\n                    'ShiftLeft',\r\n                    'ShiftRight',\r\n                    'ControlLeft',\r\n                    'ControlRight',\r\n                    'AltLeft',\r\n                    'AltRight',\r\n                ].includes(event.code)) {\r\n                    return;\r\n                }\r\n                if ((event.metaKey || event.ctrlKey)\r\n                    && !['KeyV', 'KeyX'].includes(event.code)) {\r\n                    return;\r\n                }\r\n                this.messageWarn(this.readonlyTips);\r\n            },\r\n            /**\r\n             * @desc 脚本语言切换\r\n             * @param {String} newLang 脚本语言\r\n             */\r\n            handleLangChange (newLang) {\r\n                if (this.readonly || this.currentLang === newLang) {\r\n                    return;\r\n                }\r\n                const result = this.beforeLangChange();\r\n                Promise.resolve()\r\n                    .then(() => {\r\n                        if (typeof result.then === 'function') {\r\n                            return result;\r\n                        }\r\n                        return result ? Promise.resolve() : Promise.reject(new Error('error'));\r\n                    })\r\n                    .then(() => {\r\n                        this.$emit('on-mode-change', newLang);\r\n                        // 切换语言时缓存上一语言的脚本内容\r\n                        this.valueMemo[this.currentLang] = this.content;\r\n\r\n                        this.currentLang = newLang;\r\n                        this.editor.getSession().setMode(this.mode);\r\n                        if (Object.prototype.hasOwnProperty.call(this.valueMemo, this.currentLang)) {\r\n                            // 使用新脚本语言的上一次缓存内容\r\n                            this.editor.setValue(this.valueMemo[this.currentLang]);\r\n                        } else {\r\n                            // 使用新脚本语言的默认内容\r\n                            this.editor.setValue(this.defaultScriptMap[this.currentLang]);\r\n                        }\r\n                        this.editor.clearSelection();\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 显示脚本缓存面板\r\n             */\r\n            handleShowHistory () {\r\n                const historyList = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\r\n                if (_.isArray(historyList)) {\r\n                    this.historyList = Object.freeze(historyList);\r\n                } else {\r\n                    this.historyList = [];\r\n                }\r\n                this.isShowHistoryPanel = true;\r\n            },\r\n            /**\r\n             * @desc 隐藏脚本缓存面板\r\n             */\r\n            handleHideHistory () {\r\n                this.isShowHistoryPanel = false;\r\n            },\r\n            /**\r\n             * @desc 使用缓存的脚本内容\r\n             * @param {Object} payload 缓存的脚本信息\r\n             */\r\n            handleChangeValueFromHistory (payload) {\r\n                // 切换脚本类型tab\r\n                this.$emit('on-mode-change', payload.lang);\r\n                // 更新脚本内容\r\n                this.editor.setValue(Base64.decode(payload.content));\r\n                this.editor.clearSelection();\r\n                this.handleHideHistory();\r\n            },\r\n            /**\r\n             * @desc 手动缓存脚本内容\r\n             */\r\n            handleSaveHistory: _.debounce(function () {\r\n                this.pushLocalStorage('手动保存');\r\n                this.handleShowHistory();\r\n            }, 300),\r\n            /**\r\n             * @desc 触发脚本上传\r\n             */\r\n            handleUploadScript () {\r\n                this.$refs.upload.click();\r\n            },\r\n            /**\r\n             * @desc 开始上传\r\n             * @param {Object} event input文件选中事件\r\n             */\r\n            handleStartUpload (event) {\r\n                const { files } = event.target;\r\n                if (!files.length) {\r\n                    return;\r\n                }\r\n                const fileName = files[0].name;\r\n                const fileSuffixes = fileName.substr(fileName.lastIndexOf('.') + 1);\r\n                const langMap = {\r\n                    sh: 'Shell',\r\n                    bat: 'Bat',\r\n                    pl: 'Perl',\r\n                    py: 'Python',\r\n                    ps1: 'powershell',\r\n                    sql: 'SQL',\r\n                };\r\n                if (!langMap[fileSuffixes]) {\r\n                    this.$bkMessage({\r\n                        theme: 'error',\r\n                        message: '脚本类型不支持',\r\n                    });\r\n                    return;\r\n                }\r\n                this.isLoading = true;\r\n                const params = new FormData();\r\n                params.append('script', files[0]);\r\n                PublicScriptService.getUploadContent(params)\r\n                    .then((data) => {\r\n                        this.handleLangChange(langMap[fileSuffixes]);\r\n                        this.editor.setValue(Base64.decode(data.content));\r\n                    })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n                this.$refs.upload.value = '';\r\n            },\r\n            /**\r\n             * @desc 切换编辑的全屏状态\r\n             *\r\n             * 全屏时需要把dom移动到body下面\r\n             */\r\n            handleFullScreen () {\r\n                this.isFullScreen = true;\r\n                this.messageInfo('按 Esc 即可退出全屏模式');\r\n                document.body.appendChild(this.$refs.contentWrapper);\r\n                this.$nextTick(() => {\r\n                    this.editor.resize();\r\n                });\r\n            },\r\n            /**\r\n             * @desc 退出编辑的全屏状态\r\n             *\r\n             * 退出全屏时需要要把dom还原到原有位置\r\n             */\r\n            handleExitFullScreen () {\r\n                this.isFullScreen = false;\r\n                this.$refs.aceEditor.appendChild(this.$refs.contentWrapper);\r\n                this.$nextTick(() => {\r\n                    this.editor.resize();\r\n                });\r\n            },\r\n            /**\r\n             * @desc esc快捷键退出编辑的全屏状态\r\n             */\r\n            handleExitByESC (event) {\r\n                if (event.code !== 'Escape' || !this.isFullScreen) {\r\n                    return;\r\n                }\r\n                this.handleExitFullScreen();\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .jd-ace-editor {\r\n        position: relative;\r\n        display: flex;\r\n        flex-direction: column;\r\n        width: 100%;\r\n        /* stylelint-disable selector-class-pattern */\r\n        .ace_editor {\r\n            padding-right: 14px;\r\n            overflow: unset;\r\n            font-family: Menlo, Monaco, Consolas, Courier, monospace;\r\n\r\n            .ace_scrollbar-v,\r\n            .ace_scrollbar-h {\r\n                &::-webkit-scrollbar-thumb {\r\n                    background-color: #3b3c42;\r\n                    border: 1px solid #63656e;\r\n                }\r\n\r\n                &::-webkit-scrollbar-corner {\r\n                    background-color: transparent;\r\n                }\r\n            }\r\n\r\n            .ace_scrollbar-v {\r\n                &::-webkit-scrollbar {\r\n                    width: 14px;\r\n                }\r\n            }\r\n\r\n            .ace_scrollbar-h {\r\n                &::-webkit-scrollbar {\r\n                    height: 14px;\r\n                }\r\n            }\r\n\r\n            .ace_gutter-cell {\r\n                &.ace_info,\r\n                &.ace_warning,\r\n                &.ace_error {\r\n                    background-size: 12px;\r\n                    background-position-x: 4px;\r\n                }\r\n\r\n                &.ace_info {\r\n                    background-image: url(\"/static/images/ace-editor/info.png\");\r\n                }\r\n\r\n                &.ace_warning {\r\n                    background-image: url(\"/static/images/ace-editor/warning.png\");\r\n                }\r\n\r\n                &.ace_error {\r\n                    background-image: url(\"/static/images/ace-editor/error.png\");\r\n                }\r\n            }\r\n        }\r\n\r\n        .readonly {\r\n            filter: grayscale(0%) brightness(80%) saturate(70%) opacity(95%);\r\n\r\n            .jb-ace-mode-item {\r\n                cursor: default;\r\n            }\r\n        }\r\n    }\r\n\r\n    .jb-ace-title {\r\n        display: flex;\r\n        font-size: 14px;\r\n        color: #fff;\r\n        background: #202024;\r\n        box-shadow: 0 2px 4px 0 \"rgba(0, 0, 0, 16%)\";\r\n\r\n        .jb-ace-mode-item {\r\n            display: flex;\r\n            padding: 0 22px;\r\n            color: #979ba5;\r\n            cursor: pointer;\r\n            border-top: 2px solid transparent;\r\n            user-select: none;\r\n            align-items: center;\r\n\r\n            &.active {\r\n                color: #fff;\r\n                background: #313238;\r\n                border-top: 2px solid #3a84ff;\r\n            }\r\n        }\r\n    }\r\n\r\n    .jb-ace-main {\r\n        display: flex;\r\n        background: #272822;\r\n\r\n        .ace-edit-content {\r\n            flex: 1;\r\n            overflow: hidden;\r\n        }\r\n\r\n        .bk-loading {\r\n            background: \"rgba(0, 0, 0, 80%)\" !important;\r\n        }\r\n    }\r\n\r\n    .jb-ace-action {\r\n        position: absolute;\r\n        top: 0;\r\n        right: 0;\r\n        z-index: 1;\r\n        display: flex;\r\n        align-items: center;\r\n        padding-right: 9px;\r\n        font-size: 16px;\r\n        line-height: 1;\r\n        color: #c4c6cc;\r\n\r\n        .job-icon {\r\n            padding: 10px 9px;\r\n            cursor: pointer;\r\n        }\r\n    }\r\n\r\n    .jb-ace-history-panel {\r\n        position: absolute;\r\n        top: 40px;\r\n        right: 10px;\r\n        width: 350px;\r\n        background: #fff;\r\n        border-radius: 2px;\r\n        user-select: none;\r\n\r\n        &::before {\r\n            position: absolute;\r\n            top: -4px;\r\n            right: 45px;\r\n            width: 10px;\r\n            height: 10px;\r\n            background: inherit;\r\n            content: \"\";\r\n            transform: rotateZ(-45deg);\r\n        }\r\n\r\n        .panel-header {\r\n            display: flex;\r\n            align-items: center;\r\n            height: 60px;\r\n            padding: 0 20px;\r\n            font-size: 14px;\r\n            color: #313238;\r\n            border-bottom: 1px solid #e7e7e7;\r\n\r\n            .save-btn {\r\n                display: flex;\r\n                width: 86px;\r\n                height: 32px;\r\n                margin-left: auto;\r\n                color: #63656e;\r\n                cursor: pointer;\r\n                background: #fff;\r\n                border: 1px solid #c4c6cc;\r\n                border-radius: 2px;\r\n                align-items: center;\r\n                justify-content: center;\r\n            }\r\n        }\r\n\r\n        .panel-body {\r\n            padding: 10px 20px;\r\n            font-family: 'MicrosoftYaHei'; /* stylelint-disable-line */\r\n            font-size: 12px;\r\n            color: #4f5050;\r\n            background: #fafbfd;\r\n\r\n            .item {\r\n                display: flex;\r\n                height: 32px;\r\n                align-items: center;\r\n            }\r\n\r\n            .history-name {\r\n                width: 255px;\r\n                overflow: hidden;\r\n                text-overflow: ellipsis;\r\n                white-space: nowrap;\r\n            }\r\n\r\n            .history-action {\r\n                margin-left: auto;\r\n                color: #3a84ff;\r\n                cursor: pointer;\r\n            }\r\n        }\r\n\r\n        .history-empty {\r\n            padding-top: 44px;\r\n            padding-bottom: 85px;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div ref=\"layout\" class=\"script-version-manage-layout\">\r\n        <div class=\"layout-header\">\r\n            <div class=\"header-title\">\r\n                <slot name=\"title\" />\r\n            </div>\r\n            <div class=\"sub-header\">\r\n                <slot name=\"sub-header\" />\r\n            </div>\r\n        </div>\r\n        <div\r\n            ref=\"content\"\r\n            class=\"layout-container\"\r\n            :style=\"contentStyles\">\r\n            <resizeable-box\r\n                v-if=\"$slots.left\"\r\n                class=\"left\"\r\n                free-position=\"right\">\r\n                <slot name=\"left\" />\r\n            </resizeable-box>\r\n            <div class=\"right\">\r\n                <slot />\r\n            </div>\r\n        </div>\r\n        <div class=\"layout-footer\">\r\n            <slot name=\"footer\" />\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import { getOffset } from '@utils/assist';\r\n\r\n    const PAGE_PADDING_BOTTOM = 20;\r\n\r\n    export default {\r\n        name: '',\r\n        data () {\r\n            return {\r\n                showContent: !this.loading,\r\n                offsetLeft: 0,\r\n                contentOffsetTop: 0,\r\n                footerHeight: 46,\r\n            };\r\n        },\r\n        computed: {\r\n            contentStyles () {\r\n                const offset = this.contentOffsetTop + PAGE_PADDING_BOTTOM + this.footerHeight;\r\n                return {\r\n                    height: `calc(100vh - ${offset}px)`,\r\n                };\r\n            },\r\n        },\r\n        mounted () {\r\n            this.contentOffsetTop = getOffset(this.$refs.content).top;\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .script-version-manage-layout {\r\n        position: relative;\r\n        height: 100vh;\r\n        overflow: hidden;\r\n        background: #292929;\r\n\r\n        .layout-header {\r\n            display: flex;\r\n            align-items: center;\r\n            height: 40px;\r\n            padding-left: 16px;\r\n            font-size: 14px;\r\n            color: #c4c6cc;\r\n            background: #333;\r\n            box-shadow: 0 2px 4px 0 rgb(0 0 0 / 16%);\r\n\r\n            .sub-header {\r\n                display: flex;\r\n                height: 100%;\r\n                padding-right: 40px;\r\n                margin-left: auto;\r\n                font-size: 16px;\r\n                align-items: center;\r\n\r\n                i {\r\n                    padding: 10px 9px;\r\n                    cursor: pointer;\r\n                }\r\n            }\r\n        }\r\n\r\n        .layout-container {\r\n            position: relative;\r\n            z-index: 0;\r\n            display: flex;\r\n\r\n            .left {\r\n                position: relative;\r\n                width: 312px;\r\n                padding: 12px 16px;\r\n                background: #292929;\r\n\r\n                .line {\r\n                    position: absolute;\r\n                    top: 0;\r\n                    right: 0;\r\n                    bottom: 0;\r\n                }\r\n            }\r\n\r\n            .right {\r\n                flex: 1;\r\n            }\r\n        }\r\n\r\n        .layout-footer {\r\n            position: relative;\r\n            z-index: 2;\r\n            display: flex;\r\n            height: 46px;\r\n            padding: 0 16px;\r\n            background: #242424;\r\n            align-items: center;\r\n            border-top: 1px solid #141414;\r\n            box-shadow: 0 -2px 4px 0 rgb(0 0 0 / 16%);\r\n        }\r\n\r\n        .bk-label {\r\n            height: 16px;\r\n            min-height: 16px;\r\n            margin-bottom: 8px;\r\n            font-size: 12px;\r\n            line-height: 16px;\r\n            color: #c4c6cc;\r\n\r\n            .bk-label-text {\r\n                line-height: 16px;\r\n            }\r\n        }\r\n\r\n        .bk-form-input,\r\n        .bk-form-textarea {\r\n            font-size: 12px;\r\n            color: #c4c6cc !important;\r\n            background: #292929 !important;\r\n            border-color: #63656e !important;\r\n\r\n            &[readonly] {\r\n                background: #333 !important;\r\n                border-color: #424242 !important;\r\n            }\r\n\r\n            &::placeholder {\r\n                color: #63656e;\r\n            }\r\n        }\r\n\r\n        .bk-button {\r\n            &.bk-default {\r\n                color: #979ba5;\r\n                background: transparent;\r\n                border-color: #5c5e66;\r\n                transition: all 0.15s;\r\n\r\n                &:hover {\r\n                    color: #b1b6c2;\r\n                    border-color: #878b94;\r\n                }\r\n\r\n                &.is-disabled {\r\n                    color: #63656e;\r\n                    border-color: #36373d;\r\n                }\r\n            }\r\n        }\r\n        /* stylelint-disable selector-class-pattern */\r\n        .jd-ace-editor {\r\n            .ace_editor {\r\n                background: #1a1a1a;\r\n\r\n                .ace_gutter {\r\n                    background: #1a1a1a;\r\n                }\r\n            }\r\n\r\n            .jb-ace-action {\r\n                display: none;\r\n            }\r\n\r\n            .jb-ace-history-panel {\r\n                top: 0;\r\n                right: 42px;\r\n            }\r\n        }\r\n\r\n        .bk-loading {\r\n            background: rgb(0 0 0 / 80%) !important;\r\n        }\r\n\r\n        span[data-script-status] {\r\n            color: #c4c6cc !important;\r\n            background: #63656e !important;\r\n        }\r\n\r\n        span[data-script-status=\"1\"] {\r\n            color: #59b383 !important;\r\n            background: #1f4d29 !important;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <layout class=\"script-manage-detail-box\">\r\n        <div slot=\"title\">\r\n            <span>{{ scriptInfo.version }}</span>\r\n            <span class=\"script-status\" v-html=\"scriptInfo.statusHtml\" />\r\n        </div>\r\n        <template slot=\"sub-header\">\r\n            <span style=\"font-size: 12px; color: #63656e;\">\r\n                <span>{{ scriptInfo.lastModifyUser }}</span>\r\n                <span>|</span>\r\n                <span>{{ scriptInfo.lastModifyTime }}</span>\r\n            </span>\r\n            <Icon\r\n                v-if=\"contentTab === 'content'\"\r\n                type=\"full-screen\"\r\n                v-bk-tooltips=\"'全屏'\"\r\n                @click=\"handleFullScreen\"\r\n                v-test=\"{ type: 'button', value: 'scriptEditFullscreen' }\" />\r\n        </template>\r\n        <div class=\"content-tab\">\r\n            <div\r\n                class=\"content-tab-item\"\r\n                :class=\"{ active: contentTab === 'content' }\"\r\n                @click=\"handleChangeDispaly('content')\"\r\n                v-test=\"{ type: 'button', value: 'scriptContentTab' }\">\r\n                {{ '脚本内容' }}\r\n            </div>\r\n            <div\r\n                class=\"content-tab-item\"\r\n                :class=\"{ active: contentTab === 'log' }\"\r\n                @click=\"handleChangeDispaly('log')\"\r\n                v-test=\"{ type: 'button', value: 'scriptVersionLogTab' }\">\r\n                {{ '版本日志' }}\r\n            </div>\r\n        </div>\r\n        <div class=\"version-content\">\r\n            <div ref=\"content\" class=\"content-dispaly\" :style=\"contentStyles\">\r\n                <keep-alive v-if=\"contentHeight > 0\">\r\n                    <component\r\n                        ref=\"aceEditor\"\r\n                        :is=\"contentCom\"\r\n                        readonly\r\n                        :height=\"contentHeight\"\r\n                        :value=\"scriptInfo.content\"\r\n                        :lang=\"scriptInfo.typeName\"\r\n                        :options=\"scriptInfo.typeName\"\r\n                        :version-desc=\"scriptInfo.versionDesc\" />\r\n                </keep-alive>\r\n            </div>\r\n        </div>\r\n        <template #footer>\r\n            <auth-button\r\n                v-if=\"scriptInfo.isOnline\"\r\n                key=\"execute\"\r\n                :permission=\"scriptInfo.canManage\"\r\n                auth=\"script/execute\"\r\n                :resource-id=\"scriptInfo.id\"\r\n                class=\"w120 mr10\"\r\n                theme=\"primary\"\r\n                :loading=\"isExceLoading\"\r\n                @click=\"handleGoExce\"\r\n                v-test=\"{ type: 'button', value: 'execScript' }\">\r\n                {{ '去执行' }}\r\n            </auth-button>\r\n            <jb-popover-confirm\r\n                v-if=\"!scriptInfo.isOnline\"\r\n                key=\"online\"\r\n                class=\"mr10\"\r\n                :title=\"'确定上线该版本？'\"\r\n                :content=\"'上线后，之前的线上版本将被置为「已下线」状态，但不影响作业使用'\"\r\n                \r\n                :confirm-handler=\"handleOnline\">\r\n                <auth-button\r\n                    :permission=\"scriptInfo.canManage\"\r\n                    :resource-id=\"scriptInfo.id\"\r\n                    auth=\"script/edit\"\r\n                    theme=\"primary\"\r\n                    class=\"w120\"\r\n                    \r\n                    v-test=\"{ type: 'button', value: 'onlineScript' }\">\r\n                    {{ '上线' }}\r\n                </auth-button>\r\n            </jb-popover-confirm>\r\n            <span\r\n                v-if=\"!scriptInfo.isDraft\"\r\n                key=\"create\"\r\n                :tippy-tips=\"isCopyCreateDisabled ? '已有[未上线]版本' : ''\">\r\n                <auth-button\r\n                    :permission=\"scriptInfo.canClone\"\r\n                    :resource-id=\"scriptInfo.id\"\r\n                    auth=\"script/clone\"\r\n                    \r\n                    class=\"w120 mr10\"\r\n                    @click=\"handleCopyAndCreate(scriptInfo)\"\r\n                    v-test=\"{ type: 'button', value: 'copyCreateScript' }\">\r\n                    {{ '复制并新建' }}\r\n                </auth-button>\r\n            </span>\r\n            <bk-button\r\n                class=\"mr10\"\r\n                @click=\"handleDebugScript\"\r\n                v-test=\"{ type: 'button', value: 'debugScript' }\">\r\n                {{ '调试' }}\r\n            </bk-button>\r\n            <span\r\n                v-if=\"scriptInfo.isOnline\"\r\n                key=\"sync\"\r\n                class=\"mr10\"\r\n                :tippy-tips=\"!scriptInfo.syncEnabled ? '所有关联作业模板已是当前版本' : ''\">\r\n                <auth-button\r\n                    :permission=\"scriptInfo.canManage\"\r\n                    :resource-id=\"scriptInfo.id\"\r\n                    auth=\"script/edit\"\r\n                    \r\n                    @click=\"handleGoSync\"\r\n                    v-test=\"{ type: 'button', value: 'syncScript' }\">\r\n                    {{ '同步' }}\r\n                </auth-button>\r\n            </span>\r\n            <auth-button\r\n                v-if=\"scriptInfo.isDraft\"\r\n                key=\"edit\"\r\n                :permission=\"scriptInfo.canManage\"\r\n                :resource-id=\"scriptInfo.id\"\r\n                auth=\"script/edit\"\r\n                class=\"mr10\"\r\n                @click=\"handleEdit(scriptInfo)\"\r\n                v-test=\"{ type: 'button', value: 'editScript' }\">\r\n                {{ '编辑' }}\r\n            </auth-button>\r\n            <jb-popover-confirm\r\n                v-if=\"scriptInfo.isVersionEnableRemove\"\r\n                key=\"delete\"\r\n                class=\"mr10\"\r\n                :title=\"'确定删除该版本？'\"\r\n                :content=\"'删除后不可恢复，请谨慎操作！'\"\r\n                :confirm-handler=\"handleRemove\">\r\n                <auth-button\r\n                    :permission=\"scriptInfo.canManage\"\r\n                    :resource-id=\"scriptInfo.id\"\r\n                    auth=\"script/delete\"\r\n                    v-test=\"{ type: 'button', value: 'deleteScript' }\">\r\n                    {{ '删除' }}\r\n                </auth-button>\r\n            </jb-popover-confirm>\r\n            <jb-popover-confirm\r\n                v-if=\"scriptInfo.isOnline\"\r\n                key=\"offline\"\r\n                style=\"margin-left: auto;\"\r\n                :title=\"'确定禁用该版本？'\"\r\n                :content=\"'一旦禁用成功，线上引用该版本的作业脚本步骤都会执行失败，请务必谨慎操作！'\"\r\n                :confirm-handler=\"handleOffline\">\r\n                <auth-button\r\n                    :permission=\"scriptInfo.canManage\"\r\n                    :resource-id=\"scriptInfo.id\"\r\n                    auth=\"script/edit\"\r\n                    v-test=\"{ type: 'button', value: 'offlineScript' }\">\r\n                    {{ '禁用' }}\r\n                </auth-button>\r\n            </jb-popover-confirm>\r\n        </template>\r\n    </layout>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n       import ScriptService from '@service/script-manage';\r\n    import PublicScriptService from '@service/public-script-manage';\r\n    import {\r\n        checkPublicScript,\r\n        getOffset,\r\n    } from '@utils/assist';\r\n    import { debugScriptCache } from '@utils/cache-helper';\r\n    import AceEditor from '@components/ace-editor';\r\n    import DetailLayout from '@components/detail-layout';\r\n    import DetailItem from '@components/detail-layout/item';\r\n    import JbPopoverConfirm from '@components/jb-popover-confirm';\r\n    import Layout from '../components/layout';\r\n    import RenderLog from './components/render-log';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            AceEditor,\r\n            DetailLayout,\r\n            DetailItem,\r\n            JbPopoverConfirm,\r\n            Layout,\r\n            RenderLog,\r\n        },\r\n        inheritAttrs: false,\r\n        props: {\r\n            scriptVersionList: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n            scriptInfo: {\r\n                type: Object,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: false,\r\n                isExceLoading: false,\r\n                contentTab: 'content',\r\n                contentHeight: 0,\r\n            };\r\n        },\r\n        computed: {\r\n            contentCom () {\r\n                const comMap = {\r\n                    content: AceEditor,\r\n                    log: RenderLog,\r\n                };\r\n                return comMap[this.contentTab];\r\n            },\r\n            /**\r\n             * @desc 已存在未上线版本不允许新建版本\r\n             * @returns { Boolean }\r\n             */\r\n            isCopyCreateDisabled () {\r\n                return !!_.find(this.scriptVersionList, scriptVersion => scriptVersion.isDraft);\r\n            },\r\n            contentStyles () {\r\n                return {\r\n                    height: `${this.contentHeight}px`,\r\n                };\r\n            },\r\n        },\r\n        watch: {\r\n            scriptInfo () {\r\n                this.contentTab = 'content';\r\n            },\r\n        },\r\n        created () {\r\n            this.publicScript = checkPublicScript(this.$route);\r\n            this.serviceHandler = this.publicScript ? PublicScriptService : ScriptService;\r\n            window.addEventListener('resize', this.init);\r\n            this.$once('hook:beforeDestroy', () => {\r\n                window.removeEventListener('resize', this.init);\r\n            });\r\n        },\r\n        mounted () {\r\n            this.calcContentHeight();\r\n            const handleResize = _.throttle(this.calcContentHeight, 60);\r\n            window.addEventListener('resize', handleResize);\r\n            this.$once('hook:beforeDestroy', () => {\r\n                window.removeEventListener('resize', handleResize);\r\n            });\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 计算内容区高度\r\n             */\r\n            calcContentHeight () {\r\n                const contentOffsetTop = getOffset(this.$refs.content).top;\r\n                this.contentHeight = window.innerHeight - contentOffsetTop - 20;\r\n            },\r\n            handleFullScreen () {\r\n                if (this.contentTab === 'content') {\r\n                    this.$refs.aceEditor.handleFullScreen();\r\n                }\r\n            },\r\n            /**\r\n             * @desc 脚本内容和脚本版本日志切换\r\n             * @param {String} tab 切换面板\r\n             */\r\n            handleChangeDispaly (tab) {\r\n                this.contentTab = tab;\r\n            },\r\n            /**\r\n             * @desc 上线脚本\r\n             */\r\n            handleOnline () {\r\n                return this.serviceHandler.scriptVersionOnline({\r\n                    id: this.scriptInfo.id,\r\n                    versionId: this.scriptInfo.scriptVersionId,\r\n                }).then(() => {\r\n                    this.messageSuccess('操作成功');\r\n                    this.$emit('on-edit-change');\r\n                });\r\n            },\r\n            /**\r\n             * @desc 删除脚本\r\n             */\r\n            handleRemove () {\r\n                return this.serviceHandler.scriptVersionRemove({\r\n                    versionId: this.scriptInfo.scriptVersionId,\r\n                }).then(() => {\r\n                    this.messageSuccess('删除成功');\r\n                    // 如果删除的是最后一个版本，成功后跳转到脚本列表\r\n                    if (this.scriptVersionList.length < 2) {\r\n                        const routerName = this.publicScript ? 'publicScriptList' : 'scriptList';\r\n                        this.$router.push({\r\n                            name: routerName,\r\n                        });\r\n                    } else {\r\n                        setTimeout(() => {\r\n                            this.$emit('on-delete', true);\r\n                        });\r\n                    }\r\n                });\r\n            },\r\n            /**\r\n             * @desc 下线脚本\r\n             */\r\n            handleOffline () {\r\n                return this.serviceHandler.scriptVersionOffline({\r\n                    id: this.scriptInfo.id,\r\n                    versionId: this.scriptInfo.scriptVersionId,\r\n                }).then(() => {\r\n                    this.messageSuccess('操作成功');\r\n                    this.$emit('on-edit-change');\r\n                });\r\n            },\r\n            /**\r\n             * @desc 复制新建\r\n             */\r\n            handleCopyAndCreate () {\r\n                this.$emit('on-go-copy-create', {\r\n                    scriptVersionId: this.scriptInfo.scriptVersionId,\r\n                });\r\n            },\r\n            /**\r\n             * @desc 调整到快速执行脚本页面调试脚本\r\n             */\r\n            handleDebugScript () {\r\n                debugScriptCache.setItem(this.scriptInfo.content);\r\n                const { href } = this.$router.resolve({\r\n                    name: 'fastExecuteScript',\r\n                    query: {\r\n                        model: 'debugScript',\r\n                    },\r\n                });\r\n                window.open(href);\r\n            },\r\n            /**\r\n             * @desc 同步脚本\r\n             */\r\n            handleGoSync () {\r\n                const routerName = this.publicScript ? 'scriptPublicSync' : 'scriptSync';\r\n                this.$router.push({\r\n                    name: routerName,\r\n                    params: {\r\n                        scriptId: this.scriptInfo.id,\r\n                        scriptVersionId: this.scriptInfo.scriptVersionId,\r\n                    },\r\n                });\r\n            },\r\n            /**\r\n             * @desc 编辑脚本\r\n             */\r\n            handleEdit (payload) {\r\n                this.$emit('on-go-edit', {\r\n                    scriptVersionId: this.scriptInfo.scriptVersionId,\r\n                });\r\n            },\r\n            /**\r\n             * @desc 调整到快速执行脚本页面执行脚本\r\n             */\r\n            handleGoExce () {\r\n                this.$router.push({\r\n                    name: 'fastExecuteScript',\r\n                    params: {\r\n                        taskInstanceId: 0,\r\n                        scriptVersionId: this.scriptInfo.scriptVersionId,\r\n                    },\r\n                    query: {\r\n                        from: 'scriptVersion',\r\n                    },\r\n                });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    @import \"@/css/mixins/scroll\";\r\n\r\n    %tab-item {\r\n        display: flex;\r\n        width: 94px;\r\n        height: 35px;\r\n        font-size: 13px;\r\n        color: #979ba5;\r\n        align-items: center;\r\n    }\r\n\r\n    .script-manage-detail-box {\r\n        .content-tab {\r\n            position: absolute;\r\n            left: 50%;\r\n            z-index: 0;\r\n            display: flex;\r\n            width: 250px;\r\n            margin-top: -35px;\r\n            transform: translateX(-50%);\r\n            align-content: center;\r\n            justify-content: center;\r\n\r\n            .content-tab-item {\r\n                @extend %tab-item;\r\n\r\n                padding-left: 0;\r\n                cursor: pointer;\r\n                transition: all 0.1s;\r\n                flex: 0 0 120px;\r\n                align-items: center;\r\n                justify-content: center;\r\n\r\n                &.active {\r\n                    color: #dcdee5;\r\n                    background: #242424;\r\n                    border-top-right-radius: 6px;\r\n                    border-top-left-radius: 6px;\r\n                }\r\n            }\r\n        }\r\n\r\n        .version-content {\r\n            display: flex;\r\n            flex-direction: column;\r\n            flex: 1;\r\n        }\r\n\r\n        .render-version-log {\r\n            height: 100%;\r\n            padding: 12px 10px;\r\n            overflow-y: auto;\r\n            font-size: 12px;\r\n            line-height: 20px;\r\n            color: #63656e;\r\n            white-space: pre-line;\r\n\r\n            @mixin scroller;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <jb-form-item :label=\"'脚本参数'\">\r\n        <div class=\"muti-item\">\r\n            <jb-input\r\n                :placeholder=\"'脚本执行时传入的参数，同脚本在终端执行时的传参格式，如：./test.sh xxxx xxx xxx'\"\r\n                @change=\"handleParamChange\"\r\n                :type=\"paramType\"\r\n                :value=\"formData[paramField]\"\r\n                :maxlength=\"5000\" />\r\n            <bk-checkbox\r\n                class=\"muti-checkbox\"\r\n                :value=\"formData[secureField]\"\r\n                :true-value=\"1\"\r\n                :false-value=\"0\"\r\n                @change=\"handleSecureParam\">\r\n                {{ '敏感参数' }}\r\n            </bk-checkbox>\r\n        </div>\r\n    </jb-form-item>\r\n</template>\r\n<script>\r\n    import JbInput from '@components/jb-input';\r\n\r\n    export default {\r\n        components: {\r\n            JbInput,\r\n        },\r\n        props: {\r\n            paramField: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            secureField: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            formData: {\r\n                type: Object,\r\n                default: () => ({}),\r\n            },\r\n        },\r\n        computed: {\r\n            paramType () {\r\n                return this.formData[this.secureField] ? 'password' : 'text';\r\n            },\r\n        },\r\n        methods: {\r\n            handleParamChange (value) {\r\n                this.$emit('on-change', this.paramField, value);\r\n            },\r\n            handleSecureParam (value) {\r\n                this.$emit('on-change', this.secureField, value);\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .muti-item {\r\n        display: flex;\r\n        width: 100%;\r\n\r\n        .jb-input {\r\n            flex: 1;\r\n        }\r\n\r\n        .muti-checkbox {\r\n            display: flex;\r\n            align-items: center;\r\n            flex: 0 0 auto;\r\n            margin-left: 10px;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div>\r\n        <jb-form ref=\"form\" :model=\"formData\" :rules=\"rules\" fixed :label-width=\"110\">\r\n            <item-factory\r\n                name=\"stepName\"\r\n                field=\"name\"\r\n                :placeholder=\"'推荐按步骤实际处理的场景行为来取名...'\"\r\n                :form-data=\"formData\"\r\n                @on-change=\"handleNameChange\" />\r\n            <jb-form-item :label=\"'确认人'\" :required=\"true\" property=\"approvalUser\">\r\n                <jb-user-selector\r\n                    :placeholder=\"'输入确认人'\"\r\n                    class=\"input\"\r\n                    :user=\"formData.approvalUser.userList\"\r\n                    :role=\"formData.approvalUser.roleList\"\r\n                    :filter-list=\"['JOB_EXTRA_OBSERVER']\"\r\n                    @on-change=\"handleApprovalUserChange\" />\r\n            </jb-form-item>\r\n            <jb-form-item :label=\"'通知方式'\">\r\n                <div class=\"notify-channel-wraper\">\r\n                    <bk-checkbox\r\n                        @click.native=\"handleToggleAllChannel\"\r\n                        :checked=\"isChannelAll\"\r\n                        :indeterminate=\"isChannelIndeterminate\">\r\n                        {{ '全部' }}\r\n                    </bk-checkbox>\r\n                    <bk-checkbox-group v-model=\"formData.notifyChannel\" class=\"all-channel\">\r\n                        <bk-checkbox\r\n                            v-for=\"channel in channleList\"\r\n                            :key=\"channel.code\"\r\n                            :value=\"channel.code\">\r\n                            {{ channel.name }}\r\n                        </bk-checkbox>\r\n                    </bk-checkbox-group>\r\n                </div>\r\n            </jb-form-item>\r\n            <jb-form-item :label=\"'确认描述'\">\r\n                <bk-input class=\"input\" type=\"textarea\" v-model=\"formData.approvalMessage\" :maxlength=\"1000\" />\r\n            </jb-form-item>\r\n        </jb-form>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n       import QueryGlobalSettingService from '@service/query-global-setting';\r\n    import JbUserSelector from '@components/jb-user-selector';\r\n    import ItemFactory from '@components/task-step/file/item-factory';\r\n    import { genDefaultName } from '@utils/assist';\r\n\r\n    const getDefaultData = () => ({\r\n        id: 0,\r\n        // 步骤名称\r\n        name: genDefaultName('步骤人工确认'),\r\n        // 删除标记\r\n        delete: 0,\r\n        // 审批消息\r\n        approvalMessage: '',\r\n        // 审批类型 暂未启用 1-任意人审批 2-所有人审批\r\n        approvalType: 1,\r\n        // 审批人\r\n        approvalUser: {\r\n            roleList: [\r\n                'JOB_RESOURCE_TRIGGER_USER',\r\n            ],\r\n            userList: [{},{},{}],\r\n        },\r\n        notifyChannel: [],\r\n    });\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            JbUserSelector,\r\n            ItemFactory,\r\n        },\r\n        inheritAttrs: false,\r\n        props: {\r\n            data: {\r\n                type: Object,\r\n                default: () => ({}),\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                formData: getDefaultData(),\r\n                channleList: [{},{},{}],\r\n            };\r\n        },\r\n        computed: {\r\n            isChannelAll () {\r\n                if (this.channleList.length < 1) {\r\n                    return false;\r\n                }\r\n                return this.formData.notifyChannel.length === this.channleList.length;\r\n            },\r\n            isChannelIndeterminate () {\r\n                if (this.formData.notifyChannel.length < 1) {\r\n                    return false;\r\n                }\r\n                return this.formData.notifyChannel.length !== this.channleList.length;\r\n            },\r\n        },\r\n        watch: {\r\n            data: {\r\n                handler (newData) {\r\n                    if (_.isEmpty(newData)) {\r\n                        return;\r\n                    }\r\n                    this.formData = {\r\n                        ...this.formData,\r\n                        ...newData,\r\n                    };\r\n                    setTimeout(() => {\r\n                        this.$refs.form.validate();\r\n                    });\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        created () {\r\n            this.rules = {\r\n                approvalUser: [\r\n                    {\r\n                        validator: approvalUser => approvalUser.roleList.length + approvalUser.userList.length > 0,\r\n                        message: '确认人必填',\r\n                        trigger: 'blur',\r\n                    },\r\n                ],\r\n            };\r\n            this.fetchAllChannel();\r\n        },\r\n        methods: {\r\n            fetchAllChannel () {\r\n                QueryGlobalSettingService.fetchActiveNotifyChannel()\r\n                    .then((data) => {\r\n                        this.channleList = data;\r\n                    })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            handleToggleAllChannel () {\r\n                if (this.isChannelAll) {\r\n                    this.formData.notifyChannel = [];\r\n                } else {\r\n                    this.formData.notifyChannel = this.channleList.map(_ => _.code);\r\n                }\r\n            },\r\n            handleNameChange (field, name) {\r\n                this.formData[field] = name.trim();\r\n            },\r\n            \r\n            handleApprovalUserChange (user, role) {\r\n                this.formData.approvalUser.roleList = role;\r\n                this.formData.approvalUser.userList = user;\r\n            },\r\n            submit () {\r\n                const {\r\n                    name,\r\n                    id,\r\n                    approvalMessage,\r\n                    approvalType,\r\n                    approvalUser,\r\n                    notifyChannel,\r\n                } = this.formData;\r\n\r\n                const result = {\r\n                    id,\r\n                    name,\r\n                    delete: this.formData.delete,\r\n                    type: 3,\r\n                    approvalStepInfo: {\r\n                        approvalMessage,\r\n                        approvalType,\r\n                        approvalUser,\r\n                        notifyChannel,\r\n                    },\r\n                };\r\n\r\n                return this.$refs.form.validate()\r\n                    .then(() => {\r\n                        this.$emit('on-change', result, true);\r\n                    }, () => {\r\n                        this.$emit('on-change', result, false);\r\n                    });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    .notify-channel-wraper {\r\n        display: flex;\r\n        align-items: center;\r\n        height: 32px;\r\n        white-space: nowrap;\r\n\r\n        .bk-form-checkbox {\r\n            display: flex;\r\n            flex: 0 0 auto;\r\n            margin-right: 40px;\r\n        }\r\n\r\n        .all-channel {\r\n            display: flex;\r\n        }\r\n    }\r\n\r\n    .input {\r\n        width: 495px;\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"task-step-operation-wraper\">\r\n        <div class=\"left\" :style=\"leftStyles\">\r\n            <scroll-faker>\r\n                <div class=\"container\">\r\n                    <jb-form fixed :label-width=\"formMarginLeftWidth\">\r\n                        <bk-form-item :label=\"'步骤类型'\" required>\r\n                            <bk-select\r\n                                v-model=\"taskStepType\"\r\n                                :clearable=\"false\"\r\n                                \r\n                                class=\"form-item-content\">\r\n                                <bk-option id=\"1\" :name=\"'执行脚本'\" />\r\n                                <bk-option id=\"2\" :name=\"'分发文件'\" />\r\n                                <bk-option id=\"3\" :name=\"'人工确认'\" />\r\n                            </bk-select>\r\n                        </bk-form-item>\r\n                    </jb-form>\r\n                    <component\r\n                        ref=\"handler\"\r\n                        :is=\"stepCom\"\r\n                        :data=\"stepData\"\r\n                        v-bind=\"$attrs\"\r\n                        v-on=\"$listeners\" />\r\n                </div>\r\n            </scroll-faker>\r\n            <bk-button\r\n                text\r\n                class=\"variable-guide-btn\"\r\n                @click=\"handleShowVariableGuide\">\r\n                <Icon type=\"book\" />\r\n                {{ '变量使用指引' }}\r\n            </bk-button>\r\n        </div>\r\n        <div v-if=\"isShowVariableGuide\" class=\"right\">\r\n            <variable-use-guide @on-close=\"handleHideVariableGuide\" />\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import VariableUseGuide from '@/views/task-manage/common/variable-use-guide';\r\n    import StepDistroFile from './components/distro-file';\r\n    import StepExecScript from './components/exec-script';\r\n    import StepArificial from './components/artificial';\r\n\r\n    export default {\r\n        components: {\r\n            StepDistroFile,\r\n            StepExecScript,\r\n            StepArificial,\r\n            VariableUseGuide,\r\n        },\r\n        inheritAttrs: false,\r\n        props: {\r\n            data: {\r\n                type: Object,\r\n                default: () => ({}),\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                taskStepType: '',\r\n                isShowVariableGuide: false,\r\n            };\r\n        },\r\n        computed: {\r\n            /**\r\n             * @desc 步骤渲染组件\r\n             * @returns { Object }\r\n             */\r\n            stepCom () {\r\n                const taskStepMap = {\r\n                    1: StepExecScript,\r\n                    2: StepDistroFile,\r\n                    3: StepArificial,\r\n                };\r\n                if (!Object.prototype.hasOwnProperty.call(taskStepMap, this.taskStepType)) {\r\n                    return 'div';\r\n                }\r\n                return taskStepMap[this.taskStepType];\r\n            },\r\n            /**\r\n             * @desc 步骤数据\r\n             * @returns { Object }\r\n             */\r\n            stepData () {\r\n                const stepDataMap = {\r\n                    1: 'scriptStepInfo',\r\n                    2: 'fileStepInfo',\r\n                    3: 'approvalStepInfo',\r\n                };\r\n                const currentKey = stepDataMap[this.taskStepType];\r\n                if (!Object.prototype.hasOwnProperty.call(this.data, currentKey)\r\n                    || !Object.keys(this.data[currentKey]).length) {\r\n                    return {};\r\n                }\r\n                const { name, id } = this.data;\r\n                return {\r\n                    name,\r\n                    id,\r\n                    ...this.data[currentKey],\r\n                };\r\n            },\r\n            /**\r\n             * @desc 步骤类型不可编辑\r\n             * @returns { Boolean }\r\n             */\r\n            isStepTypeReadOnly () {\r\n                return !!Object.keys(this.data).length;\r\n            },\r\n            leftStyles () {\r\n                const styles = {\r\n                    width: '100%',\r\n                };\r\n                if (this.isShowVariableGuide) {\r\n                    styles.width = 'calc(100% - 366px)';\r\n                }\r\n                return styles;\r\n            },\r\n            formMarginLeftWidth () {\r\n                return 'zh-CN' === 'en-US' && this.taskStepType === 2 ? 140 : 110;\r\n            },\r\n        },\r\n        watch: {\r\n            data: {\r\n                handler (value) {\r\n                    if (Object.keys(value).length) {\r\n                        this.taskStepType = this.data.type;\r\n                        return;\r\n                    }\r\n                    this.taskStepType = 1;\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        created () {\r\n            this.originWraperWidth = 0;\r\n        },\r\n        mounted () {\r\n            const $targetSideslider = document.querySelector('#taskStepOperationSideslider');\r\n            $targetSideslider.querySelector('.jb-sideslider-footer').style.paddingLeft = `${this.formMarginLeftWidth + 30}px`;\r\n        },\r\n        methods: {\r\n            handleShowVariableGuide () {\r\n                if (this.isShowVariableGuide) {\r\n                    return;\r\n                }\r\n                const $targetSideslider = document.querySelector('#taskStepOperationSideslider');\r\n                const $wraper = $targetSideslider.querySelector('.bk-sideslider-wrapper');\r\n                $wraper.style.transition = 'width 0.1s';\r\n                setTimeout(() => {\r\n                    const {\r\n                        width,\r\n                    } = $wraper.getBoundingClientRect();\r\n                    this.originWraperWidth = width;\r\n                    $wraper.style.width = `${width + 366}px`;\r\n                    this.isShowVariableGuide = true;\r\n                });\r\n            },\r\n            handleHideVariableGuide () {\r\n                const $targetSideslider = document.querySelector('#taskStepOperationSideslider');\r\n                const $wraper = $targetSideslider.querySelector('.bk-sideslider-wrapper');\r\n                $wraper.style.width = `${this.originWraperWidth}px`;\r\n                this.isShowVariableGuide = false;\r\n            },\r\n            submit () {\r\n                return this.$refs.handler.submit && this.$refs.handler.submit();\r\n            },\r\n            reset () {\r\n                this.taskStepType = '';\r\n                return this.$refs.handler.reset && this.$refs.handler.reset();\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .task-step-operation-wraper {\r\n        max-height: calc(100vh - 155px);\r\n        margin-right: -30px;\r\n\r\n        .left {\r\n            position: relative;\r\n            z-index: 0;\r\n\r\n            .container {\r\n                padding-right: 30px;\r\n            }\r\n\r\n            .form-item-content {\r\n                width: 495px;\r\n            }\r\n\r\n            .variable-guide-btn {\r\n                position: absolute;\r\n                top: -10px;\r\n                right: 30px;\r\n            }\r\n        }\r\n\r\n        .right {\r\n            position: absolute;\r\n            top: 0;\r\n            right: 0;\r\n            z-index: 0;\r\n            width: 366px;\r\n            height: calc(100% - 56px);\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"render-file-server\">\r\n        <div class=\"server-agent-text\" v-html=\"data.serverDesc\" @click=\"handlerView\" />\r\n        <jb-dialog\r\n            v-model=\"isShowDetail\"\r\n            :width=\"1020\"\r\n            :ok-text=\"'关闭'\"\r\n            class=\"step-view-server-detail-dialog\">\r\n            <template #header>\r\n                <div class=\"variable-title\">\r\n                    <span>{{ '服务器文件-服务器列表' }}</span>\r\n                    <i class=\"server-detail-close bk-icon icon-close\" @click=\"handleClose\" />\r\n                </div>\r\n            </template>\r\n            <div class=\"content-wraper\">\r\n                <scroll-faker>\r\n                    <server-panel\r\n                        detail-mode=\"dialog\"\r\n                        :host-node-info=\"hostNodeInfo\" />\r\n                </scroll-faker>\r\n            </div>\r\n        </jb-dialog>\r\n    </div>\r\n</template>\r\n<script>\r\n    import TaskHostNodeModel from '@model/task-host-node';\r\n    import ScrollFaker from '@components/scroll-faker';\r\n    import ServerPanel from '@components/choose-ip/server-panel';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            ScrollFaker,\r\n            ServerPanel,\r\n        },\r\n        props: {\r\n            data: {\r\n                type: Object,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            const { hostNodeInfo } = new TaskHostNodeModel({});\r\n            return {\r\n                isShowDetail: false,\r\n                hostNodeInfo,\r\n            };\r\n        },\r\n\r\n        methods: {\r\n            handlerView () {\r\n                this.hostNodeInfo = this.data.host.hostNodeInfo;\r\n                this.isShowDetail = true;\r\n            },\r\n            handleClose () {\r\n                this.isShowDetail = false;\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .render-file-server {\r\n        min-height: 30px;\r\n        padding: 5px;\r\n        margin-left: -10px;\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n            background: #f0f1f5;\r\n        }\r\n\r\n        .server-agent-text {\r\n            white-space: pre;\r\n\r\n            .sep-location {\r\n                &::before {\r\n                    content: \"\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    .step-view-server-detail-dialog {\r\n        .bk-dialog-tool {\r\n            display: none;\r\n        }\r\n\r\n        .bk-dialog-header,\r\n        .bk-dialog-footer {\r\n            position: relative;\r\n            z-index: 99999;\r\n            background: #fff;\r\n        }\r\n\r\n        .bk-dialog-header {\r\n            padding: 0;\r\n        }\r\n\r\n        .bk-dialog-wrapper .bk-dialog-header .bk-dialog-header-inner {\r\n            font-size: 20px;\r\n            color: #000;\r\n            text-align: left;\r\n        }\r\n\r\n        .bk-dialog-wrapper .bk-dialog-body {\r\n            padding: 0;\r\n\r\n            .server-panel {\r\n                height: 100%;\r\n\r\n                &.show-detail {\r\n                    overflow: hidden;\r\n                }\r\n\r\n                .host-detail.show {\r\n                    padding-left: 20%;\r\n                }\r\n            }\r\n        }\r\n\r\n        .content-wraper {\r\n            height: 450px;\r\n            max-height: 450px;\r\n            min-height: 450px;\r\n            margin-top: -1px;\r\n        }\r\n\r\n        button[name=\"cancel\"] {\r\n            display: none;\r\n        }\r\n\r\n        .variable-title {\r\n            position: relative;\r\n            height: 68px;\r\n            padding-top: 0;\r\n            padding-bottom: 0;\r\n            padding-left: 25px;\r\n            font-size: 20px;\r\n            line-height: 68px;\r\n            color: #000;\r\n            text-align: left;\r\n            border-bottom: 1px solid #dcdee5;\r\n        }\r\n\r\n        .server-detail-close {\r\n            position: absolute;\r\n            top: 0;\r\n            right: 0;\r\n            font-size: 32px;\r\n            color: #c4c6cc;\r\n            cursor: pointer;\r\n            transition: all 0.15s;\r\n\r\n            &:hover {\r\n                transform: rotateZ(90deg);\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"render-server-file\">\r\n        <bk-collapse\r\n            v-if=\"isShowLocalFile || isShowServerFile || isShowSourceFile\"\r\n            class=\"host-detail\"\r\n            v-model=\"activeResult\">\r\n            <jb-collapse-item\r\n                v-if=\"isShowLocalFile\"\r\n                name=\"local\"\r\n                :active=\"activeResult\">\r\n                <span class=\"collapse-title\">{{ '已选择' }}<span class=\"number strong\">{{ localFileList.length }}</span>{{ '个本地文件' }}</span>\r\n                <template #content>\r\n                    <table>\r\n                        <tbody>\r\n                            <tr v-for=\"(row, index) in localFileList\" :key=\"index\">\r\n                                <td style=\"width: 40%; word-break: break-all;\">{{ row.fileLocationText }}</td>\r\n                                <td>{{ row.fileSizeText }}</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </template>\r\n            </jb-collapse-item>\r\n            <jb-collapse-item\r\n                v-if=\"isShowSourceFile\"\r\n                name=\"source\"\r\n                :active=\"activeResult\">\r\n                <span class=\"collapse-title\">{{ '已选择' }}<span class=\"number strong\">{{ sourceFileList.length }}</span>{{ '个文件源文件' }}</span>\r\n                <template #content>\r\n                    <table>\r\n                        <thead>\r\n                            <th style=\"width: 40%;\">{{ '文件名称' }}</th>\r\n                            <th>{{ '文件源'}}</th>\r\n                        </thead>\r\n                        <tbody class=\"source-file-list\">\r\n                            <tr v-for=\"(row, index) in sourceFileList\" :key=\"index\">\r\n                                <td>\r\n                                    <render-file-path :data=\"row.fileLocation\" />\r\n                                </td>\r\n                                <td>\r\n                                    <span class=\"source-file-alias\" @click=\"handleGoSource(row, index)\">\r\n                                        {{ fileSourceAliasList[index] }}\r\n                                        <Icon type=\"edit\" class=\"source-file-icon\" svg />\r\n                                    </span>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </template>\r\n            </jb-collapse-item>\r\n            <jb-collapse-item\r\n                v-if=\"isShowServerFile\"\r\n                name=\"server\"\r\n                :active=\"activeResult\">\r\n                <span class=\"collapse-title\">{{ '已选择' }}<span class=\"number strong\">{{ serverFileList.length }}</span>{{ '个服务器文件' }}</span>\r\n                <template #content>\r\n                    <table>\r\n                        <thead>\r\n                            <th style=\"width: 40%;\">{{ '文件路径' }}</th>\r\n                            <th style=\"width: 15%;\">{{ '服务器列表' }}</th>\r\n                            <th>{{ 'Agent 状态' }}</th>\r\n                            <th style=\"width: 20%;\">{{ '服务器账号' }}</th>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr v-for=\"(row, index) in serverFileList\" :key=\"index\">\r\n                                <td>\r\n                                    <render-file-path :data=\"row.fileLocation\" />\r\n                                </td>\r\n                                <template v-if=\"row.isVar\">\r\n                                    <td>\r\n                                        <render-global-variable\r\n                                            :name=\"row.serverDesc\"\r\n                                            :data=\"variable\" />\r\n                                    </td>\r\n                                    <td>\r\n                                        <render-server-agent\r\n                                            :title=\"`${'全局变量'} - ${row.host.variable}`\"\r\n                                            :host-node-info=\"findVariableValue(row.host.variable)\" />\r\n                                    </td>\r\n                                </template>\r\n                                <template v-else>\r\n                                    <td>\r\n                                        <render-file-server :data=\"row\" />\r\n                                    </td>\r\n                                    <td>\r\n                                        <render-server-agent\r\n                                            :title=\"'服务器文件-服务器列表'\"\r\n                                            :host-node-info=\"row.host.hostNodeInfo\" />\r\n                                    </td>\r\n                                </template>\r\n                                <td>{{ findAccountAlias(row.account) }}</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </template>\r\n            </jb-collapse-item>\r\n        </bk-collapse>\r\n    </div>\r\n</template>\r\n<script>\r\n    import FileManageService from '@service/file-source-manage';\r\n    import TaskHostNodeModel from '@model/task-host-node';\r\n    import SourceFileVO from '@domain/variable-object/source-file';\r\n    import JbCollapseItem from '@components/jb-collapse-item';\r\n    import RenderServerAgent from '@components/render-server-agent';\r\n    import RenderFilePath from './render-file-path';\r\n    import RenderGlobalVariable from './render-global-variable';\r\n    import RenderFileServer from './render-file-server';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            JbCollapseItem,\r\n            RenderServerAgent,\r\n            RenderFilePath,\r\n            RenderGlobalVariable,\r\n            RenderFileServer,\r\n        },\r\n        props: {\r\n            data: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n            variable: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n            account: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                activeResult: [],\r\n                localFileList: [{},{},{}],\r\n                serverFileList: [{},{},{}],\r\n                sourceFileList: [{},{},{}],\r\n                fileSourceIdsList: [{},{},{}], // 文件源ID\r\n                fileSourceAliasList: [{},{},{}], // 文件源名称\r\n            };\r\n        },\r\n        computed: {\r\n            isShowLocalFile () {\r\n                return this.localFileList.length > 0;\r\n            },\r\n            isShowServerFile () {\r\n                return this.serverFileList.length > 0;\r\n            },\r\n            isShowSourceFile () {\r\n                return this.sourceFileList.length > 0;\r\n            },\r\n        },\r\n        watch: {\r\n            data: {\r\n                handler (fileList) {\r\n                    fileList.forEach((fileItem) => {\r\n                        const fileSource = new SourceFileVO(fileItem);\r\n                        if (fileSource.isServerFile) {\r\n                            this.serverFileList.push(fileSource);\r\n                        } else if (fileSource.isLocalFile) {\r\n                            this.localFileList.push(fileSource);\r\n                        } else if (fileSource.isSourceFile) {\r\n                            this.sourceFileList.push(fileSource);\r\n                            const idLists = []; // 文件源ID\r\n                            this.sourceFileList.forEach((e) => {\r\n                                idLists.push(e.fileSourceId);\r\n                                this.fileSourceIdsList = idLists;\r\n                            });\r\n                        }\r\n                        if (this.localFileList.length > 0) {\r\n                            this.activeResult = ['local'];\r\n                        } else if (this.serverFileList.length > 0) {\r\n                            this.activeResult = ['server'];\r\n                        }\r\n                    });\r\n                },\r\n                immediate: true,\r\n            },\r\n            // 根据文件源ID获取文件源Alias\r\n            fileSourceIdsList: {\r\n                handler (newVal) {\r\n                    if (newVal.length) {\r\n                        const promiseList = newVal.map(id => FileManageService.getSourceInfo({\r\n                            id,\r\n                        }));\r\n                        Promise.all(promiseList).then((res) => {\r\n                            res.forEach((e) => {\r\n                                this.fileSourceAliasList.push(e.alias);\r\n                            });\r\n                        });\r\n                    }\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        methods: {\r\n            findVariableValue (variable) {\r\n                const curVariable = this.variable.find(item => item.name === variable);\r\n                if (!curVariable) {\r\n                    const { hostNodeInfo } = new TaskHostNodeModel({});\r\n                    return hostNodeInfo;\r\n                }\r\n                return curVariable.defaultTargetValue.hostNodeInfo;\r\n            },\r\n            findAccountAlias (payload) {\r\n                const accountData = this.account.find(item => item.id === payload);\r\n                if (accountData) {\r\n                    return accountData.alias;\r\n                }\r\n                return '';\r\n            },\r\n            handleGoSource (payload, index) {\r\n                const { fileSourceId } = payload;\r\n                const sourceAlias = this.fileSourceAliasList[index];\r\n                const { href } = this.$router.resolve({\r\n                    name: 'bucketList',\r\n                    query: {\r\n                        fileSourceId,\r\n                        sourceAlias,\r\n                    },\r\n                });\r\n                window.open(href, '_blank');\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    @import \"@/css/mixins/scroll\";\r\n\r\n    .render-server-file {\r\n        flex: 1;\r\n\r\n        .bk-collapse-item-header {\r\n            display: flex;\r\n            align-items: center;\r\n            padding-left: 23px;\r\n\r\n            .collapse-title {\r\n                padding-left: 23px;\r\n            }\r\n        }\r\n\r\n        table {\r\n            width: 100%;\r\n            line-height: 20px;\r\n            background: #fff;\r\n\r\n            tr:nth-child(n+2) {\r\n                td {\r\n                    border-top: 1px solid #dcdee5;\r\n                }\r\n            }\r\n\r\n            th,\r\n            td {\r\n                height: 42px;\r\n                padding-top: 5px;\r\n                padding-bottom: 5px;\r\n                padding-left: 16px;\r\n                font-size: 12px;\r\n                text-align: left;\r\n\r\n                &:first-child {\r\n                    padding-left: 60px;\r\n                }\r\n            }\r\n\r\n            th {\r\n                font-weight: normal;\r\n                color: #313238;\r\n                border-bottom: 1px solid #dcdee5;\r\n            }\r\n\r\n            td {\r\n                color: #63656e;\r\n\r\n                .file-path {\r\n                    display: inline-block;\r\n                    max-width: 100%;\r\n                    overflow: hidden;\r\n                    text-overflow: ellipsis;\r\n                    white-space: nowrap;\r\n                }\r\n            }\r\n        }\r\n\r\n        .source-file-alias {\r\n            cursor: pointer;\r\n\r\n            &:hover {\r\n                color: #3a84ff !important;\r\n\r\n                .source-file-icon {\r\n                    display: inline;\r\n                }\r\n            }\r\n        }\r\n\r\n        .source-file-icon {\r\n            display: none;\r\n        }\r\n\r\n        .bk-table-empty-block {\r\n            display: none;\r\n        }\r\n\r\n        .source-file-tips-box {\r\n            max-width: 300px;\r\n            max-height: 280px;\r\n            min-width: 60px;\r\n            overflow-y: auto;\r\n\r\n            @mixin scroller;\r\n\r\n            .row {\r\n                word-break: break-all;\r\n            }\r\n\r\n            .dot {\r\n                display: inline-block;\r\n                width: 6px;\r\n                height: 6px;\r\n                background: currentColor;\r\n                border-radius: 50%;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"distro-file-view\" :class=\"{ loading: isLoading }\" v-bkloading=\"{ isLoading }\">\r\n        <detail-item :label=\"'超时时长：'\">{{ stepInfo.timeout }} (s)</detail-item>\r\n        <detail-item :label=\"'错误处理：'\">{{ stepInfo.ignoreErrorText }}</detail-item>\r\n        <detail-item :label=\"'上传限速：'\">{{ stepInfo.uploadSpeedLimitText }}</detail-item>\r\n        <detail-item :label=\"'下载限速：'\">{{ stepInfo.downloadSpeedLimitText }}</detail-item>\r\n        <detail-item :label=\"'文件来源：'\" layout=\"vertical\">\r\n            <render-source-file\r\n                v-if=\"!isLoading\"\r\n                :data=\"stepInfo.fileSourceList\"\r\n                :variable=\"variable\"\r\n                :account=\"account\" />\r\n        </detail-item>\r\n        <detail-item :label=\"'目标路径：'\">{{ stepInfo.fileDestination.path }}</detail-item>\r\n        <detail-item :label=\"'传输模式：'\">{{ stepInfo.transferModeText }}</detail-item>\r\n        <detail-item :label=\"'执行帐号：'\">{{ executeAccountText }}</detail-item>\r\n        <detail-item v-if=\"stepInfo.fileDestination.server.variable\" :label=\"'执行目标：'\">\r\n            <render-global-variable\r\n                :type=\"'执行目标'\"\r\n                :data=\"variable\"\r\n                :name=\"stepInfo.fileDestination.server.variable\" />\r\n        </detail-item>\r\n        <detail-item v-else :label=\"'执行目标：'\" layout=\"vertical\">\r\n            <server-panel\r\n                detail-fullscreen\r\n                :host-node-info=\"stepInfo.fileDestination.server.hostNodeInfo\" />\r\n        </detail-item>\r\n    </div>\r\n</template>\r\n<script>\r\n    import AccountManageService from '@service/account-manage';\r\n    import ServerPanel from '@components/choose-ip/server-panel';\r\n    import RenderSourceFile from './components/render-source-file';\r\n    import DetailItem from '@components/detail-layout/item';\r\n    import RenderGlobalVariable from './components/render-global-variable';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            ServerPanel,\r\n            RenderSourceFile,\r\n            RenderGlobalVariable,\r\n            DetailItem,\r\n        },\r\n        props: {\r\n            data: {\r\n                type: Object,\r\n                default: () => ({}),\r\n            },\r\n            variable: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: true,\r\n                stepInfo: {},\r\n                executeAccountText: '',\r\n                account: [],\r\n            };\r\n        },\r\n        created () {\r\n            this.stepInfo = Object.freeze(this.data.fileStepInfo);\r\n            this.fetchAccount();\r\n        },\r\n        methods: {\r\n            fetchAccount () {\r\n                this.isLoading = true;\r\n                AccountManageService.fetchAccountWhole()\r\n                    .then((data) => {\r\n                        this.account = data;\r\n                        const accountData = data.find(item => item.id === this.stepInfo.fileDestination.account);\r\n                        if (accountData) {\r\n                            this.executeAccountText = accountData.alias;\r\n                        } else {\r\n                            this.executeAccountText = '--';\r\n                        }\r\n                    })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\" scoped>\r\n    .distro-file-view {\r\n        &.loading {\r\n            height: calc(100vh - 100px);\r\n        }\r\n\r\n        .detail-item {\r\n            margin-bottom: 0;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"exec-script-view\" :class=\"{ loading: isLoading }\" v-bkloading=\"{ isLoading }\">\r\n        <detail-item :label=\"'脚本来源：'\">\r\n            {{ stepInfo.scriptSourceText }}\r\n        </detail-item>\r\n        <detail-item v-if=\"isReferScript\" :label=\"'脚本引用：'\">\r\n            <span>{{ scriptName }}</span>\r\n            <Icon\r\n                class=\"script-detail\"\r\n                type=\"jump\"\r\n                v-bk-tooltips=\"'脚本详情'\"\r\n                @click=\"handleGoScriptDetail\" />\r\n            <div\r\n                v-if=\"stepInfo.isNeedUpdate || stepInfo.isDisabled\"\r\n                class=\"script-update-flag\">\r\n                <span v-html=\"stepInfo.scriptStatusHtml\" />\r\n                <bk-button\r\n                    v-if=\"stepInfo.isNeedUpdate\"\r\n                    text\r\n                    @click=\"handleGoScriptVersion\">\r\n                    {{ '版本对比' }}\r\n                </bk-button>\r\n                <bk-button text @click=\"handleUpdateScript\">\r\n                    {{ '去更新' }}\r\n                </bk-button>\r\n            </div>\r\n        </detail-item>\r\n        <detail-item :label=\"'脚本内容：'\" layout=\"vertical\">\r\n            <ace-editor\r\n                :value=\"stepInfo.content\"\r\n                :lang=\"language\"\r\n                :options=\"languageOption\"\r\n                readonly />\r\n        </detail-item>\r\n        <div>\r\n            <detail-item :label=\"'脚本参数：'\">\r\n                <jb-edit-textarea field=\"scriptParam\" :value=\"stepInfo.scriptParam\" readonly />\r\n            </detail-item>\r\n            <detail-item :label=\"'超时时长：'\">{{ stepInfo.timeout }}（s）</detail-item>\r\n            <detail-item :label=\"'错误处理：'\">{{ stepInfo.ignoreErrorText }}</detail-item>\r\n            <detail-item :label=\"'执行账号：'\">{{ executeAccountText }}</detail-item>\r\n        </div>\r\n        <detail-item v-if=\"stepInfo.executeTarget.variable\" :label=\"'执行目标：'\">\r\n            <render-global-variable\r\n                :type=\"'执行目标'\"\r\n                :name=\"stepInfo.executeTarget.variable\"\r\n                :data=\"variable\" />\r\n        </detail-item>\r\n        <detail-item v-else :label=\"'执行目标：'\" layout=\"vertical\">\r\n            <server-panel\r\n                detail-fullscreen\r\n                :host-node-info=\"stepInfo.executeTarget.hostNodeInfo\" />\r\n        </detail-item>\r\n    </div>\r\n</template>\r\n<script>\r\n    import ScriptService from '@service/script-manage';\r\n    import AccountManageService from '@service/account-manage';\r\n    import AceEditor from '@components/ace-editor';\r\n    import ServerPanel from '@components/choose-ip/server-panel';\r\n    import DetailItem from '@components/detail-layout/item';\r\n    import JbEditTextarea from '@components/jb-edit/textarea';\r\n    import RenderGlobalVariable from './components/render-global-variable';\r\n    import {\r\n        formatScriptTypeValue,\r\n    } from '@utils/assist';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            AceEditor,\r\n            ServerPanel,\r\n            DetailItem,\r\n            JbEditTextarea,\r\n            RenderGlobalVariable,\r\n            \r\n        },\r\n        props: {\r\n            data: {\r\n                type: Object,\r\n                default: () => ({}),\r\n            },\r\n            variable: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                stepInfo: {},\r\n                executeAccountText: '',\r\n                language: '',\r\n                scriptName: '',\r\n                scriptInfo: {},\r\n                isShowScriptSource: false,\r\n                requestQueue: [],\r\n            };\r\n        },\r\n        computed: {\r\n            isLoading () {\r\n                return this.requestQueue.length > 0;\r\n            },\r\n            isReferScript () {\r\n                return this.data.scriptStepInfo.scriptSource && this.data.scriptStepInfo.scriptSource !== 1;\r\n            },\r\n        },\r\n        created () {\r\n            this.stepInfo = Object.freeze(this.data.scriptStepInfo);\r\n            this.language = formatScriptTypeValue(this.stepInfo.scriptLanguage);\r\n            this.languageOption = [\r\n                this.language,\r\n            ];\r\n            if (this.stepInfo.scriptVersionId) {\r\n                this.fetchScriptDetail();\r\n            }\r\n            this.fetchAccount();\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 更新脚本版本获取版本详情\r\n             */\r\n            fetchScriptDetail () {\r\n                this.requestQueue.push(true);\r\n                ScriptService.versionDetail({\r\n                    id: this.stepInfo.scriptVersionId,\r\n                }).then((data) => {\r\n                    this.scriptName = data.name;\r\n                    this.stepInfo.content = data.content;\r\n                    this.scriptInfo = Object.freeze(data);\r\n                })\r\n                    .finally(() => {\r\n                        this.requestQueue.pop();\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 获取完整的账号列表\r\n             */\r\n            fetchAccount () {\r\n                this.requestQueue.push(true);\r\n                AccountManageService.fetchAccountWhole()\r\n                    .then((data) => {\r\n                        const accountData = data.find(item => item.id === this.stepInfo.account);\r\n                        if (accountData) {\r\n                            this.executeAccountText = accountData.alias;\r\n                        } else {\r\n                            this.executeAccountText = '--';\r\n                        }\r\n                    })\r\n                    .finally(() => {\r\n                        this.requestQueue.pop();\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 新开窗口跳转脚本版本列表\r\n             */\r\n            handleGoScriptDetail () {\r\n                const routerName = this.scriptInfo.publicScript ? 'publicScriptVersion' : 'scriptVersion';\r\n\r\n                const router = this.$router.resolve({\r\n                    name: routerName,\r\n                    params: {\r\n                        id: this.stepInfo.scriptId,\r\n                    },\r\n                    query: {\r\n                        scriptVersionId: this.scriptInfo.scriptVersionId,\r\n                    },\r\n                });\r\n                window.open(router.href);\r\n            },\r\n            /**\r\n             * @desc 脚本版本对比\r\n             */\r\n            handleGoScriptVersion () {\r\n                const routerName = this.isReferPublicScript ? 'publicScriptVersion' : 'scriptVersion';\r\n                const { href } = this.$router.resolve({\r\n                    name: routerName,\r\n                    params: {\r\n                        id: this.stepInfo.scriptId,\r\n                    },\r\n                });\r\n                window.open(href);\r\n            },\r\n            /**\r\n             * @desc 编辑作业模板，更新步骤引用的脚本版本\r\n             */\r\n            handleUpdateScript () {\r\n                this.$router.push({\r\n                    name: 'templateEdit',\r\n                    params: {\r\n                        id: this.$route.params.id,\r\n                        stepId: this.data.id,\r\n                    },\r\n                    query: {\r\n                        from: 'templateDetail',\r\n                    },\r\n                });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .exec-script-view {\r\n        &.loading {\r\n            height: calc(100vh - 100px);\r\n        }\r\n\r\n        .detail-item {\r\n            margin-bottom: 0;\r\n        }\r\n\r\n        .script-detail {\r\n            color: #3a84ff;\r\n            cursor: pointer;\r\n        }\r\n\r\n        .script-update-flag {\r\n            display: inline-block;\r\n\r\n            .script-update {\r\n                color: #ff5656;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"artificial-view\" v-bkloading=\"{ isLoading }\">\r\n        <detail-item :label=\"'确认人：'\">\r\n            <div class=\"approval-wraper\">\r\n                <div v-for=\"role in renderRoleList\" :key=\"role\" class=\"item\">\r\n                    <Icon type=\"user-group-gray\" class=\"approval-flag\" />\r\n                    {{ role }}\r\n                </div>\r\n                <div v-for=\"user in stepInfo.approvalUser.userList\" :key=\"user\" class=\"item\">\r\n                    <Icon type=\"user\" class=\"approval-flag\" />\r\n                    {{ user }}\r\n                </div>\r\n            </div>\r\n        </detail-item>\r\n        <detail-item :label=\"'通知方式：'\">{{ renderChannel }}</detail-item>\r\n        <detail-item :label=\"'确认描述：'\">{{ stepInfo.approvalMessage || '--' }}</detail-item>\r\n    </div>\r\n</template>\r\n<script>\r\n    import QueryGlobalSettingService from '@service/query-global-setting';\r\n    import NotifyService from '@service/notify';\r\n    import DetailItem from '@components/detail-layout/item';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            DetailItem,\r\n        },\r\n        inheritAttrs: false,\r\n        props: {\r\n            data: {\r\n                type: Object,\r\n                default: () => ({}),\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: true,\r\n                stepInfo: {},\r\n                renderRoleList: [{},{},{}],\r\n                renderChannel: '',\r\n            };\r\n        },\r\n        created () {\r\n            this.stepInfo = Object.freeze(this.data.approvalStepInfo);\r\n            Promise.all([\r\n                this.fetchRoleList(),\r\n                this.fetchAllChannel(),\r\n            ]).finally(() => {\r\n                this.isLoading = false;\r\n            });\r\n        },\r\n        methods: {\r\n            fetchRoleList () {\r\n                NotifyService.fetchRoleList()\r\n                    .then((data) => {\r\n                        const roleMap = {};\r\n                        data.forEach((role) => {\r\n                            roleMap[role.code] = role.name;\r\n                        });\r\n                        // 过滤掉已经被删除的角色分组\r\n                        this.renderRoleList = this.stepInfo.approvalUser.roleList.reduce((result, item) => {\r\n                            if (roleMap[item]) {\r\n                                result.push(roleMap[item]);\r\n                            }\r\n                            return result;\r\n                        }, []);\r\n                    });\r\n            },\r\n            fetchAllChannel () {\r\n                if (this.stepInfo.notifyChannel.length < 1) {\r\n                    this.renderChannel = '--';\r\n                    return Promise.resolve();\r\n                }\r\n                QueryGlobalSettingService.fetchActiveNotifyChannel()\r\n                    .then((data) => {\r\n                        const channelMap = {};\r\n                        data.forEach((channel) => {\r\n                            channelMap[channel.code] = channel.name;\r\n                        });\r\n                        const channel = this.stepInfo.notifyChannel.reduce((result, item) => {\r\n                            // 过滤掉已经被删除的通知渠道\r\n                            if (channelMap[item]) {\r\n                                result.push(channelMap[item]);\r\n                            }\r\n                            return result;\r\n                        }, []);\r\n                        if (channel.length < 1) {\r\n                            this.renderChannel = '--';\r\n                        }\r\n                        this.renderChannel = channel.join('，');\r\n                    });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    .artificial-view {\r\n        .detail-item {\r\n            margin-bottom: 0;\r\n        }\r\n\r\n        .approval-wraper {\r\n            display: flex;\r\n            align-items: center;\r\n            flex-wrap: wrap;\r\n            min-height: 34px;\r\n            margin-top: -5px;\r\n\r\n            .item {\r\n                display: flex;\r\n                height: 20px;\r\n                padding: 0 6px;\r\n                margin-top: 10px;\r\n                margin-right: 10px;\r\n                font-size: 12px;\r\n                color: #63656e;\r\n                background: #f0f1f5;\r\n                border-radius: 2px;\r\n                align-items: center;\r\n            }\r\n\r\n            .approval-flag {\r\n                margin-right: 4px;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <detail-layout mode=\"see\" class=\"detail-layout-wrapper\">\r\n        <detail-item :label=\"'步骤类型：'\">{{ stepTypeText }}</detail-item>\r\n        <detail-item :label=\"'步骤名称：'\">{{ data.name }}</detail-item>\r\n        <component\r\n            ref=\"stepCom\"\r\n            :is=\"stepCom\"\r\n            :variable=\"variable\"\r\n            :data=\"data\" />\r\n    </detail-layout>\r\n</template>\r\n<script>\r\n       import DetailLayout from '@components/detail-layout';\r\n    import DetailItem from '@components/detail-layout/item';\r\n    import StepDistroFile from './distro-file';\r\n    import StepExecScript from './exec-script';\r\n    import StepArificial from './artificial';\r\n\r\n    const STEP_TYPE_LIST = {\r\n        1: '执行脚本',\r\n        2: '分发文件',\r\n        3: '人工确认',\r\n    };\r\n\r\n    export default {\r\n        components: {\r\n            StepDistroFile,\r\n            StepExecScript,\r\n            StepArificial,\r\n            DetailLayout,\r\n            DetailItem,\r\n        },\r\n        props: {\r\n            variable: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n            data: {\r\n                type: Object,\r\n                default: () => ({}),\r\n            },\r\n        },\r\n        computed: {\r\n            stepTypeText () {\r\n                return STEP_TYPE_LIST[this.data.type];\r\n            },\r\n            stepCom () {\r\n                const taskStepMap = {\r\n                    1: StepExecScript,\r\n                    2: StepDistroFile,\r\n                    3: StepArificial,\r\n                };\r\n                if (!Object.prototype.hasOwnProperty.call(taskStepMap, this.data.type)) {\r\n                    return 'div';\r\n                }\r\n                return taskStepMap[this.data.type];\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\" scoped>\r\n    .detail-layout-wrapper {\r\n        .detail-item {\r\n            margin-bottom: 0;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div\r\n        v-if=\"isShow\"\r\n        v-bk-tooltips=\"'回到顶部'\"\r\n        class=\"job-back-top\"\r\n        :class=\"classes\"\r\n        :style=\"styles\"\r\n        @click=\"handleBackTop\">\r\n        <Icon type=\"up-to-top\" />\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n    import {\r\n        scrollTopSmooth,\r\n    } from '@utils/assist';\r\n\r\n    export default {\r\n        name: '',\r\n        props: {\r\n            // 可滚动容器元素\r\n            target: {\r\n                type: Function,\r\n                default: () => document.querySelector('.jb-navigation-main').querySelector('.scroll-faker-content'),\r\n            },\r\n            size: {\r\n                type: String,\r\n                default: 'normal',\r\n            },\r\n            fixed: {\r\n                type: Boolean,\r\n                default: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isShow: false,\r\n            };\r\n        },\r\n        computed: {\r\n            classes () {\r\n                return `theme-${this.size}`;\r\n            },\r\n            styles () {\r\n                if (!this.fixed) {\r\n                    return {};\r\n                }\r\n                return {\r\n                    position: 'fixed',\r\n                    right: '34px',\r\n                    bottom: '92px',\r\n                };\r\n            },\r\n        },\r\n        mounted () {\r\n            this.smartPosition();\r\n            window.addEventListener('resize', this.smartPosition);\r\n            const observer = new MutationObserver((payload) => {\r\n                this.smartPosition();\r\n            });\r\n            observer.observe(this.target(), {\r\n                subtree: true,\r\n                childList: true,\r\n                attributeName: true,\r\n                characterData: true,\r\n            });\r\n            this.$once('hook:beforeDestroy', () => {\r\n                observer.takeRecords();\r\n                observer.disconnect();\r\n                window.removeEventListener('resize', this.smartPosition);\r\n            });\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 计算位置\r\n             */\r\n            smartPosition: _.debounce(function () {\r\n                const $srollContainer = this.target();\r\n                if (!$srollContainer) {\r\n                    return;\r\n                }\r\n                const selfHeight = $srollContainer.getBoundingClientRect().height;\r\n                const { scrollHeight } = $srollContainer;\r\n                this.isShow = scrollHeight > selfHeight + 30;\r\n            }, 300),\r\n            /**\r\n             * @desc 点击按钮目标容器滚动到顶部\r\n             */\r\n            handleBackTop () {\r\n                const $srollContainer = this.target();\r\n                scrollTopSmooth($srollContainer, 0);\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .job-back-top {\r\n        display: flex;\r\n        width: 28px;\r\n        height: 28px;\r\n        color: #fff;\r\n        cursor: pointer;\r\n        background: rgb(0 0 0 / 25%);\r\n        border-radius: 50%;\r\n        align-items: center;\r\n        justify-content: center;\r\n\r\n        &:hover {\r\n            background: rgb(0 0 0 / 40%);\r\n        }\r\n\r\n        &.theme-normal {\r\n            width: 36px;\r\n            height: 36px;\r\n            font-size: 20px;\r\n        }\r\n\r\n        &.theme-small {\r\n            width: 28px;\r\n            height: 28px;\r\n            font-size: 16px;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div id=\"templateStepRender\">\r\n        <div class=\"task-step-container\" :class=\"stepContainerClasses\">\r\n            <template v-for=\"(step, index) in steps\">\r\n                <components\r\n                    v-if=\"step.delete !== 1\"\r\n                    :is=\"stepBoxCom\"\r\n                    :list=\"[step]\"\r\n                    :group=\"{\r\n                        name: 'step',\r\n                        pull: 'clone',\r\n                        put: dragStartIndex !== index,\r\n                    }\"\r\n                    :key=\"`${index}_${step.id}`\"\r\n                    @start=\"handleDragStart(index)\"\r\n                    :move=\"handleDragMove\"\r\n                    @add=\"handleDragAdd(index)\"\r\n                    :index=\"index\"\r\n                    class=\"step-drag-box\"\r\n                    :class=\"{\r\n                        sort: isOperation && dragStartIndex > -1,\r\n                    }\">\r\n                    <div\r\n                        class=\"step-content-wraper\"\r\n                        :class=\"{\r\n                            'step-mode-diff': isDiff,\r\n                            'select': isSelect,\r\n                            'not-select': isSelect && !selectValue.includes(step.id),\r\n                            active: index === currentIndex,\r\n                        }\"\r\n                        :order=\"genOrder()\">\r\n                        <div\r\n                            class=\"render-task-step\"\r\n                            :class=\"[diff[step.id] && diff[step.id].type]\">\r\n                            <div class=\"step-content\" @click=\"handleStepClick(index)\">\r\n                                <div class=\"step-icon\">\r\n                                    <Icon :type=\"step.icon\" />\r\n                                </div>\r\n                                <div class=\"step-name\">\r\n                                    <div class=\"step-name-text\">{{ step.name || '--' }}</div>\r\n                                    <!-- 执行脚本，引用脚本的状态 -->\r\n                                    <div v-html=\"step.scriptStatusHtml\" />\r\n                                </div>\r\n                                <Icon v-if=\"isOperation\" type=\"move\" class=\"draggable-flag\" />\r\n                            </div>\r\n                            <div v-if=\"isOperation\" class=\"step-operation\">\r\n                                <Icon\r\n                                    type=\"plus-circle\"\r\n                                    class=\"operation\"\r\n                                    @click=\"handleShowCreate(index)\" />\r\n                                <Icon\r\n                                    type=\"minus-circle\"\r\n                                    class=\"operation\"\r\n                                    @click=\"handleDel(index)\" />\r\n                                <Icon\r\n                                    type=\"edit-2\"\r\n                                    class=\"operation\"\r\n                                    @click=\"handleShowEdit(index)\" />\r\n                                <Icon\r\n                                    type=\"step-copy\"\r\n                                    class=\"operation\"\r\n                                    :tippy-tips=\"'克隆步骤'\"\r\n                                    @mouseover=\"handleCloneStepHover(index, true)\"\r\n                                    @mouseout=\"handleCloneStepHover(index, false)\"\r\n                                    @click=\"handleCloneStep(index)\" />\r\n                            </div>\r\n                            <div v-if=\"isSelect\" class=\"select-flag\" @click=\"handleStepSelect(step)\">\r\n                                <div class=\"select-checked\" />\r\n                            </div>\r\n                            <template v-if=\"isEdit\">\r\n                                <!-- 编辑状态的新建步骤需要标记出来 -->\r\n                                <div v-if=\"!step.id\" class=\"step-new-flag\">new</div>\r\n                            </template>\r\n                            <!-- 本地验证不通过标记 -->\r\n                            <div v-if=\"step.localValidator === false\" class=\"need-validate-falg\">\r\n                                {{ '待补全' }}\r\n                            </div>\r\n                        </div>\r\n                        <!-- 执行方案同步diff标记 -->\r\n                        <div class=\"diff-order\" v-if=\"diff[step.id] && diff[step.id].type === 'move'\">\r\n                            <div v-if=\"diff[step.id].value !== 0\" class=\"order-change\">\r\n                                <Icon :type=\"`${diff[step.id].value < 0 ? 'down-arrow' : 'up-arrow'}`\" />\r\n                                {{ Math.abs(diff[step.id].value) }}\r\n                            </div>\r\n                            <span v-else class=\"order-normal\">-</span>\r\n                        </div>\r\n                    </div>\r\n                </components>\r\n            </template>\r\n            <div\r\n                v-if=\"isOperation\"\r\n                class=\"step-create-btn\"\r\n                key=\"create\"\r\n                v-test=\"{ type: 'button', value: 'create_step' }\"\r\n                @click=\"handleShowCreate(-1)\">\r\n                <Icon type=\"plus\" class=\"action-flag\" />\r\n                {{ '作业步骤'}}\r\n            </div>\r\n        </div>\r\n        <lower-component v-if=\"isView\">\r\n            <jb-sideslider\r\n                :is-show.sync=\"isShowDetail\"\r\n                :title=\"'查看作业步骤'\"\r\n                :show-footer=\"false\"\r\n                :quick-close=\"true\"\r\n                :width=\"896\"\r\n                :media=\"mediaQueryMap\">\r\n                <task-step-view\r\n                    v-if=\"isShowDetail\"\r\n                    ref=\"stepViewRef\"\r\n                    :variable=\"hostVariables\"\r\n                    :data=\"detailInfo\" />\r\n            </jb-sideslider>\r\n        </lower-component>\r\n        <lower-component v-if=\"isOperation\">\r\n            <jb-sideslider\r\n                id=\"taskStepOperationSideslider\"\r\n                :is-show.sync=\"isShowOperation\"\r\n                v-bind=\"operationSideSliderInfo\"\r\n                :width=\"916\"\r\n                :media=\"mediaQueryMap\">\r\n                <task-step-operation\r\n                    v-if=\"isShowOperation\"\r\n                    ref=\"taskStep\"\r\n                    :variable=\"hostVariables\"\r\n                    :script-variables=\"scriptVariables\"\r\n                    :data=\"operationData\"\r\n                    @on-change=\"handleTaskStepSubmit\" />\r\n            </jb-sideslider>\r\n        </lower-component>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n       import Draggable from 'vuedraggable';\r\n    import TaskStepModel from '@model/task/task-step';\r\n    import JbSideslider from '@components/jb-sideslider';\r\n    import TaskStepOperation from './task-step';\r\n    import TaskStepView from './task-step-view';\r\n\r\n    export default {\r\n        name: 'RenderTaskStep',\r\n        components: {\r\n            Draggable,\r\n            JbSideslider,\r\n            TaskStepOperation,\r\n            TaskStepView,\r\n        },\r\n        props: {\r\n            list: {\r\n                type: Array,\r\n                required: true,\r\n            },\r\n            /*\r\n             * @value '': 仅可查看详情\r\n             * @value 'operate': 可编辑可新建可删除\r\n             * @value 'select': 选择模式\r\n             * @value 'diff': diff场景\r\n             */\r\n            mode: {\r\n                type: String,\r\n                default: '',\r\n            },\r\n            selectValue: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n            // 全局变量 list\r\n            variable: {\r\n                type: Array,\r\n                default: () => [],\r\n            },\r\n            diff: {\r\n                type: Object,\r\n                default: () => ({}),\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                steps: [],\r\n                isShowOperation: false,\r\n                isShowDetail: false,\r\n                isShowClone: false,\r\n                operationType: '',\r\n                currentIndex: -1,\r\n                operationData: {},\r\n                detailInfo: {},\r\n                dragStartIndex: -1,\r\n                mediaQueryMap: [1000, 1100, 1200, 1300],\r\n            };\r\n        },\r\n        computed: {\r\n            /**\r\n             * @desc 步骤有id说明是编辑状态\r\n             * @return {Boolean}\r\n             */\r\n            isEdit () {\r\n                // eslint-disable-next-line no-plusplus\r\n                for (let i = 0; i < this.list.length; i++) {\r\n                    if (this.list[i].id) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            },\r\n            /**\r\n             * @desc 操作模板步骤（新建、编辑）\r\n             * @return {Boolean}\r\n             */\r\n            isOperation () {\r\n                return this.mode === 'operation';\r\n            },\r\n            /**\r\n             * @desc 选择模板步骤（用于编辑执行的场景）\r\n             * @return {Boolean}\r\n             */\r\n            isSelect () {\r\n                return this.mode === 'select';\r\n            },\r\n            /**\r\n             * @desc 查看作业模板步骤\r\n             * @return {Boolean}\r\n             */\r\n            isView () {\r\n                return !this.mode || this.mode === 'select';\r\n            },\r\n            /**\r\n             * @desc 作业模板步骤同比查看差异\r\n             * @return {Boolean}\r\n             */\r\n            isDiff () {\r\n                return this.mode === 'diff';\r\n            },\r\n            /**\r\n             * @desc 作业模板步骤可以编辑时需要能拖动排序\r\n             * @return {String}\r\n             */\r\n            stepBoxCom () {\r\n                if (this.isOperation) {\r\n                    return 'draggable';\r\n                }\r\n                return 'div';\r\n            },\r\n            /**\r\n             * @desc 步骤编辑的样式 class\r\n             * @return {Object}\r\n             */\r\n            stepContainerClasses () {\r\n                const classes = {};\r\n                if (!this.isShowOperation && !this.isShowDetail && !this.isShowClone) {\r\n                    return classes;\r\n                }\r\n                classes[this.operationType] = true;\r\n                return classes;\r\n            },\r\n            /**\r\n             * @desc 步骤的执行目标只能选中主机变量\r\n             * @return {Array}\r\n             */\r\n            hostVariables () {\r\n                return this.variable.filter(item => !item.delete && item.isHost);\r\n            },\r\n            /**\r\n             * @desc 脚本步骤中脚本内容可使用非主机变量\r\n             * @return {Array}\r\n             */\r\n            scriptVariables () {\r\n                return this.variable.filter(item => !item.delete && !item.isHost);\r\n            },\r\n            /**\r\n             * @desc 步骤操作弹层的信息\r\n             * @return {Object}\r\n             */\r\n            operationSideSliderInfo () {\r\n                if (this.operationType === 'create') {\r\n                    return {\r\n                        title: '新建作业步骤',\r\n                        okText: '提交',\r\n                    };\r\n                }\r\n                return {\r\n                    title: '编辑作业步骤',\r\n                    okText: '保存',\r\n                };\r\n            },\r\n        },\r\n        watch: {\r\n            list: {\r\n                handler (list) {\r\n                    if (this.isOperation) {\r\n                        if (list.length < 1) {\r\n                            this.steps = [];\r\n                            return;\r\n                        }\r\n                    }\r\n                    this.steps = Object.freeze([...list]);\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        created () {\r\n            // 重新计算每个步骤的索引值（被删除的步骤不被显示）\r\n            this.order = 0;\r\n        },\r\n        beforeUpdate () {\r\n            // 重新计算每个步骤的索引值（被删除的步骤不被显示）\r\n            this.order = 0;\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 外部调用——点击指定 index 的步骤\r\n             */\r\n            clickStepByIndex (index) {\r\n                this.handleStepClick(index);\r\n            },\r\n            genOrder () {\r\n                this.order += 1;\r\n                return this.order;\r\n            },\r\n            /**\r\n             * @desc 鼠标点击某个步骤\r\n             * @param {Object} payload 点击的模板步骤数据\r\n             * @param {Number} index 点击的模板步骤索引\r\n             */\r\n            handleStepClick (index) {\r\n                if (this.isOperation) {\r\n                    // 编辑步骤\r\n                    this.handleShowEdit(index);\r\n                    return;\r\n                }\r\n                // 查看步骤详情\r\n                this.currentIndex = index;\r\n                this.operationType = 'detail';\r\n                this.detailInfo = this.steps[index];\r\n                this.isShowDetail = true;\r\n            },\r\n            /**\r\n             * @desc 操作执行方案步骤时，选择作业模板的步骤\r\n             * @param {Object} step 点击的模板步骤数据\r\n             */\r\n            handleStepSelect (step) {\r\n                this.$emit('on-select', step);\r\n            },\r\n            /**\r\n             * @desc 显示编辑作业模板步骤的弹层\r\n             * @param {Number} index 点击的模板步骤索引\r\n             */\r\n            handleShowEdit (index) {\r\n                this.operationType = 'edit';\r\n                this.currentIndex = index;\r\n                this.operationData = this.steps[index];\r\n                this.isShowOperation = true;\r\n            },\r\n            /**\r\n             * @desc 鼠标hover克隆按钮时需要显示克隆步骤的placeholder\r\n             * @param {Number} index 点击的模板步骤索引\r\n             * @param {Boolean} isHover 鼠标的hover状态\r\n             */\r\n            handleCloneStepHover (index, isHover) {\r\n                if (isHover) {\r\n                    this.currentIndex = index;\r\n                    this.operationType = 'clone';\r\n                    this.isShowClone = true;\r\n                } else {\r\n                    this.currentIndex = -1;\r\n                    this.operationType = '';\r\n                    this.isShowClone = false;\r\n                }\r\n            },\r\n            /**\r\n             * @desc 克隆作业模板步骤\r\n             * @param {Number} index 点击的模板步骤索引\r\n             */\r\n            handleCloneStep (index) {\r\n                const steps = [...this.steps];\r\n\r\n                let newStep = {\r\n                    ...steps[index],\r\n                };\r\n                newStep.id = 0;\r\n                newStep.name = `${newStep.name}_copy`;\r\n                newStep = new TaskStepModel(newStep, true);\r\n                steps.splice(index + 1, 0, newStep);\r\n\r\n                this.steps = Object.freeze(steps);\r\n                this.handleCloneStepHover(-1, false);\r\n                this.$emit('on-change', steps);\r\n            },\r\n            /**\r\n             * @desc 点击作业模板新建按钮在对应步骤后面追加一个新步骤\r\n             * @param {Number} index 点击的模板步骤索引\r\n             */\r\n            handleShowCreate (index) {\r\n                this.operationType = 'create';\r\n                this.currentIndex = index;\r\n                this.operationData = {};\r\n                this.isShowOperation = true;\r\n            },\r\n            /**\r\n             * @desc 删除作业模板新建\r\n             * @param {Number} index 将要的模板步骤索引\r\n             */\r\n            handleDel (index) {\r\n                this.$bkInfo({\r\n                    title: '确定删除该步骤？',\r\n                    subTitle: '删除之后不可恢复，请谨慎操作！',\r\n                    confirmFn: () => {\r\n                        const steps = [...this.steps];\r\n\r\n                        const currentStep = steps[index];\r\n                        if (currentStep.id > 0) {\r\n                            // 删除已存在的步骤\r\n                            //  —设置delete\r\n                            currentStep.delete = 1;\r\n                        } else {\r\n                            // 删除新建的步骤\r\n                            //  —直接删除\r\n                            steps.splice(index, 1);\r\n                        }\r\n\r\n                        this.steps = Object.freeze(steps);\r\n                        this.$emit('on-change', steps);\r\n                    },\r\n                });\r\n            },\r\n            /**\r\n             * @desc 提交作业模板步骤的操作\r\n             * @param {Number} payload 将要的模板步骤索引\r\n             * @param {Boolean} localValidator 表单验证结果\r\n             */\r\n            handleTaskStepSubmit (payload, localValidator) {\r\n                const operationStep = new TaskStepModel(payload);\r\n                const steps = [...this.steps];\r\n\r\n                // 重要！！！\r\n                // 新建脚本过程中不做验证，但要给出验证不通过的标记\r\n                operationStep.localValidator = localValidator;\r\n\r\n                if (this.operationType === 'create') {\r\n                    if (this.currentIndex === -1) {\r\n                        steps.push(operationStep);\r\n                    } else {\r\n                        steps.splice(this.currentIndex + 1, 0, operationStep);\r\n                    }\r\n                } else {\r\n                    steps.splice(this.currentIndex, 1, operationStep);\r\n                }\r\n\r\n                this.steps = Object.freeze(steps);\r\n                this.$emit('on-change', steps);\r\n            },\r\n            /**\r\n             * @desc 选中拖动的作业模板步骤\r\n             * @param {Number} index 拖动的模板步骤索引\r\n             */\r\n            handleDragStart (index) {\r\n                this.dragStartIndex = index;\r\n            },\r\n            /**\r\n             * @desc 拖动作业模板步骤\r\n             * @param {Object} event 拖动事件\r\n             * @return {Boolean}\r\n             */\r\n            handleDragMove: _.throttle(function (event) {\r\n                this.dragFutureIndex = event.draggedContext.futureIndex;\r\n                return true;\r\n            }, 30),\r\n            /**\r\n             * @desc 拖动结束\r\n             * @param {Number} index 拖动的模板步骤索引\r\n             */\r\n            handleDragAdd (index) {\r\n                if (this.dragStartIndex === index) {\r\n                    return;\r\n                }\r\n                if (this.dragStartIndex - index === 1) {\r\n                    if (this.dragFutureIndex === 1) {\r\n                        return;\r\n                    }\r\n                }\r\n                if (this.dragStartIndex - index === -1) {\r\n                    if (this.dragFutureIndex === 0) {\r\n                        return;\r\n                    }\r\n                }\r\n                const steps = [...this.steps];\r\n\r\n                const startStep = steps[this.dragStartIndex];\r\n                steps.splice(this.dragStartIndex, 1);\r\n                steps.splice(index, 0, startStep);\r\n\r\n                this.dragStartIndex = -1;\r\n                this.steps = Object.freeze(steps);\r\n                this.$emit('on-change', steps);\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    @import \"@/css/mixins/media\";\r\n\r\n    @mixin step-active {\r\n        .step-content {\r\n            color: #3a84ff;\r\n            background: #e1ecff;\r\n            border-color: #3a84ff;\r\n        }\r\n\r\n        .step-icon {\r\n            color: #3a84ff;\r\n            background: #e1ecff;\r\n            border-color: transparent !important;\r\n        }\r\n\r\n        .draggable-flag {\r\n            display: block;\r\n        }\r\n    }\r\n\r\n    .task-step-container {\r\n        display: flex;\r\n        flex-direction: column;\r\n        width: 500px;\r\n\r\n        @media (--small-viewports) {\r\n            width: 500px;\r\n        }\r\n\r\n        @media (--medium-viewports) {\r\n            width: 560px;\r\n        }\r\n\r\n        @media (--large-viewports) {\r\n            width: 620px;\r\n        }\r\n\r\n        @media (--huge-viewports) {\r\n            width: 680px;\r\n        }\r\n\r\n        &.detail,\r\n        &.edit,\r\n        &.create {\r\n            .step-content-wraper {\r\n                &.active {\r\n                    .render-task-step {\r\n                        @include step-active;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        &.create,\r\n        &.clone {\r\n            .step-content-wraper {\r\n                &.active {\r\n                    &::after {\r\n                        display: block;\r\n                        height: 42px;\r\n                        margin-top: 10px;\r\n                        background: #e1ecff;\r\n                        border-radius: 2px;\r\n                        content: \"\";\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    .step-drag-box {\r\n        position: relative;\r\n\r\n        &:hover,\r\n        &.sort {\r\n            .step-content-wraper {\r\n                &::before {\r\n                    content: attr(order);\r\n                }\r\n            }\r\n        }\r\n\r\n        &:hover {\r\n            .step-content-wraper {\r\n                &::before {\r\n                    color: #3a84ff;\r\n                    background: #e1ecff;\r\n                    border-color: #3a84ff;\r\n                }\r\n            }\r\n        }\r\n\r\n        & ~ .step-drag-box {\r\n            margin-top: 10px;\r\n        }\r\n    }\r\n\r\n    .step-content-wraper {\r\n        position: relative;\r\n        cursor: pointer;\r\n\r\n        &::before {\r\n            position: absolute;\r\n            top: 0;\r\n            left: -2px;\r\n            height: 16px;\r\n            padding: 0 5px;\r\n            font-size: 12px;\r\n            font-weight: bold;\r\n            line-height: 16px;\r\n            color: #63656e;\r\n            background: #f0f1f5;\r\n            border: 1px solid #c4c6cc;\r\n            border-radius: 2px;\r\n            transform: translateX(-100%);\r\n        }\r\n\r\n        &.sortable-ghost {\r\n            height: 42px;\r\n            background: #e1ecff;\r\n\r\n            &::before {\r\n                content: none !important;\r\n            }\r\n\r\n            .render-task-step {\r\n                display: none;\r\n            }\r\n        }\r\n\r\n        &.select {\r\n            .step-content,\r\n            .step-icon {\r\n                border-color: #3a84ff;\r\n            }\r\n\r\n            .step-icon {\r\n                color: #3a84ff;\r\n                background: #e1ecff;\r\n            }\r\n\r\n            .select-flag {\r\n                position: absolute;\r\n                top: 0;\r\n                right: 0;\r\n                bottom: 0;\r\n                display: flex;\r\n                align-items: center;\r\n                padding-right: 22px;\r\n                padding-left: 20px;\r\n\r\n                &::before {\r\n                    position: absolute;\r\n                    width: 1px;\r\n                    height: 22px;\r\n                    margin-left: -22px;\r\n                    background: #d8d8d8;\r\n                    content: \"\";\r\n                }\r\n\r\n                .select-checked {\r\n                    position: relative;\r\n                    display: block;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                    background: #3a84ff;\r\n                    border: 1px solid #3a84ff;\r\n                    border-radius: 50%;\r\n\r\n                    &::after {\r\n                        position: absolute;\r\n                        top: 1px;\r\n                        left: 5px;\r\n                        width: 4px;\r\n                        height: 8px;\r\n                        border: 2px solid #fff;\r\n                        border-top: 0;\r\n                        border-left: 0;\r\n                        content: \"\";\r\n                        transform: rotate(45deg) scale(1);\r\n                        transition: all 0.15s;\r\n                        transform-origin: center;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        &.not-select {\r\n            .step-icon {\r\n                color: #c4c6cc;\r\n                background: #f0f1f5;\r\n                border-color: #dcdee5;\r\n            }\r\n\r\n            .step-content {\r\n                color: #979ba5;\r\n                background: transparent;\r\n                border-color: #dcdee5;\r\n            }\r\n\r\n            .select-flag {\r\n                .select-checked {\r\n                    background: transparent;\r\n                    border-color: #c4c6cc;\r\n\r\n                    &::after {\r\n                        transform: scale(0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    .render-task-step {\r\n        position: relative;\r\n\r\n        &:hover {\r\n            .step-operation {\r\n                display: flex;\r\n            }\r\n\r\n            .need-validate-falg {\r\n                display: none;\r\n            }\r\n\r\n            @include step-active;\r\n        }\r\n\r\n        .step-content {\r\n            display: flex;\r\n            height: 42px;\r\n            color: #63656e;\r\n            background: #fff;\r\n            border: 1px solid #c4c6cc;\r\n            border-radius: 2px;\r\n            box-sizing: border-box;\r\n\r\n            &.active {\r\n                background: #e1ecff;\r\n                border-color: #3a84ff;\r\n\r\n                .step-icon {\r\n                    background: inherit;\r\n                    border-color: transparent;\r\n                }\r\n            }\r\n        }\r\n\r\n        .step-icon {\r\n            display: flex;\r\n            height: 100%;\r\n            font-size: 16px;\r\n            background: #f0f1f5;\r\n            border-right: 1px solid #c4c6cc;\r\n            align-items: center;\r\n            justify-content: center;\r\n            flex: 0 0 42px;\r\n        }\r\n\r\n        .draggable-flag {\r\n            position: absolute;\r\n            top: 50%;\r\n            right: 0;\r\n            display: none;\r\n            font-size: 33px;\r\n            color: #3a84ff;\r\n            transform: translateY(-50%);\r\n        }\r\n\r\n        .step-name {\r\n            position: relative;\r\n            display: flex;\r\n            align-items: center;\r\n            padding-left: 9px;\r\n\r\n            .step-name-text {\r\n                max-width: 400px;\r\n                overflow: hidden;\r\n                font-size: 14px;\r\n                text-overflow: ellipsis;\r\n                white-space: nowrap;\r\n            }\r\n\r\n            &:hover {\r\n                color: #3a84ff;\r\n            }\r\n        }\r\n\r\n        .step-update {\r\n            position: absolute;\r\n            right: -14px;\r\n            width: 6px;\r\n            height: 6px;\r\n            background: #ff5656;\r\n            border-radius: 50%;\r\n        }\r\n\r\n        .step-operation {\r\n            position: absolute;\r\n            top: 50%;\r\n            right: 0;\r\n            display: none;\r\n            align-items: center;\r\n            height: 40px;\r\n            padding-left: 12px;\r\n            font-size: 18px;\r\n            color: #c4c6cc;\r\n            transform: translateX(100%) translateY(-50%);\r\n\r\n            .operation {\r\n                padding: 12px 8px 12px 0;\r\n                cursor: pointer;\r\n\r\n                &.active,\r\n                &:hover {\r\n                    color: #3a84ff;\r\n                }\r\n            }\r\n        }\r\n\r\n        .select-flag {\r\n            display: none;\r\n        }\r\n\r\n        .step-new-flag {\r\n            position: absolute;\r\n            top: -7px;\r\n            right: -8px;\r\n            display: flex;\r\n            width: 32px;\r\n            height: 16px;\r\n            font-size: 12px;\r\n            color: #fff;\r\n            text-align: center;\r\n            background: #3a84ff;\r\n            border-radius: 2px;\r\n            align-items: center;\r\n            justify-content: center;\r\n        }\r\n\r\n        .need-validate-falg {\r\n            position: absolute;\r\n            top: 50%;\r\n            right: 0;\r\n            height: 18px;\r\n            padding: 0 4px;\r\n            margin-right: -12px;\r\n            font-size: 12px;\r\n            line-height: 18px;\r\n            color: #ea3636;\r\n            background: #fdd;\r\n            transform: translateY(-50%) translateX(100%);\r\n\r\n            &::before {\r\n                position: absolute;\r\n                width: 0;\r\n                height: 0;\r\n                margin-left: -22px;\r\n                border: 9px solid transparent;\r\n                border-right-color: #fdd;\r\n                content: \"\";\r\n            }\r\n\r\n            &::after {\r\n                position: absolute;\r\n                top: 50%;\r\n                left: -4px;\r\n                width: 4px;\r\n                height: 4px;\r\n                background: #fff;\r\n                border-radius: 50%;\r\n                content: \"\";\r\n                transform: translateY(-50%);\r\n            }\r\n        }\r\n    }\r\n\r\n    .step-create-btn {\r\n        display: flex;\r\n        width: 100%;\r\n        height: 42px;\r\n        margin-top: 10px;\r\n        font-size: 14px;\r\n        color: #979ba5;\r\n        cursor: pointer;\r\n        border: 1px dashed #c4c6cc;\r\n        align-items: center;\r\n        justify-content: center;\r\n\r\n        &:hover {\r\n            color: #3a84ff;\r\n            border-color: #3a84ff;\r\n\r\n            .action-flag {\r\n                color: #3a84ff;\r\n            }\r\n        }\r\n\r\n        .action-flag {\r\n            margin-right: 5px;\r\n            color: #c4c6cc;\r\n        }\r\n    }\r\n\r\n    /* diff 对比的样式 */\r\n    .step-mode-diff {\r\n        cursor: default;\r\n\r\n        &::after {\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            content: \"\";\r\n        }\r\n\r\n        .render-task-step {\r\n            &.new {\r\n                &::after {\r\n                    position: absolute;\r\n                    top: -6px;\r\n                    right: -6px;\r\n                    width: 28px;\r\n                    height: 14px;\r\n                    font-size: 12px;\r\n                    line-height: 14px;\r\n                    color: #fff;\r\n                    text-align: center;\r\n                    background: #ffa86e;\r\n                    content: \"new\";\r\n                }\r\n            }\r\n\r\n            &.new,\r\n            &.move,\r\n            &.different {\r\n                position: relative;\r\n\r\n                .step-content {\r\n                    border-color: #f9c9a9;\r\n                }\r\n\r\n                .step-icon {\r\n                    color: #f5c09e;\r\n                    background: #ffefe4;\r\n                    border-right-color: #f9c9a9;\r\n                }\r\n            }\r\n\r\n            &.delete {\r\n                .step-content {\r\n                    color: #c4c6cc;\r\n                    border-color: #dcdee5;\r\n                }\r\n\r\n                .step-icon {\r\n                    color: #dcdee5;\r\n                    background: #f5f7fa;\r\n                    border-right-color: #dcdee5;\r\n                }\r\n\r\n                .step-name-text {\r\n                    text-decoration: line-through;\r\n                }\r\n            }\r\n        }\r\n\r\n        .diff-order {\r\n            position: absolute;\r\n            top: 50%;\r\n            right: 0;\r\n            width: 50px;\r\n            padding-left: 15px;\r\n            font-size: 14px;\r\n            transform: translate(100%, -50%);\r\n\r\n            .order-change {\r\n                color: #f98d45;\r\n            }\r\n\r\n            .order-normal {\r\n                color: #63656e;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div ref=\"layout\" class=\"plan-action-layout\" :style=\"layoutStyles\">\r\n        <div class=\"loading-wraper\" :class=\"{ 'loading-hidden': showContent }\">\r\n            <div class=\"loading-content\">\r\n                <content-loader\r\n                    :height=\"455\"\r\n                    :width=\"580\"\r\n                    :speed=\"2\"\r\n                    primary-color=\"#EBECF3\"\r\n                    secondary-color=\"#F6F7FB\">\r\n                    <rect x=\"0\" y=\"0\" width=\"128\" height=\"16\" rx=\"1\" />\r\n                    <rect x=\"0\" y=\"148\" width=\"128\" height=\"16\" rx=\"1\" />\r\n                    <rect x=\"0\" y=\"180\" width=\"620\" height=\"42\" rx=\"2\" />\r\n                    <rect x=\"0\" y=\"232\" width=\"620\" height=\"42\" rx=\"2\" />\r\n                    <rect x=\"0\" y=\"284\" width=\"620\" height=\"42\" rx=\"2\" />\r\n                    <rect x=\"0\" y=\"336\" width=\"620\" height=\"42\" rx=\"2\" />\r\n                    <rect x=\"0\" y=\"388\" width=\"620\" height=\"42\" rx=\"2\" />\r\n                    <rect x=\"0\" y=\"28\" width=\"128\" height=\"16\" rx=\"1\" />\r\n                    <rect x=\"0\" y=\"56\" width=\"200\" height=\"50\" rx=\"1\" />\r\n                    <rect x=\"210\" y=\"56\" width=\"200\" height=\"50\" rx=\"1\" />\r\n                    <rect x=\"420\" y=\"56\" width=\"200\" height=\"50\" rx=\"1\" />\r\n                </content-loader>\r\n            </div>\r\n        </div>\r\n        <div class=\"layout-title\">\r\n            <slot name=\"title\">\r\n                <div class=\"title-text\">{{ title }}</div>\r\n            </slot>\r\n            <div class=\"sub-title\">\r\n                <slot name=\"sub-title\" />\r\n            </div>\r\n        </div>\r\n        <div ref=\"content\" class=\"content-wraper\" :style=\"contentStyles\">\r\n            <slot />\r\n        </div>\r\n        <div class=\"layout-footer\" :style=\"footerStyles\">\r\n            <slot name=\"footer\" />\r\n        </div>\r\n        <back-top v-if=\"showContent\" :target=\"getBackTopTarget\" />\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n    import { ContentLoader } from 'vue-content-loader';\r\n    import { getOffset } from '@utils/assist';\r\n    import BackTop from '@components/back-top';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            ContentLoader,\r\n            BackTop,\r\n        },\r\n        props: {\r\n            title: String,\r\n            mode: String,\r\n            planName: String,\r\n            loading: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n            bottomOffset: {\r\n                type: Number,\r\n                default: 0,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                showContent: !this.loading,\r\n                layoutOffsetTop: 0,\r\n                contentOffsetTop: 0,\r\n                footerOffsetLeft: 0,\r\n                isFooterFixed: false,\r\n            };\r\n        },\r\n        computed: {\r\n            layoutStyles () {\r\n                return {\r\n                    height: `calc(100vh - ${this.layoutOffsetTop}px - ${this.bottomOffset}px)`,\r\n                };\r\n            },\r\n            contentStyles () {\r\n                return {\r\n                    'max-height': `calc(100vh - ${this.contentOffsetTop}px - 60px - ${this.bottomOffset}px)`,\r\n                };\r\n            },\r\n            footerStyles () {\r\n                const styles = {\r\n                    'padding-left': `${this.footerOffsetLeft}px`,\r\n                };\r\n                if (!this.isFooterFixed) {\r\n                    return styles;\r\n                }\r\n                return {\r\n                    ...styles,\r\n                    'box-shadow': '0px -2px 4px 0px rgba(0, 0, 0, 0.06)',\r\n                };\r\n            },\r\n        },\r\n        watch: {\r\n            loading (loading) {\r\n                if (loading) {\r\n                    this.showContent = false;\r\n                    this.time = Date.now();\r\n                    return;\r\n                }\r\n                \r\n                const spaceTime = Date.now() - this.time;\r\n                setTimeout(() => {\r\n                    this.showContent = true;\r\n                }, spaceTime > 800 ? 0 : 1000 - spaceTime);\r\n            },\r\n        },\r\n        created () {\r\n            this.time = Date.now();\r\n        },\r\n        mounted () {\r\n            window.addEventListener('resize', this.init);\r\n            this.$once('hook:beforeDestroy', () => {\r\n                window.removeEventListener('resize', this.init);\r\n            });\r\n            this.init();\r\n        },\r\n        updated: _.debounce(function () {\r\n            this.init();\r\n        }, 500),\r\n        methods: {\r\n            init () {\r\n                if (!this.$refs.layout || !this.$refs.content || !document.querySelector('#templateStepRender')) {\r\n                    return;\r\n                }\r\n                const offset = getOffset(this.$refs.layout);\r\n                this.layoutOffsetTop = offset.top;\r\n                this.contentOffsetTop = getOffset(this.$refs.content).top;\r\n                setTimeout(() => {\r\n                    const contentScrollHeight = this.$refs.content.scrollHeight;\r\n                    const contentHeight = this.$refs.content.getBoundingClientRect().height;\r\n                    this.isFooterFixed = contentScrollHeight > contentHeight;\r\n                    const layoutOffsetLeft = this.$refs.layout.getBoundingClientRect().left;\r\n                    const offsetTargetOffsetLeft = document.querySelector('#templateStepRender').getBoundingClientRect().left;\r\n                    this.footerOffsetLeft = offsetTargetOffsetLeft - layoutOffsetLeft;\r\n                });\r\n            },\r\n            getBackTopTarget () {\r\n                return this.$refs.content;\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    @import \"@/css/mixins/scroll\";\r\n\r\n    .plan-action-layout {\r\n        position: relative;\r\n        padding-right: 24px;\r\n        padding-left: 24px;\r\n        overflow: hidden;\r\n        background: #fff;\r\n\r\n        .loading-wraper {\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            z-index: 999;\r\n            width: 100%;\r\n            height: 100%;\r\n            padding-top: 40px;\r\n            padding-left: 40px;\r\n            background: #fff;\r\n            opacity: 100%;\r\n            visibility: visible;\r\n\r\n            &.loading-hidden {\r\n                opacity: 0%;\r\n                visibility: hidden;\r\n                transition: visibility 0.7s linear, opacity 0.5s linear;\r\n            }\r\n\r\n            .loading-content {\r\n                width: 580px;\r\n            }\r\n        }\r\n\r\n        .layout-title {\r\n            display: flex;\r\n            padding-top: 30px;\r\n            padding-bottom: 16px;\r\n            color: #000;\r\n            border-bottom: 1px solid #f0f1f5;\r\n\r\n            .title-text {\r\n                padding-bottom: 14px;\r\n                font-size: 18px;\r\n                line-height: 1;\r\n            }\r\n\r\n            .sub-title {\r\n                margin-left: auto;\r\n            }\r\n        }\r\n\r\n        .content-wraper {\r\n            padding-top: 24px;\r\n            padding-right: 40px;\r\n            margin-right: 2px;\r\n            overflow-y: auto;\r\n\r\n            @mixin scroller;\r\n        }\r\n\r\n        .layout-footer {\r\n            position: relative;\r\n            display: flex;\r\n            height: 60px;\r\n            margin-right: -24px;\r\n            margin-left: -24px;\r\n            background: #fff;\r\n            align-items: center;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"toggle-display\">\r\n        <div class=\"action\" @click=\"handleToggle\">\r\n            <template v-if=\"isOpen\">\r\n                <Icon type=\"angle-double-up\" class=\"toggle-arrow\" />\r\n                <span>{{ '收起未引用的变量' }} ({{ count }})</span>\r\n            </template>\r\n            <template v-else>\r\n                <Icon type=\"angle-double-down\" class=\"toggle-arrow\" />\r\n                <span>{{ '展开未引用的变量' }} ({{ count }})</span>\r\n            </template>\r\n        </div>\r\n        <div v-show=\"isOpen\">\r\n            <slot />\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    export default {\r\n        name: 'ToggleDisplay',\r\n        props: {\r\n            count: {\r\n                type: Number,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isOpen: false,\r\n            };\r\n        },\r\n        methods: {\r\n            handleToggle () {\r\n                this.isOpen = !this.isOpen;\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    .toggle-display {\r\n        .action {\r\n            display: flex;\r\n            align-items: center;\r\n            font-size: 14px;\r\n            line-height: 19px;\r\n            color: #3a84ff;\r\n            cursor: pointer;\r\n            user-select: none;\r\n        }\r\n\r\n        .toggle-arrow {\r\n            margin-right: 3px;\r\n            font-size: 12px;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div ref=\"box\" class=\"plan-edit-title\" @click.stop=\"\">\r\n        <div\r\n            v-if=\"isEditing\"\r\n            class=\"input-box\"\r\n            :class=\"{\r\n                'validate-error': !!errorInfo,\r\n            }\">\r\n            <jb-input\r\n                ref=\"input\"\r\n                v-model=\"localValue\"\r\n                :style=\"{\r\n                    width: `${inputWidth}px`,\r\n                }\"\r\n                :native-attributes=\"{\r\n                    spellcheck: false,\r\n                    autofocus: true,\r\n                }\"\r\n                :placeholder=\"'推荐按照该执行方案提供的使用场景来取名...'\"\r\n                enter-trigger\r\n                :maxlength=\"60\"\r\n                behavior=\"simplicity\"\r\n                @input=\"handleInput\"\r\n                @submit=\"handleSubmit\" />\r\n            <i\r\n                v-if=\"errorInfo\"\r\n                v-bk-tooltips=\"errorInfo\"\r\n                class=\"edit-status-flag bk-icon icon-exclamation-circle-shape\"\r\n                style=\"color: #ea3636;\" />\r\n            <Icon\r\n                v-if=\"isSubmiting\"\r\n                type=\"loading-circle\"\r\n                class=\"edit-status-flag rotate-loading\"\r\n                style=\"color: #979ba5;\" />\r\n        </div>\r\n        <div\r\n            v-else\r\n            ref=\"text\"\r\n            class=\"text\">\r\n            <span>{{ localValue }}</span>\r\n            <Icon\r\n                class=\"edit-btn\"\r\n                type=\"edit-2\"\r\n                @click=\"handleEdit\" />\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n    import TaskPlanService from '@service/task-plan';\r\n       import { calcTextWidth, getOffset } from '@utils/assist';\r\n    import { planNameRule } from '@utils/validator';\r\n\r\n    export default {\r\n        name: '',\r\n        props: {\r\n            data: {\r\n                type: Object,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isSubmiting: false,\r\n                isEditing: false,\r\n                inputWidth: 'auto',\r\n                localValue: '',\r\n                errorInfo: '',\r\n            };\r\n        },\r\n        watch: {\r\n            /**\r\n             * @desc 更新执行方案的名称\r\n             */\r\n            data: {\r\n                handler  () {\r\n                    this.localValue = this.data.name || '';\r\n                    this.localValueMemo = this.localValue;\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        mounted () {\r\n            document.body.addEventListener('click', this.hideCallback);\r\n            this.$once('hook:beforeDestroy', () => {\r\n                document.body.removeEventListener('click', this.hideCallback);\r\n            });\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 切换编辑状态\r\n             */\r\n            hideCallback () {\r\n                if (!this.isEditing) {\r\n                    return;\r\n                }\r\n                this.handleSubmit();\r\n            },\r\n            /**\r\n             * @desc 开始编辑\r\n             */\r\n            handleEdit () {\r\n                this.isSubmiting = false;\r\n                this.isEditing = true;\r\n                this.errorInfo = '';\r\n                this.inputWidth = this.$refs.text.getBoundingClientRect().width;\r\n                // 输入框自动获取焦点\r\n                setTimeout(() => {\r\n                    this.$refs.input.$el.querySelector('.bk-form-input').focus();\r\n                });\r\n            },\r\n            /**\r\n             * @desc 用户输入时自适应输入框宽度\r\n             * @param { String } value 输入值\r\n             */\r\n            handleInput: _.throttle(function (value) {\r\n                const windowClienWidth = window.innerWidth;\r\n                const offset = 60;\r\n                const width = calcTextWidth(value, this.$refs.box) + offset;\r\n                const { left } = getOffset(this.$refs.box);\r\n                const maxWidth = windowClienWidth - left - 230;\r\n                if (width <= maxWidth && width > this.inputWidth) {\r\n                    this.inputWidth = width;\r\n                }\r\n            }, 60),\r\n            /**\r\n             * @desc 提交编辑值\r\n             */\r\n            handleSubmit () {\r\n                this.errorInfo = '';\r\n                // 值没变\r\n                if (this.localValueMemo === this.localValue) {\r\n                    this.isEditing = false;\r\n                    return;\r\n                }\r\n                // 值检验\r\n                if (!this.localValue) {\r\n                    this.errorInfo = '方案名称必填';\r\n                } else if (!planNameRule.validator(this.localValue)) {\r\n                    this.errorInfo = planNameRule.message;\r\n                }\r\n                if (this.errorInfo) {\r\n                    return;\r\n                }\r\n                \r\n                this.isSubmiting = true;\r\n                // 重名检测\r\n                TaskPlanService.planCheckName({\r\n                    templateId: this.data.templateId,\r\n                    planId: this.data.id,\r\n                    name: this.localValue,\r\n                }).then((checkResult) => {\r\n                    if (!checkResult) {\r\n                        this.isSubmiting = false;\r\n                        this.errorInfo = '方案名称已存在，请重新输入';\r\n                        return;\r\n                    }\r\n                    \r\n                    TaskPlanService.planUpdate({\r\n                        id: this.data.id,\r\n                        templateId: this.data.templateId,\r\n                        name: this.localValue,\r\n                        variables: this.data.variableList,\r\n                        enableSteps: this.data.stepList.reduce((result, step) => {\r\n                            if (step.enable) {\r\n                                result.push(step.id);\r\n                            }\r\n                            return result;\r\n                        }, []),\r\n                    }).then(() => {\r\n                        this.localValueMemo = this.localValue;\r\n                        this.isEditing = false;\r\n                        this.$emit('on-edit-success');\r\n                        this.messageSuccess('执行方案名称编辑成功');\r\n                    });\r\n                });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .plan-edit-title {\r\n        position: relative;\r\n        font-size: 14px;\r\n\r\n        .input-box {\r\n            position: relative;\r\n\r\n            .bk-form-input {\r\n                font-size: 14px;\r\n            }\r\n\r\n            &.validate-error {\r\n                .only-bottom-border {\r\n                    border-bottom-color: #ea3636 !important;\r\n                }\r\n            }\r\n\r\n            .edit-status-flag {\r\n                position: absolute;\r\n                top: 8px;\r\n                right: 8px;\r\n                z-index: 10;\r\n                font-size: 16px;\r\n            }\r\n        }\r\n\r\n        .text {\r\n            font-size: 18px;\r\n            line-height: 32px;\r\n            color: #313238;\r\n\r\n            .edit-btn {\r\n                font-size: 15px;\r\n                color: #979ba5;\r\n                cursor: pointer;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <permission-section :key=\"id\">\r\n        <div class=\"task-plan-view-box\">\r\n            <layout\r\n                v-bind=\"$attrs\"\r\n                :title=\"planInfo.name\"\r\n                :plan-name=\"planInfo.name\"\r\n                :loading=\"isLoading\">\r\n                <div slot=\"title\" class=\"view-title\">\r\n                    <edit-title\r\n                        :data=\"planInfo\"\r\n                        @on-edit-success=\"handleEditSuccess\" />\r\n                    <span\r\n                        v-if=\"planInfo.cronJobCount > 0\"\r\n                        class=\"cron-job-tag\"\r\n                        v-bk-tooltips.html=\"`\r\n                            <div>${'有'} ${planInfo.cronJobCount} ${'个定时任务'}</div>\r\n                            <div>${'点击前往查看'}</div>\r\n                        `\"\r\n                        @click=\"handleGoCronList\">\r\n                        <Icon type=\"job-timing\" svg />\r\n                        <span style=\"margin-left: 2px;\">{{ planInfo.cronJobCount }}</span>\r\n                    </span>\r\n                </div>\r\n                <div slot=\"sub-title\" class=\"link-wraper\">\r\n                    <auth-button\r\n                        :resource-id=\"templateId\"\r\n                        auth=\"job_template/view\"\r\n                        text\r\n                        @click=\"handleGoTemplate\">\r\n                        <span>{{ '所属作业模板' }}</span>\r\n                        <Icon type=\"jump\" />\r\n                    </auth-button>\r\n                </div>\r\n                <jb-form form-type=\"vertical\">\r\n                    <jb-form-item\r\n                        :label=\"'全局变量'\"\r\n                        style=\"margin-bottom: 30px;\">\r\n                        <render-global-var\r\n                            :key=\"id\"\r\n                            :list=\"usedVariableList\"\r\n                            :default-field=\"'变量值'\" />\r\n                        <toggle-display\r\n                            v-if=\"unusedVariableList.length > 0\"\r\n                            :count=\"unusedVariableList.length\"\r\n                            style=\"margin-top: 20px;\">\r\n                            <render-global-var\r\n                                :key=\"id\"\r\n                                :list=\"unusedVariableList\"\r\n                                :default-field=\"'变量值'\"\r\n                                style=\"margin-top: 18px;\" />\r\n                        </toggle-display>\r\n                    </jb-form-item>\r\n                    <jb-form-item :label=\"'执行步骤'\">\r\n                        <render-task-step\r\n                            :key=\"id\"\r\n                            :list=\"planInfo.enableStepList\"\r\n                            :variable=\"planInfo.variableList\" />\r\n                    </jb-form-item>\r\n                </jb-form>\r\n                <template #footer>\r\n                    <div class=\"action-box\">\r\n                        <bk-button\r\n                            theme=\"primary\"\r\n                            class=\"w120 mr10\"\r\n                            :loading=\"execLoading\"\r\n                            @click=\"handleExec\"\r\n                            v-test=\"{ type: 'button', value: 'execPlan' }\">\r\n                            {{ '去执行' }}\r\n                        </bk-button>\r\n                        <bk-popover placement=\"top\">\r\n                            <auth-button\r\n                                class=\"mr10\"\r\n                                :permission=\"planInfo.canEdit\"\r\n                                :resource-id=\"id\"\r\n                                auth=\"job_plan/edit\"\r\n                                @click=\"handleEdit\"\r\n                                v-test=\"{ type: 'button', value: 'editPlan' }\">\r\n                                <span>{{ '编辑' }}</span>\r\n                                <span style=\"font-size: 12px; color: #979ba5;\">\r\n                                    ({{ planInfo.enableStepNums }}/{{ planInfo.templateStepNums }})\r\n                                </span>\r\n                            </auth-button>\r\n                            <div slot=\"content\">\r\n                                <p>{{ '共有' }} {{ planInfo.templateStepNums }} {{ '个步骤，' }}</p>\r\n                                <!-- eslint-disable-next-line max-len -->\r\n                                <p>{{ '当前已选中' }} {{ planInfo.enableStepNums }} {{ '个'}}</p>\r\n                            </div>\r\n                        </bk-popover>\r\n                        <auth-button\r\n                            class=\"mr10\"\r\n                            auth=\"cron/create\"\r\n                            @click=\"handleGoCron\"\r\n                            v-test=\"{ type: 'button', value: 'createCrontab' }\">\r\n                            {{ '定时执行' }}\r\n                        </auth-button>\r\n                        <span :tippy-tips=\"!planInfo.needUpdate ? '无需同步' : ''\">\r\n                            <auth-button\r\n                                class=\"action-update\"\r\n                                \r\n                                :resource-id=\"id\"\r\n                                auth=\"job_plan/sync\"\r\n                                @click=\"handleSync\"\r\n                                v-test=\"{ type: 'button', value: 'syncPlan' }\">\r\n                                <span>{{ '去同步' }}</span>\r\n                                <div v-if=\"planInfo.needUpdate\" class=\"update-flag\">\r\n                                    <Icon type=\"sync-8\" :tippy-tips=\"'未同步'\" />\r\n                                </div>\r\n                            </auth-button>\r\n                        </span>\r\n                        <jb-popover-confirm\r\n                            class=\"action-del\"\r\n                            :title=\"'确定删除该执行方案？'\"\r\n                            :content=\"'若已设置了定时任务，需要先删除才能操作'\"\r\n                            :confirm-handler=\"handleDelete\">\r\n                            <auth-button\r\n                                class=\"delete-btn\"\r\n                                :permission=\"planInfo.canDelete\"\r\n                                :resource-id=\"id\"\r\n                                auth=\"job_plan/delete\"\r\n                                v-test=\"{ type: 'button', value: 'deletePlan' }\">\r\n                                {{ '删除' }}\r\n                            </auth-button>\r\n                        </jb-popover-confirm>\r\n                    </div>\r\n                </template>\r\n            </layout>\r\n        </div>\r\n    </permission-section>\r\n</template>\r\n<script>\r\n       import TaskPlanService from '@service/task-plan';\r\n    import TaskExecuteService from '@service/task-execute';\r\n    import { findUsedVariable } from '@utils/assist';\r\n    import PermissionSection from '@components/apply-permission/apply-section';\r\n    import RenderGlobalVar from '../render-global-var';\r\n    import RenderTaskStep from '../render-task-step';\r\n    import Layout from './components/layout';\r\n    import ToggleDisplay from './components/toggle-display';\r\n    import EditTitle from './components/edit-title.vue';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            PermissionSection,\r\n            RenderGlobalVar,\r\n            RenderTaskStep,\r\n            ToggleDisplay,\r\n            Layout,\r\n            EditTitle,\r\n        },\r\n        props: {\r\n            id: {\r\n                type: [Number, String],\r\n                required: true,\r\n            },\r\n            templateId: {\r\n                type: [Number, String],\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                planInfo: {\r\n                    variableList: [{},{},{}],\r\n                    enableStepList: [{},{},{}],\r\n                },\r\n                usedVariableList: [{},{},{}],\r\n                unusedVariableList: [{},{},{}],\r\n                isLoading: true,\r\n                execLoading: false,\r\n                deleteLoading: false,\r\n            };\r\n        },\r\n        \r\n        watch: {\r\n            id: {\r\n                handler (value) {\r\n                    this.fetchData(value);\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 获取执行方案详情\r\n             */\r\n            fetchData () {\r\n                this.isLoading = true;\r\n                TaskPlanService.fetchPlanDetailInfo({\r\n                    id: this.id,\r\n                    templateId: this.templateId,\r\n                }, {\r\n                    permission: 'catch',\r\n                }).then((data) => {\r\n                    this.planInfo = Object.freeze(data);\r\n                    // 处理执行方案步骤中变量的使用情况\r\n                    const planStepList = data.stepList.filter(({ enable }) => enable === 1);\r\n                    const usedVariableNameMap = findUsedVariable(planStepList).reduce((result, variableName) => {\r\n                        result[variableName] = true;\r\n                        return result;\r\n                    }, {});\r\n\r\n                    const usedVariableList = [];\r\n                    const unusedVariableList = [];\r\n                    data.variableList.forEach((variable) => {\r\n                        if (usedVariableNameMap[variable.name]) {\r\n                            usedVariableList.push(variable);\r\n                        } else {\r\n                            unusedVariableList.push(variable);\r\n                        }\r\n                    });\r\n                    this.usedVariableList = Object.freeze(usedVariableList);\r\n                    this.unusedVariableList = Object.freeze(unusedVariableList);\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 立即执行执行方案\r\n             */\r\n            fetchTaskExecution () {\r\n                this.execLoading = true;\r\n                TaskExecuteService.taskExecution({\r\n                    taskId: this.id,\r\n                    taskVariables: [],\r\n                }).then(({ taskInstanceId }) => {\r\n                    this.$bkMessage({\r\n                        theme: 'success',\r\n                        message: '操作成功',\r\n                    });\r\n                    this.$router.push({\r\n                        name: 'historyTask',\r\n                        params: {\r\n                            id: taskInstanceId,\r\n                        },\r\n                        query: {\r\n                            from: this.$route.name,\r\n                        },\r\n                    });\r\n                })\r\n                    .finally(() => {\r\n                        this.execLoading = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 外部调用——刷新接口数据\r\n             */\r\n            refresh () {\r\n                this.fetchData();\r\n            },\r\n            /**\r\n             * @desc 编辑执行方案\r\n             */\r\n            handleEdit () {\r\n                this.$emit('on-edit', {\r\n                    id: this.templateId,\r\n                    active: this.id,\r\n                });\r\n            },\r\n            /**\r\n             * @desc 执行方案编辑成功\r\n             */\r\n            handleEditSuccess () {\r\n                this.$emit('on-edit-success');\r\n            },\r\n            /**\r\n             * @desc 查看执行方案关联的定时任务列表\r\n             */\r\n            handleGoCronList () {\r\n                const { href } = this.$router.resolve({\r\n                    name: 'cronList',\r\n                    query: {\r\n                        planId: this.id,\r\n                    },\r\n                });\r\n                window.open(href);\r\n            },\r\n            /**\r\n             * @desc 查看执行方案关联的作业模板详情\r\n             */\r\n            handleGoTemplate () {\r\n                const { href } = this.$router.resolve({\r\n                    name: 'templateDetail',\r\n                    params: {\r\n                        id: this.templateId,\r\n                    },\r\n                });\r\n                window.open(href);\r\n            },\r\n            /**\r\n             * 以当前执行方案新建定时任务\r\n             */\r\n            handleGoCron () {\r\n                const { href } = this.$router.resolve({\r\n                    name: 'cronList',\r\n                    query: {\r\n                        mode: 'create',\r\n                        templateId: this.templateId,\r\n                        planId: this.id,\r\n                    },\r\n                });\r\n                window.open(href);\r\n            },\r\n            /**\r\n             * @desc 删除执行方案\r\n             */\r\n            handleDelete () {\r\n                return TaskPlanService.planDelete({\r\n                    id: this.id,\r\n                    templateId: this.templateId,\r\n                }).then(() => {\r\n                    this.$bkMessage({\r\n                        theme: 'success',\r\n                        message: '操作成功',\r\n                    });\r\n                    setTimeout(() => {\r\n                        this.$emit('on-delete');\r\n                    });\r\n                    return true;\r\n                });\r\n            },\r\n            /**\r\n             * @desc 同步执行方案\r\n             */\r\n            handleSync () {\r\n                this.$router.push({\r\n                    name: 'syncPlan',\r\n                    params: {\r\n                        id: this.id,\r\n                        templateId: this.templateId,\r\n                    },\r\n                    query: {\r\n                        from: this.$route.name,\r\n                    },\r\n                });\r\n            },\r\n            /**\r\n             * @desc 执行\r\n             *\r\n             * 执行方案中没有变量——直接执行\r\n             * 执行方案中有变量——跳转到设置变量页面\r\n             */\r\n            handleExec () {\r\n                if (!this.planInfo.variableList.length) {\r\n                    this.$bkInfo({\r\n                        title: '确认执行？',\r\n                        subTitle: '未设置全局变量，点击确认将直接执行。',\r\n                        confirmFn: () => {\r\n                            this.fetchTaskExecution();\r\n                        },\r\n                    });\r\n                    return;\r\n                }\r\n                this.$router.push({\r\n                    name: 'settingVariable',\r\n                    params: {\r\n                        id: this.id,\r\n                        templateId: this.templateId,\r\n                    },\r\n                    query: {\r\n                        from: this.$route.name,\r\n                    },\r\n                });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    @import \"@/css/mixins/media\";\r\n\r\n    .task-plan-view-box {\r\n        .view-title {\r\n            flex: 1;\r\n            display: flex;\r\n            align-items: center;\r\n\r\n            .cron-job-tag {\r\n                display: inline-flex;\r\n                display: flex;\r\n                height: 16px;\r\n                padding: 0 4px;\r\n                margin-left: 14px;\r\n                font-size: 12px;\r\n                color: #fff;\r\n                cursor: pointer;\r\n                background: #3a84ff;\r\n                border-radius: 8px;\r\n                user-select: none;\r\n                justify-content: center;\r\n                align-items: center;\r\n            }\r\n\r\n            .link-wraper {\r\n                display: flex;\r\n            }\r\n        }\r\n\r\n        .action-box {\r\n            display: flex;\r\n            width: 500px;\r\n\r\n            @media (--small-viewports) {\r\n                width: 500px;\r\n            }\r\n\r\n            @media (--medium-viewports) {\r\n                width: 560px;\r\n            }\r\n\r\n            @media (--large-viewports) {\r\n                width: 620px;\r\n            }\r\n\r\n            @media (--huge-viewports) {\r\n                width: 680px;\r\n            }\r\n        }\r\n\r\n        .action-update {\r\n            position: relative;\r\n\r\n            .update-flag {\r\n                position: absolute;\r\n                top: -10px;\r\n                right: -10px;\r\n                font-size: 16px;\r\n                line-height: 0;\r\n                color: #ea3636;\r\n                background: #fff;\r\n                border: 2px solid #fff;\r\n            }\r\n        }\r\n\r\n        .action-del {\r\n            margin-left: auto;\r\n        }\r\n\r\n        .delete-btn {\r\n            &:hover {\r\n                color: #fff;\r\n                background: #ea3636;\r\n                border-color: transparent;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <layout\r\n        v-bind=\"$attrs\"\r\n        class=\"task-plan-edit-box\"\r\n        :plan-name=\"name\"\r\n        :loading=\"isLoading\">\r\n        <jb-form\r\n            slot=\"title\"\r\n            ref=\"titleForm\"\r\n            style=\"width: 100%;\"\r\n            :model=\"formData\">\r\n            <jb-form-item\r\n                :rules=\"rules.name\"\r\n                property=\"name\"\r\n                error-display-type=\"tooltips\"\r\n                style=\"margin-bottom: 0;\">\r\n                <jb-input\r\n                    v-model=\"formData.name\"\r\n                    class=\"name-input\"\r\n                    behavior=\"simplicity\"\r\n                    :placeholder=\"'推荐按照该执行方案提供的使用场景来取名...'\"\r\n                    :native-attributes=\"{\r\n                        spellcheck: false,\r\n                        autofocus: true,\r\n                    }\"\r\n                    :maxlength=\"60\" />\r\n            </jb-form-item>\r\n        </jb-form>\r\n        <jb-form\r\n            ref=\"editPlanForm\"\r\n            :model=\"formData\"\r\n            :rules=\"rules\"\r\n            form-type=\"vertical\"\r\n            v-test=\"{ type: 'form', value: 'editPlan' }\">\r\n            <jb-form-item style=\"margin-bottom: 40px;\">\r\n                <div class=\"section-title\">\r\n                    <span>{{ '全局变量' }}</span>\r\n                    <span>（ {{ selectedVariable.length }} / {{ globalVariableList.length }} ）</span>\r\n                </div>\r\n                <render-global-var\r\n                    :key=\"id\"\r\n                    :list=\"globalVariableList\"\r\n                    :select-value=\"selectedVariable\"\r\n                    @on-change=\"handleVariableChange\"\r\n                    :default-field=\"'变量值'\"\r\n                    mode=\"editOfPlan\" />\r\n            </jb-form-item>\r\n            <jb-form-item\r\n                :rules=\"rules.enableSteps\"\r\n                property=\"enableSteps\">\r\n                <div class=\"task-step-selection\">\r\n                    <div class=\"section-title\">\r\n                        <span>{{ '选择执行步骤' }}</span>\r\n                        <span>（ {{ formData.enableSteps.length }} / {{ taskStepList.length }} ）</span>\r\n                    </div>\r\n                    <div class=\"step-check\">\r\n                        <bk-button\r\n                            v-if=\"hasSelectAll\"\r\n                            text\r\n                            @click=\"handleDeselectAll\">\r\n                            {{ '取消全选' }}\r\n                        </bk-button>\r\n                        <bk-button\r\n                            v-else\r\n                            text\r\n                            @click=\"handleSelectAll\">\r\n                            {{ '全选' }}\r\n                        </bk-button>\r\n                    </div>\r\n                </div>\r\n                <render-task-step\r\n                    :key=\"id\"\r\n                    :list=\"taskStepList\"\r\n                    :select-value=\"formData.enableSteps\"\r\n                    :variable=\"globalVariableList\"\r\n                    mode=\"select\"\r\n                    @on-select=\"handleSelectStep\" />\r\n            </jb-form-item>\r\n        </jb-form>\r\n        <template #footer>\r\n            <span v-bk-tooltips=\"isSubmitDisable ? '请至少勾选一个执行步骤' : ''\">\r\n                <bk-button\r\n                    theme=\"primary\"\r\n                    class=\"w120 mr10\"\r\n                    \r\n                    :loading=\"submitLoading\"\r\n                    @click=\"handleSumbit\"\r\n                    v-test=\"{ type: 'button', value: 'editPlanSave' }\">\r\n                    {{ '保存' }}\r\n                </bk-button>\r\n            </span>\r\n            <bk-button\r\n                @click=\"handleCancle\"\r\n                v-test=\"{ type: 'button', value: 'editPlanCancel' }\">\r\n                {{ '取消' }}\r\n            </bk-button>\r\n        </template>\r\n    </layout>\r\n</template>\r\n<script>\r\n       import TaskPlanService from '@service/task-plan';\r\n    import {\r\n        findUsedVariable,\r\n        leaveConfirm,\r\n    } from '@utils/assist';\r\n    import { planNameRule } from '@utils/validator';\r\n    import RenderGlobalVar from '../../common/render-global-var';\r\n    import RenderTaskStep from '../../common/render-task-step';\r\n    import Layout from './components/layout';\r\n\r\n    const getDefaultData = () => ({\r\n        id: 0,\r\n        name: '',\r\n        enableSteps: [],\r\n        templateId: 0,\r\n        variables: [],\r\n    });\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            Layout,\r\n            RenderGlobalVar,\r\n            RenderTaskStep,\r\n        },\r\n        props: {\r\n            id: {\r\n                type: [\r\n                    Number,\r\n                    String,\r\n                ],\r\n                required: true,\r\n            },\r\n            templateId: {\r\n                type: [\r\n                    Number,\r\n                    String,\r\n                ],\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                name: '',\r\n                formData: getDefaultData(),\r\n                globalVariableList: [{},{},{}],\r\n                taskStepList: [{},{},{}],\r\n                isLoading: true,\r\n                submitLoading: false,\r\n            };\r\n        },\r\n        computed: {\r\n            /**\r\n             * @desc 查找步骤中已使用的变量\r\n             * @return {Array}\r\n             */\r\n            selectedVariable () {\r\n                const selectedSteps = this.taskStepList.filter(step => this.formData.enableSteps.includes(step.id));\r\n                return findUsedVariable(selectedSteps);\r\n            },\r\n            /**\r\n             * @desc 已选中所有步骤\r\n             * @return {Boolean}\r\n             */\r\n            hasSelectAll () {\r\n                return this.formData.enableSteps.length >= this.taskStepList.length;\r\n            },\r\n            /**\r\n             * @desc 禁用提交按钮\r\n             * @returns { Boolean }\r\n             */\r\n            isSubmitDisable () {\r\n                return this.formData.enableSteps.length < 1;\r\n            },\r\n        },\r\n        watch: {\r\n            id: {\r\n                handler (value) {\r\n                    this.formData.id = value;\r\n                    this.fetchData();\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        created () {\r\n            this.rules = {\r\n                name: [\r\n                    {\r\n                        required: true,\r\n                        message: '方案名称必填',\r\n                        trigger: 'blur',\r\n                    },\r\n                    {\r\n                        validator: planNameRule.validator,\r\n                        message: planNameRule.message,\r\n                        trigger: 'blur',\r\n                    },\r\n                    {\r\n                        validator: name => TaskPlanService.planCheckName({\r\n                            templateId: this.templateId,\r\n                            planId: this.formData.id,\r\n                            name,\r\n                        }),\r\n                        message: '方案名称已存在，请重新输入',\r\n                        trigger: 'blur',\r\n                    },\r\n                ],\r\n                enableSteps: [\r\n                    {\r\n                        validator: () => this.formData.enableSteps.length,\r\n                        message: '执行步骤必填',\r\n                        trigger: 'blur',\r\n                    },\r\n                ],\r\n            };\r\n            \r\n            this.formData.templateId = this.templateId;\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 获取执行方案详情\r\n             */\r\n            fetchData () {\r\n                this.isLoading = true;\r\n                TaskPlanService.fetchPlanEditInfo({\r\n                    id: this.formData.id,\r\n                    templateId: this.templateId,\r\n                }).then((data) => {\r\n                    const { variableList, stepList, name } = data;\r\n                    this.globalVariableList = variableList;\r\n                    this.taskStepList = stepList;\r\n                    \r\n                    this.name = name;\r\n                    this.formData.enableSteps = data.enableStepId;\r\n                    this.formData.variables = variableList;\r\n                    this.formData.name = name;\r\n                })\r\n                    .catch((error) => {\r\n                        if ([\r\n                            1,\r\n                            400,\r\n                        ].includes(error.code)) {\r\n                            setTimeout(() => {\r\n                                this.$router.push({\r\n                                    name: 'taskList',\r\n                                });\r\n                            }, 3000);\r\n                        }\r\n                    })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 外部调用——刷新接口数据\r\n             */\r\n            refresh () {\r\n                this.fetchData();\r\n            },\r\n            /**\r\n             * @desc 检测执行方案是否重名\r\n             * @param {String} name\r\n             */\r\n            checkName (name) {\r\n                return TaskPlanService.planCheckName({\r\n                    templateId: this.templateId,\r\n                    planId: this.formData.id,\r\n                    name,\r\n                });\r\n            },\r\n            /**\r\n             * @desc 编辑执行方案的变量\r\n             * @param {Array} variables\r\n             */\r\n            handleVariableChange (variables) {\r\n                window.changeAlert = true;\r\n                this.formData.variables = variables;\r\n            },\r\n            /**\r\n             * @desc 选中所有步骤\r\n             */\r\n            handleSelectAll () {\r\n                this.formData.enableSteps = this.taskStepList.map(item => item.id);\r\n            },\r\n            /**\r\n             * @desc 清空步骤的选中状态\r\n             */\r\n            handleDeselectAll () {\r\n                this.formData.enableSteps = [];\r\n            },\r\n            /**\r\n             * @desc 选中步骤\r\n             * @param {Object} stepData 步骤数据\r\n             */\r\n            handleSelectStep (stepData) {\r\n                const index = this.formData.enableSteps.findIndex(item => item === stepData.id);\r\n\r\n                if (index > -1) {\r\n                    this.formData.enableSteps.splice(index, 1);\r\n                    return;\r\n                }\r\n                \r\n                this.formData.enableSteps.push(stepData.id);\r\n\r\n                if (this.formData.enableSteps.length) {\r\n                    this.$refs.editPlanForm.clearError('enableSteps');\r\n                }\r\n            },\r\n            /**\r\n             * @desc 提交新建执行方案\r\n             */\r\n            handleSumbit () {\r\n                this.submitLoading = true;\r\n                Promise.all([\r\n                    this.$refs.titleForm.validate(),\r\n                    this.$refs.editPlanForm.validate(),\r\n                ]).then(() => TaskPlanService.planUpdate(this.formData)\r\n                    .then(() => {\r\n                        window.changeAlert = false;\r\n                        this.$emit('on-edit-success');\r\n                        this.$bkMessage({\r\n                            theme: 'success',\r\n                            message: '操作成功',\r\n                        });\r\n                        this.handleCancle();\r\n                    }))\r\n                    .finally(() => {\r\n                        this.submitLoading = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 取消编辑\r\n             */\r\n            handleCancle () {\r\n                leaveConfirm()\r\n                    .then(() => {\r\n                        this.$emit('on-edit-cancle');\r\n                    });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    @import \"@/css/mixins/media\";\r\n\r\n    .task-plan-edit-box {\r\n        .variable-batch-action {\r\n            margin: 4px 0;\r\n        }\r\n\r\n        .layout-title {\r\n            padding-bottom: 0 !important;\r\n            border-bottom-color: transparent !important;\r\n\r\n            .name-input {\r\n                .bk-form-input {\r\n                    font-size: 18px;\r\n                    color: #313238;\r\n                }\r\n\r\n                .only-bottom-border {\r\n                    padding-top: 9px;\r\n                    padding-bottom: 16px;\r\n                    padding-left: 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        .section-title {\r\n            font-size: 14px;\r\n            line-height: 19px;\r\n            color: #313238;\r\n        }\r\n\r\n        .task-step-selection {\r\n            display: flex;\r\n            width: 500px;\r\n            height: 19px;\r\n            margin-bottom: 16px;\r\n\r\n            @media (--small-viewports) {\r\n                width: 500px;\r\n            }\r\n\r\n            @media (--medium-viewports) {\r\n                width: 560px;\r\n            }\r\n\r\n            @media (--large-viewports) {\r\n                width: 620px;\r\n            }\r\n\r\n            @media (--huge-viewports) {\r\n                width: 680px;\r\n            }\r\n\r\n            .step-check {\r\n                margin-left: auto;\r\n            }\r\n        }\r\n    }\r\n\r\n</style>\r\n","<template>\r\n    <layout\r\n        class=\"task-plan-create-box\"\r\n        v-bind=\"$attrs\"\r\n        :loading=\"isLoading\">\r\n        <jb-form\r\n            slot=\"title\"\r\n            ref=\"titleForm\"\r\n            style=\"width: 100%;\"\r\n            :model=\"formData\">\r\n            <jb-form-item\r\n                :rules=\"rules.name\"\r\n                property=\"name\"\r\n                error-display-type=\"tooltips\"\r\n                style=\"margin-bottom: 0;\">\r\n                <jb-input\r\n                    v-model=\"formData.name\"\r\n                    class=\"name-input\"\r\n                    behavior=\"simplicity\"\r\n                    :placeholder=\"'推荐按照该执行方案提供的使用场景来取名...'\"\r\n                    :maxlength=\"60\"\r\n                    :native-attributes=\"{\r\n                        spellcheck: false,\r\n                        autofocus: true,\r\n                    }\"\r\n                    @change=\"handleNameChange\" />\r\n            </jb-form-item>\r\n        </jb-form>\r\n        <jb-form\r\n            ref=\"createPlanForm\"\r\n            :model=\"formData\"\r\n            form-type=\"vertical\">\r\n            <jb-form-item style=\"margin-bottom: 40px;\">\r\n                <div class=\"section-title\">\r\n                    <span>{{ '全局变量' }}</span>\r\n                    <span>（ {{ selectedVariable.length }} / {{ globalVariableList.length }} ）</span>\r\n                </div>\r\n                <render-global-var\r\n                    :key=\"templateId\"\r\n                    :list=\"globalVariableList\"\r\n                    :select-value=\"selectedVariable\"\r\n                    mode=\"editOfPlan\"\r\n                    :default-field=\"'变量值'\"\r\n                    @on-change=\"handleVariableChange\" />\r\n            </jb-form-item>\r\n            <jb-form-item\r\n                :rules=\"rules.enableSteps\"\r\n                property=\"enableSteps\">\r\n                <div class=\"task-step-selection\">\r\n                    <div class=\"section-title\">\r\n                        <span>{{ '选择执行步骤' }}</span>\r\n                        <span>（ {{ formData.enableSteps.length }} / {{ taskStepList.length }} ）</span>\r\n                    </div>\r\n                    <div class=\"step-check\">\r\n                        <bk-button\r\n                            v-if=\"hasSelectAll\"\r\n                            text\r\n                            @click=\"handleDeselectAll\">\r\n                            {{ '取消全选' }}\r\n                        </bk-button>\r\n                        <bk-button\r\n                            v-else\r\n                            text\r\n                            @click=\"handleSelectAll\">\r\n                            {{ '全选' }}\r\n                        </bk-button>\r\n                    </div>\r\n                </div>\r\n                <render-task-step\r\n                    :key=\"templateId\"\r\n                    :list=\"taskStepList\"\r\n                    :select-value=\"formData.enableSteps\"\r\n                    :variable=\"globalVariableList\"\r\n                    mode=\"select\"\r\n                    @on-select=\"handleSelectStep\" />\r\n            </jb-form-item>\r\n        </jb-form>\r\n        <template #footer>\r\n            <span v-bk-tooltips=\"isSubmitDisable ? '请至少勾选一个执行步骤' : ''\">\r\n                <bk-button\r\n                    theme=\"primary\"\r\n                    class=\"w120 mr10\"\r\n                    :loading=\"submitLoading\"\r\n                    \r\n                    @click=\"handleSumbit\"\r\n                    v-test=\"{ type: 'button', value: 'createPlanSubmit' }\">\r\n                    {{ '提交' }}\r\n                </bk-button>\r\n            </span>\r\n            <bk-button\r\n                @click=\"handleReset\"\r\n                v-test=\"{ type: 'button', value: 'createPlanReset' }\">\r\n                {{ '重置' }}\r\n            </bk-button>\r\n        </template>\r\n    </layout>\r\n</template>\r\n<script>\r\n       import TaskManageService from '@service/task-manage';\r\n    import ExecPlanService from '@service/task-plan';\r\n    import {\r\n        genDefaultName,\r\n        findUsedVariable,\r\n    } from '@utils/assist';\r\n    import { planNameRule } from '@utils/validator';\r\n    import JbForm from '@components/jb-form';\r\n    import RenderGlobalVar from '../../common/render-global-var';\r\n    import RenderTaskStep from '../../common/render-task-step';\r\n    import Layout from './components/layout';\r\n    \r\n    const getDefaultData = () => ({\r\n        id: 0,\r\n        name: genDefaultName('执行方案'),\r\n        enableSteps: [],\r\n        templateId: 0,\r\n        variables: [],\r\n    });\r\n    \r\n    export default {\r\n        name: '',\r\n        components: {\r\n            JbForm,\r\n            Layout,\r\n            RenderGlobalVar,\r\n            RenderTaskStep,\r\n        },\r\n        props: {\r\n            templateId: {\r\n                type: [\r\n                    Number,\r\n                    String,\r\n                ],\r\n                required: true,\r\n            },\r\n            firstPlan: {\r\n                type: Boolean,\r\n                default: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                formData: getDefaultData(),\r\n                globalVariableList: [{},{},{}],\r\n                taskStepList: [{},{},{}],\r\n                isLoading: true,\r\n                submitLoading: false,\r\n            };\r\n        },\r\n        computed: {\r\n            /**\r\n             * @desc 查找步骤中已使用的变量\r\n             * @return {Array}\r\n             */\r\n            selectedVariable () {\r\n                const selectedSteps = this.taskStepList.filter(step => this.formData.enableSteps.includes(step.id));\r\n                return findUsedVariable(selectedSteps);\r\n            },\r\n            /**\r\n             * @desc 已选中所有步骤\r\n             * @return {Boolean}\r\n             */\r\n            hasSelectAll () {\r\n                return this.formData.enableSteps.length >= this.taskStepList.length;\r\n            },\r\n            /**\r\n             * @desc 禁用提交按钮\r\n             * @returns { Boolean }\r\n             */\r\n            isSubmitDisable () {\r\n                return this.formData.enableSteps.length < 1;\r\n            },\r\n        },\r\n        created () {\r\n            this.rules = {\r\n                name: [\r\n                    {\r\n                        required: true,\r\n                        message: '方案名称必填',\r\n                        trigger: 'blur',\r\n                    },\r\n                    {\r\n                        validator: planNameRule.validator,\r\n                        message: planNameRule.message,\r\n                        trigger: 'blur',\r\n                    },\r\n                    {\r\n                        validator: name => ExecPlanService.planCheckName({\r\n                            templateId: this.formData.templateId,\r\n                            planId: this.formData.id,\r\n                            name,\r\n                        }),\r\n                        message: '方案名称已存在，请重新输入',\r\n                        trigger: 'blur',\r\n                    },\r\n                ],\r\n                enableSteps: [\r\n                    {\r\n                        validator: () => this.formData.enableSteps.length > 0,\r\n                        message: '执行步骤必填',\r\n                        trigger: 'blur',\r\n                    },\r\n                ],\r\n            };\r\n            this.formData.templateId = this.templateId;\r\n            this.generatorFormData = () => getDefaultData();\r\n            this.fetchData();\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 获取选中模板的信息\r\n             *\r\n             * 如果模板关联的执行方案为空，初始化执行方案的 name 为作业模板的 name\r\n             */\r\n            fetchData () {\r\n                TaskManageService.taskDetail({\r\n                    id: this.formData.templateId,\r\n                }).then((data) => {\r\n                    const { variables, stepList, name } = data;\r\n                    this.globalVariableList = Object.freeze(variables);\r\n                    this.taskStepList = Object.freeze(stepList);\r\n                    \r\n                    // 新建执行方案默认值处理\r\n                    let planName = genDefaultName('执行方案');\r\n                    if (this.firstPlan) {\r\n                        // 第一个执行方案名默认和模板名相同\r\n                        planName = name;\r\n                    }\r\n                    this.generatorFormData = () => ({\r\n                        id: 0,\r\n                        name: planName,\r\n                        templateId: this.formData.templateId,\r\n                        enableSteps: stepList.map(item => item.id),\r\n                        variables: [\r\n                            ...variables,\r\n                        ],\r\n                    });\r\n                    this.$emit('on-name-change', planName);\r\n                    // 初始化新建执行方案\r\n                    this.formData = this.generatorFormData();\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 外部调用——刷新接口数据\r\n             */\r\n            refresh () {\r\n                this.fetchData();\r\n            },\r\n            /**\r\n             * @desc 执行方案名更新\r\n             * @param {String} name\r\n             */\r\n            handleNameChange (name) {\r\n                this.formData.name = name;\r\n                this.$emit('on-name-change', name);\r\n            },\r\n            /**\r\n             * @desc 选中所有步骤\r\n             */\r\n            handleSelectAll () {\r\n                this.formData.enableSteps = this.taskStepList.map(item => item.id);\r\n            },\r\n            /**\r\n             * @desc 清空步骤的选中状态\r\n             */\r\n            handleDeselectAll () {\r\n                this.formData.enableSteps = [];\r\n            },\r\n            /**\r\n             * @desc 编辑执行方案的变量\r\n             * @param {Array} variables\r\n             */\r\n            handleVariableChange (variables) {\r\n                this.formData.variables = variables;\r\n            },\r\n            /**\r\n             * @desc 选中步骤\r\n             * @param {Object} stepData 步骤数据\r\n             */\r\n            handleSelectStep (stepData) {\r\n                const index = this.formData.enableSteps.findIndex(item => item === stepData.id);\r\n\r\n                if (index > -1) {\r\n                    this.formData.enableSteps.splice(index, 1);\r\n                    return;\r\n                }\r\n\r\n                this.formData.enableSteps.push(stepData.id);\r\n\r\n                if (this.formData.enableSteps.length) {\r\n                    this.$refs.createPlanForm.clearError('enableSteps');\r\n                }\r\n            },\r\n            /**\r\n             * @desc 提交新建执行方案\r\n             */\r\n            handleSumbit () {\r\n                this.submitLoading = true;\r\n                Promise.all([\r\n                    this.$refs.titleForm.validate(),\r\n                    this.$refs.createPlanForm.validate(),\r\n                ]).then(() => ExecPlanService.planUpdate(this.formData)\r\n                    .then((data) => {\r\n                        window.changeAlert = false;\r\n                        this.$bkMessage({\r\n                            theme: 'success',\r\n                            message: '操作成功',\r\n                        });\r\n                        this.$emit('on-create', data);\r\n                    }))\r\n                    .finally(() => {\r\n                        this.submitLoading = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 重置表单数据\r\n             */\r\n            handleReset () {\r\n                this.formData = this.generatorFormData();\r\n                this.$refs.createPlanForm.clearError();\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    @import \"@/css/mixins/media\";\r\n\r\n    .task-plan-create-box {\r\n        .variable-batch-action {\r\n            margin: 4px 0;\r\n        }\r\n\r\n        .layout-title {\r\n            padding-bottom: 0 !important;\r\n            border-bottom-color: transparent !important;\r\n\r\n            .name-input {\r\n                .bk-form-input {\r\n                    font-size: 18px;\r\n                    color: #313238;\r\n                }\r\n\r\n                .only-bottom-border {\r\n                    padding-top: 9px;\r\n                    padding-bottom: 16px;\r\n                    padding-left: 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        .section-title {\r\n            font-size: 14px;\r\n            line-height: 19px;\r\n            color: #313238;\r\n        }\r\n\r\n        .task-step-selection {\r\n            display: flex;\r\n            width: 500px;\r\n            margin-bottom: 14px;\r\n            font-size: 16px;\r\n            line-height: 21px;\r\n            color: #313238;\r\n\r\n            @media (--small-viewports) {\r\n                width: 500px;\r\n            }\r\n\r\n            @media (--medium-viewports) {\r\n                width: 560px;\r\n            }\r\n\r\n            @media (--large-viewports) {\r\n                width: 620px;\r\n            }\r\n\r\n            @media (--huge-viewports) {\r\n                width: 680px;\r\n            }\r\n\r\n            .step-check {\r\n                margin-left: auto;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div ref=\"layout\" class=\"plan-list-page-layout\" :class=\"{ toggled: isOpen }\">\r\n        <div class=\"layout-left\">\r\n            <div class=\"left-wraper\" :style=\"styles\">\r\n                <slot />\r\n            </div>\r\n            <div v-if=\"flod\" class=\"toggle-button\" @click=\"handleToggle\">\r\n                <Icon type=\"down-small\" class=\"toggle-arrow\" />\r\n            </div>\r\n        </div>\r\n        <div v-if=\"flod\" class=\"layout-right\">\r\n            <div class=\"right-wraper\" :class=\"{ active: isShowRight }\">\r\n                <slot v-if=\"isShowRight\" name=\"flod\" />\r\n            </div>\r\n            <div class=\"close-btn\" @click=\"handleClose\">\r\n                <Icon type=\"close-big\" />\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import {\r\n        leaveConfirm,\r\n    } from '@utils/assist';\r\n\r\n    export default {\r\n        name: '',\r\n        props: {\r\n            flod: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isShowRight: false,\r\n                isOpen: false,\r\n                layoutWidth: 'auto',\r\n            };\r\n        },\r\n        computed: {\r\n            styles () {\r\n                if (this.flod) {\r\n                    return {\r\n                        width: '370px',\r\n                    };\r\n                }\r\n                return {\r\n                    width: this.layoutWidth,\r\n                };\r\n            },\r\n        },\r\n        watch: {\r\n            flod: {\r\n                handler (flod) {\r\n                    if (flod) {\r\n                        setTimeout(() => {\r\n                            this.isShowRight = flod;\r\n                        }, 110);\r\n                    } else {\r\n                        this.isShowRight = false;\r\n                    }\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        mounted () {\r\n            this.calcWidth();\r\n            window.addEventListener('resize', this.calcWidth);\r\n            this.$once('hook:beforeDestroy', () => {\r\n                window.removeEventListener('resize', this.calcWidth);\r\n            });\r\n        },\r\n        methods: {\r\n            calcWidth () {\r\n                const layoutWidth = this.$refs.layout.getBoundingClientRect().width;\r\n                this.layoutWidth = `${layoutWidth}px`;\r\n            },\r\n            handleToggle () {\r\n                this.isOpen = !this.isOpen;\r\n            },\r\n            handleClose () {\r\n                leaveConfirm()\r\n                    .then(() => {\r\n                        this.isOpen = false;\r\n                        this.$emit('on-flod');\r\n                        this.$emit('update:flod', false);\r\n                    });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .plan-list-page-layout {\r\n        display: flex;\r\n\r\n        &.toggled {\r\n            margin-left: -24px;\r\n\r\n            .left-wraper {\r\n                width: 0 !important;\r\n            }\r\n\r\n            .toggle-button {\r\n                .toggle-arrow {\r\n                    transform: rotateZ(-90deg);\r\n                }\r\n            }\r\n\r\n            .layout-right {\r\n                margin-left: 24px;\r\n            }\r\n        }\r\n\r\n        .layout-left {\r\n            position: relative;\r\n            z-index: 9;\r\n            background: #fff;\r\n            border: 1px solid #dfe0e5;\r\n            transition: all 0.15s;\r\n            flex: 0 0 auto;\r\n\r\n            .left-wraper {\r\n                transition: all 0.1s;\r\n            }\r\n\r\n            .bk-table::before {\r\n                content: unset;\r\n            }\r\n\r\n            .toggle-button {\r\n                position: absolute;\r\n                top: 50%;\r\n                right: -14px;\r\n                display: flex;\r\n                width: 14px;\r\n                height: 64px;\r\n                font-size: 24px;\r\n                color: #fff;\r\n                cursor: pointer;\r\n                background: #dcdee5;\r\n                border-top-right-radius: 6px;\r\n                border-bottom-right-radius: 6px;\r\n                transform: translateY(-50%);\r\n                align-items: center;\r\n                justify-content: center;\r\n\r\n                &:hover {\r\n                    background: #c4c6cc;\r\n                }\r\n            }\r\n\r\n            .toggle-arrow {\r\n                transform: rotateZ(90deg);\r\n            }\r\n        }\r\n\r\n        .layout-right {\r\n            position: relative;\r\n            z-index: 1;\r\n            margin-left: 10px;\r\n            background: #fff;\r\n            border: 1px solid #dfe0e5;\r\n            border-radius: 2px;\r\n            transition: all 0.15s;\r\n            flex: 1;\r\n\r\n            .right-wraper {\r\n                opacity: 0%;\r\n                transition: all 0.5s;\r\n\r\n                &.active {\r\n                    opacity: 100%;\r\n                }\r\n            }\r\n\r\n            .close-btn {\r\n                position: absolute;\r\n                top: 8px;\r\n                right: 8px;\r\n                display: flex;\r\n                width: 26px;\r\n                height: 26px;\r\n                font-size: 16px;\r\n                color: #c4c6cc;\r\n                cursor: pointer;\r\n                border-radius: 50%;\r\n                align-items: center;\r\n                justify-content: center;\r\n\r\n                &:hover {\r\n                    background-color: #f0f1f5;\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <jb-dialog\r\n        :value=\"value\"\r\n        class=\"template-select-dialog\"\r\n        :title=\"'新建执行方案'\"\r\n        header-position=\"left\"\r\n        render-directive=\"if\"\r\n        :mask-close=\"false\"\r\n        :esc-close=\"false\"\r\n        :width=\"480\"\r\n        :draggable=\"false\"\r\n        @cancel=\"handleCancel\">\r\n        <jb-form ref=\"form\" :model=\"formData\" form-type=\"vertical\" :rules=\"rules\">\r\n            <jb-form-item :label=\"'作业模板'\" required property=\"templateId\">\r\n                <bk-select\r\n                    v-model=\"formData.templateId\"\r\n                    :placeholder=\"'请选择作业模板'\"\r\n                    :clearable=\"false\"\r\n                    searchable\r\n                    :remote-method=\"fetchData\">\r\n                    <bk-option\r\n                        v-for=\"item in templateList\"\r\n                        :key=\"item.id\"\r\n                        :id=\"item.id\"\r\n                        :name=\"item.name\" />\r\n                    <template slot=\"extension\">\r\n                        <auth-component auth=\"job_template/create\">\r\n                            <div @click=\"handleCreate\" style=\"cursor: pointer;\">\r\n                                <i class=\"bk-icon icon-plus-circle\" />{{ '新建模板' }}\r\n                            </div>\r\n                            <div slot=\"forbid\">\r\n                                <i class=\"bk-icon icon-plus-circle\" />{{ '新建模板' }}\r\n                            </div>\r\n                        </auth-component>\r\n                    </template>\r\n                </bk-select>\r\n            </jb-form-item>\r\n        </jb-form>\r\n        <div slot=\"footer\">\r\n            <auth-button\r\n                :resource-id=\"formData.templateId\"\r\n                :auth=\"formData.templateId ? 'job_plan/create' : ''\"\r\n                theme=\"primary\"\r\n                \r\n                class=\"mr10\"\r\n                @click=\"handleSubmit\">\r\n                {{ '确定' }}\r\n            </auth-button>\r\n            <bk-button @click=\"handleCancel\">{{ '取消' }}</bk-button>\r\n        </div>\r\n    </jb-dialog>\r\n</template>\r\n<script>\r\n       import TaskManageService from '@service/task-manage';\r\n    import {\r\n        leaveConfirm,\r\n    } from '@utils/assist';\r\n\r\n    export default {\r\n        name: '',\r\n        props: {\r\n            value: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                templateList: [{},{},{}],\r\n                formData: {\r\n                    templateId: '',\r\n                },\r\n            };\r\n        },\r\n        watch: {\r\n            value: {\r\n                handler  (value) {\r\n                    if (value) {\r\n                        this.fetchData();\r\n                    }\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        created () {\r\n            this.rules = {\r\n                templateId: [\r\n                    {\r\n                        required: true,\r\n                        message: '请选择作业模板',\r\n                        trigger: 'blur',\r\n                    },\r\n                ],\r\n            };\r\n        },\r\n        methods: {\r\n            fetchData (search) {\r\n                TaskManageService.taskList({\r\n                    name: search,\r\n                    start: 0,\r\n                    pageSize: 10,\r\n                }).then((data) => {\r\n                    this.templateList = Object.freeze(data.data);\r\n                });\r\n            },\r\n            handleCreate () {\r\n                const router = this.$router.resolve({\r\n                    name: 'templateCreate',\r\n                });\r\n                window.open(router.href);\r\n            },\r\n            handleSubmit () {\r\n                this.$refs.form.validate()\r\n                    .then(() => {\r\n                        window.changeAlert = false;\r\n                        this.handleCancel();\r\n                        this.$emit('on-change', this.formData.templateId);\r\n                    });\r\n            },\r\n            handleCancel () {\r\n                leaveConfirm()\r\n                    .then(() => {\r\n                        this.$emit('input', false);\r\n                    });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .template-select-dialog {\r\n        .bk-dialog-header {\r\n            padding-bottom: 0 !important;\r\n        }\r\n\r\n        .bk-form-item:last-child {\r\n            margin-bottom: 0 !important;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div>\r\n        <div class=\"name\">\r\n            <span>{{ data.name }}</span>\r\n            <span class=\"remove-flag\" @click=\"handleRemove\">\r\n                <Icon type=\"reduce-fill\" />\r\n            </span>\r\n        </div>\r\n        <div>\r\n            <bk-button v-if=\"isValueEmpty\" @click=\"handleChooseIp\" style=\"width: 160px;\">\r\n                <Icon type=\"plus\" />\r\n                {{ '添加服务器' }}\r\n            </bk-button>\r\n            <div v-else class=\"host-value-text\" @click=\"handleChooseIp\">\r\n                <div class=\"host-type\">\r\n                    <Icon type=\"host\" />\r\n                </div>\r\n                <div>\r\n                    {{ valueText }}\r\n                </div>\r\n                <Icon class=\"host-edit\" type=\"edit-2\" />\r\n            </div>\r\n        </div>\r\n        <choose-ip\r\n            v-model=\"isShowChooseIp\"\r\n            :host-node-info=\"hostNodeInfo\"\r\n            @on-change=\"handleChange\" />\r\n    </div>\r\n</template>\r\n<script>\r\n    import TaskHostNodeModel from '@model/task-host-node';\r\n    import ChooseIp from '@components/choose-ip';\r\n\r\n    export default {\r\n        components: {\r\n            ChooseIp,\r\n        },\r\n        props: {\r\n            data: {\r\n                type: Object,\r\n                required: true,\r\n            },\r\n            value: {\r\n                type: Object,\r\n                default: () => new TaskHostNodeModel({}),\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isShowChooseIp: false,\r\n                hostNodeInfo: {},\r\n            };\r\n        },\r\n        computed: {\r\n            isValueEmpty () {\r\n                return TaskHostNodeModel.isHostNodeInfoEmpty(this.value.hostNodeInfo);\r\n            },\r\n            valueText  () {\r\n                return new TaskHostNodeModel(this.value).text;\r\n            },\r\n        },\r\n        \r\n        methods: {\r\n            handleRemove () {\r\n                this.$emit('on-remove');\r\n            },\r\n            handleChooseIp () {\r\n                this.isShowChooseIp = true;\r\n                this.hostNodeInfo = this.value.hostNodeInfo;\r\n            },\r\n            handleClear () {\r\n                this.$emit('on-change', new TaskHostNodeModel({}));\r\n            },\r\n            handleChange (hostNodeInfo) {\r\n                this.$emit('on-change', {\r\n                    hostNodeInfo,\r\n                });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    .host-value-text {\r\n        display: flex;\r\n        width: 333px;\r\n        height: 32px;\r\n        overflow: hidden;\r\n        font-size: 12px;\r\n        color: #63656e;\r\n        cursor: pointer;\r\n        background: #fff;\r\n        border: 1px solid #c4c6cc;\r\n        border-radius: 3px;\r\n        transition: all 0.1s;\r\n        align-items: center;\r\n\r\n        .host-type {\r\n            display: flex;\r\n            width: 32px;\r\n            height: 32px;\r\n            margin-right: 10px;\r\n            font-size: 17px;\r\n            color: #fff;\r\n            background: #c4c6cc;\r\n            transition: all 0.1s;\r\n            align-items: center;\r\n            justify-content: center;\r\n        }\r\n\r\n        .host-edit {\r\n            margin-right: 8px;\r\n            margin-left: auto;\r\n            font-size: 16px;\r\n            color: #3a84ff;\r\n            opacity: 0%;\r\n        }\r\n\r\n        &:hover {\r\n            border-color: #3a84ff;\r\n\r\n            .host-type {\r\n                background: #3a84ff;\r\n            }\r\n\r\n            .host-edit {\r\n                opacity: 100%;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <comoponent\r\n        :is=\"com\"\r\n        class=\"global-variable-batch-edit-render\"\r\n        :data=\"data\"\r\n        v-bind=\"$attrs\"\r\n        v-on=\"$listeners\" />\r\n</template>\r\n<script>\r\n    import GlobalVariableModel from '@model/task/global-variable';\r\n    import TextType from './text';\r\n    import HostType from './host';\r\n    import PasswordType from './password';\r\n\r\n    export default {\r\n        name: '',\r\n        props: {\r\n            data: {\r\n                type: Object,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {};\r\n        },\r\n        computed: {\r\n            com () {\r\n                const comMap = {\r\n                    [GlobalVariableModel.TYPE_STRING]: TextType,\r\n                    [GlobalVariableModel.TYPE_NAMESPACE]: TextType,\r\n                    [GlobalVariableModel.TYPE_PASSWORD]: PasswordType,\r\n                    [GlobalVariableModel.TYPE_RELATE_ARRAY]: TextType,\r\n                    [GlobalVariableModel.TYPE_INDEX_ARRAY]: TextType,\r\n                    [GlobalVariableModel.TYPE_HOST]: HostType,\r\n                };\r\n                return comMap[this.data.type];\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .global-variable-batch-edit-render {\r\n        margin-bottom: 20px;\r\n\r\n        &:last-child {\r\n            margin-bottom: 0;\r\n        }\r\n\r\n        .remove-flag {\r\n            display: none;\r\n            padding: 10px 10px 10px 4px;\r\n            font-size: 14px;\r\n            color: #c4c6cc;\r\n            cursor: pointer;\r\n\r\n            &:hover {\r\n                color: #ea3636;\r\n            }\r\n        }\r\n\r\n        &:hover {\r\n            .remove-flag {\r\n                display: inline;\r\n            }\r\n        }\r\n\r\n        .name {\r\n            margin-bottom: 10px;\r\n            font-size: 14px;\r\n            line-height: 19px;\r\n            color: #63656e;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"batch-edit-plan-global-variable\">\r\n        <div class=\"action-target-info\">\r\n            <span class=\"label\">{{ '更新范围' }}</span>\r\n            <span class=\"content-split\">:</span>\r\n            <span>\r\n                <span>{{ '已选' }}</span>\r\n                <span class=\"number strong\">{{ planList.length }}</span>\r\n                <span>{{ '个执行方案，' }}{{ '来自' }}</span>\r\n                <span class=\"number strong\">{{ relatedTemplateNums }}</span>\r\n                <span>{{ '个作业模板' }}</span>\r\n            </span>\r\n        </div>\r\n        <div class=\"action-target-info\" style=\"margin-top: 10px;\">\r\n            <span class=\"label\">{{ '选择变量' }}</span>\r\n            <span class=\"content-split\" style=\"color: #ea3636;\">*</span>\r\n            <span>{{ selectResultText }}，</span>\r\n            <bk-button v-if=\"isHasSelectedAll\" text @click=\"handleCancleSelectAll\">{{ '取消全选' }}</bk-button>\r\n            <bk-button v-else text @click=\"handleSelectAll\">{{ '全选' }}</bk-button>\r\n        </div>\r\n        <div class=\"global-variable-list\">\r\n            <div\r\n                v-for=\"(variableData, key) in globalVariableMap\"\r\n                :key=\"key\"\r\n                class=\"variable-item\"\r\n                :class=\"{ active: !!selectVariableMap[key] }\"\r\n                @click=\"handleVariableSelect(key)\">\r\n                <div class=\"variable-type\">\r\n                    <Icon :type=\"variableData.icon\" />\r\n                </div>\r\n                <div v-bk-overflow-tips class=\"variable-name\">{{ variableData.name }}</div>\r\n                <div class=\"select-checked\" />\r\n            </div>\r\n        </div>\r\n        <div v-if=\"isSelectNotEmpty\" class=\"global-variable-value\">\r\n            <template v-for=\"(variableData, key) in globalVariableMap\">\r\n                <render-global-variable\r\n                    v-if=\"selectVariableMap[key]\"\r\n                    :key=\"key\"\r\n                    :value=\"selectVariableValueMap[key]\"\r\n                    :data=\"variableData\"\r\n                    @on-change=\"value => handleValueChange(key, value)\"\r\n                    @on-remove=\"handleRemoveSelect(key)\" />\r\n            </template>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n       import TaskHostNodeModel from '@model/task-host-node';\r\n    import RenderGlobalVariable from './components/render-global-variable';\r\n    import {\r\n        genGlobalVariableKey,\r\n    } from '../utils';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            RenderGlobalVariable,\r\n        },\r\n        inheritAttrs: false,\r\n        props: {\r\n            planList: {\r\n                type: Array,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                relatedTemplateNums: 0,\r\n                globalVariableMap: {},\r\n                selectVariableMap: {},\r\n                selectVariableValueMap: {},\r\n            };\r\n        },\r\n        computed: {\r\n            isHasSelectedAll () {\r\n                const selectNums = Object.values(this.selectVariableMap).length;\r\n                if (selectNums < 1) {\r\n                    return false;\r\n                }\r\n                return selectNums === Object.values(this.globalVariableMap).length;\r\n            },\r\n            selectResultText () {\r\n                return `${'已选'} ${Object.values(this.selectVariableMap).length} / ${Object.values(this.globalVariableMap).length}`;\r\n            },\r\n            isSelectNotEmpty () {\r\n                return Object.values(this.selectVariableMap).length > 0;\r\n            },\r\n        },\r\n        created () {\r\n            this.traverPlanList();\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 遍历执行方案全局变量\r\n             */\r\n            traverPlanList () {\r\n                const templateIdMap = {};\r\n                const globalVariableMap = {};\r\n                this.planList.forEach((planData) => {\r\n                    templateIdMap[planData.templateId] = true;\r\n                    planData.variableList.forEach((variableData) => {\r\n                        globalVariableMap[genGlobalVariableKey(variableData)] = variableData;\r\n                    });\r\n                });\r\n               \r\n                this.relatedTemplateNums = Object.values(templateIdMap).length;\r\n                this.globalVariableMap = Object.freeze(globalVariableMap);\r\n            },\r\n            /**\r\n             * @desc 编辑全局变量值更新\r\n             */\r\n            triggerChange () {\r\n                window.changeAlert = true;\r\n                this.$emit('on-edit-change', Object.assign({}, this.selectVariableValueMap));\r\n            },\r\n            /**\r\n             * @desc 外部调用，获取需要更新的执行方案\r\n             * @return {Object} 需要更新的执行方案列表\r\n             */\r\n            getEditValue () {\r\n                return Object.assign({}, this.selectVariableValueMap);\r\n            },\r\n            /**\r\n             * @desc 单次选中全局变量\r\n             * @param {String} key 全局变量的key\r\n             */\r\n            handleVariableSelect (key) {\r\n                const selectVariableMap = Object.assign({}, this.selectVariableMap);\r\n                const selectVariableValueMap = Object.assign({}, this.selectVariableValueMap);\r\n                if (selectVariableMap[key]) {\r\n                    // 删除选择\r\n                    delete selectVariableMap[key];\r\n                    // 删除值\r\n                    delete selectVariableValueMap[key];\r\n                } else {\r\n                    // 选中变量\r\n                    selectVariableMap[key] = true;\r\n                    // 初始化选中变量值\r\n                    if (this.globalVariableMap[key].isHost) {\r\n                        selectVariableValueMap[key] = new TaskHostNodeModel({});\r\n                    } else {\r\n                        selectVariableValueMap[key] = '';\r\n                    }\r\n                }\r\n                this.selectVariableMap = Object.freeze(selectVariableMap);\r\n                this.selectVariableValueMap = Object.freeze(selectVariableValueMap);\r\n                this.triggerChange();\r\n            },\r\n            /**\r\n             * @desc 全选全局变量\r\n             */\r\n            handleSelectAll () {\r\n                const selectVariableMap = {};\r\n                const selectVariableValueMap = {};\r\n                for (const key in this.globalVariableMap) {\r\n                    // 选中变量\r\n                    selectVariableMap[key] = true;\r\n                    // 初始化选中变量值\r\n                    if (this.globalVariableMap[key].isHost) {\r\n                        selectVariableValueMap[key] = new TaskHostNodeModel({});\r\n                    } else {\r\n                        selectVariableValueMap[key] = '';\r\n                    }\r\n                }\r\n                this.selectVariableMap = Object.freeze(selectVariableMap);\r\n                this.selectVariableValueMap = Object.freeze(selectVariableValueMap);\r\n                this.triggerChange();\r\n            },\r\n            /**\r\n             * @desc 取消全选全局变量\r\n             */\r\n            handleCancleSelectAll () {\r\n                // 删除选择\r\n                this.selectVariableMap = {};\r\n                // 删除值\r\n                this.selectVariableValueMap = {};\r\n                this.triggerChange();\r\n            },\r\n            /**\r\n             * @desc 取消选择单个全局变量\r\n             * @param {String} key 全局变量的key\r\n             *\r\n             * 取消选择时需要清除已编辑的值\r\n             */\r\n            handleRemoveSelect (key) {\r\n                // 删除选择\r\n                const selectVariableMap = Object.assign({}, this.selectVariableMap);\r\n                delete selectVariableMap[key];\r\n                this.selectVariableMap = Object.freeze(selectVariableMap);\r\n                // 删除值\r\n                const selectVariableValueMap = Object.assign({}, this.selectVariableValueMap);\r\n                delete selectVariableValueMap[key];\r\n                this.selectVariableValueMap = Object.freeze(selectVariableValueMap);\r\n                this.triggerChange();\r\n            },\r\n            /**\r\n             * @desc 编辑单个全局变量的值\r\n             * @param {String} key 全局变量的key\r\n             * @param {Any} value 全局变量的value\r\n             */\r\n            handleValueChange (key, value) {\r\n                this.selectVariableValueMap = Object.freeze(Object.assign({}, this.selectVariableValueMap, {\r\n                    [key]: value,\r\n                }));\r\n                this.triggerChange();\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .batch-edit-plan-global-variable {\r\n        .action-target-info {\r\n            display: flex;\r\n            padding-top: 20px;\r\n            font-size: 14px;\r\n            line-height: 20px;\r\n            color: #63656e;\r\n\r\n            .label {\r\n                color: #313238;\r\n            }\r\n\r\n            .content-split {\r\n                width: 18px;\r\n                text-align: left;\r\n            }\r\n        }\r\n\r\n        .global-variable-list {\r\n            display: flex;\r\n            flex-wrap: wrap;\r\n            padding-top: 4px;\r\n            margin: 0 -5px;\r\n\r\n            .variable-item {\r\n                position: relative;\r\n                display: flex;\r\n                width: 160px;\r\n                height: 32px;\r\n                padding-right: 26px;\r\n                margin-top: 12px;\r\n                margin-right: 5px;\r\n                margin-left: 5px;\r\n                overflow: hidden;\r\n                color: #63656e;\r\n                cursor: pointer;\r\n                border: 1px solid #dcdee5;\r\n                border-radius: 2px;\r\n                transition: all 0.1s;\r\n                align-items: center;\r\n\r\n                .variable-type {\r\n                    display: flex;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                    flex: 0 0 32px;\r\n                    height: 100%;\r\n                    margin-left: -1px;\r\n                    font-size: 17px;\r\n                    color: #fff;\r\n                    background: #d3d5db;\r\n                    transition: all 0.1s;\r\n                }\r\n\r\n                .select-checked {\r\n                    position: absolute;\r\n                    top: 9px;\r\n                    right: 6px;\r\n                    bottom: 0;\r\n                    width: 14px;\r\n                    height: 14px;\r\n                    background: #fff;\r\n                    border: 1px solid #c4c6cc;\r\n                    border-radius: 50%;\r\n                }\r\n\r\n                &.active {\r\n                    border-color: #3a84ff;\r\n\r\n                    .variable-type {\r\n                        background: #3a84ff;\r\n                    }\r\n\r\n                    .select-checked {\r\n                        background: #3a84ff;\r\n                        border-color: #3a84ff;\r\n\r\n                        &::after {\r\n                            position: absolute;\r\n                            top: 2px;\r\n                            left: 4px;\r\n                            width: 3px;\r\n                            height: 6px;\r\n                            border: 1px solid #fff;\r\n                            border-top: 0;\r\n                            border-left: 0;\r\n                            content: \"\";\r\n                            transform: rotate(45deg) scale(1);\r\n                            transition: all 0.1s;\r\n                            transform-origin: center;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            .variable-name {\r\n                padding-left: 6px;\r\n                overflow: hidden;\r\n                font-size: 13px;\r\n                text-overflow: ellipsis;\r\n                white-space: nowrap;\r\n                flex: 0 1 auto;\r\n                align-items: center;\r\n            }\r\n        }\r\n\r\n        .global-variable-value {\r\n            margin-top: 30px;\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"preview-render-ralated\">\r\n        <div class=\"header\" @click=\"handleToggle\">\r\n            <div class=\"toggle-flag\">\r\n                <Icon v-if=\"isShowRelateList\" type=\"arrow-full-down\" />\r\n                <Icon v-else type=\"arrow-full-right\" />\r\n            </div>\r\n            <div class=\"type\">\r\n                <Icon :type=\"globalVariableInfo.icon\" />\r\n            </div>\r\n            <div class=\"name\">{{ globalVariableInfo.name }}</div>\r\n        </div>\r\n        <table v-if=\"isShowRelateList\">\r\n            <thead>\r\n                <tr>\r\n                    <th style=\"width: 230px;\">{{ '执行方案' }}</th>\r\n                    <th style=\"width: 205px;\">{{ '作业模板' }}</th>\r\n                    <th style=\"width: 185px;\">{{ '原始值' }}</th>\r\n                    <th>{{ '更新值' }}</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr v-for=\"relateData in relateList\" :key=\"relateData.id\">\r\n                    <td>\r\n                        <div v-bk-overflow-tips class=\"cell-text\">{{ relateData.plan.name }}</div>\r\n                    </td>\r\n                    <td>\r\n                        <div v-bk-overflow-tips class=\"cell-text\">{{ relateData.plan.templateName }}</div>\r\n                    </td>\r\n                    <td>\r\n                        <div v-bk-overflow-tips class=\"cell-text\">{{ relateData.globalVariable.valueText }}</div>\r\n                    </td>\r\n                    <td>\r\n                        <div v-bk-overflow-tips class=\"cell-text\">{{ latestValueText }}</div>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n</template>\r\n<script>\r\n    import GlobalVariableModel from '@model/task/global-variable';\r\n\r\n    export default {\r\n        name: '',\r\n        props: {\r\n            relateList: Array,\r\n            latestValue: [String, Object],\r\n        },\r\n        data () {\r\n            return {\r\n                isShowRelateList: false,\r\n            };\r\n        },\r\n        computed: {\r\n            globalVariableInfo () {\r\n                return this.relateList[0].globalVariable;\r\n            },\r\n            latestValueText () {\r\n                const latestGlobalVariableData = { ...this.globalVariableInfo };\r\n                if (this.globalVariableInfo.isHost) {\r\n                    latestGlobalVariableData.defaultTargetValue = this.latestValue;\r\n                } else {\r\n                    latestGlobalVariableData.defaultValue = this.latestValue;\r\n                }\r\n                return new GlobalVariableModel(latestGlobalVariableData).valueText;\r\n            },\r\n        },\r\n        methods: {\r\n            handleToggle () {\r\n                this.isShowRelateList = !this.isShowRelateList;\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    .preview-render-ralated {\r\n        margin-top: 13px;\r\n        border-radius: 2px;\r\n\r\n        .header {\r\n            display: flex;\r\n            height: 42px;\r\n            padding: 0 10px;\r\n            color: #979ba5;\r\n            cursor: pointer;\r\n            background: #dcdee5;\r\n            align-items: center;\r\n\r\n            .toggle-flag {\r\n                display: flex;\r\n                width: 24px;\r\n                height: 24px;\r\n                font-size: 16px;\r\n                align-items: center;\r\n                justify-content: center;\r\n            }\r\n\r\n            .type {\r\n                font-size: 19px;\r\n            }\r\n\r\n            .name {\r\n                padding-left: 5px;\r\n                font-size: 14px;\r\n                font-weight: bold;\r\n                color: #63656e;\r\n            }\r\n        }\r\n\r\n        table {\r\n            width: 100%;\r\n            color: #63656e;\r\n            border: 1px solid #dcdee5;\r\n            border-radius: 2px;\r\n\r\n            thead {\r\n                background: #fafbfd;\r\n            }\r\n\r\n            td,\r\n            th {\r\n                height: 40px;\r\n                padding: 0 10px;\r\n                text-align: left;\r\n            }\r\n\r\n            th {\r\n                font-weight: normal;\r\n                color: #313238;\r\n            }\r\n\r\n            td {\r\n                border-top: 1px solid #dcdee5;\r\n            }\r\n\r\n            .cell-text {\r\n                /* stylelint-disable value-no-vendor-prefix */\r\n                display: -webkit-box;\r\n                overflow: hidden;\r\n                text-overflow: ellipsis;\r\n                word-break: break-all;\r\n                white-space: normal;\r\n                -webkit-box-orient: vertical;\r\n                -webkit-line-clamp: 1;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"batch-preview-plan-global-variable\">\r\n        <template v-for=\"(list, key) in globalVariableRelatePlanMap\">\r\n            <render-related-info\r\n                ref=\"relate\"\r\n                :relate-list=\"list\"\r\n                :latest-value=\"latestValueMap[key]\"\r\n                :key=\"key\" />\r\n        </template>\r\n    </div>\r\n</template>\r\n<script>\r\n    import {\r\n        genGlobalVariableKey,\r\n    } from '../utils';\r\n    import RenderRelatedInfo from './components/render-related-info';\r\n    \r\n    export default {\r\n        name: 'EditPreview',\r\n        components: {\r\n            RenderRelatedInfo,\r\n        },\r\n        props: {\r\n            planList: {\r\n                type: Array,\r\n                required: true,\r\n            },\r\n            latestValueMap: {\r\n                type: Object,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                globalVariableRelatePlanMap: {},\r\n            };\r\n        },\r\n        created () {\r\n            this.relatePlanMap = {};\r\n            this.traverPlanList();\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 遍历执行方案全局变量\r\n             */\r\n            traverPlanList () {\r\n                const globalVariableRelatePlanMap = {};\r\n                this.planList.forEach((planData) => {\r\n                    planData.variableList.forEach((variableData) => {\r\n                        const variableKey = genGlobalVariableKey(variableData);\r\n                        const relateData = {\r\n                            plan: planData,\r\n                            globalVariable: variableData,\r\n                        };\r\n                        if (Object.prototype.hasOwnProperty.call(this.latestValueMap, variableKey)) {\r\n                            if (globalVariableRelatePlanMap[variableKey]) {\r\n                                globalVariableRelatePlanMap[variableKey].push(relateData);\r\n                            } else {\r\n                                globalVariableRelatePlanMap[variableKey] = [\r\n                                    relateData,\r\n                                ];\r\n                            }\r\n                            this.relatePlanMap[planData.id] = planData;\r\n                        }\r\n                    });\r\n                });\r\n                \r\n                this.globalVariableRelatePlanMap = Object.freeze(globalVariableRelatePlanMap);\r\n                // 默认站看第一个全局变量的信息\r\n                this.$nextTick(() => {\r\n                    this.$refs.relate[0].handleToggle();\r\n                });\r\n            },\r\n            /**\r\n             * @desc 外部调用，获取需要更新的执行方案\r\n             * @return {Array} 需要更新的执行方案列表\r\n             */\r\n            getRelatePlanList () {\r\n                return Object.values(this.relatePlanMap);\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .batch-preview-plan-global-variable {\r\n        padding-top: 6px;\r\n    }\r\n</style>\r\n","<template>\r\n    <jb-sideslider\r\n        :is-show=\"isShow\"\r\n        :width=\"900\"\r\n        :title=\"'批量编辑变量值'\"\r\n        ref=\"root\"\r\n        :show-footer=\"!isLoading && isGlobalVariableNotEmpty\"\r\n        @update:isShow=\"handleCancel\">\r\n        <div v-if=\"isLoading\" style=\"min-height: 100px;\" v-bkloading=\"{ isLoading }\" />\r\n        <div v-else>\r\n            <div v-if=\"isGlobalVariableNotEmpty\" class=\"batch-edit-global-variable-box\">\r\n                <div class=\"edit-header\">\r\n                    <bk-steps :cur-step.sync=\"curStep\" style=\"width: 300px;\" :steps=\"steps\" />\r\n                </div>\r\n                <keep-alive exclude=\"editPreview\">\r\n                    <component\r\n                        v-if=\"planList.length > 0\"\r\n                        ref=\"handler\"\r\n                        :is=\"stepCom\"\r\n                        :plan-list=\"planList\"\r\n                        :latest-value-map=\"globalVariableValueMap\"\r\n                        @on-edit-change=\"handleEditChange\" />\r\n                </keep-alive>\r\n            </div>\r\n            <Empty v-else style=\"margin-top: 126px;\">\r\n                <div style=\"font-size: 20px; line-height: 26px; color: #63656e;\">\r\n                    {{ '暂无全局变量' }}\r\n                </div>\r\n                <div style=\"margin-top: 12px; font-size: 14px; line-height: 19px; color: #979ba5;\" slot=\"desc\">\r\n                    {{ '所选执行方案，无变量值可编辑' }}\r\n                </div>\r\n            </Empty>\r\n        </div>\r\n        <div slot=\"footer\">\r\n            <template v-if=\"curStep === 1\">\r\n                <bk-button\r\n                    theme=\"primary\"\r\n                    class=\"mr10\"\r\n                    \r\n                    @click=\"handlePreview\">\r\n                    {{ '下一步' }}\r\n                </bk-button>\r\n            </template>\r\n            <template v-if=\"curStep === 2\">\r\n                <jb-popover-confirm\r\n                    v-if=\"hasEmptyValueVariable\"\r\n                    :title=\"'确定立即批量更新？'\"\r\n                    :content=\"'请注意！变量值填框留空，即代表设置目标变量为空值。'\"\r\n                    :confirm-handler=\"handleSubmit\">\r\n                    <bk-button\r\n                        theme=\"primary\"\r\n                        class=\"mr10\">\r\n                        {{ '提交' }}\r\n                    </bk-button>\r\n                </jb-popover-confirm>\r\n                <bk-button\r\n                    v-else\r\n                    theme=\"primary\"\r\n                    class=\"mr10\"\r\n                    @click=\"handleSubmit\">\r\n                    {{ '提交' }}\r\n                </bk-button>\r\n                <bk-button\r\n                    theme=\"primary\"\r\n                    class=\"mr10\"\r\n                    @click=\"handleChangeStep(1)\">\r\n                    {{ '上一步' }}\r\n                </bk-button>\r\n            </template>\r\n            <bk-button @click=\"handleCancel\">{{ '取消' }}</bk-button>\r\n        </div>\r\n    </jb-sideslider>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n       import TaskPlanService from '@service/task-plan';\r\n    import { leaveConfirm } from '@utils/assist';\r\n    import { genGlobalVariableKey } from './utils';\r\n    import EditValue from './edit-value';\r\n    import EditPreview from './edit-preview';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            EditValue,\r\n            EditPreview,\r\n        },\r\n        model: {\r\n            prop: 'isShow',\r\n            event: 'input',\r\n        },\r\n        props: {\r\n            isShow: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n            data: {\r\n                type: Array,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: true,\r\n                curStep: 1,\r\n                isGlobalVariableNotEmpty: false,\r\n                planList: [{},{},{}],\r\n                isPreviewDisabled: true, // 选择的变量为空不能进行下一步\r\n                globalVariableValueMap: {}, // 全局变量编辑的值缓存\r\n            };\r\n        },\r\n        computed: {\r\n            stepCom () {\r\n                const comMap = {\r\n                    1: EditValue,\r\n                    2: EditPreview,\r\n                };\r\n                return comMap[this.curStep];\r\n            },\r\n            /**\r\n             * @desc 编辑的变量中是否有值为空的变量\r\n             * @return {Boolean}\r\n            */\r\n            hasEmptyValueVariable () {\r\n                for (const variableKey in this.globalVariableValueMap) {\r\n                    const variableValue = this.globalVariableValueMap[variableKey];\r\n                    if (!variableValue) {\r\n                        return true;\r\n                    }\r\n                    if (_.isObject(variableValue) && variableValue.isEmpty) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            },\r\n        },\r\n        watch: {\r\n            isShow: {\r\n                handler (isShow) {\r\n                    if (isShow) {\r\n                        this.fetchPlanDetailData();\r\n                    }\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n        created () {\r\n            this.steps = [\r\n                {\r\n                    title: '编辑变量',\r\n                    icon: 1,\r\n                },\r\n                {\r\n                    title: '更新预览',\r\n                    icon: 2,\r\n                },\r\n            ];\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 获取所选执行方案的详情数据\r\n             *\r\n             * 得到执行方案详情数据后需要判断所有的执行方案中是否有全局变量\r\n             */\r\n            fetchPlanDetailData () {\r\n                this.isLoading = true;\r\n                this.isGlobalVariableNotEmpty = false;\r\n                TaskPlanService.fetchBatchPlan({\r\n                    planIds: this.data.map(_ => _.id).join(','),\r\n                }).then((data) => {\r\n                    this.planList = Object.freeze(data);\r\n                    // eslint-disable-next-line no-plusplus\r\n                    for (let i = 0; i < this.planList.length; i++) {\r\n                        if (this.planList[i].variableList.length > 0) {\r\n                            this.isGlobalVariableNotEmpty = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            handleEditChange (globalVariableValueMap) {\r\n                this.isPreviewDisabled = Object.values(globalVariableValueMap).length < 1;\r\n            },\r\n            /**\r\n             * @desc 修改预览\r\n             * @param {Number} step 指定的步骤\r\n             *\r\n             * 每次切换步骤时内容区需要滚动到顶部\r\n             */\r\n            handlePreview () {\r\n                this.globalVariableValueMap = Object.freeze(this.$refs.handler.getEditValue());\r\n                this.handleChangeStep(2);\r\n            },\r\n            /**\r\n             * @desc 切换步骤\r\n             * @param {Number} step 指定的步骤\r\n             *\r\n             * 每次切换步骤时内容区需要滚动到顶部\r\n             */\r\n            handleChangeStep (step) {\r\n                this.curStep = step;\r\n                this.$refs.root.$el.querySelector('.bk-sideslider-content').scrollTop = 0;\r\n            },\r\n            /**\r\n             * @desc 提交变量编辑\r\n            */\r\n            handleSubmit () {\r\n                const planList = this.$refs.handler.getRelatePlanList();\r\n                \r\n                const stack = [];\r\n                planList.forEach((currentPlan) => {\r\n                    const variableInfoList = [];\r\n                    const currentData = {\r\n                        planId: currentPlan.id,\r\n                        templateId: currentPlan.templateId,\r\n                        variableInfoList,\r\n                    };\r\n                    currentPlan.variableList.forEach((variableData) => {\r\n                        const variableKey = genGlobalVariableKey(variableData);\r\n                        if (Object.prototype.hasOwnProperty.call(this.globalVariableValueMap, variableKey)) {\r\n                            if (variableData.isHost) {\r\n                                variableInfoList.push({\r\n                                    ...variableData,\r\n                                    defaultTargetValue: this.globalVariableValueMap[variableKey],\r\n                                });\r\n                            } else {\r\n                                variableInfoList.push({\r\n                                    ...variableData,\r\n                                    defaultValue: this.globalVariableValueMap[variableKey],\r\n                                });\r\n                            }\r\n                        } else {\r\n                            variableInfoList.push(variableData);\r\n                        }\r\n                    });\r\n                    stack.push(currentData);\r\n                });\r\n                return TaskPlanService.batchUpdateVariable(stack)\r\n                    .then(() => {\r\n                        window.changeAlert = false;\r\n                        this.messageSuccess('编辑成功');\r\n                        this.$emit('on-success');\r\n                        // settimeout 保证 jb-popover-confirm能被先关闭\r\n                        setTimeout(() => {\r\n                            this.handleCancel();\r\n                        });\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 取消编辑\r\n             */\r\n            handleCancel () {\r\n                leaveConfirm()\r\n                    .then(() => {\r\n                        this.curStep = 1;\r\n                        this.planList = [];\r\n                        this.globalVariableValueMap = {};\r\n                        this.isPreviewDisabled = true;\r\n                        this.$emit('change', false);\r\n                        this.$emit('input', false);\r\n                    });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .batch-edit-global-variable-box {\r\n        .edit-header {\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            height: 56px;\r\n            margin: -20px -30px 0;\r\n            background: #f0f1f5;\r\n        }\r\n    }\r\n</style>\r\n","\r\n<template>\r\n    <div class=\"task-manage-plan-page\">\r\n        <list-action-layout>\r\n            <bk-button\r\n                theme=\"primary\"\r\n                class=\"w120\"\r\n                @click=\"handleCreatePlan\"\r\n                v-test=\"{ type: 'button', value: 'createPlan' }\">\r\n                {{ '新建' }}\r\n            </bk-button>\r\n            <span v-bk-tooltips=\"batchSyncDisableTips\">\r\n                <bk-button\r\n                    @click=\"handleSyncBatch\"\r\n                    v-test=\"{ type: 'button', value: 'batchSyncPlan' }\">\r\n                    {{ '批量同步' }}\r\n                </bk-button>\r\n            </span>\r\n            <span v-bk-tooltips=\"batchEditGlobalVariableTips\">\r\n                <bk-button\r\n                    @click=\"handleBatchEditGlobalVariable\"\r\n                    v-test=\"{ type: 'button', value: 'batchEditPlanValue' }\">\r\n                    {{ '批量编辑变量值' }}\r\n                </bk-button>\r\n            </span>\r\n            <template #right>\r\n                <jb-search-select\r\n                    ref=\"search\"\r\n                    :append-value=\"searchValue\"\r\n                    :data=\"searchData\"\r\n                    :placeholder=\"'输入 ID、执行方案名、作业模板名、更新人 或 创建人 进行搜索...'\"\r\n                    style=\"width: 420px;\"\r\n                    @on-change=\"handleSearch\" />\r\n                <bk-button @click=\"handleMyPlan\">{{ '我的方案' }}</bk-button>\r\n            </template>\r\n        </list-action-layout>\r\n        <layout :flod=\"isListFlod\" @on-flod=\"handleLayoutFlod\">\r\n            <render-list\r\n                ref=\"list\"\r\n                :data-source=\"listDataSource\"\r\n                :search-control=\"() => $refs.search\"\r\n                selectable\r\n                :outer-border=\"false\"\r\n                :size=\"tableSize\"\r\n                :row-class-name=\"caclRowClassName\"\r\n                :pagination-small=\"paginationSmall\"\r\n                @on-selection-change=\"handleSelection\"\r\n                v-test=\"{ type: 'list', value: 'plan' }\">\r\n                <div\r\n                    v-if=\"isCreatePlan\"\r\n                    slot=\"prepend\"\r\n                    class=\"create-plan-placeholder\"\r\n                    :class=\"{ active: selectPlanInfo.id === -1 }\">\r\n                    <div class=\"name-box\">{{ newPlanName || '--' }}</div>\r\n                    <Icon\r\n                        type=\"new-3\"\r\n                        svg\r\n                        style=\"font-size: 26px; color: #ff9c01;\" />\r\n                </div>\r\n                <bk-table-column\r\n                    v-if=\"allRenderColumnMap.id\"\r\n                    label=\"ID\"\r\n                    prop=\"id\"\r\n                    key=\"id\"\r\n                    width=\"120\"\r\n                    align=\"left\" />\r\n                <bk-table-column\r\n                    v-if=\"allRenderColumnMap.name\"\r\n                    :label=\"'执行方案名称'\"\r\n                    prop=\"name\"\r\n                    min-width=\"300\"\r\n                    key=\"name\"\r\n                    align=\"left\"\r\n                    class-name=\"plan-name-column\">\r\n                    <template slot-scope=\"{ row }\">\r\n                        <auth-component\r\n                            style=\"width: 100%;\"\r\n                            :permission=\"row.canView\"\r\n                            auth=\"job_plan/view\"\r\n                            :resource-id=\"row.id\">\r\n                            <div\r\n                                class=\"plan-name-box\"\r\n                                :class=\"{\r\n                                    active: selectPlanInfo.id === row.id,\r\n                                }\"\r\n                                @click=\"handlePlanSelect(row)\">\r\n                                <div class=\"name-wraper\">\r\n                                    <div\r\n                                        class=\"name-text\"\r\n                                        v-bk-overflow-tips>\r\n                                        {{ row.name }}\r\n                                    </div>\r\n                                    <router-link\r\n                                        v-if=\"row.cronJobCount > 0\"\r\n                                        class=\"cron-job-tag\"\r\n                                        :to=\"{\r\n                                            name: 'cronList',\r\n                                            query: {\r\n                                                planId: 4 || row.id,\r\n                                            },\r\n                                        }\"\r\n                                        target=\"_blank\"\r\n                                        v-bk-tooltips.html=\"`\r\n                                            <div>${'有'} ${row.cronJobCount} ${'个定时任务'}</div>\r\n                                            <div>${'点击前往查看'}</div>\r\n                                        `\">\r\n                                        <Icon type=\"job-timing\" svg />\r\n                                        <span style=\"margin-left: 2px;\">{{ row.cronJobCount }}</span>\r\n                                    </router-link>\r\n                                    <span\r\n                                        v-if=\"row.needUpdate\"\r\n                                        class=\"update-flag\">\r\n                                        <Icon\r\n                                            :tippy-tips=\"'未同步'\"\r\n                                            type=\"sync-8\"\r\n                                            svg />\r\n                                    </span>\r\n                                    \r\n                                </div>\r\n                                <Icon\r\n                                    @click.stop=\"handleCollection(row)\"\r\n                                    type=\"collection\"\r\n                                    class=\"collection-flag\"\r\n                                    :class=\"{ favored: row.favored }\" />\r\n                                <Icon\r\n                                    v-if=\"selectPlanInfo.id === row.id\"\r\n                                    class=\"select-flag\"\r\n                                    type=\"arrow-full-right\" />\r\n                            </div>\r\n                            <div\r\n                                slot=\"forbid\"\r\n                                class=\"plan-name-box\"\r\n                                :class=\"{\r\n                                    active: selectPlanInfo.id === row.id,\r\n                                }\">\r\n                                <div class=\"name-wraper\">\r\n                                    <div class=\"name-text\" v-bk-overflow-tips>{{ row.name }}</div>\r\n                                    <router-link\r\n                                        v-if=\"row.cronJobCount > 0\"\r\n                                        class=\"cron-job-tag\"\r\n                                        :to=\"{\r\n                                            name: 'cronList',\r\n                                            query: {\r\n                                                planId: 4 || row.id,\r\n                                            },\r\n                                        }\"\r\n                                        target=\"_blank\"\r\n                                        v-bk-tooltips.html=\"`\r\n                                            <div>${'有'} ${row.cronJobCount} ${'个定时任务'}</div>\r\n                                            <div>${'点击前往查看'}</div>\r\n                                        `\">\r\n                                        <Icon type=\"job-timing\" svg />\r\n                                        <span style=\"margin-left: 2px;\">{{ row.cronJobCount }}</span>\r\n                                    </router-link>\r\n                                    <span\r\n                                        v-if=\"row.needUpdate\"\r\n                                        class=\"update-flag\">\r\n                                        <Icon\r\n                                            :tippy-tips=\"'未同步'\"\r\n                                            type=\"sync-8\"\r\n                                            svg />\r\n                                    </span>\r\n                                    \r\n                                </div>\r\n                                <Icon\r\n                                    @click.stop=\"handleCollection(row)\"\r\n                                    type=\"collection\"\r\n                                    class=\"collection-flag\"\r\n                                    :class=\"{ favored: row.favored }\" />\r\n                            </div>\r\n                        </auth-component>\r\n                    </template>\r\n                </bk-table-column>\r\n                <bk-table-column\r\n                    v-if=\"allRenderColumnMap.templateName\"\r\n                    :label=\"'所属作业模板'\"\r\n                    prop=\"templateName\"\r\n                    min-width=\"200\"\r\n                    key=\"templateName\"\r\n                    show-overflow-tooltip\r\n                    align=\"left\" />\r\n                <bk-table-column\r\n                    v-if=\"allRenderColumnMap.lastModifyUser\"\r\n                    :label=\"'更新人'\"\r\n                    prop=\"lastModifyUser\"\r\n                    key=\"lastModifyUser\"\r\n                    width=\"160\"\r\n                    align=\"left\" />\r\n                <bk-table-column\r\n                    v-if=\"allRenderColumnMap.lastModifyTime\"\r\n                    :label=\"'更新时间'\"\r\n                    prop=\"lastModifyTime\"\r\n                    key=\"lastModifyTime\"\r\n                    width=\"180\"\r\n                    align=\"left\" />\r\n                <bk-table-column\r\n                    v-if=\"allRenderColumnMap.creator\"\r\n                    :label=\"'创建人'\"\r\n                    prop=\"creator\"\r\n                    key=\"creator\"\r\n                    width=\"120\"\r\n                    align=\"left\" />\r\n                <bk-table-column\r\n                    v-if=\"allRenderColumnMap.createTime\"\r\n                    :label=\"'创建时间'\"\r\n                    prop=\"createTime\"\r\n                    key=\"createTime\"\r\n                    width=\"180\"\r\n                    align=\"left\" />\r\n                <bk-table-column\r\n                    v-if=\"!isListFlod\"\r\n                    :resizable=\"false\"\r\n                    :label=\"'操作'\"\r\n                    prop=\"statusText\"\r\n                    fixed=\"right\"\r\n                    key=\"action\"\r\n                    width=\"120\"\r\n                    align=\"left\">\r\n                    <template slot-scope=\"{ row }\">\r\n                        <bk-button\r\n                            text\r\n                            @click=\"handleExecute(row)\"\r\n                            class=\"mr10\"\r\n                            v-test=\"{ type: 'button', value: 'execPlan' }\">\r\n                            {{ '去执行' }}\r\n                        </bk-button>\r\n                        <span :tippy-tips=\"row.needUpdate ? '' : '无需同步'\">\r\n                            <auth-button\r\n                                :permission=\"row.canEdit\"\r\n                                auth=\"job_plan/sync\"\r\n                                :resource-id=\"row.id\"\r\n                                text\r\n                                @click=\"handleUpdate(row)\"\r\n                                class=\"mr10\"\r\n                                v-test=\"{ type: 'button', value: 'syncPlan' }\">\r\n                                {{ '去同步' }}\r\n                            </auth-button>\r\n                        </span>\r\n                        <list-operation-extend>\r\n                            <div\r\n                                class=\"action-item\"\r\n                                @click=\"handleGoCreateCronJob(row)\"\r\n                                v-test=\"{ type: 'link', value: 'createCrontab' }\">\r\n                                {{ '定时执行' }}\r\n                            </div>\r\n                            <auth-component\r\n                                :permission=\"row.canEdit\"\r\n                                auth=\"job_plan/edit\"\r\n                                :resource-id=\"row.id\">\r\n                                <div\r\n                                    class=\"action-item\"\r\n                                    @click=\"handleEdit(row)\"\r\n                                    v-test=\"{ type: 'button', value: 'editPlan' }\">\r\n                                    {{ '编辑' }}\r\n                                </div>\r\n                                <div\r\n                                    class=\"action-item\"\r\n                                    slot=\"forbid\"\r\n                                    v-test=\"{ type: 'button', value: 'editPlan' }\">\r\n                                    {{ '编辑' }}\r\n                                </div>\r\n                            </auth-component>\r\n                            <jb-popover-confirm\r\n                                class=\"action-del\"\r\n                                :title=\"'确定删除该执行方案？'\"\r\n                                :content=\"'若已设置了定时任务，需要先删除才能操作'\"\r\n                                :confirm-handler=\"() => handleDelete(row)\">\r\n                                <auth-component\r\n                                    :permission=\"row.canDelete\"\r\n                                    auth=\"job_plan/delete\"\r\n                                    :resource-id=\"row.id\">\r\n                                    <div\r\n                                        class=\"action-item\"\r\n                                        v-test=\"{ type: 'button', value: 'deletePlan' }\">\r\n                                        {{ '删除' }}\r\n                                    </div>\r\n                                    <div\r\n                                        slot=\"forbid\"\r\n                                        class=\"action-item\"\r\n                                        v-test=\"{ type: 'button', value: 'deletePlan' }\">\r\n                                        {{ '删除' }}\r\n                                    </div>\r\n                                </auth-component>\r\n                            </jb-popover-confirm>\r\n                        </list-operation-extend>\r\n                    </template>\r\n                </bk-table-column>\r\n                <bk-table-column v-if=\"!isListFlod\" type=\"setting\">\r\n                    <bk-table-setting-content\r\n                        :fields=\"tableColumn\"\r\n                        :selected=\"selectedTableColumn\"\r\n                        :size=\"tableSize\"\r\n                        @setting-change=\"handleSettingChange\" />\r\n                </bk-table-column>\r\n            </render-list>\r\n            <template slot=\"flod\">\r\n                <component\r\n                    :is=\"planCom\"\r\n                    ref=\"planHandler\"\r\n                    v-bind=\"selectPlanInfo\"\r\n                    :bottom-offset=\"20\"\r\n                    :first-plan=\"isFirstTemplatePlan\"\r\n                    @on-name-change=\"handleCreatePlanNameChange\"\r\n                    @on-create=\"handleCreateSubmit\"\r\n                    @on-edit=\"handleShowPlanEdit\"\r\n                    @on-edit-cancle=\"handleEditCancle\"\r\n                    @on-edit-success=\"handleEditSuccess\"\r\n                    @on-delete=\"handlePlanDelete\" />\r\n            </template>\r\n        </layout>\r\n        <lower-component level=\"custom\" :custom=\"isShowTemplateSelect\">\r\n            <template-select\r\n                v-model=\"isShowTemplateSelect\"\r\n                @on-change=\"handleTemplateChange\" />\r\n        </lower-component>\r\n        <lower-component level=\"custom\" :custom=\"isShowBatchGlobalVariable\">\r\n            <batch-edit-global-variable\r\n                v-model=\"isShowBatchGlobalVariable\"\r\n                :data=\"listSelect\"\r\n                @on-success=\"handleBatchEditGlobalVariableSuccess\" />\r\n        </lower-component>\r\n    </div>\r\n</template>\r\n<script>\r\n    /**\r\n     * @desc 执行方案列表展示公用组件\r\n     *\r\n     * 用于作业模板详情展示指定作业模板的执行方案（固定搜索项作业模板名称）\r\n     * 用执行方案列表展示所有执行方案列表\r\n    */\r\n       import UserService from '@service/user';\r\n    import NotifyService from '@service/notify';\r\n    import ExecPlanService from '@service/task-plan';\r\n    import TaskExecuteService from '@service/task-execute';\r\n    import ListActionLayout from '@components/list-action-layout';\r\n    import RenderList from '@components/render-list';\r\n    import JbSearchSelect from '@components/jb-search-select';\r\n    import ListOperationExtend from '@components/list-operation-extend';\r\n    import { listColumnsCache } from '@utils/cache-helper';\r\n    import { leaveConfirm } from '@utils/assist';\r\n    import PlanDetail from '../detail';\r\n    import PlanEdit from '../edit';\r\n    import PlanCreate from '../create';\r\n    import Layout from './components/layout';\r\n    import TemplateSelect from './components/template-select';\r\n    import BatchEditGlobalVariable from './components/batch-edit-gobal-variable';\r\n\r\n    const TABLE_COLUMN_CACHE = 'task_plan_list_columns';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            ListActionLayout,\r\n            RenderList,\r\n            JbSearchSelect,\r\n            ListOperationExtend,\r\n            Layout,\r\n            PlanDetail,\r\n            PlanEdit,\r\n            TemplateSelect,\r\n            BatchEditGlobalVariable,\r\n        },\r\n        data () {\r\n            return {\r\n                searchValue: [],\r\n                listSelect: [],\r\n                isShowTemplateSelect: false,\r\n                isShowBatchGlobalVariable: false,\r\n                planComType: '',\r\n                newPlanName: '',\r\n                isFirstTemplatePlan: false,\r\n                selectPlanInfo: {\r\n                    templateId: -1,\r\n                    id: -1,\r\n                },\r\n                currentUser: {},\r\n                selectedTableColumn: [],\r\n                tableSize: 'small',\r\n                paginationSmall: false,\r\n            };\r\n        },\r\n        computed: {\r\n            isLoading () {\r\n                return this.$refs.list.isLoading;\r\n            },\r\n            allRenderColumnMap () {\r\n                if (this.isListFlod) {\r\n                    return {\r\n                        name: true,\r\n                    };\r\n                }\r\n                return this.selectedTableColumn.reduce((result, item) => {\r\n                    result[item.id] = true;\r\n                    return result;\r\n                }, {});\r\n            },\r\n            planCom () {\r\n                const planComMap = {\r\n                    detail: PlanDetail,\r\n                    edit: PlanEdit,\r\n                    create: PlanCreate,\r\n                };\r\n                if (!planComMap[this.planComType]) {\r\n                    return 'div';\r\n                }\r\n                return planComMap[this.planComType];\r\n            },\r\n            isCreatePlan () {\r\n                return this.planComType === 'create';\r\n            },\r\n            isListFlod () {\r\n                return Boolean(this.planComType);\r\n            },\r\n            /**\r\n             * @desc 批量同步按钮禁用tips\r\n             * 当所选执行方案中有执行方案中不需要同步或者有执行方案中没有权限同步，禁用批量同步操作\r\n             */\r\n            batchSyncDisableTips () {\r\n                if (this.listSelect.length < 1) {\r\n                    return '请选择要同步的执行方案';\r\n                }\r\n                let needUpdate = true;\r\n                let canEdit = true;\r\n                this.listSelect.forEach((currentSelect) => {\r\n                    if (!currentSelect.needUpdate) {\r\n                        needUpdate = false;\r\n                    }\r\n                    if (!currentSelect.canEdit) {\r\n                        canEdit = false;\r\n                    }\r\n                });\r\n                if (!needUpdate) {\r\n                    return '已选结果中有执行方案中不需要同步';\r\n                }\r\n                if (!canEdit) {\r\n                    return '已选结果中有执行方案中没有权限同步';\r\n                }\r\n                return '';\r\n            },\r\n            /**\r\n             * @desc 批量编辑全局变量按钮禁用tips\r\n             * 当所选执行方案中有执行方案中没有权限编辑禁用批量编辑操作\r\n             */\r\n            batchEditGlobalVariableTips () {\r\n                if (this.listSelect.length < 1) {\r\n                    return '请选择要编辑的执行方案';\r\n                }\r\n                let canEdit = true;\r\n                // eslint-disable-next-line no-plusplus\r\n                for (let i = 0; i < this.listSelect.length; i++) {\r\n                    const currentSelect = this.listSelect[i];\r\n                    if (!currentSelect.canEdit) {\r\n                        canEdit = false;\r\n                        break;\r\n                    }\r\n                }\r\n                \r\n                if (!canEdit) {\r\n                    return '已选结果中有执行方案中没有权限编辑';\r\n                }\r\n                return '';\r\n            },\r\n        },\r\n        created () {\r\n            this.parseUrl();\r\n\r\n            this.fetchUserInfo();\r\n\r\n            this.listDataSource = ExecPlanService.fetchAllPlan;\r\n            \r\n            // 查看指定作业模板的执行方案列表，不支持作业模板名称搜索\r\n            this.searchData = [\r\n                {\r\n                    name: 'ID',\r\n                    id: 'planId',\r\n                    description: '将覆盖其它条件',\r\n                    validate (values, item) {\r\n                        const validate = (values || []).every(_ => /^(\\d*)$/.test(_.name));\r\n                        return !validate ? 'ID只支持数字' : true;\r\n                    },\r\n                },\r\n                {\r\n                    name: '执行方案',\r\n                    id: 'planName',\r\n                    default: true,\r\n                },\r\n                {\r\n                    name: '更新人',\r\n                    id: 'lastModifyUser',\r\n                    remoteMethod: NotifyService.fetchUsersOfSearch,\r\n                    inputInclude: true,\r\n                },\r\n                {\r\n                    name: '创建人',\r\n                    id: 'creator',\r\n                    remoteMethod: NotifyService.fetchUsersOfSearch,\r\n                    inputInclude: true,\r\n                },\r\n            ];\r\n            if (!this.isViewTemplatePlanList) {\r\n                this.searchData.splice(2, 0, {\r\n                    name: '作业模板名称',\r\n                    id: 'templateName',\r\n                });\r\n            }\r\n            \r\n            // 列表可显示列\r\n            this.tableColumn = [\r\n                {\r\n                    id: 'id',\r\n                    label: 'ID',\r\n                },\r\n                {\r\n                    id: 'name',\r\n                    label: '执行方案',\r\n                    disabled: true,\r\n                },\r\n                {\r\n                    id: 'templateName',\r\n                    label: '所属作业模板',\r\n                },\r\n                {\r\n                    id: 'lastModifyUser',\r\n                    label: '更新人',\r\n                },\r\n                {\r\n                    id: 'lastModifyTime',\r\n                    label: '更新时间',\r\n                },\r\n                {\r\n                    id: 'creator',\r\n                    label: '创建人',\r\n                },\r\n                {\r\n                    id: 'createTime',\r\n                    label: '创建时间',\r\n                },\r\n            ];\r\n            const columnsCache = listColumnsCache.getItem(TABLE_COLUMN_CACHE);\r\n            if (columnsCache) {\r\n                this.selectedTableColumn = Object.freeze(columnsCache.columns);\r\n                this.tableSize = columnsCache.size;\r\n            } else {\r\n                this.selectedTableColumn = Object.freeze([\r\n                    { id: 'id' },\r\n                    { id: 'name' },\r\n                    { id: 'lastModifyUser' },\r\n                    { id: 'lastModifyTime' },\r\n                ]);\r\n            }\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 执行方案列表\r\n             *\r\n             * 查看指定作业模板的执行方案列表\r\n             *  - api请求固定作业模板id，url查询参数需要拼接viewPlanId表示当前正常查看的执行方案\r\n             */\r\n            fetchData () {\r\n                const searchParams = {\r\n                    ...this.searchParams,\r\n                };\r\n                if (this.templateId) {\r\n                    searchParams.templateId = this.templateId;\r\n                }\r\n                this.$refs.list.$emit('onFetch', searchParams);\r\n            },\r\n            /**\r\n             * @desc 登陆用户信息\r\n             */\r\n            fetchUserInfo () {\r\n                UserService.fetchUserInfo()\r\n                    .then((data) => {\r\n                        this.currentUser = Object.freeze(data);\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 解析 url 参数\r\n             */\r\n            parseUrl () {\r\n                // 查看作业模板的执行方案\r\n                this.isViewTemplatePlanList = this.$route.name === 'viewPlan';\r\n                // 执行方案列表所属的作业模板\r\n                this.templateId = '';\r\n                \r\n                if (this.isViewTemplatePlanList) {\r\n                    // 查看指定作业模板的执行方案列表\r\n\r\n                    // 解析路由查询参数viewPlanId，没有指定viewPlanId或者viewPlanId不存在列表数据中，默认赋值列表数据的第一个\r\n                    let {\r\n                        templateId,\r\n                    } = this.$route.params;\r\n                    templateId = Number(templateId);\r\n                    // 记录 templateId\r\n                    this.templateId = templateId;\r\n                    \r\n                    const {\r\n                        viewPlanId,\r\n                        mode,\r\n                    } = this.$route.query;\r\n                    // 默认显示新建执行方案\r\n                    if (mode === 'create') {\r\n                        setTimeout(() => {\r\n                            this.handleCreatePlan();\r\n                        });\r\n                        \r\n                        return;\r\n                    }\r\n                    // url 记录了指定查看那个执行方案\r\n                    // 默认显示执行方案详情\r\n                    const id = Number(viewPlanId) || 0;\r\n                    if (id > 0) {\r\n                        setTimeout(() => {\r\n                            this.handlePlanSelect({\r\n                                templateId,\r\n                                id,\r\n                            });\r\n                        });\r\n                    }\r\n                } else {\r\n                    // 查看所有执行方案列表\r\n                    const {\r\n                        viewTemplateId,\r\n                        viewPlanId,\r\n                    } = this.$route.query;\r\n                    const templateId = Number(viewTemplateId) || 0;\r\n                    const id = Number(viewPlanId) || 0;\r\n\r\n                    if (templateId && id) {\r\n                        setTimeout(() => {\r\n                            this.handlePlanSelect({\r\n                                templateId,\r\n                                id,\r\n                            });\r\n                        });\r\n                    }\r\n                }\r\n            },\r\n            caclRowClassName ({ row }) {\r\n                return row.id === this.selectPlanInfo.id ? 'active' : '';\r\n            },\r\n            /**\r\n             * @desc 表格列表配置\r\n             */\r\n            handleSettingChange ({ fields, size }) {\r\n                this.selectedTableColumn = Object.freeze(fields);\r\n                this.tableSize = size;\r\n                listColumnsCache.setItem(TABLE_COLUMN_CACHE, {\r\n                    columns: fields,\r\n                    size,\r\n                });\r\n            },\r\n            /**\r\n             * @desc 创建执行方案\r\n             *\r\n             * 在查看模板执行方案页面，直接创建当前作业模板下的执行方案\r\n             * 在查看所有执行方案列表页面，需要先选中作业模板然后才开始创建执行方案\r\n             *\r\n             */\r\n            handleCreatePlan () {\r\n                if (this.isViewTemplatePlanList) {\r\n                    this.handleTemplateChange(this.templateId);\r\n                } else {\r\n                    this.isShowTemplateSelect = true;\r\n                }\r\n            },\r\n            /**\r\n             * @desc 选择作业模板后显示新建执行方案页面\r\n             * @param {Number} templateId 作业模板id\r\n             *\r\n             * 需要判断将要新建的执行方案是否是改模板下面的第一个执行方案\r\n             */\r\n            handleTemplateChange (templateId) {\r\n                this.selectPlanInfo = {\r\n                    templateId,\r\n                    id: -1,\r\n                };\r\n                this.planComType = 'create';\r\n                this.paginationSmall = true;\r\n                this.isFirstTemplatePlan = this.$refs.list.data.length < 1;\r\n            },\r\n            /**\r\n             * @desc 新建执行方案时执行方案名更新\r\n             * @param {String} planName 执行方案名\r\n             */\r\n            handleCreatePlanNameChange (planName) {\r\n                this.newPlanName = planName;\r\n            },\r\n            /**\r\n             * @desc 批量同步已选的执行方案\r\n             */\r\n            handleSyncBatch () {\r\n                this.$router.push({\r\n                    name: 'syncPlanBatch',\r\n                    query: {\r\n                        planIds: this.listSelect.map(_ => _.id).join(','),\r\n                        from: this.$route.name,\r\n                    },\r\n                });\r\n            },\r\n            /**\r\n             * @desc 批量更新变量值\r\n             */\r\n            handleBatchEditGlobalVariable () {\r\n                this.isShowBatchGlobalVariable = true;\r\n            },\r\n            /**\r\n             * @desc 列表搜索\r\n             * @param {Object} params 搜索参数\r\n             */\r\n            handleSearch (params) {\r\n                this.searchParams = params;\r\n                this.fetchData();\r\n            },\r\n            /**\r\n             * @desc 筛选我的执行方案\r\n             */\r\n            handleMyPlan () {\r\n                const currentUserName = this.currentUser.username;\r\n                const creator = {\r\n                    name: '创建人',\r\n                    id: 'creator',\r\n                    values: [\r\n                        {\r\n                            id: currentUserName,\r\n                            name: currentUserName,\r\n                        },\r\n                    ],\r\n                };\r\n                this.searchParams = {\r\n                    ...this.searchParams,\r\n                    creator: currentUserName,\r\n                };\r\n                this.searchValue = [creator];\r\n                this.fetchData();\r\n            },\r\n            /**\r\n             * @desc 列表选择\r\n             * @param {Array} selectPlan 选中的执行方案\r\n             */\r\n            handleSelection (selectPlan) {\r\n                this.listSelect = Object.freeze(selectPlan);\r\n            },\r\n            /**\r\n             * @desc 列表布局收起\r\n             *\r\n             * 收起时需要更新 url 参数\r\n             */\r\n            handleLayoutFlod () {\r\n                this.planComType = '';\r\n                this.selectPlanInfo = {\r\n                    templateId: -1,\r\n                    id: -1,\r\n                };\r\n                this.paginationSmall = false;\r\n                const searchParams = new URLSearchParams(window.location.search);\r\n                searchParams.delete('viewTemplateId');\r\n                searchParams.delete('viewPlanId');\r\n                window.history.replaceState({}, '', `?${searchParams.toString()}`);\r\n            },\r\n            /**\r\n             * @desc 选中执行方案查看详情\r\n             * @param {Object} row 选中的行数据\r\n             * @param {String} mode 执行方案的展示状态（detail、edit、create）\r\n             *\r\n             * 显示执行方案详情面板\r\n             * url 查询参数拼接viewPlanId记录当前选中的执行方案id\r\n             */\r\n            handlePlanSelect (row, mode = 'detail') {\r\n                const currentPlanId = row.id;\r\n                if (currentPlanId === this.selectPlanInfo.id) {\r\n                    return;\r\n                }\r\n                leaveConfirm()\r\n                    .then(() => {\r\n                        this.planComType = mode;\r\n                        this.selectPlanInfo = {\r\n                            templateid: 4 || row.templateId,\r\n                            id: currentPlanId,\r\n                        };\r\n                        this.paginationSmall = true;\r\n                        // url 缓存用户场景\r\n                        setTimeout(() => {\r\n                            const searchParams = new URLSearchParams(window.location.search);\r\n                            searchParams.set('viewTemplateId', row.templateId);\r\n                            searchParams.set('viewPlanId', row.id);\r\n                            window.history.replaceState({}, '', `?${searchParams.toString()}`);\r\n                        });\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 收藏执行方案\r\n             * @param {Object} plan 操作的执行方案数据\r\n             */\r\n            handleCollection (plan) {\r\n                const requestHander = plan.favored ? ExecPlanService.deleteFavorite : ExecPlanService.updateFavorite;\r\n                requestHander({\r\n                    id: plan.id,\r\n                    templateId: plan.templateId,\r\n                }).then(() => {\r\n                    plan.toggleFavored();\r\n                    this.messageSuccess(plan.favored ? '收藏成功' : '取消收藏成功');\r\n                });\r\n            },\r\n            /**\r\n             * @desc 跳转执行方案关联的定时任务列表\r\n             * @param {Object} plan 操作的执行方案数据\r\n             */\r\n            handleGoCronJobList (plan) {\r\n                const { href } = this.$router.resolve({\r\n                    name: 'cronList',\r\n                    query: {\r\n                        planId: plan.id,\r\n                    },\r\n                });\r\n                window.open(href);\r\n            },\r\n            /**\r\n             * @desc 执行选中的执行方案\r\n             * @param {Object} row 操作的执行方案数据\r\n             */\r\n            handleExecute (row) {\r\n                // 获取作业详情\r\n                // ExecPlanService.fetchPlanDetailInfo({\r\n                //     id: 4 || row.id,\r\n                //     templateid: 4 || row.templateId,\r\n                // }).then((data) => {\r\n                const data = { variableList: [1, 2] };\r\n                // 没有变量——直接执行\r\n                if (data.variableList.length < 1) {\r\n                    this.$bkInfo({\r\n                        title: '确认执行？',\r\n                        subTitle: '未设置全局变量，点击确认将直接执行。',\r\n                        confirmFn: () => {\r\n                            TaskExecuteService.taskExecution({\r\n                                taskId: 4 || row.id,\r\n                                taskVariables: [],\r\n                            }).then(({ taskInstanceId }) => {\r\n                                this.$bkMessage({\r\n                                    theme: 'success',\r\n                                    message: '操作成功',\r\n                                });\r\n                                this.$router.push({\r\n                                    name: 'historyTask',\r\n                                    params: {\r\n                                        id: taskInstanceId,\r\n                                    },\r\n                                    query: {\r\n                                        from: this.$route.name,\r\n                                    },\r\n                                });\r\n                            });\r\n                        },\r\n                    });\r\n                    return;\r\n                }\r\n                // 有变量——跳到设置变量页面\r\n                this.$router.push({\r\n                    name: 'settingVariable',\r\n                    params: {\r\n                        id: 4 || row.id,\r\n                        templateid: 4 || row.templateId,\r\n                    },\r\n                    query: {\r\n                        from: this.$route.name,\r\n                    },\r\n                });\r\n            },\r\n            /**\r\n             * @desc 编辑执行方案\r\n             * @param {Object} row 操作的执行方案数据\r\n             */\r\n            handleEdit (row) {\r\n                this.handlePlanSelect(row, 'edit');\r\n            },\r\n            /**\r\n             * @desc 同步执行方案\r\n             * @param {Object} row 操作的执行方案数据\r\n             */\r\n            handleUpdate (row) {\r\n                this.$router.push({\r\n                    name: 'syncPlan',\r\n                    params: {\r\n                        id: 4 || row.id,\r\n                        templateid: 4 || row.templateId,\r\n                    },\r\n                    query: {\r\n                        from: this.$route.name,\r\n                    },\r\n                });\r\n            },\r\n\r\n            /**\r\n             * @desc 新建执行方案\r\n             * @param {Object} row 操作的执行方案数据\r\n             */\r\n            handleGoCreateCronJob (row) {\r\n                const { href } = this.$router.resolve({\r\n                    name: 'cronList',\r\n                    query: {\r\n                        mode: 'create',\r\n                        templateid: 4 || row.templateId,\r\n                        planId: 4 || row.id,\r\n                    },\r\n                });\r\n                window.open(href);\r\n            },\r\n            /**\r\n             * @desc 删除执行方案\r\n             * @param {Object} row 操作的执行方案数据\r\n             */\r\n            handleDelete (row) {\r\n                return ExecPlanService.planDelete({\r\n                    id: 4 || row.id,\r\n                    templateid: 4 || row.templateId,\r\n                }).then((data) => {\r\n                    this.$bkMessage({\r\n                        theme: 'success',\r\n                        message: '操作成功',\r\n                    });\r\n                    this.fetchData();\r\n                });\r\n            },\r\n            /**\r\n             * @desc 创建执行方案成功\r\n             * @param {number} planId 新创建的执行方案id\r\n             *\r\n             * 执行方案创建成功重新拉取列表数据，并切换到新执行方案详情的查看页面\r\n             */\r\n            handleCreateSubmit (planId) {\r\n                this.fetchData();\r\n                this.handlePlanSelect({\r\n                    templateId: this.selectPlanInfo.templateId,\r\n                    id: planId,\r\n                });\r\n            },\r\n            /**\r\n             * @desc 切换编辑执行方案面板\r\n             */\r\n            handleShowPlanEdit () {\r\n                this.planComType = 'edit';\r\n            },\r\n            /**\r\n             * @desc 删除执行方案成功\r\n             *\r\n             * 收起面板，刷新列表数据\r\n             */\r\n            handlePlanDelete () {\r\n                this.handleLayoutFlod();\r\n                this.fetchData();\r\n            },\r\n            /**\r\n             * @desc 取消编辑执行方案\r\n             */\r\n            handleEditCancle () {\r\n                this.planComType = 'detail';\r\n            },\r\n            /**\r\n             * @desc 编辑执行方案成功，刷新列表数据\r\n             */\r\n            handleEditSuccess () {\r\n                this.fetchData();\r\n            },\r\n            /**\r\n             * @desc 批量编辑执行方案的全局变量\r\n             *\r\n             * 编辑成功\r\n             *  - 刷新执行方案面板数据\r\n             *  - 重置 table 行选中状态\r\n             */\r\n            handleBatchEditGlobalVariableSuccess () {\r\n                this.$refs.list.resetSelect();\r\n                if (this.$refs.planHandler) {\r\n                    this.$refs.planHandler.refresh();\r\n                }\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .task-manage-plan-page {\r\n        .bk-table tr:hover {\r\n            td.plan-name-column {\r\n                .plan-name-box {\r\n                    .collection-flag {\r\n                        display: inline-block;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        .bk-table-row {\r\n            &.active {\r\n                background: #eff5ff;\r\n            }\r\n        }\r\n\r\n        .create-plan-placeholder {\r\n            display: flex;\r\n            align-items: center;\r\n            height: 40px;\r\n            padding-left: 85px;\r\n            line-height: 40px;\r\n            color: #3a84ff;\r\n            border-bottom: 1px solid #dfe0e5;\r\n\r\n            &.active {\r\n                background: #eff5ff;\r\n            }\r\n\r\n            .name-box {\r\n                max-width: 226px;\r\n                margin-right: 8px;\r\n                overflow: hidden;\r\n                font-size: 13px;\r\n                text-overflow: ellipsis;\r\n                white-space: nowrap;\r\n            }\r\n        }\r\n\r\n        .plan-name-column {\r\n            &:hover {\r\n                .collection-flag {\r\n                    display: block;\r\n                }\r\n            }\r\n\r\n            .cell {\r\n                overflow: unset;\r\n            }\r\n\r\n            .plan-name-box {\r\n                position: relative;\r\n                display: flex;\r\n                flex: 1;\r\n                align-items: center;\r\n                height: 40px;\r\n                cursor: pointer;\r\n            }\r\n\r\n            .name-wraper {\r\n                display: flex;\r\n                align-items: center;\r\n                width: 100%;\r\n                padding-right: 6px;\r\n                overflow: hidden;\r\n            }\r\n\r\n            .name-text {\r\n                overflow: hidden;\r\n                color: #3a84ff;\r\n                text-overflow: ellipsis;\r\n                white-space: nowrap;\r\n                cursor: pointer;\r\n                flex: 0 1 auto;\r\n                align-items: center;\r\n            }\r\n\r\n            .cron-job-tag {\r\n                flex: 0 0 auto;\r\n                display: inline-flex;\r\n                height: 16px;\r\n                padding: 0 4px;\r\n                margin-left: 4px;\r\n                font-size: 12px;\r\n                color: #fff;\r\n                cursor: pointer;\r\n                background: #3a84ff;\r\n                border-radius: 8px;\r\n                user-select: none;\r\n                justify-content: center;\r\n                align-items: center;\r\n            }\r\n\r\n            .update-flag {\r\n                flex: 0 0 auto;\r\n                display: inline-flex;\r\n                width: 16px;\r\n                height: 16px;\r\n                margin-left: 4px;\r\n                font-size: 12px;\r\n                color: #fff;\r\n                background: #ea3636;\r\n                border-radius: 8px;\r\n                user-select: none;\r\n                justify-content: center;\r\n                align-items: center;\r\n            }\r\n\r\n            .collection-flag {\r\n                position: absolute;\r\n                left: -32px;\r\n                display: none;\r\n                padding: 10px;\r\n                font-size: 14px;\r\n                color: #c4c6cc;\r\n\r\n                &.favored {\r\n                    display: inline-block;\r\n                    color: #ffd695;\r\n                }\r\n            }\r\n\r\n            .select-flag {\r\n                margin-left: auto;\r\n                color: #a3c5fd;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n"],"names":[],"sourceRoot":""}