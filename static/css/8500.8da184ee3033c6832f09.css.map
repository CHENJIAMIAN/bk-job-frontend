{"version":3,"file":"static/css/8500.8da184ee3033c6832f09.css","mappings":"AAoCA,yCAEA,mBAEA,cACA,eAJA,aAEA,cAGA,CAEA,+CAEA,eADA,gBAEA,CC6nBA,oBACA,YAmDA,CAjDA,iCAGA,cAFA,2BACA,kBAEA,sBAKA,CAHA,qDACA,mBACA,CAGA,kCAIA,cAHA,2BAEA,mBADA,gBAGA,CAEA,0BACA,kBACA,CAGA,sGACA,eACA,CAEA,8DACA,eACA,CAIA,0BADA,uCAEA,WAcA,CAbA,CAEA,0BALA,uCAMA,WAUA,CATA,CAEA,0BATA,uCAUA,WAMA,CALA,CAEA,0BAbA,uCAcA,WAEA,CADA,CAMA,qFACA,qBACA,CAIA,gDACA,4BACA,CAEA,oCACA,YACA","sources":["webpack://job/./src/views/task-manage/template-operation/components/toggle-display.vue","webpack://job/./src/views/task-manage/template-operation/index.vue"],"sourcesContent":["<template>\n    <div class=\"toggle-display\">\n        <div v-show=\"isOpen\">\n            <slot />\n        </div>\n        <bk-form-item label=\" \" style=\"margin-top: -10px;\">\n            <div class=\"action\" @click=\"handleToggle\">\n                <template v-if=\"isOpen\">\n                    <Icon type=\"angle-double-up\" class=\"toggle-arrow\" />\n                    <span>{{ '收起更多设置' }}</span>\n                </template>\n                <template v-else>\n                    <Icon type=\"angle-double-down\" class=\"toggle-arrow\" />\n                    <span>{{ '展开更多设置' }}</span>\n                </template>\n            </div>\n        </bk-form-item>\n    </div>\n</template>\n<script>\n    export default {\n        name: 'ToggleDisplay',\n        data () {\n            return {\n                isOpen: false,\n            };\n        },\n        methods: {\n            handleToggle () {\n                this.isOpen = !this.isOpen;\n            },\n        },\n    };\n</script>\n<style lang='postcss' scoped>\n    .toggle-display {\n        .action {\n            display: flex;\n            align-items: center;\n            font-size: 14px;\n            color: #3a84ff;\n            cursor: pointer;\n        }\n\n        .toggle-arrow {\n            margin-right: 3px;\n            font-size: 12px;\n        }\n    }\n</style>\n","<template>\n    <div\n        id=\"templateOperation\"\n        class=\"template-operation\">\n        <div class=\"layout-left\">\n            <scroll-faker ref=\"contentScroll\">\n                <div class=\"template-container\">\n                    <smart-action offset-target=\"bk-form-content\">\n                        <jb-form\n                            :model=\"formData\"\n                            :rules=\"rules\"\n                            ref=\"templateOperateRef\"\n                            v-test=\"{ type: 'form', value: 'template' }\">\n                            <bk-alert class=\"info\" :title=\"'「对作业模板的修改不会立即自动更新执行方案，需要由用户手动触发」'\" />\n                            <jb-form-item\n                                :label=\"'模板名称'\"\n                                required property=\"name\">\n                                <jb-input\n                                    class=\"input form-item-content\"\n                                    :placeholder=\"'输入作业模板名称'\"\n                                    v-model=\"formData.name\"\n                                    :maxlength=\"60\" />\n                            </jb-form-item>\n                            <toggle-display style=\"margin-bottom: 20px;\">\n                                <jb-form-item\n                                    :label=\"'场景标签'\"\n                                    property=\"tags\">\n                                    <jb-tag-select\n                                        class=\"input form-item-content\"\n                                        :placeholder=\"'标签对资源的分类管理有很大帮助'\"\n                                        v-model=\"formData.tags\" />\n                                </jb-form-item>\n                                <jb-form-item :label=\"'模板描述'\">\n                                    <bk-input\n                                        v-model=\"formData.description\"\n                                        class=\"template-desc-textarea form-item-content\"\n                                        type=\"textarea\"\n                                        :maxlength=\"500\"\n                                        :placeholder=\"'填写该模板的功能介绍等详细描述...'\" />\n                                </jb-form-item>\n                            </toggle-display>\n                            <jb-form-item\n                                :label=\"'全局变量'\"\n                                style=\"margin-bottom: 30px;\">\n                                <render-global-var\n                                    :list=\"formData.variables\"\n                                    mode=\"operate\"\n                                    @on-change=\"handleGlobalVariableChange\" />\n                            </jb-form-item>\n                            <jb-form-item\n                                :label=\"'作业步骤'\"\n                                required\n                                property=\"steps\"\n                                style=\"margin-bottom: 30px;\">\n                                <render-task-step\n                                    ref=\"step\"\n                                    :list=\"formData.steps\"\n                                    :variable=\"formData.variables\"\n                                    mode=\"operation\"\n                                    @on-change=\"handleTaskStepChange\" />\n                            </jb-form-item>\n                        </jb-form>\n                        <template #action>\n                            <bk-button\n                                class=\"w120 mr10\"\n                                theme=\"primary\"\n                                :loading=\"isSubmiting\"\n                                @click=\"handlerSubmit\"\n                                v-test=\"{ type: 'button', value: 'operationTemplateSubmit' }\">\n                                {{ submitText }}\n                            </bk-button>\n                            <bk-button\n                                @click=\"handleCancel\"\n                                v-test=\"{ type: 'button', value: 'operationTemplateCancel' }\">\n                                {{ '取消' }}\n                            </bk-button>\n                        </template>\n                    </smart-action>\n                </div>\n            </scroll-faker>\n            <back-top :target=\"getScrollParent\" />\n        </div>\n        <div id=\"templateOperationLayoutRight\" class=\"layout-right\" />\n    </div>\n</template>\n<script>\n    import _ from 'lodash';\n       import TaskManageService from '@service/task-manage';\n    import TaskPlanService from '@service/task-plan';\n    import { taskTemplateName } from '@utils/validator';\n    import JbTagSelect from '@components/jb-tag-select';\n    import JbInput from '@components/jb-input';\n    import BackTop from '@components/back-top';\n    import RenderGlobalVar from '../common/render-global-var';\n    import RenderTaskStep from '../common/render-task-step';\n    import ToggleDisplay from './components/toggle-display';\n\n    export default {\n        name: '',\n        components: {\n            JbTagSelect,\n            JbInput,\n            BackTop,\n            ToggleDisplay,\n            RenderGlobalVar,\n            RenderTaskStep,\n        },\n        data () {\n            return {\n                isLoading: true,\n                isPlanListLoading: true,\n                formData: {\n                    name: '',\n                    tags: [],\n                    variables: [],\n                    steps: [],\n                    description: '',\n                },\n                planList: [{},{},{}],\n                isSubmiting: false,\n                execLoading: false,\n            };\n        },\n        computed: {\n            isSkeletonLoading () {\n                return this.isLoading;\n            },\n        },\n        watch: {\n            formData: {\n                handler  () {\n                    if (this.isLoading) {\n                        return;\n                    }\n                    this.hasChange = true;\n                },\n                deep: true,\n            },\n        },\n        created () {\n            this.taskId = this.$route.params.id || 0;\n            this.isEdit = this.$route.name === 'templateEdit';\n            this.isClone = this.$route.name === 'templateClone';\n            // 是否默认显示步骤编辑框\n            this.initShowStepId = Number(this.$route.params.stepId);\n\n            // 编辑和克隆作业模板时需要获取模板数据\n            if (this.$route.name !== 'templateCreate') {\n                this.fetchData(true);\n            }\n            // 编辑作业模板需要获取模板对应的执行方案列表\n            if (this.isEdit) {\n                this.fetchPlanList();\n            }\n            this.submitText = this.isEdit ? '保存' : '提交';\n            this.rules = {\n                name: [\n                    {\n                        required: true,\n                        message: '模板名称必填',\n                        trigger: 'blur',\n                    },\n                    {\n                        validator: taskTemplateName.validator,\n                        message: taskTemplateName.message,\n                        trigger: 'blur',\n                    },\n                    {\n                        validator: this.checkName,\n                        message: '模板名已存在，请重新输入',\n                        trigger: 'blur',\n                    },\n                ],\n                steps: [\n                    {\n                        validator: value => value.length && value.some(item => !item.delete),\n                        message: '作业步骤必填',\n                        trigger: 'blur',\n                    },\n                ],\n            };\n        },\n        methods: {\n            /**\n             * @desc 获取模板详情\n             * @param {Boolean} isFirst 是否是第一次执行\n             */\n            fetchData (isFirst = false) {\n                this.isLoading = true;\n                const requestHandler = this.isEdit ? TaskManageService.taskDetail : TaskManageService.taskClone;\n                requestHandler({\n                    id: this.taskId,\n                }, {\n                    permission: 'page',\n                }).then((data) => {\n                    const { name, description, tags, variables, stepList } = data;\n                    this.formData = {\n                        name,\n                        description,\n                        tags,\n                        variables,\n                        steps: stepList,\n                    };\n                    // 克隆模板提示密文变量\n                    if (this.isClone) {\n                        this.searchCiphertextVariable();\n                    }\n                    // 编辑执行步骤\n                    if (isFirst && this.isEdit && this.initShowStepId > 0) {\n                        setTimeout(() => {\n                            this.$refs.step.clickStepByIndex(_.findIndex(stepList, ({ id }) => id === this.initShowStepId));\n                        });\n                    }\n                    // 再次编辑\n                    // 拉取模板最新数据\n                    if (!isFirst) {\n                        setTimeout(() => {\n                            window.changeAlert = false;\n                        }, 100);\n                    }\n                })\n                    .catch((error) => {\n                        if ([\n                            1,\n                            400,\n                        ].includes(error.code)) {\n                            setTimeout(() => {\n                                this.$router.push({\n                                    name: 'taskList',\n                                });\n                            }, 3000);\n                        }\n                    })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            },\n            /**\n             * @desc 获取模板关联的执行方案\n             */\n            fetchPlanList () {\n                this.isPlanListLoading = true;\n                TaskPlanService.fetchTaskPlan({\n                    id: this.taskId,\n                }).then((data) => {\n                    this.planList = Object.freeze(data);\n                })\n                    .finally(() => {\n                        this.isPlanListLoading = false;\n                    });\n            },\n            /**\n             * @desc 验证作业模板的名\n             * @param {String} name 作业模板名\n             *\n             */\n            checkName (name) {\n                return TaskManageService.taskCheckName({\n                    id: this.isEdit ? this.taskId : 0,\n                    name,\n                });\n            },\n            getScrollParent () {\n                return this.$refs.contentScroll.$el.querySelector('.scroll-faker-content');\n            },\n            /**\n             * @desc 克隆作业模板时提示密文变量\n             */\n            searchCiphertextVariable () {\n                const stack = [];\n                \n                this.formData.variables.forEach((current) => {\n                    if (current.isPassword) {\n                        stack.push(current.name);\n                    }\n                });\n                if (stack.length < 1) {\n                    return;\n                }\n                this.$bkInfo({\n                    title: '模板中包含密文变量，请重新设置值',\n                    subTitle: '“密文”类型的变量经过特殊加密处理，为避免信息泄露，克隆后初始值不会还原，需用户重新设置。',\n                    okText: '我知道了',\n                    extCls: 'password-variable-info',\n                });\n            },\n            \n            /**\n             * @desc 删除全局变量-删除步骤中的变量引用\n             * @param {Array} stepList 步骤列表\n             * @param {Object} deleteMap 删除的变量名\n             * @returns {Array}\n             *\n             * 忽略已经删除的步骤\n             */\n            syncStepVarialbeDelete (stepList, deleteMap) {\n                let changeFlag = false;\n                // 所有主机全局变量\n                stepList.forEach((currentStep) => {\n                    // 步骤已经删除\n                    if (currentStep.delete) {\n                        return;\n                    }\n                    if (currentStep.isFile) {\n                        // 分发文件步骤\n                        const { fileDestination, fileSourceList } = currentStep.fileStepInfo;\n                        // 执行目标使用变量\n                        const { server } = fileDestination;\n                        if (deleteMap[server.variable]) {\n                            server.variable = '';\n                            currentStep.localValidator = false;\n                            changeFlag = true;\n                        }\n                        // 源文件使用变量\n                        fileSourceList.forEach((currentFile) => {\n                            if (currentFile.fileType === 1) {\n                                if (deleteMap[currentFile.host.variable]) {\n                                    currentFile.host.variable = '';\n                                    // 步骤使用的全局变量被删除，步骤需要被标记为待补全状态\n                                    currentStep.localValidator = false;\n                                    changeFlag = true;\n                                }\n                            }\n                        });\n                        return;\n                    }\n                    if (currentStep.isScript) {\n                        // 脚本步骤\n                        const { executeTarget } = currentStep.scriptStepInfo;\n                        if (deleteMap[executeTarget.variable]) {\n                            executeTarget.variable = '';\n                            // 步骤使用的全局变量被删除，步骤需要被标记为待补全状态\n                            currentStep.localValidator = false;\n                            changeFlag = true;\n                        }\n                    }\n                });\n                return changeFlag ? [...stepList] : stepList;\n            },\n            /**\n             * @desc 修改全局变量名-同步步骤中引用的变量\n             * @param {Array} stepList 步骤列表\n             * @param {Object} renameMap 全局变量对应的最新名字\n             * @returns {Array}\n             *\n             * 忽略已经删除的步骤\n             */\n            syncStepVariableRename (stepList, renameMap) {\n                stepList.forEach((currentStep) => {\n                    // 步骤已经删除\n                    if (currentStep.delete) {\n                        return;\n                    }\n                    // 分发文件步骤\n                    if (currentStep.isFile) {\n                        // 执行目标使用全局变量\n                        const { fileDestination, fileSourceList } = currentStep.fileStepInfo;\n                        const { server } = fileDestination;\n                        if (renameMap[server.variable]) {\n                            server.variable = renameMap[server.variable];\n                        }\n                        // 源文件使用全局变量\n                        fileSourceList.forEach((currentFile) => {\n                            if (currentFile.fileType === 1) {\n                                // 服务器文件\n                                if (renameMap[currentFile.host.variable]) {\n                                    currentFile.host.variable = renameMap[currentFile.host.variable];\n                                }\n                            }\n                        });\n                        return;\n                    }\n                    // 脚本步骤\n                    if (currentStep.isScript) {\n                        // 执行目标使用全局变量\n                        const { executeTarget } = currentStep.scriptStepInfo;\n                        if (renameMap[executeTarget.variable]) {\n                            executeTarget.variable = renameMap[executeTarget.variable];\n                        }\n                    }\n                });\n                return [...stepList];\n            },\n            /**\n             * @desc 全局变量更新\n             * @param {Array} variableList 最新的变量列表\n             *\n             * 更新主机变量名\n             *  -自动替换步骤中已经引用的全局变量\n             * 删除主机变量\n             *  -将使用了该全局变量的步骤标记为待补全\n             */\n            handleGlobalVariableChange (variableList) {\n                const newVariableMap = variableList.reduce((result, variable) => {\n                    result[variable.id] = {\n                        name: variable.name,\n                        delete: variable.delete,\n                    };\n                    return result;\n                }, {});\n                // 主机变量修改变量名自动同步步骤里面的变量引用\n                const renameMap = {};\n                // 主机变量被删除同步删除步骤里面的引用记录\n                const deleteMap = {};\n                this.formData.variables.forEach((variable) => {\n                    if (!variable.isHost) {\n                        return;\n                    }\n                    const {\n                        id,\n                        name,\n                    } = variable;\n                    // 全局变量被删除\n                    if (!newVariableMap[id] || newVariableMap[id].delete) {\n                        deleteMap[name] = true;\n                        return;\n                    }\n                    // 修改了变量\n                    if (newVariableMap[id].name !== name) {\n                        renameMap[name] = newVariableMap[id].name;\n                    }\n                });\n                // 优先同步删除操作\n                let stepList = this.syncStepVarialbeDelete(this.formData.steps, deleteMap);\n                // 同步改名操作\n                stepList = this.syncStepVariableRename(stepList, renameMap);\n                this.formData.variables = variableList;\n                this.formData.steps = stepList;\n            },\n            /**\n             * @desc 步骤更新\n             * @param {Array} steps 最新的步骤列表\n             */\n            handleTaskStepChange (steps) {\n                this.formData.steps = steps;\n                this.$refs.templateOperateRef.clearError();\n            },\n            /**\n             * @desc 保存作业模板\n             *\n             * 需要对作模板数据做逻辑验证处理\n             * - 步骤的基本数据是否完整\n             */\n            handlerSubmit () {\n                // eslint-disable-next-line no-plusplus\n                for (let i = 0; i < this.formData.steps.length; i++) {\n                    if (this.formData.steps[i].delete !== 1\n                        && this.formData.steps[i].localValidator === false) {\n                        this.messageError('请将「待补全」的步骤信息完善后提交重试');\n                        return;\n                    }\n                }\n\n                // 提交作业模板\n                // 再主动拉取作业模板对应的执行方案列表，判断执行方案是否为空和是否需要同步\n                this.isSubmiting = true;\n                this.$refs.templateOperateRef.validate()\n                    .then(() => TaskManageService.taskUpdate({\n                        ...this.formData,\n                        id: this.isEdit ? this.taskId : 0,\n                    }).then((taskId) => {\n                        window.changeAlert = false;\n                        return TaskPlanService.fetchTaskPlan({\n                            id: taskId,\n                        }).then((planList) => {\n                            let planSync = false;\n                            // eslint-disable-next-line no-plusplus\n                            for (let i = 0; i < planList.length; i++) {\n                                if (planList[i].needUpdate) {\n                                    planSync = true;\n                                    break;\n                                }\n                            }\n                            this.planList = Object.freeze(planList);\n                            if (this.isEdit) {\n                                this.editSuccessCallback(taskId, planSync);\n                            } else {\n                                this.createSuccessCallback(taskId);\n                            }\n                        });\n                    }))\n                    .finally(() => {\n                        this.isSubmiting = false;\n                    });\n            },\n            /**\n             * @desc 创建作业模板成功\n             * @param {Number} taskId 作业模板id\n             */\n            createSuccessCallback (taskId) {\n                let confirmInfo = '';\n                let isClickClose = false;\n                const handleGoTemplateEdit = () => {\n                    this.$router.push({\n                        name: 'templateEdit',\n                        params: {\n                            id: taskId,\n                        },\n                    });\n                    isClickClose = true;\n                    confirmInfo.close();\n                };\n                const handleGoTemplateDetail = () => {\n                    this.$router.push({\n                        name: 'templateDetail',\n                        params: {\n                            id: taskId,\n                        },\n                    });\n                    isClickClose = true;\n                    confirmInfo.close();\n                };\n                const handleGoPlan = () => {\n                    this.$router.push({\n                        name: 'viewPlan',\n                        params: {\n                            templateId: taskId,\n                        },\n                        query: {\n                            mode: 'create',\n                        },\n                    });\n                    isClickClose = true;\n                    confirmInfo.close();\n                };\n                \n                const subHeader = () => (\n                <div>\n                    <p style={{ marginBottom: '10px', color: '#979BA5' }}>\n                        {'还差一步「 设置执行方案」，即可执行作业'}\n                    </p>\n                    <p>\n                        <bk-button\n                            style={{ marginRight: '10px' }}\n                            text\n                            onClick={handleGoTemplateEdit}>\n                            {'继续编辑'}\n                        </bk-button>\n                        <bk-button\n                            style={{ marginRight: '10px' }}\n                            text\n                            onClick={handleGoTemplateDetail}>\n                            {'立即查看'}\n                        </bk-button>\n                        <bk-button\n                            text\n                            onClick={handleGoPlan}>\n                            {'设置方案'}\n                        </bk-button>\n                    </p>\n                </div>\n                );\n\n                confirmInfo = this.$bkInfo({\n                    type: 'success',\n                    title: '作业创建成功',\n                    showFooter: false,\n                    subHeader: subHeader(),\n                    cancelFn: () => {\n                        if (isClickClose) {\n                            return;\n                        }\n                        this.$router.push({\n                            name: 'templateEdit',\n                            params: {\n                                id: taskId,\n                            },\n                        });\n                    },\n                });\n            },\n            /**\n             * @desc 编辑作业模板成功\n             * @param {Number} taskId 作业模板id\n             * @param {Boolean} planSync 执行方案是否需要同步\n             */\n            editSuccessCallback (taskId, planSync) {\n                let confirmInfo = '';\n                let isClickClose = false;\n                const handleGoTemplateDetail = () => {\n                    this.$router.push({\n                        name: 'templateDetail',\n                        params: {\n                            id: taskId,\n                        },\n                    });\n                    isClickClose = true;\n                    confirmInfo.close();\n                };\n                const handleGoSync = () => {\n                    this.$router.push({\n                        name: 'syncPlanBatch',\n                        query: {\n                            planIds: this.planList.map(_ => _.id).join(','),\n                            from: 'templateEdit',\n                        },\n                    });\n                    isClickClose = true;\n                    confirmInfo.close();\n                };\n                const handleGoPlan = () => {\n                    this.$router.push({\n                        name: 'viewPlan',\n                        params: {\n                            templateId: taskId,\n                        },\n                        query: {\n                            from: 'templateDetail',\n                        },\n                    });\n                    isClickClose = true;\n                    confirmInfo.close();\n                };\n                const subHeader = () => (\n                <div>\n                    <p style={{ marginBottom: '10px', color: '#979BA5' }}>\n                        {'可以通过 “立即同步” 入口前往更新所有执行方案'}\n                    </p>\n                    <p>\n                        <bk-button\n                            class=\"mr10\"\n                            text\n                            onClick={handleGoTemplateDetail}>\n                            {'返回查看'}\n                        </bk-button>\n                        <bk-button\n                            class=\"mr10\"\n                            text\n                            disabled={!planSync}\n                            onClick={handleGoSync}>\n                            {'立即同步'}\n                        </bk-button>\n                        <bk-button\n                            text\n                            onClick={handleGoPlan}>\n                            {'查看方案'}\n                        </bk-button>\n                    </p>\n                </div>\n                );\n\n                confirmInfo = this.$bkInfo({\n                    type: 'success',\n                    title: '编辑保存成功',\n                    showFooter: false,\n                    subHeader: subHeader(),\n                    cancelFn: () => {\n                        if (isClickClose) {\n                            return;\n                        }\n                        this.fetchData(false);\n                    },\n                });\n            },\n            /**\n             * @desc 取消\n             */\n            handleCancel () {\n                this.routerBack();\n            },\n            /**\n             * @desc 路由回退\n             */\n            routerBack () {\n                const { from } = this.$route.query;\n                if (from === 'templateDetail') {\n                    this.$router.push({\n                        name: 'templateDetail',\n                        params: {\n                            id: this.taskId,\n                        },\n                    });\n                    return;\n                }\n                this.$router.push({\n                    name: 'taskList',\n                });\n            },\n        },\n    };\n</script>\n<style lang='postcss'>\n    @import \"@/css/mixins/media\";\n\n    .template-operation {\n        display: flex;\n\n        .layout-left {\n            height: calc(100vh - 124px);\n            margin-right: auto;\n            flex: 0 1 auto;\n            transform: translate(0, 0);\n\n            .template-container {\n                padding-right: 100px;\n            }\n        }\n\n        .layout-right {\n            height: calc(100vh - 104px);\n            margin-top: -20px;\n            margin-right: -24px;\n            flex: 0 0 auto;\n        }\n\n        .info {\n            margin-bottom: 20px;\n        }\n\n        .template-desc-textarea {\n            .bk-textarea-wrapper .bk-form-textarea.textarea-maxlength {\n                margin-bottom: 0;\n            }\n\n            .bk-form-textarea {\n                min-height: 86px;\n            }\n        }\n\n        .form-item-content {\n            @media (--small-viewports) {\n                width: 500px;\n            }\n\n            @media (--medium-viewports) {\n                width: 560px;\n            }\n\n            @media (--large-viewports) {\n                width: 620px;\n            }\n\n            @media (--huge-viewports) {\n                width: 680px;\n            }\n        }\n    }\n\n    .invalid-variable-info,\n    .password-variable-info {\n        .bk-dialog-content {\n            width: 500px !important;\n        }\n    }\n\n    .password-variable-info {\n        .bk-dialog-header-inner {\n            white-space: normal !important;\n        }\n\n        .bk-default {\n            display: none;\n        }\n    }\n</style>\n"],"names":[],"sourceRoot":""}