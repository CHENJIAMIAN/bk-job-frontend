{"version":3,"file":"static/css/2271.a0b9ac8de1f38008122a.css","mappings":"AA+CA,wCAKA,gBAHA,aACA,sBACA,uBAHA,iBAoDA,CA9CA,oDAIA,cAFA,eACA,iBAFA,kBAIA,CAEA,yDACA,iBAeA,CAbA,oEACA,cAWA,CATA,0EAMA,iCAJA,SAKA,WAJA,OAEA,mBAJA,kBAGA,UAIA,CAIA,qDAKA,cADA,aAHA,kBAEA,WADA,QAkBA,CAbA,sDACA,cACA,CAGA,qEACA,aACA,CAEA,yEACA,gBACA,CCkGA,mCAEA,qBADA,YA6CA,CA1CA,gDAKA,cAJA,aAOA,sBACA,iBANA,eACA,iBAFA,kBAIA,kBA6BA,CAxBA,uDAIA,cAHA,eACA,gBACA,gBAEA,CAEA,0DAEA,mBADA,YAUA,CAPA,6DACA,aACA,CAEA,+DACA,aACA,CAGA,uDAEA,cADA,gBAEA,CAGA,+CACA,OAEA,gBADA,iBAEA,CC2FA,0CACA,aACA,yBAEA,iBADA,kBAEA,CAEA,sDACA,SACA,CC7TA,eACA,YA0BA,CAxBA,sCAEA,YADA,WAsBA,CAnBA,0BAJA,sCAKA,WAkBA,CAjBA,CAEA,0BARA,sCASA,WAcA,CAbA,CAEA,0BAZA,sCAaA,WAUA,CATA,CAEA,0BAhBA,sCAiBA,WAMA,CALA,CAEA,qDACA,6BACA,CCkJA,oBAGA,cAFA,aACA,WAqCA,CAlCA,2CAGA,YADA,OADA,iBAWA,CAPA,0DACA,6BACA,CAEA,uDACA,aACA,CAGA,+BAEA,mBADA,YAMA,CAHA,0CACA,gBACA,CAGA,0BAGA,cAFA,eACA,eAEA,CAEA,mCAEA,YACA,UAFA,iBAGA,CCiBA,qCACA,WA0GA,CAxGA,6CAGA,mBAFA,aACA,sBAEA,sBACA,CAEA,gDAKA,cAJA,aACA,sBACA,eACA,iBAEA,kBA0FA,CAxFA,qDAEA,uBADA,aAEA,cACA,CAEA,4DAEA,mBAEA,eAHA,aAEA,kBAEA,CAEA,8DAEA,kBADA,iBAYA,CATA,qEAMA,mBACA,WAFA,WAFA,WAFA,kBACA,QAEA,UAIA,CAGA,8DAGA,mBACA,eAFA,aADA,iBA4BA,CAvBA,6EACA,cAWA,CATA,mFAMA,mBACA,WAFA,YAFA,WAFA,kBACA,UAEA,SAIA,CAGA,qEAMA,mBACA,WAFA,WAFA,WAFA,kBACA,QAEA,UAIA,CAGA,qQAOA,kBAFA,WACA,iBAFA,SAIA,CAEA,gEACA,8BACA,wBACA,CAEA,iEACA,+BACA,wBACA,CAEA,kEACA,gCACA,wBACA,CAEA,kEACA,gCACA,wBACA,CC/TA,qCACA,YAiCA,CA/BA,kDAGA,+BAFA,aACA,qBAQA,CAJA,wFACA,4BACA,CAIA,4DACA,WAiBA,CAfA,0BAHA,4DAIA,WAcA,CAbA,CAEA,0BAPA,4DAQA,WAUA,CATA,CAEA,0BAXA,4DAYA,WAMA,CALA,CAEA,0BAfA,4DAgBA,WAEA,CADA,CCTA,gDACA,eACA,gBACA,gBACA,CCyHA,+BAGA,mBAFA,aACA,qBAsBA,CAnBA,0CAMA,cALA,aAMA,eAHA,eAIA,6BAHA,iBAFA,gBADA,WAgBA,CARA,gDAMA,mBAFA,eAHA,aAIA,aAFA,sBAIA,CCnJA,gDACA,eACA,gBACA,gBACA,CCuIA,kCAGA,mBAFA,aACA,qBAsBA,CAnBA,6CAMA,cALA,aAMA,eAHA,eAIA,6BAHA,iBAFA,gBADA,WAgBA,CARA,mDAMA,mBAFA,eAHA,aAIA,aAFA,sBAIA,CChLA,mCACA,YAuCA,CArCA,gDAIA,+BAFA,aADA,OAEA,qBAwBA,CApBA,0BADA,uEAEA,WAkBA,CAjBA,CAEA,0BALA,uEAMA,WAcA,CAbA,CAEA,0BATA,uEAUA,WAUA,CATA,CAEA,0BAbA,uEAcA,WAMA,CALA,CAEA,sFACA,4BACA,CAIA,kDACA,MACA,CAEA,iDAEA,8BADA,MAEA,CCkGA,mDAEA,mBADA,aAEA,qBAwBA,CAtBA,8DAQA,mBAFA,cALA,aAMA,sBAHA,eACA,iBAFA,gBADA,WAmBA,CAXA,oEAKA,mBAFA,eAFA,aAGA,aAFA,iBAQA,CAHA,mFACA,eACA,CC3BA,iDAEA,mBADA,aAEA,qBAuBA,CArBA,4DAQA,mBAFA,cALA,aAMA,sBAHA,eACA,iBAFA,gBADA,WAkBA,CAVA,kEAIA,mBAFA,eADA,aAEA,YAMA,CAHA,iFACA,eACA,CC5KA,mBACA,YAyBA,CAvBA,0CACA,WAqBA,CAnBA,0BAHA,0CAIA,WAkBA,CAjBA,CAEA,0BAPA,0CAQA,WAcA,CAbA,CAEA,0BAXA,0CAYA,WAUA,CATA,CAEA,0BAfA,0CAgBA,WAMA,CALA,CAEA,yDACA,6BACA,CCoMA,wBAEA,eADA,iBAyCA,CAtCA,6BAIA,eAFA,cAGA,2CAFA,mBAFA,SAoCA,CA9BA,mCACA,gBACA,UACA,oBACA,CAEA,gCAEA,cADA,cAEA,CAEA,gCAEA,cADA,cAEA,CAEA,gCAEA,cADA,cAEA,CAEA,gCAEA,cADA,cAEA,CAEA,gCAEA,cADA,cAEA,CC3HA,0CACA,WAqBA,CAnBA,yDACA,4BACA,CAEA,0BAPA,0CAQA,WAcA,CAbA,CAEA,0BAXA,0CAYA,WAUA,CATA,CAEA,0BAfA,0CAgBA,WAMA,CALA,CAEA,0BAnBA,0CAoBA,WAEA,CADA,CAGA,iCAGA,mBAIA,cALA,aAEA,eACA,gBACA,iBALA,iBAWA,CAHA,4CACA,gBACA,CAGA,8BAGA,YACA,cAHA,kBACA,UAGA,CCzGA,iCAMA,cALA,aACA,sBAEA,eACA,iBAFA,iBAYA,CAPA,wCAKA,cAHA,eACA,gBAFA,YAGA,gBAEA,CClBA,gCAMA,cALA,aACA,sBAEA,eACA,iBAFA,iBAYA,CAPA,uCAKA,cAHA,eACA,gBAFA,YAGA,gBAEA,CC86BA,+CACA,YAoDA,CAlDA,8DAGA,cAFA,aACA,cA+CA,CA5CA,gJAEA,YAmBA,CAjBA,oKAKA,mBADA,eAHA,YAEA,iBADA,eAIA,mBAUA,CARA,kWAEA,aACA,CAEA,kLACA,kBACA,CAKA,kFACA,gBACA,CAGA,wEACA,gBAKA,CAHA,kFACA,eACA,CAGA,wEACA,aAKA,CAHA,yFACA,cACA,CC9iCA,mBAGA,gBAFA,aACA,MAiCA,CA9BA,gCAEA,+BADA,cAwBA,CApBA,0BADA,uDAEA,WAkBA,CAjBA,CAEA,0BALA,uDAMA,WAcA,CAbA,CAEA,0BATA,uDAUA,WAUA,CATA,CAEA,0BAbA,uDAcA,WAMA,CALA,CAEA,sEACA,4BACA,CAIA,iCACA,MACA,CC6FA,gDAIA,mBAGA,gBACA,sCALA,aAEA,YACA,eALA,kBACA,SAuDA,CA/CA,4DAEA,mBADA,YAsBA,CAnBA,sEAEA,mBACA,YAFA,WAGA,CAEA,4EAUA,mBAFA,mBACA,kBAHA,cACA,eANA,aAIA,eAFA,YAQA,uBAPA,iBAFA,UAUA,CAGA,8DAEA,mBADA,aAEA,gBAkBA,CAhBA,yEAEA,cADA,eAGA,qBADA,6BAEA,CAEA,2EAEA,iBADA,WAOA,CAJA,sHACA,mBACA,wBACA,CAMA,wEACA,iBACA,CAGA,gDACA,aACA,qBA8CA,CA5CA,+DACA,gBACA,CAEA,+DAIA,cAFA,eACA,iBAFA,kBAIA,CAEA,iEACA,YA+BA,CA7BA,gPAIA,gBACA,sCAFA,YAOA,CAHA,mPACA,MACA,CAGA,+EACA,aACA,CAEA,iFACA,cACA,gBAKA,CAHA,gGACA,MACA,CAGA,gFACA,cACA,gBACA","sources":["webpack://job/./src/views/dashboard/index/components/card-layout.vue","webpack://job/./src/views/dashboard/index/components/common/render-trend.vue","webpack://job/./src/views/dashboard/index/components/common/trend-dialog.vue","webpack://job/./src/views/dashboard/index/components/app/index.vue","webpack://job/./src/views/dashboard/index/components/platform/index.vue","webpack://job/./src/views/dashboard/index/components/template/template-step.vue","webpack://job/./src/views/dashboard/index/components/template/index.vue","webpack://job/./src/views/dashboard/index/components/script/releate.vue","webpack://job/./src/views/dashboard/index/components/script/type.vue","webpack://job/./src/views/dashboard/index/components/script/version-use.vue","webpack://job/./src/views/dashboard/index/components/script/version-status.vue","webpack://job/./src/views/dashboard/index/components/script/index.vue","webpack://job/./src/views/dashboard/index/components/crontab/status.vue","webpack://job/./src/views/dashboard/index/components/crontab/type.vue","webpack://job/./src/views/dashboard/index/components/crontab/index.vue","webpack://job/./src/views/dashboard/index/components/tag/index.vue","webpack://job/./src/views/dashboard/index/components/account/index.vue","webpack://job/./src/views/dashboard/index/components/execute/total-count.vue","webpack://job/./src/views/dashboard/index/components/execute/fail-count.vue","webpack://job/./src/views/dashboard/index/components/execute/statistics.vue","webpack://job/./src/views/dashboard/index/components/execute/index.vue","webpack://job/./src/views/dashboard/index/index.vue"],"sourcesContent":["\r\n\r\n<template>\r\n    <div class=\"dashboard-card-layout\">\r\n        <div class=\"card-title\">\r\n            <span\r\n                :tippy-tips=\"titleTips\"\r\n                class=\"card-title-text\"\r\n                :class=\"{\r\n                    'hover-tips': needRenderTips,\r\n                }\">\r\n                {{ title }}\r\n            </span>\r\n        </div>\r\n        <div class=\"card-content\">\r\n            <slot />\r\n        </div>\r\n        <div class=\"card-extend\">\r\n            <slot name=\"extend\" />\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n   \r\n    export default {\r\n        name: '',\r\n        props: {\r\n            title: {\r\n                type: String,\r\n                default: '接入业务量',\r\n            },\r\n            titleTips: {\r\n                type: String,\r\n            },\r\n        },\r\n        data () {\r\n            return {};\r\n        },\r\n        computed: {\r\n            needRenderTips () {\r\n                return !!this.titleTips;\r\n            },\r\n        },\r\n        methods: {},\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    .dashboard-card-layout {\r\n        position: relative;\r\n        display: flex;\r\n        flex-direction: column;\r\n        padding: 16px 20px 20px;\r\n        background: #fff;\r\n\r\n        .card-title {\r\n            margin-bottom: 16px;\r\n            font-size: 13px;\r\n            line-height: 18px;\r\n            color: #63656e;\r\n        }\r\n\r\n        .card-title-text {\r\n            position: relative;\r\n\r\n            &.hover-tips {\r\n                cursor: pointer;\r\n\r\n                &::after {\r\n                    position: absolute;\r\n                    bottom: 0;\r\n                    left: 0;\r\n                    width: 100%;\r\n                    margin-bottom: -3px;\r\n                    border-bottom: 1px dashed #dcdee5;\r\n                    content: \"\";\r\n                }\r\n            }\r\n        }\r\n\r\n        .card-extend {\r\n            position: absolute;\r\n            top: 18px;\r\n            right: 20px;\r\n            display: flex;\r\n            color: #c4c6cc;\r\n\r\n            & > * {\r\n                cursor: pointer;\r\n            }\r\n\r\n            .job-icon {\r\n                &:hover {\r\n                    color: #3a84ff;\r\n                }\r\n\r\n                & ~ .job-icon {\r\n                    margin-left: 10px;\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <div class=\"render-trend-box\" v-bkloading=\"{ isLoading, opacity: 0.8 }\">\r\n        <div class=\"data-wraper\">\r\n            <div class=\"total\">{{ data.count }}</div>\r\n            <div\r\n                class=\"data-row\"\r\n                :class=\"{\r\n                    'down': data.yoyTrend < 0,\r\n                    'up': data.yoyTrend > 0,\r\n                    'equal': data.yoyTrend === 0,\r\n                }\"\r\n                style=\"margin-top: 12px;\">\r\n                <span class=\"label\">{{ '同比' }}</span>\r\n                <span>\r\n                    <Icon v-if=\"data.yoyTrend < 0\" type=\"decrease-line\" />\r\n                    <Icon v-if=\"data.yoyTrend === 0\" type=\"equally\" />\r\n                    <Icon v-if=\"data.yoyTrend > 0\" type=\"increase-line\" />\r\n                </span>\r\n                <span>{{ data.yoyValue }}</span>\r\n            </div>\r\n            <div\r\n                class=\"data-row\"\r\n                :class=\"{\r\n                    'down': data.momTrend < 0,\r\n                    'up': data.momTrend > 0,\r\n                    'equal': data.momTrend === 0,\r\n                }\"\r\n                style=\"margin-top: 10px;\">\r\n                <span class=\"label\">{{ '环比' }}</span>\r\n                <span>\r\n                    <Icon v-if=\"data.momTrend < 0\" type=\"decrease-line\" />\r\n                    <Icon v-if=\"data.momTrend === 0\" type=\"equally\" />\r\n                    <Icon v-if=\"data.momTrend > 0\" type=\"increase-line\" />\r\n                </span>\r\n                <span>{{ data.momValue }}</span>\r\n            </div>\r\n        </div>\r\n        <div class=\"data-chart\">\r\n            <div ref=\"trend\" style=\"width: 100%; height: 60px;\" />\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n    import echarts from 'lib/echarts.min.js';\r\n    import StatisticsService from '@service/statistics';\r\n    import { prettyDateFormat } from '@utils/assist';\r\n    \r\n    const styleMap = {\r\n        up: {\r\n            itemStyle: {\r\n                color: '#4BC7AD',\r\n            },\r\n            areaStyle: {\r\n                color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n                    {\r\n                        offset: 0,\r\n                        color: 'rgba(75, 199, 173, 0.32)',\r\n                    },\r\n                    {\r\n                        offset: 1,\r\n                        color: 'rgba(75, 199, 173, 0)',\r\n                    },\r\n                ]),\r\n            },\r\n        },\r\n        down: {\r\n            itemStyle: {\r\n                color: '#FF5656',\r\n            },\r\n            areaStyle: {\r\n                color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n                    {\r\n                        offset: 0,\r\n                        color: 'rgba(255, 86, 86, 0.28)',\r\n                    },\r\n                    {\r\n                        offset: 1,\r\n                        color: 'rgba(255, 86, 86, 0)',\r\n                    },\r\n                ]),\r\n            },\r\n        },\r\n    };\r\n\r\n    export default {\r\n        name: '',\r\n        props: {\r\n            metric: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            date: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: true,\r\n                data: {\r\n                    count: 0,\r\n                    momRate: 0,\r\n                    yoyRate: 0,\r\n                },\r\n            };\r\n        },\r\n        watch: {\r\n            date () {\r\n                this.fetchData();\r\n            },\r\n        },\r\n        mounted () {\r\n            this.trendData = [];\r\n            this.fetchData();\r\n            const resize = _.throttle(() => {\r\n                this.myChart && this.myChart.resize();\r\n            }, 300);\r\n            window.addEventListener('resize', resize);\r\n            this.$once('hook:beforeDestroy', () => {\r\n                window.removeEventListener('resize', resize);\r\n            });\r\n        },\r\n        methods: {\r\n            fetchData () {\r\n                this.isLoading = true;\r\n                Promise.all([\r\n                    StatisticsService.fetchTotalMetrics({\r\n                        date: this.date,\r\n                        metric: this.metric,\r\n                    }).then((data) => {\r\n                        this.data = data || {};\r\n                    }),\r\n                    StatisticsService.fetchTrendsMetrics({\r\n                        endDate: this.date,\r\n                        startDate: prettyDateFormat(new Date(this.date) - 6 * 86400000),\r\n                        metric: this.metric,\r\n                    }).then((data) => {\r\n                        this.initTrend(data);\r\n                    }),\r\n                ]).finally(() => {\r\n                    this.isLoading = false;\r\n                });\r\n            },\r\n            initTrend (data) {\r\n                this.myChart = echarts.init(this.$refs.trend);\r\n                const dateList = [];\r\n                const valueList = [];\r\n                data.forEach(({ date, value }) => {\r\n                    dateList.push(date);\r\n                    valueList.push(value);\r\n                });\r\n\r\n                const styles = _.head(valueList) <= _.last(valueList) ? 'up' : 'down';\r\n\r\n                this.myChart.setOption({\r\n                    grid: {\r\n                        top: 5,\r\n                        right: 5,\r\n                        bottom: 5,\r\n                        left: 5,\r\n                    },\r\n                    xAxis: {\r\n                        boundaryGap: false,\r\n                        data: dateList,\r\n                        show: false,\r\n                    },\r\n                    yAxis: {\r\n                        type: 'value',\r\n                        min: 'dataMin',\r\n                        max: 'dataMax',\r\n                        boundaryGap: [\r\n                            0,\r\n                            '100%',\r\n                        ],\r\n                        show: false,\r\n                    },\r\n                    series: [\r\n                        {\r\n                            name: 'trend',\r\n                            type: 'line',\r\n                            symbol: 'none',\r\n                            sampling: 'average',\r\n                            ...styleMap[styles],\r\n                            data: valueList,\r\n                        },\r\n                    ],\r\n                });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    .render-trend-box {\r\n        display: flex;\r\n        align-items: flex-end;\r\n\r\n        .data-wraper {\r\n            display: flex;\r\n            margin-right: auto;\r\n            font-size: 12px;\r\n            line-height: 16px;\r\n            color: #babcc2;\r\n            white-space: nowrap;\r\n            /* stylelint-disable declaration-block-no-redundant-longhand-properties */\r\n            flex-direction: column;\r\n            flex-wrap: nowrap;\r\n\r\n            .total {\r\n                font-size: 24px;\r\n                font-weight: 500;\r\n                line-height: 32px;\r\n                color: #63656e;\r\n            }\r\n\r\n            .data-row {\r\n                display: flex;\r\n                align-items: center;\r\n\r\n                &.up {\r\n                    color: #4bc7ad;\r\n                }\r\n\r\n                &.down {\r\n                    color: #ff5656;\r\n                }\r\n            }\r\n\r\n            .label {\r\n                margin-right: 6px;\r\n                color: #babcc2;\r\n            }\r\n        }\r\n\r\n        .data-chart {\r\n            flex: 1;\r\n            padding-left: 30px;\r\n            overflow: hidden;\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <lower-component level=\"custom\" :custom=\"value\">\r\n        <jb-dialog\r\n            v-bind=\"$attrs\"\r\n            :value=\"value\"\r\n            class=\"data-trend-dialog\"\r\n            :width=\"1000\"\r\n            :show-footer=\"false\"\r\n            mask-close\r\n            @input=\"handleInput\">\r\n            <div v-bkloading=\"{ isLoading }\">\r\n                <div class=\"trend-daterang-picker\">\r\n                    <bk-date-picker\r\n                        ref=\"datePicker\"\r\n                        :placeholder=\"'选择日期'\"\r\n                        :shortcuts=\"shortcuts\"\r\n                        :value=\"defaultDateRang\"\r\n                        type=\"daterange\"\r\n                        :shortcut-close=\"true\"\r\n                        :use-shortcut-text=\"true\"\r\n                        :clearable=\"false\"\r\n                        :options=\"datePickerOptions\"\r\n                        placement=\"bottom-end\"\r\n                        @change=\"handleDateChange\" />\r\n                </div>\r\n                <div ref=\"trend\" style=\"width: 100%; height: 384px;\" />\r\n            </div>\r\n        </jb-dialog>\r\n    </lower-component>\r\n</template>\r\n<script>\r\n    import echarts from 'lib/echarts.min.js';\r\n    import _ from 'lodash';\r\n       import StatisticsService from '@service/statistics';\r\n    import {\r\n        formatNumber,\r\n        prettyDateFormat,\r\n    } from '@utils/assist';\r\n\r\n    const styleMap = {\r\n        up: {\r\n            itemStyle: {\r\n                color: '#4BC7AD',\r\n            },\r\n            areaStyle: {\r\n                color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n                    {\r\n                        offset: 0,\r\n                        color: 'rgba(75, 199, 173, 0.32)',\r\n                    },\r\n                    {\r\n                        offset: 1,\r\n                        color: 'rgba(75, 199, 173, 0)',\r\n                    },\r\n                ]),\r\n            },\r\n        },\r\n        down: {\r\n            itemStyle: {\r\n                color: '#FF5656',\r\n            },\r\n            areaStyle: {\r\n                color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n                    {\r\n                        offset: 0,\r\n                        color: 'rgba(255, 86, 86, 0.28)',\r\n                    },\r\n                    {\r\n                        offset: 1,\r\n                        color: 'rgba(255, 86, 86, 0)',\r\n                    },\r\n                ]),\r\n            },\r\n        },\r\n    };\r\n\r\n    export default {\r\n        name: '',\r\n        inheritAttrs: false,\r\n        props: {\r\n            value: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n            metric: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            date: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            name: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: true,\r\n            };\r\n        },\r\n        watch: {\r\n            date: {\r\n                handler (date) {\r\n                    this.endDate = date;\r\n                    this.startDate = prettyDateFormat(new Date(date) - 6 * 86400000);\r\n                    this.defaultDateRang = [\r\n                        this.startDate,\r\n                        this.endDate,\r\n                    ];\r\n                    this.shortcuts = [\r\n                        {\r\n                            text: '今天',\r\n                            value () {\r\n                                const start = new Date(date);\r\n                                return [\r\n                                    start,\r\n                                    start,\r\n                                ];\r\n                            },\r\n                        },\r\n                        {\r\n                            text: '昨天',\r\n                            value () {\r\n                                const end = new Date(date);\r\n                                const start = new Date();\r\n                                start.setTime(end - 86400000);\r\n                                return [\r\n                                    start,\r\n                                    end,\r\n                                ];\r\n                            },\r\n                        },\r\n                        {\r\n                            text: '最近3天',\r\n                            value () {\r\n                                const end = new Date(date);\r\n                                const start = new Date();\r\n                                start.setTime(end - 2 * 86400000);\r\n                                return [\r\n                                    start,\r\n                                    end,\r\n                                ];\r\n                            },\r\n                        },\r\n                        {\r\n                            text: '最近7天',\r\n                            value () {\r\n                                const end = new Date(date);\r\n                                const start = new Date();\r\n                                start.setTime(end - 6 * 86400000);\r\n                                return [\r\n                                    start,\r\n                                    end,\r\n                                ];\r\n                            },\r\n                        },\r\n                        {\r\n                            text: '最近30天',\r\n                            value () {\r\n                                const end = new Date(date);\r\n                                const start = new Date();\r\n                                start.setTime(end - 30 * 86400000);\r\n                                return [\r\n                                    start,\r\n                                    end,\r\n                                ];\r\n                            },\r\n                        },\r\n                    ];\r\n                },\r\n                immediate: true,\r\n            },\r\n            value (value) {\r\n                if (value) {\r\n                    this.fetchData();\r\n                }\r\n            },\r\n        },\r\n        created () {\r\n            this.datePickerOptions = {\r\n                disabledDate: date => date.getTime() > Date.now(),\r\n            };\r\n        },\r\n        methods: {\r\n            fetchData () {\r\n                this.isLoading = true;\r\n                StatisticsService.fetchTrendsMetrics({\r\n                    endDate: this.endDate,\r\n                    startDate: this.startDate,\r\n                    metric: this.metric,\r\n                }).then((data) => {\r\n                    this.initTrend(data || []);\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            initTrend (data) {\r\n                if (!this.myChart) {\r\n                    this.myChart = echarts.init(this.$refs.trend);\r\n                }\r\n                const dateList = [];\r\n                const valueList = [];\r\n                data.forEach(({ date, value }) => {\r\n                    dateList.push(date);\r\n                    valueList.push(value);\r\n                });\r\n\r\n                const styles = _.head(valueList) <= _.last(valueList) ? 'up' : 'down';\r\n                this.myChart.clear();\r\n\r\n                const options = {\r\n                    grid: {\r\n                        top: 20,\r\n                        right: 72,\r\n                        bottom: 110,\r\n                        left: 120,\r\n                    },\r\n                    tooltip: {\r\n                        trigger: 'axis',\r\n                        axisPointer: {\r\n                            type: 'line',\r\n                            lineStyle: {\r\n                                width: 30,\r\n                                color: '#63656E',\r\n                                opacity: 0.16,\r\n                            },\r\n                        },\r\n                        backgroundColor: 'rgba(0,0,0,0.8)',\r\n                    },\r\n                    xAxis: {\r\n                        type: 'category',\r\n                        name: '',\r\n                        axisLine: {\r\n                            onZero: false,\r\n                            lineStyle: {\r\n                                color: '#DCDEE5',\r\n                            },\r\n                        },\r\n                        axisTick: {\r\n                            show: false,\r\n                        },\r\n                        axisLabel: {\r\n                            color: '#979BA5',\r\n                            margin: 2,\r\n                            rotate: 45,\r\n                        },\r\n                        boundaryGap: false,\r\n                        splitLine: {\r\n                            show: true,\r\n                            lineStyle: {\r\n                                color: '#DCDEE5',\r\n                            },\r\n                        },\r\n                        data: dateList,\r\n                    },\r\n                    yAxis: {\r\n                        type: 'value',\r\n                        min: 'dataMin',\r\n                        name: this.name,\r\n                        nameLocation: 'middle',\r\n                        nameTextStyle: {\r\n                            color: '#63656E',\r\n                        },\r\n                        nameGap: 50,\r\n                        axisLine: {\r\n                            onZero: true,\r\n                            color: '#F0F1F5',\r\n                            lineStyle: {\r\n                                color: '#F0F1F5',\r\n                            },\r\n                        },\r\n                        axisTick: {\r\n                            show: false,\r\n                        },\r\n                        axisLabel: {\r\n                            color: '#C4C6CC',\r\n                            formatter: value => formatNumber(value, true),\r\n                        },\r\n                        splitLine: {\r\n                            lineStyle: {\r\n                                color: '#DCDEE5',\r\n                            },\r\n                        },\r\n                    },\r\n                    series: [\r\n                        {\r\n                            name: this.name,\r\n                            type: 'line',\r\n                            sampling: 'average',\r\n                            ...styleMap[styles],\r\n                            data: valueList,\r\n                        },\r\n                    ],\r\n                };\r\n                if (valueList.length > 28) {\r\n                    const rate = 27 / valueList.length * 100;\r\n                    const start = Math.floor((100 - rate) / 2);\r\n                    options.dataZoom = [\r\n                        {\r\n                            show: true,\r\n                            realtime: true,\r\n                            start,\r\n                            end: start + rate,\r\n                        },\r\n                    ];\r\n                }\r\n                this.myChart.setOption(options);\r\n            },\r\n            handleDateChange (value) {\r\n                const [\r\n                    startDate,\r\n                    endDate,\r\n                ] = value;\r\n                this.startDate = startDate;\r\n                this.endDate = endDate;\r\n                this.fetchData();\r\n            },\r\n            handleInput (value) {\r\n                this.$emit('input', value);\r\n                this.$emit('change', value);\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .data-trend-dialog {\r\n        .trend-daterang-picker {\r\n            display: flex;\r\n            justify-content: flex-end;\r\n            padding-right: 72px;\r\n            margin-top: -28px;\r\n        }\r\n\r\n        .bk-dialog-wrapper .bk-dialog-body {\r\n            padding: 0;\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <div class=\"app-dashboard\">\r\n        <all-app ref=\"all\" v-bind=\"$attrs\" />\r\n        <active-app ref=\"active\" v-bind=\"$attrs\" />\r\n    </div>\r\n</template>\r\n<script>\r\n    import AllApp from './all-app';\r\n    import ActiveApp from './active-app';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            AllApp,\r\n            ActiveApp,\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    @import \"@/css/mixins/media\";\r\n\r\n    .app-dashboard {\r\n        display: flex;\r\n\r\n        .dashboard-card-layout {\r\n            width: 260px;\r\n            border: none;\r\n\r\n            @media (--huge-viewports) {\r\n                width: 400px;\r\n            }\r\n\r\n            @media (--large-viewports) {\r\n                width: 300px;\r\n            }\r\n\r\n            @media (--medium-viewports) {\r\n                width: 280px;\r\n            }\r\n\r\n            @media (--small-viewports) {\r\n                width: 260px;\r\n            }\r\n\r\n            &:nth-child(n+2) {\r\n                border-left: 1px solid #f0f1f5;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <div\r\n        class=\"platform-dashboard\"\r\n        v-bkloading=\"{ isLoading: isLoading, opacity: 0.8 }\">\r\n        <card-layout title=\"Linux OS\">\r\n            <div class=\"container\">\r\n                <div class=\"nums\">{{ data.LINUX | formatNumber }}</div>\r\n                <div\r\n                    ref=\"LINUX\"\r\n                    class=\"dashboard\"\r\n                    v-bk-tooltips.right=\"calcPercentage(data.LINUX)\"\r\n                    style=\"width: 24px; height: 24px;\" />\r\n            </div>\r\n            <Icon\r\n                type=\"linux\"\r\n                class=\"platform-flag\"\r\n                style=\"font-size: 38px;\" />\r\n        </card-layout>\r\n        <card-layout title=\"Windows OS\">\r\n            <div class=\"container\">\r\n                <div class=\"nums\">{{ data.WINDOWS | formatNumber }}</div>\r\n                <div\r\n                    ref=\"WINDOWS\"\r\n                    class=\"dashboard\"\r\n                    v-bk-tooltips.right=\"calcPercentage(data.WINDOWS)\"\r\n                    style=\"width: 24px; height: 24px;\" />\r\n            </div>\r\n            <Icon\r\n                type=\"windows\"\r\n                class=\"platform-flag\"\r\n                style=\"font-size: 28px;\" />\r\n        </card-layout>\r\n        <card-layout title=\"AIX OS\">\r\n            <div class=\"container\">\r\n                <div class=\"nums\">{{ data.AIX | formatNumber }}</div>\r\n                <div\r\n                    ref=\"AIX\"\r\n                    class=\"dashboard\"\r\n                    v-bk-tooltips.right=\"calcPercentage(data.AIX)\"\r\n                    style=\"width: 24px; height: 24px;\" />\r\n            </div>\r\n            <Icon\r\n                type=\"aix\"\r\n                class=\"platform-flag\"\r\n                style=\"font-size: 24px;\" />\r\n        </card-layout>\r\n        <card-layout :title=\"'未知 OS'\">\r\n            <div class=\"container\">\r\n                <div class=\"nums\">{{ data.OTHERS | formatNumber }}</div>\r\n                <div\r\n                    ref=\"OTHERS\"\r\n                    class=\"dashboard\"\r\n                    v-bk-tooltips.right=\"calcPercentage(data.OTHERS)\"\r\n                    style=\"width: 24px; height: 24px;\" />\r\n            </div>\r\n            <Icon\r\n                type=\"others\"\r\n                class=\"platform-flag\"\r\n                style=\"font-size: 28px;\" />\r\n        </card-layout>\r\n    </div>\r\n</template>\r\n<script>\r\n    import echarts from 'lib/echarts.min.js';\r\n    import StatisticsService from '@service/statistics';\r\n    import {\r\n        formatNumber,\r\n    } from '@utils/assist';\r\n\r\n    import CardLayout from '../card-layout';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            CardLayout,\r\n        },\r\n        filters: {\r\n            formatNumber (value) {\r\n                return formatNumber(value);\r\n            },\r\n        },\r\n        props: {\r\n            date: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: true,\r\n                data: {\r\n                    AIX: 0,\r\n                    LINUX: 0,\r\n                    OTHERS: 0,\r\n                    WINDOWS: 0,\r\n                },\r\n            };\r\n        },\r\n        watch: {\r\n            date () {\r\n                this.fetchData();\r\n            },\r\n        },\r\n        mounted () {\r\n            this.fetchData();\r\n        },\r\n        methods: {\r\n            fetchData () {\r\n                this.isLoading = true;\r\n                StatisticsService.fetchDistributionMetrics({\r\n                    date: this.date,\r\n                    metric: 'HOST_SYSTEM_TYPE',\r\n                }).then((data) => {\r\n                    this.data = data.labelAmountMap;\r\n                    this.init();\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            init () {\r\n                const typeList = [\r\n                    'LINUX',\r\n                    'WINDOWS',\r\n                    'AIX',\r\n                    'OTHERS',\r\n                ];\r\n                \r\n                typeList.forEach((typeItem) => {\r\n                    if (!this.$refs.LINUX) {\r\n                        return;\r\n                    }\r\n                    const other = typeList.reduce((result, item) => {\r\n                        if (item === typeItem) {\r\n                            return result;\r\n                        }\r\n                        return result + this.data[item];\r\n                    }, 0);\r\n                    const myChart = echarts.init(this.$refs[typeItem]);\r\n                    myChart.setOption({\r\n                        series: [\r\n                            {\r\n                                type: 'pie',\r\n                                radius: [\r\n                                    '8',\r\n                                    '12',\r\n                                ],\r\n                                hoverOffset: 0,\r\n                                label: {\r\n                                    show: false,\r\n                                },\r\n                                data: [\r\n                                    {\r\n                                        value: this.data[typeItem],\r\n                                        itemStyle: {\r\n                                            color: '#85CCA8',\r\n                                        },\r\n                                    },\r\n                                    {\r\n                                        value: other,\r\n                                        itemStyle: {\r\n                                            color: '#EBECF0',\r\n                                        },\r\n                                        emphasis: {\r\n                                            itemStyle: {\r\n                                                color: '#F0F1F5',\r\n                                            },\r\n                                        },\r\n                                    },\r\n                                ],\r\n                            },\r\n                        ],\r\n                    });\r\n                });\r\n            },\r\n            calcPercentage (value) {\r\n                const {\r\n                    AIX,\r\n                    LINUX,\r\n                    OTHERS,\r\n                    WINDOWS,\r\n                } = this.data;\r\n                const total = parseInt(AIX, 10) + parseInt(LINUX, 10) + parseInt(OTHERS, 10) + parseInt(WINDOWS, 10);\r\n                if (!total) {\r\n                    return '0 %';\r\n                }\r\n                return `${Math.round(value / total * 100).toFixed(2)} %`;\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .platform-dashboard {\r\n        display: flex;\r\n        height: 100%;\r\n        color: #e5e6eb;\r\n\r\n        .dashboard-card-layout {\r\n            position: relative;\r\n            flex: 1;\r\n            border: none;\r\n\r\n            &:nth-child(n+2) {\r\n                border-left: 1px solid #f0f1f5;\r\n            }\r\n\r\n            .card-title {\r\n                color: #979ba5;\r\n            }\r\n        }\r\n\r\n        .container {\r\n            display: flex;\r\n            align-items: center;\r\n\r\n            .dashboard {\r\n                margin-left: 10px;\r\n            }\r\n        }\r\n\r\n        .nums {\r\n            font-size: 24px;\r\n            font-weight: bold;\r\n            color: #63656e;\r\n        }\r\n\r\n        .platform-flag {\r\n            position: absolute;\r\n            bottom: 24px;\r\n            left: 20px;\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <card-layout\r\n        class=\"template-step-card\"\r\n        :title=\"'作业步骤类型使用占比'\"\r\n        v-bkloading=\"{ isLoading, opacity: 0.8 }\">\r\n        <div class=\"wraper\">\r\n            <div ref=\"dashboard\" style=\"width: 180px; height: 180px;\" />\r\n            <div class=\"data-info\">\r\n                <div class=\"row\">\r\n                    <div class=\"data-label\" @mouseover=\"handleMouseover('文件分发')\">\r\n                        <div :style=\"calcItemCircleStyles('fileStep')\" />\r\n                        <div>{{ '文件分发' }}</div>\r\n                    </div>\r\n                    <div class=\"data-content\">\r\n                        <div class=\"content-item\" @mouseover=\"handleMouseover('本地文件源')\">\r\n                            <div class=\"local-file-dot\" />\r\n                            <div>{{ '本地文件源' }}</div>\r\n                        </div>\r\n                        <div class=\"content-item\" @mouseover=\"handleMouseover('服务器文件源')\">\r\n                            <div class=\"server-file-dot\" />\r\n                            <div>{{ '服务器文件源' }}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"data-label\" @mouseover=\"handleMouseover('脚本执行')\">\r\n                        <div :style=\"calcItemCircleStyles('scriptStep')\" />\r\n                        <div>{{ '脚本执行' }}</div>\r\n                    </div>\r\n                    <div class=\"data-content\">\r\n                        <div class=\"content-item\" @mouseover=\"handleMouseover('手工录入')\">\r\n                            <div class=\"local-script-dot\" />\r\n                            <div>{{ '手工录入' }}</div>\r\n                        </div>\r\n                        <div class=\"content-item\" @mouseover=\"handleMouseover('脚本引用')\">\r\n                            <div class=\"refer-script-dot\" />\r\n                            <div>{{ '脚本引用' }}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"data-label\" @mouseover=\"handleMouseover('人工确认')\">\r\n                        <div :style=\"calcItemCircleStyles('confirmStep')\" />\r\n                        <div>{{ '人工确认' }}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </card-layout>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n    import echarts from 'lib/echarts.min.js';\r\n       import StatisticsService from '@service/statistics';\r\n    import CardLayout from '../card-layout';\r\n    import {\r\n        chartsOptionsBase,\r\n    } from '../common/assist';\r\n\r\n    const colorMap = {\r\n        fileStep: '#3157A3',\r\n        scriptStep: '#85CCA8',\r\n        confirmStep: '#D4E6C1',\r\n    };\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            CardLayout,\r\n        },\r\n        props: {\r\n            date: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: true,\r\n                data: {\r\n                    CONFIRM: 32,\r\n                    FILE_LOCAL: 68,\r\n                    FILE_SERVER: 32,\r\n                    SCRIPT_MANUAL: 32,\r\n                    SCRIPT_REF: 32,\r\n                },\r\n            };\r\n        },\r\n        watch: {\r\n            date () {\r\n                this.fetchData();\r\n            },\r\n        },\r\n        created () {\r\n            this.list = [\r\n                '文件分发',\r\n                '本地文件源',\r\n                '服务器文件源',\r\n                '脚本执行',\r\n                '手工录入',\r\n                '脚本引用',\r\n                '人工确认',\r\n            ];\r\n            this.fetchData();\r\n        },\r\n        methods: {\r\n            fetchData () {\r\n                this.isLoading = true;\r\n                StatisticsService.fetchDistributionMetrics({\r\n                    date: this.date,\r\n                    metric: 'STEP_TYPE',\r\n                }).then((data) => {\r\n                    this.data = data.labelAmountMap;\r\n                    this.init();\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            init () {\r\n                this.myChart = echarts.init(this.$refs.dashboard);\r\n                const option = {\r\n                    ...chartsOptionsBase,\r\n                    series: [\r\n                        {\r\n                            name: '作业步骤',\r\n                            type: 'pie',\r\n                            label: {\r\n                                show: false,\r\n                            },\r\n                            selectedMode: 'single',\r\n                            radius: [\r\n                                0,\r\n                                '50px',\r\n                            ],\r\n                            hoverOffset: 6,\r\n                            avoidLabelOverlap: false,\r\n                            data: [\r\n                                {\r\n                                    value: this.data.FILE_LOCAL + this.data.FILE_SERVER,\r\n                                    name: '文件分发',\r\n                                    itemStyle: {\r\n                                        color: colorMap.fileStep,\r\n                                    },\r\n                                },\r\n                                {\r\n                                    value: this.data.SCRIPT_MANUAL + this.data.SCRIPT_REF,\r\n                                    name: '脚本执行',\r\n                                    itemStyle: {\r\n                                        color: colorMap.scriptStep,\r\n                                    },\r\n                                },\r\n                                {\r\n                                    value: this.data.CONFIRM,\r\n                                    name: '人工确认',\r\n                                    itemStyle: {\r\n                                        color: colorMap.confirmStep,\r\n                                    },\r\n                                },\r\n                            ],\r\n                        },\r\n                        {\r\n                            name: '作业步骤',\r\n                            type: 'pie',\r\n                            label: {\r\n                                show: false,\r\n                            },\r\n                            radius: [\r\n                                '60px',\r\n                                '80px',\r\n                            ],\r\n                            hoverOffset: 8,\r\n                            avoidLabelOverlap: false,\r\n                            data: [\r\n                                {\r\n                                    value: this.data.FILE_LOCAL,\r\n                                    name: '本地文件源',\r\n                                    itemStyle: {\r\n                                        color: '#2E2E99',\r\n                                    },\r\n                                },\r\n                                {\r\n                                    value: this.data.FILE_SERVER,\r\n                                    name: '服务器文件源',\r\n                                    itemStyle: {\r\n                                        color: '#3786AD',\r\n                                    },\r\n                                },\r\n                                {\r\n                                    value: this.data.SCRIPT_MANUAL,\r\n                                    name: '手工录入',\r\n                                    itemStyle: {\r\n                                        color: '#74C2C2',\r\n                                    },\r\n                                },\r\n                                {\r\n                                    value: this.data.SCRIPT_REF,\r\n                                    name: '脚本引用',\r\n                                    itemStyle: {\r\n                                        color: '#9AD69A',\r\n                                    },\r\n                                },\r\n                                {\r\n                                    value: this.data.CONFIRM,\r\n                                    name: '人工确认',\r\n                                    itemStyle: {\r\n                                        color: '#D4E6C1',\r\n                                    },\r\n                                },\r\n                            ],\r\n                        },\r\n                    ],\r\n                };\r\n                this.myChart.setOption(option);\r\n                let maxValueItem = {\r\n                    value: -1,\r\n                };\r\n                option.series.forEach((series) => {\r\n                    series.data.forEach((item) => {\r\n                        if (maxValueItem.value < item.value) {\r\n                            maxValueItem = item;\r\n                        }\r\n                    });\r\n                });\r\n                this.myChart.dispatchAction({ type: 'highlight', name: maxValueItem.name });\r\n                this.myChart.on('mouseover', (params) => {\r\n                    this.handleMouseover(params.data.name);\r\n                });\r\n            },\r\n            calcItemCircleStyles (type) {\r\n                return {\r\n                    width: '8px',\r\n                    height: '8px',\r\n                    marginRight: '6px',\r\n                    borderRadius: '50%',\r\n                    backgroundColor: colorMap[type],\r\n                };\r\n            },\r\n            handleMouseover (label) {\r\n                const others = _.filter(this.list, _ => _ !== label);\r\n                this.myChart.dispatchAction({ type: 'highlight', name: label });\r\n                this.myChart.dispatchAction({ type: 'downplay', name: others });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    .template-step-card {\r\n        width: 260px;\r\n\r\n        .wraper {\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: center;\r\n            justify-content: center;\r\n        }\r\n\r\n        .data-info {\r\n            display: flex;\r\n            flex-direction: column;\r\n            font-size: 12px;\r\n            line-height: 18px;\r\n            color: #979ba5;\r\n            white-space: nowrap;\r\n\r\n            .row {\r\n                display: flex;\r\n                align-items: flex-start;\r\n                margin-top: 6px;\r\n            }\r\n\r\n            .data-label {\r\n                display: flex;\r\n                align-items: center;\r\n                padding-right: 14px;\r\n                cursor: pointer;\r\n            }\r\n\r\n            .data-content {\r\n                position: relative;\r\n                padding-left: 14px;\r\n\r\n                &::before {\r\n                    position: absolute;\r\n                    top: 9px;\r\n                    left: -14px;\r\n                    width: 14px;\r\n                    height: 1px;\r\n                    background: #f0f1f5;\r\n                    content: \"\";\r\n                }\r\n            }\r\n\r\n            .content-item {\r\n                position: relative;\r\n                display: flex;\r\n                align-items: center;\r\n                cursor: pointer;\r\n\r\n                &:nth-child(n+2) {\r\n                    margin-top: 4px;\r\n\r\n                    &::after {\r\n                        position: absolute;\r\n                        top: -13px;\r\n                        left: -14px;\r\n                        width: 1px;\r\n                        height: 22px;\r\n                        background: #f0f1f5;\r\n                        content: \"\";\r\n                    }\r\n                }\r\n\r\n                &::before {\r\n                    position: absolute;\r\n                    top: 9px;\r\n                    left: -14px;\r\n                    width: 14px;\r\n                    height: 1px;\r\n                    background: #f0f1f5;\r\n                    content: \"\";\r\n                }\r\n            }\r\n\r\n            .local-file-dot,\r\n            .server-file-dot,\r\n            .local-script-dot,\r\n            .refer-script-dot {\r\n                width: 8px;\r\n                height: 8px;\r\n                margin-right: 6px;\r\n                border-radius: 50%;\r\n            }\r\n\r\n            .local-file-dot {\r\n                background: rgb(35 35 148 / 40%);\r\n                border: 2px solid #232394;\r\n            }\r\n\r\n            .server-file-dot {\r\n                background: rgb(55 134 173 / 40%);\r\n                border: 2px solid #3786ad;\r\n            }\r\n\r\n            .local-script-dot {\r\n                background: rgb(116 194 194 / 40%);\r\n                border: 2px solid #74c2c2;\r\n            }\r\n\r\n            .refer-script-dot {\r\n                background: rgb(154 214 154 / 40%);\r\n                border: 2px solid #9ad69a;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <div class=\"template-dashboard\">\r\n        <div class=\"layout-left\">\r\n            <template-count v-bind=\"$attrs\" />\r\n            <plan-count v-bind=\"$attrs\" />\r\n        </div>\r\n        <div class=\"layout-right\">\r\n            <template-step v-bind=\"$attrs\" />\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import TemplateCount from './template-count';\r\n    import PlanCount from './plan-count';\r\n    import TemplateStep from './template-step';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            TemplateCount,\r\n            PlanCount,\r\n            TemplateStep,\r\n        },\r\n        data () {\r\n            return {};\r\n        },\r\n\r\n        methods: {},\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    @import \"@/css/mixins/media\";\r\n\r\n    .template-dashboard {\r\n        display: flex;\r\n\r\n        .layout-left {\r\n            display: flex;\r\n            flex-direction: column;\r\n            border-right: 1px solid #f0f1f5;\r\n\r\n            .dashboard-card-layout {\r\n                &:nth-child(n+2) {\r\n                    border-top: 1px solid #f0f1f5;\r\n                }\r\n            }\r\n        }\r\n\r\n        .dashboard-card-layout {\r\n            width: 260px;\r\n\r\n            @media (--huge-viewports) {\r\n                width: 400px;\r\n            }\r\n\r\n            @media (--large-viewports) {\r\n                width: 300px;\r\n            }\r\n\r\n            @media (--medium-viewports) {\r\n                width: 280px;\r\n            }\r\n\r\n            @media (--small-viewports) {\r\n                width: 260px;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <card-layout\r\n        class=\"script-ralate-dashboard\"\r\n        v-bkloading=\"{ isLoading, opacity: 0.8 }\"\r\n        :title=\"'使用率'\"\r\n        :title-tips=\"'被作业模板引用的脚本总数（去重）/ 脚本总数，比率越高代表脚本在作业的使用率越高'\">\r\n        <div class=\"nums\">{{ rate }}</div>\r\n    </card-layout>\r\n</template>\r\n<script>\r\n    import StatisticsService from '@service/statistics';\r\n    import CardLayout from '../card-layout';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            CardLayout,\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: true,\r\n                rate: '0 %',\r\n            };\r\n        },\r\n        watch: {\r\n            date () {\r\n                this.fetchData();\r\n            },\r\n        },\r\n        created () {\r\n            this.fetchData();\r\n        },\r\n        methods: {\r\n            fetchData () {\r\n                this.isLoading = true;\r\n                StatisticsService.fetchScriptCiteInfo()\r\n                    .then((data) => {\r\n                        const {\r\n                            citedScriptCount,\r\n                            scriptCount,\r\n                        } = data;\r\n                        if (scriptCount < 1) {\r\n                            this.rate = '0 %';\r\n                        } else {\r\n                            this.rate = `${Math.round(citedScriptCount / scriptCount * 100).toFixed(2)} %`;\r\n                        }\r\n                    })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    .script-ralate-dashboard {\r\n        .nums {\r\n            font-size: 24px;\r\n            font-weight: bold;\r\n            line-height: 32px;\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <card-layout\r\n        class=\"script-type-dashboard\"\r\n        :title=\"'脚本类型分布'\"\r\n        v-bkloading=\"{ isLoading, opacity: 0.8 }\">\r\n        <div class=\"wraper\">\r\n            <div ref=\"dashboard\" style=\"width: 180px; height: 180px;\" />\r\n            <div class=\"item-list\">\r\n                <div\r\n                    v-for=\"item in typeList\"\r\n                    :key=\"item\"\r\n                    class=\"item\"\r\n                    @mouseover=\"handleMouseover(item)\">\r\n                    <div :style=\"calcItemCircleStyles(item)\" />\r\n                    <div>{{ item }}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </card-layout>\r\n</template>\r\n<script>\r\n    import echarts from 'lib/echarts.min.js';\r\n    import _ from 'lodash';\r\n    import StatisticsService from '@service/statistics';\r\n    import CardLayout from '../card-layout';\r\n    import {\r\n        chartsOptionsBase,\r\n    } from '../common/assist';\r\n\r\n    const colorMap = {\r\n        Bat: '#3157A3',\r\n        Shell: '#85CCA8',\r\n        Perl: '#3786AD',\r\n        Powershell: '#BCEBBC',\r\n        Python: '#74C2C2',\r\n        SQL: '#D4E6C1',\r\n    };\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            CardLayout,\r\n        },\r\n        props: {\r\n            date: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: true,\r\n                data: {\r\n                    bat: 0,\r\n                    perl: 0,\r\n                    powershell: 0,\r\n                    python: 0,\r\n                    sql: 0,\r\n                    shell: 0,\r\n                },\r\n            };\r\n        },\r\n        watch: {\r\n            date () {\r\n                this.fetchData();\r\n            },\r\n        },\r\n        created () {\r\n            this.typeList = [\r\n                'Bat',\r\n                'Shell',\r\n                'Perl',\r\n                'Powershell',\r\n                'Python',\r\n                'SQL',\r\n            ];\r\n        },\r\n        mounted () {\r\n            this.fetchData();\r\n        },\r\n        methods: {\r\n            fetchData () {\r\n                this.isLoading = true;\r\n\r\n                StatisticsService.fetchDistributionMetrics({\r\n                    date: this.date,\r\n                    metric: 'SCRIPT_TYPE',\r\n                }).then((data) => {\r\n                    this.data = data.labelAmountMap;\r\n                    this.init();\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            init () {\r\n                this.myChart = echarts.init(this.$refs.dashboard);\r\n                const data = [];\r\n                let maxType = this.typeList[0];// eslint-disable-line prefer-destructuring\r\n                this.typeList.forEach((type) => {\r\n                    const currentValue = this.data[type.toLowerCase()];\r\n                    if (this.data[maxType.toLowerCase()] < currentValue) {\r\n                        maxType = type;\r\n                    }\r\n                    data.push({\r\n                        value: currentValue,\r\n                        key: type,\r\n                        name: type,\r\n                        itemStyle: {\r\n                            color: colorMap[type],\r\n                        },\r\n                    });\r\n                });\r\n                const options = {\r\n                    ...chartsOptionsBase,\r\n                    series: [\r\n                        {\r\n                            type: 'pie',\r\n                            radius: [\r\n                                '60',\r\n                                '80',\r\n                            ],\r\n                            selectedMode: 'single',\r\n                            hoverOffset: 8,\r\n                            selectedOffset: 0,\r\n                            avoidLabelOverlap: false,\r\n                            label: {\r\n                                normal: {\r\n                                    show: false,\r\n                                    position: 'center',\r\n                                },\r\n                                emphasis: {\r\n                                    show: true,\r\n                                    formatter: [\r\n                                        '{value|{d}%}',\r\n                                        '{b}',\r\n                                    ].join('\\n'),\r\n                                    rich: {\r\n                                        name: {\r\n                                            fontSize: 12,\r\n                                            lineHieght: 16,\r\n                                            color: '#63656E',\r\n                                        },\r\n                                        value: {\r\n                                            fontSize: 26,\r\n                                            fontWeight: 600,\r\n                                            lineHeight: 42,\r\n                                            color: '#63656E',\r\n                                        },\r\n                                    },\r\n                                },\r\n                            },\r\n                            data,\r\n                        },\r\n                    ],\r\n                };\r\n                this.myChart.setOption(options);\r\n                this.myChart.dispatchAction({ type: 'highlight', name: maxType });\r\n                this.myChart.on('mouseover', (params) => {\r\n                    this.handleMouseover(params.data.name);\r\n                });\r\n            },\r\n            calcItemCircleStyles (type) {\r\n                return {\r\n                    width: '8px',\r\n                    height: '8px',\r\n                    marginRight: '6px',\r\n                    borderRadius: '50%',\r\n                    backgroundColor: colorMap[type],\r\n                };\r\n            },\r\n            handleMouseover (type) {\r\n                const others = _.filter(this.typeList, _ => _ !== type);\r\n                this.myChart.dispatchAction({ type: 'highlight', name: type });\r\n                this.myChart.dispatchAction({ type: 'downplay', name: others });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .script-type-dashboard {\r\n        .wraper {\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: center;\r\n\r\n            .item-list {\r\n                display: flex;\r\n                width: 180px;\r\n                margin-top: 30px;\r\n                font-size: 12px;\r\n                line-height: 18px;\r\n                color: #979ba5;\r\n                flex-wrap: wrap;\r\n                justify-content: space-around;\r\n\r\n                .item {\r\n                    display: flex;\r\n                    padding: 5px 0;\r\n                    padding-left: 10px;\r\n                    cursor: pointer;\r\n                    flex: 1 1 50%;\r\n                    align-items: center;\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <card-layout\r\n        class=\"script-ralate-dashboard\"\r\n        :title=\"'复用率'\"\r\n        :title-tips=\"'引用脚本的步骤总数 / 被引用的脚本总数（去重），比率越高代表脚本在作业中被重复利用的价值越大'\"\r\n        v-bkloading=\"{ isLoading, opacity: 0.8 }\">\r\n        <div class=\"nums\">{{ rate }}</div>\r\n    </card-layout>\r\n</template>\r\n<script>\r\n    import StatisticsService from '@service/statistics';\r\n    import CardLayout from '../card-layout';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            CardLayout,\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: true,\r\n                rate: '0 %',\r\n            };\r\n        },\r\n        watch: {\r\n            date () {\r\n                this.fetchData();\r\n            },\r\n        },\r\n        created () {\r\n            this.fetchData();\r\n        },\r\n        methods: {\r\n            fetchData () {\r\n                this.isLoading = true;\r\n                StatisticsService.fetchScriptCiteInfo()\r\n                    .then((data) => {\r\n                        const {\r\n                            citedScriptStepCount,\r\n                            citedScriptCount,\r\n                        } = data;\r\n                        if (citedScriptCount < 1) {\r\n                            this.rate = '0 %';\r\n                        } else {\r\n                            this.rate = `${Math.round(citedScriptStepCount / citedScriptCount * 100).toFixed(2)} %`;\r\n                        }\r\n                    })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    .script-ralate-dashboard {\r\n        .nums {\r\n            font-size: 24px;\r\n            font-weight: bold;\r\n            line-height: 32px;\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <card-layout\r\n        class=\"script-version-dashboard\"\r\n        :title=\"'脚本版本状态分布'\"\r\n        v-bkloading=\"{ isLoading, opacity: 0.8 }\">\r\n        <div class=\"wraper\">\r\n            <div ref=\"dashboard\" style=\"width: 180px; height: 180px;\" />\r\n            <div class=\"item-list\">\r\n                <div\r\n                    v-for=\"item in list\"\r\n                    :key=\"item.key\"\r\n                    class=\"item\"\r\n                    @mouseover=\"handleMouseover(item.label)\">\r\n                    <div :style=\"calcItemCircleStyles(item.key)\" />\r\n                    <div>{{ item.label }}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </card-layout>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n    import echarts from 'lib/echarts.min.js';\r\n       import StatisticsService from '@service/statistics';\r\n    import CardLayout from '../card-layout';\r\n    import {\r\n        chartsOptionsBase,\r\n    } from '../common/assist';\r\n\r\n    const colorMap = {\r\n        ONLINE: '#85CCA8',\r\n        DISABLED: '#FFDDDD',\r\n        OFFLINE: '#D4E6C1',\r\n        DRAFT: '#DCDEE6',\r\n    };\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            CardLayout,\r\n        },\r\n        props: {\r\n            date: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: true,\r\n                data: {\r\n                    DISABLED: '',\r\n                    OFFLINE: '',\r\n                    ONLINE: '',\r\n                    DRAFT: '',\r\n                },\r\n            };\r\n        },\r\n        watch: {\r\n            date () {\r\n                this.fetchData();\r\n            },\r\n        },\r\n        created () {\r\n            this.list = [\r\n                {\r\n                    label: '已上线',\r\n                    key: 'ONLINE',\r\n                },\r\n                {\r\n                    label: '禁用',\r\n                    key: 'DISABLED',\r\n                },\r\n                {\r\n                    label: '已下线',\r\n                    key: 'OFFLINE',\r\n                },\r\n                {\r\n                    label: '未上线',\r\n                    key: 'DRAFT',\r\n                    emphasis: {\r\n                        itemStyle: {\r\n                            color: '#E6E8F0',\r\n                        },\r\n                    },\r\n                },\r\n            ];\r\n        },\r\n        mounted () {\r\n            this.fetchData();\r\n        },\r\n        methods: {\r\n            fetchData () {\r\n                this.isLoading = true;\r\n                StatisticsService.fetchDistributionMetrics({\r\n                    date: this.date,\r\n                    metric: 'SCRIPT_VERSION_STATUS',\r\n                }).then((data) => {\r\n                    this.data = data.labelAmountMap;\r\n                    this.init();\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            init () {\r\n                this.myChart = echarts.init(this.$refs.dashboard);\r\n                const data = [];\r\n                let maxItem = this.list[0];// eslint-disable-line prefer-destructuring\r\n                this.list.forEach((item) => {\r\n                    const currentValue = this.data[item.key];\r\n                    if (this.data[maxItem.key] < currentValue) {\r\n                        maxItem = item;\r\n                    }\r\n                    data.push({\r\n                        value: currentValue,\r\n                        key: item.key,\r\n                        name: item.label,\r\n                        itemStyle: {\r\n                            color: colorMap[item.key],\r\n                        },\r\n                        emphasis: item.emphasis || {},\r\n                    });\r\n                });\r\n                const options = {\r\n                    ...chartsOptionsBase,\r\n                    series: [\r\n                        {\r\n                            type: 'pie',\r\n                            radius: [\r\n                                '60',\r\n                                '80',\r\n                            ],\r\n                            selectedMode: 'single',\r\n                            hoverOffset: 8,\r\n                            selectedOffset: 0,\r\n                            avoidLabelOverlap: false,\r\n                            label: {\r\n                                normal: {\r\n                                    show: false,\r\n                                    position: 'center',\r\n                                },\r\n                                emphasis: {\r\n                                    show: true,\r\n                                    formatter: [\r\n                                        '{value|{d}%}',\r\n                                        '{b}',\r\n                                    ].join('\\n'),\r\n\r\n                                    rich: {\r\n                                        name: {\r\n                                            fontSize: 12,\r\n                                            lineHieght: 16,\r\n                                            color: '#63656E',\r\n                                        },\r\n                                        value: {\r\n                                            fontSize: 26,\r\n                                            fontWeight: 600,\r\n                                            lineHeight: 42,\r\n                                            color: '#63656E',\r\n                                        },\r\n                                    },\r\n                                },\r\n                            },\r\n                            \r\n                            data,\r\n                        },\r\n                    ],\r\n                };\r\n                \r\n                this.myChart.setOption(options);\r\n                this.myChart.dispatchAction({ type: 'highlight', name: maxItem.label });\r\n                this.myChart.on('mouseover', (params) => {\r\n                    this.handleMouseover(params.data.name);\r\n                });\r\n            },\r\n            calcItemCircleStyles (value) {\r\n                return {\r\n                    width: '8px',\r\n                    height: '8px',\r\n                    marginRight: '6px',\r\n                    borderRadius: '50%',\r\n                    backgroundColor: colorMap[value],\r\n                };\r\n            },\r\n            handleMouseover (label) {\r\n                const others = _.filter(this.list, _ => _.label !== label).map(_ => _.label);\r\n                this.myChart.dispatchAction({ type: 'highlight', name: label });\r\n                this.myChart.dispatchAction({ type: 'downplay', name: others });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .script-version-dashboard {\r\n        .wraper {\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: center;\r\n\r\n            .item-list {\r\n                display: flex;\r\n                width: 160px;\r\n                margin-top: 30px;\r\n                font-size: 12px;\r\n                line-height: 18px;\r\n                color: #979ba5;\r\n                flex-wrap: wrap;\r\n                justify-content: space-around;\r\n\r\n                .item {\r\n                    display: flex;\r\n                    padding: 5px 0;\r\n                    padding-left: 10px;\r\n                    cursor: pointer;\r\n                    flex: 1 1 50%;\r\n                    align-items: center;\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <div class=\"script-dashboard\">\r\n        <div class=\"layout-left\">\r\n            <script-count v-bind=\"$attrs\" />\r\n            <script-relate v-bind=\"$attrs\" />\r\n            <script-version-use v-bind=\"$attrs\" />\r\n        </div>\r\n        <div class=\"layout-center\">\r\n            <script-type v-bind=\"$attrs\" />\r\n        </div>\r\n        <div class=\"layout-right\">\r\n            <script-version-status v-bind=\"$attrs\" />\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import ScriptCount from './count';\r\n    import ScriptRelate from './releate';\r\n    import ScriptType from './type';\r\n    import ScriptVersionUse from './version-use';\r\n    import ScriptVersionStatus from './version-status';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            ScriptCount,\r\n            ScriptRelate,\r\n            ScriptType,\r\n            ScriptVersionUse,\r\n            ScriptVersionStatus,\r\n        },\r\n        data () {\r\n            return {};\r\n        },\r\n\r\n        methods: {},\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    @import \"@/css/mixins/media\";\r\n\r\n    .script-dashboard {\r\n        display: flex;\r\n\r\n        .layout-left {\r\n            flex: 1;\r\n            display: flex;\r\n            flex-direction: column;\r\n            border-right: 1px solid #f0f1f5;\r\n\r\n            .dashboard-card-layout {\r\n                @media (--huge-viewports) {\r\n                    width: 400px;\r\n                }\r\n\r\n                @media (--large-viewports) {\r\n                    width: 300px;\r\n                }\r\n\r\n                @media (--medium-viewports) {\r\n                    width: 280px;\r\n                }\r\n\r\n                @media (--small-viewports) {\r\n                    width: 260px;\r\n                }\r\n\r\n                &:nth-child(n+2) {\r\n                    border-top: 1px solid #f0f1f5;\r\n                }\r\n            }\r\n        }\r\n\r\n        .layout-center {\r\n            flex: 2;\r\n        }\r\n\r\n        .layout-right {\r\n            flex: 2;\r\n            border-left: 1px solid #f0f1f5;\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <card-layout\r\n        class=\"crontab-status-dashboard\"\r\n        :title=\"'定时任务开关分布'\"\r\n        v-bkloading=\"{ isLoading, opacity: 0.8 }\">\r\n        <div class=\"wraper\">\r\n            <div ref=\"dashboard\" style=\"width: 176px; height: 176px;\" />\r\n            <div class=\"item-list\">\r\n                <div\r\n                    v-for=\"item in list\"\r\n                    class=\"item\"\r\n                    :key=\"item.key\"\r\n                    @mouseover=\"handleMouseover(item.label)\">\r\n                    <div :style=\"calcItemCircleStyles(item.key)\" />\r\n                    <div>{{ item.label }}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </card-layout>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n    import echarts from 'lib/echarts.min.js';\r\n    import StatisticsService from '@service/statistics';\r\n       import CardLayout from '../card-layout';\r\n    import {\r\n        chartsOptionsBase,\r\n    } from '../common/assist';\r\n\r\n    const colorMap = {\r\n        OPEN: '#85CCA8',\r\n        CLOSED: '#F5BABA',\r\n    };\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            CardLayout,\r\n        },\r\n        props: {\r\n            date: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: true,\r\n                data: {\r\n                    CLOSED: 0,\r\n                    OPEN: 0,\r\n                },\r\n            };\r\n        },\r\n        watch: {\r\n            date () {\r\n                this.fetchData();\r\n            },\r\n        },\r\n        created () {\r\n            this.list = [\r\n                {\r\n                    label: '开启',\r\n                    key: 'OPEN',\r\n                },\r\n                {\r\n                    label: '关闭',\r\n                    key: 'CLOSED',\r\n                },\r\n            ];\r\n        },\r\n        mounted () {\r\n            this.fetchData();\r\n        },\r\n        methods: {\r\n            fetchData () {\r\n                this.isLoading = true;\r\n                StatisticsService.fetchDistributionMetrics({\r\n                    date: this.date,\r\n                    metric: 'CRON_STATUS',\r\n                }).then((data) => {\r\n                    this.data = data.labelAmountMap;\r\n                    this.init();\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            init () {\r\n                this.myChart = echarts.init(this.$refs.dashboard);\r\n                const data = [];\r\n                let maxItem = this.list[0];// eslint-disable-line prefer-destructuring\r\n                this.list.forEach((item) => {\r\n                    const currentValue = this.data[item.key];\r\n                    if (this.data[maxItem.key] < currentValue) {\r\n                        maxItem = item;\r\n                    }\r\n                    data.push({\r\n                        value: currentValue,\r\n                        key: item.key,\r\n                        name: item.label,\r\n                        itemStyle: {\r\n                            color: colorMap[item.key],\r\n                        },\r\n                    });\r\n                });\r\n                setTimeout(() => {\r\n                    this.myChart.dispatchAction({ type: 'highlight', name: maxItem.label });\r\n                });\r\n                const options = {\r\n                    ...chartsOptionsBase,\r\n                    series: [\r\n                        {\r\n                            type: 'pie',\r\n                            radius: [\r\n                                '60',\r\n                                '80',\r\n                            ],\r\n                            selectedMode: 'single',\r\n                            hoverOffset: 8,\r\n                            selectedOffset: 0,\r\n                            avoidLabelOverlap: false,\r\n                            label: {\r\n                                normal: {\r\n                                    show: false,\r\n                                    position: 'center',\r\n                                },\r\n                                emphasis: {\r\n                                    show: true,\r\n                                    formatter: [\r\n                                        '{value|{d}%}',\r\n                                        '{b}',\r\n                                    ].join('\\n'),\r\n\r\n                                    rich: {\r\n                                        name: {\r\n                                            fontSize: 12,\r\n                                            lineHieght: 16,\r\n                                            color: '#63656E',\r\n                                        },\r\n                                        value: {\r\n                                            fontSize: 26,\r\n                                            fontWeight: 600,\r\n                                            lineHeight: 42,\r\n                                            color: '#63656E',\r\n                                        },\r\n                                    },\r\n                                },\r\n                            },\r\n                            data,\r\n                        },\r\n                    ],\r\n                };\r\n                this.myChart.setOption(options);\r\n                this.myChart.dispatchAction({ type: 'highlight', name: maxItem.label });\r\n                this.myChart.on('mouseover', (params) => {\r\n                    this.handleMouseover(params.data.name);\r\n                });\r\n            },\r\n            calcItemCircleStyles (key) {\r\n                return {\r\n                    width: '8px',\r\n                    height: '8px',\r\n                    marginRight: '6px',\r\n                    borderRadius: '50%',\r\n                    backgroundColor: colorMap[key],\r\n                };\r\n            },\r\n            handleMouseover (label) {\r\n                const others = _.filter(this.list, _ => _.label !== label).map(_ => _.label);\r\n                this.myChart.dispatchAction({ type: 'highlight', name: label });\r\n                this.myChart.dispatchAction({ type: 'downplay', name: others });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    .crontab-status-dashboard {\r\n        .wraper {\r\n            display: flex;\r\n            align-items: center;\r\n            flex-direction: column;\r\n\r\n            .item-list {\r\n                display: flex;\r\n                width: 180px;\r\n                margin-top: 20px;\r\n                font-size: 12px;\r\n                line-height: 18px;\r\n                color: #979ba5;\r\n                flex-direction: column;\r\n                align-items: center;\r\n\r\n                .item {\r\n                    display: flex;\r\n                    padding-left: 10px;\r\n                    cursor: pointer;\r\n                    flex: 1 1 50%;\r\n                    align-items: center;\r\n\r\n                    &:nth-child(n + 1) {\r\n                        margin-top: 10px;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <card-layout\r\n        class=\"crontab-type-dashboard\"\r\n        :title=\"'定时任务类型分布'\"\r\n        v-bkloading=\"{ isLoading, opacity: 0.8 }\">\r\n        <div class=\"wraper\">\r\n            <div ref=\"dashboard\" style=\"width: 176px; height: 176px;\" />\r\n            <div class=\"item-list\">\r\n                <div\r\n                    v-for=\"item in list\"\r\n                    :key=\"item.key\"\r\n                    class=\"item\"\r\n                    @mouseover=\"handleMouseover(item.label)\">\r\n                    <div :style=\"calcItemCircleStyles(item.key)\" />\r\n                    <div>{{ item.label }}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </card-layout>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n    import echarts from 'lib/echarts.min.js';\r\n       import StatisticsService from '@service/statistics';\r\n    import CardLayout from '../card-layout';\r\n    import {\r\n        chartsOptionsBase,\r\n    } from '../common/assist';\r\n\r\n    const colorMap = {\r\n        SIMPLE: '#3786AD',\r\n        CRON: '#74C2C2',\r\n    };\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            CardLayout,\r\n        },\r\n        props: {\r\n            date: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: true,\r\n                data: {\r\n                    CRON: 0,\r\n                    SIMPLE: 0,\r\n                },\r\n            };\r\n        },\r\n        watch: {\r\n            date () {\r\n                this.fetchData();\r\n            },\r\n        },\r\n        created () {\r\n            this.list = [\r\n                {\r\n                    label: '单次执行',\r\n                    key: 'SIMPLE',\r\n                },\r\n                {\r\n                    label: '周期执行',\r\n                    key: 'CRON',\r\n                },\r\n            ];\r\n        },\r\n        mounted () {\r\n            this.fetchData();\r\n        },\r\n        methods: {\r\n            fetchData () {\r\n                this.isLoading = true;\r\n                StatisticsService.fetchDistributionMetrics({\r\n                    date: this.date,\r\n                    metric: 'CRON_TYPE',\r\n                }).then((data) => {\r\n                    this.data = data.labelAmountMap;\r\n                    this.init();\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            init () {\r\n                this.myChart = echarts.init(this.$refs.dashboard);\r\n                const data = [];\r\n                let maxItem = this.list[0];// eslint-disable-line prefer-destructuring\r\n                this.list.forEach((item) => {\r\n                    const currentValue = this.data[item.key];\r\n                    if (this.data[maxItem.key] < currentValue) {\r\n                        maxItem = item;\r\n                    }\r\n                    data.push({\r\n                        value: currentValue,\r\n                        key: item.key,\r\n                        name: item.label,\r\n                        itemStyle: {\r\n                            color: colorMap[item.key],\r\n                        },\r\n                    });\r\n                });\r\n                const options = {\r\n                    ...chartsOptionsBase,\r\n                    series: [\r\n                        {\r\n                            type: 'pie',\r\n                            radius: [\r\n                                '60',\r\n                                '80',\r\n                            ],\r\n                            selectedMode: 'single',\r\n                            hoverOffset: 8,\r\n                            selectedOffset: 0,\r\n                            avoidLabelOverlap: false,\r\n                            label: {\r\n                                normal: {\r\n                                    show: false,\r\n                                    position: 'center',\r\n                                },\r\n                                emphasis: {\r\n                                    show: true,\r\n                                    formatter: [\r\n                                        '{value|{d}%}',\r\n                                        '{b}',\r\n                                    ].join('\\n'),\r\n\r\n                                    rich: {\r\n                                        name: {\r\n                                            fontSize: 12,\r\n                                            lineHieght: 16,\r\n                                            color: '#63656E',\r\n                                        },\r\n                                        value: {\r\n                                            fontSize: 26,\r\n                                            fontWeight: 600,\r\n                                            lineHeight: 42,\r\n                                            color: '#63656E',\r\n                                        },\r\n                                    },\r\n                                },\r\n                            },\r\n                            data,\r\n                        },\r\n                    ],\r\n                };\r\n                this.myChart.setOption(options);\r\n                this.myChart.dispatchAction({ type: 'highlight', name: maxItem.label });\r\n                this.myChart.on('mouseover', (params) => {\r\n                    this.handleMouseover(params.data.name);\r\n                });\r\n            },\r\n            calcItemCircleStyles (key) {\r\n                return {\r\n                    width: '8px',\r\n                    height: '8px',\r\n                    marginRight: '6px',\r\n                    borderRadius: '50%',\r\n                    backgroundColor: colorMap[key],\r\n                };\r\n            },\r\n            handleMouseover (label) {\r\n                const others = _.filter(this.list, _ => _.label !== label).map(_ => _.label);\r\n                this.myChart.dispatchAction({ type: 'highlight', name: label });\r\n                this.myChart.dispatchAction({ type: 'downplay', name: others });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    .crontab-type-dashboard {\r\n        .wraper {\r\n            display: flex;\r\n            align-items: center;\r\n            flex-direction: column;\r\n\r\n            .item-list {\r\n                display: flex;\r\n                width: 180px;\r\n                margin-top: 20px;\r\n                font-size: 12px;\r\n                line-height: 18px;\r\n                color: #979ba5;\r\n                flex-direction: column;\r\n                align-items: center;\r\n\r\n                .item {\r\n                    display: flex;\r\n                    cursor: pointer;\r\n                    flex: 1 1 50%;\r\n                    align-items: center;\r\n\r\n                    &:nth-child(n + 1) {\r\n                        margin-top: 10px;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <div class=\"crontab-dashboard\">\r\n        <crontab-status v-bind=\"$attrs\" />\r\n        <crontab-type v-bind=\"$attrs\" />\r\n    </div>\r\n</template>\r\n<script>\r\n    import CrontabStatus from './status';\r\n    import CrontabType from './type';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            CrontabStatus,\r\n            CrontabType,\r\n        },\r\n        data () {\r\n            return {};\r\n        },\r\n\r\n        methods: {},\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    @import \"@/css/mixins/media\";\r\n\r\n    .crontab-dashboard {\r\n        display: flex;\r\n\r\n        .dashboard-card-layout {\r\n            width: 260px;\r\n\r\n            @media (--huge-viewports) {\r\n                width: 400px;\r\n            }\r\n\r\n            @media (--large-viewports) {\r\n                width: 300px;\r\n            }\r\n\r\n            @media (--medium-viewports) {\r\n                width: 280px;\r\n            }\r\n\r\n            @media (--small-viewports) {\r\n                width: 260px;\r\n            }\r\n\r\n            &:nth-child(n + 2) {\r\n                border-left: 1px solid #f0f1f5;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <card-layout\r\n        class=\"tag-dashboard\"\r\n        :title=\"'标签'\"\r\n        v-bkloading=\"{ isLoading, opacity: 0.8 }\">\r\n        <div\r\n            ref=\"box\"\r\n            class=\"tag-box\"\r\n            style=\"position: releative; width: 100%; height: 240px;\" />\r\n    </card-layout>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n    import StatisticsService from '@service/statistics';\r\n    import CardLayout from '../card-layout';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            CardLayout,\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: true,\r\n            };\r\n        },\r\n        watch: {\r\n            date () {\r\n                this.fetchData();\r\n            },\r\n        },\r\n\r\n        created () {\r\n            this.textList = [];\r\n        },\r\n        mounted () {\r\n            this.fetchData();\r\n            const resize = _.throttle(() => {\r\n                this.init(this.textList);\r\n            }, 300);\r\n            window.addEventListener('resize', resize);\r\n            this.$once('hook:beforeDestroy', () => {\r\n                window.removeEventListener('resize', resize);\r\n            });\r\n        },\r\n        methods: {\r\n            fetchData () {\r\n                this.isLoading = true;\r\n                StatisticsService.fetchDistributionMetrics({\r\n                    date: this.date,\r\n                    metric: 'TAG',\r\n                }).then((data) => {\r\n                    this.data = data.labelAmountMap;\r\n                    const tagNumList = Object.values(this.data).sort((a, b) => a - b);\r\n                    const [tagNumMin] = tagNumList;\r\n                    const tagNumMax = tagNumList[tagNumList.length - 1];\r\n\r\n                    const weightQueue = [];\r\n                    let weightMax = 1;\r\n                    while (weightMax <= 5) {\r\n                        weightQueue.push(weightMax);\r\n                        weightMax = weightMax + 1;\r\n                    }\r\n\r\n                    // 判断每个值得显示权重\r\n                    const weigthMap = {};\r\n                    const checkWeight = (max, secondMax, min) => {\r\n                        const maxWeight = weightQueue[weightQueue.length - 1] || 1;\r\n                        weigthMap[max] = maxWeight;\r\n\r\n                        let nextMin = min;\r\n                        if (secondMax < min) {\r\n                            weigthMap[max] = maxWeight;\r\n                            weightQueue.pop();\r\n                            nextMin = secondMax - Math.max((secondMax - tagNumMin) / weightQueue.length, 1);\r\n                            // 最大权重间隔维持在两个级别\r\n                            if (nextMin < min) {\r\n                                weightQueue.pop();\r\n                            }\r\n                        }\r\n                        if (tagNumList.length > 0) {\r\n                            checkWeight(secondMax, tagNumList.pop(), nextMin);\r\n                        }\r\n                    };\r\n                    \r\n                    checkWeight(\r\n                        tagNumList.pop(),\r\n                        tagNumList.pop(),\r\n                        tagNumMax - Math.max((tagNumMax - tagNumMin) / weightQueue.length, 1),\r\n                    );\r\n\r\n                    const textList = Object.keys(this.data).reduce((result, key) => {\r\n                        const count = this.data[key];\r\n                        result.push({\r\n                            text: key,\r\n                            weight: weigthMap[count],\r\n                            count,\r\n                        });\r\n                        return result;\r\n                    }, []);\r\n                    this.textList = textList;\r\n                    this.init(textList);\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            init (wordList) {\r\n                const start = (wordArray) => {\r\n                    // 容器元素的引用\r\n                    const boxClientRect = this.$refs.box.getBoundingClientRect();\r\n                    // 默认选项值\r\n                    const options = {\r\n                        width: boxClientRect.width,\r\n                        height: boxClientRect.height,\r\n                        center: {\r\n                            x: boxClientRect.width / 2.0,\r\n                            y: boxClientRect.height / 2.0,\r\n                        },\r\n                        delayedMode: wordArray.length > 50,\r\n                        shape: false, // 默认为椭圆形状\r\n                    };\r\n                    // Helper函数来测试如果一个元素重叠\r\n                    const hitTest = function (elem, otherElems) {\r\n                        // 两两重叠检测\r\n                        const overlapping = function (a, b) {\r\n                            return !((a.offsetLeft + a.offsetWidth) < b.offsetLeft - 3\r\n                                || (b.offsetLeft + b.offsetWidth) < a.offsetLeft - 3\r\n                                || a.offsetTop + a.offsetHeight < b.offsetTop - 5\r\n                                || b.offsetTop + b.offsetHeight < a.offsetTop - 5);\r\n                        };\r\n                        let i = 0;\r\n                        // 检查元素重叠一个接一个,停止并返回false一旦发现重叠\r\n                        // eslint-disable-next-line no-plusplus\r\n                        for (i = 0; i < otherElems.length; i++) {\r\n                            if (overlapping(elem, otherElems[i])) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                        return false;\r\n                    };\r\n\r\n                    const drawWordCloud = () => {\r\n                        // 确保每一个重量之前是一个数字排序\r\n                        wordArray.forEach((item, index) => {\r\n                            wordArray[index].weight = parseFloat(wordArray[index].weight, 10);\r\n                        });\r\n\r\n                        // 排序wordArray从最高的词体重最低的一个\r\n                        wordArray.sort((a, b) => {\r\n                            if (a.weight < b.weight) {\r\n                                return 1;\r\n                            } else if (a.weight > b.weight) {\r\n                                return -1;\r\n                            }\r\n                            return 0;\r\n                        });\r\n\r\n                        const step = 3.0;\r\n                        const alreadyPlacedWords = [];\r\n                        const aspectRatio = options.width / options.height;\r\n\r\n                        // 函数画一词,在螺旋通过移动它,直到找到一个合适的空地方。这将是迭代每个单词。\r\n                        const drawOneWord = (word, index) => {\r\n                            let angle = 6.28 * Math.random();\r\n                            let radius = 0.0;\r\n                            let weight = 5;\r\n\r\n                            const wordSpan = document.createElement('span');\r\n                            wordSpan.setAttribute('tippy-tips', `${word.text} ${word.count}`);\r\n                            wordSpan.setAttribute('placement', 'right');\r\n\r\n                            // 检查是否min(重量)> max(重量)否则使用默认\r\n                            if (wordArray[0].weight > wordArray[wordArray.length - 1].weight) {\r\n                                // 线性映射原体重一个离散的规模从1到6\r\n                                weight = Math.round((word.weight - wordArray[wordArray.length - 1].weight)\r\n                                    / (wordArray[0].weight - wordArray[wordArray.length - 1].weight) * 4.0) + 1;\r\n                            }\r\n                            const wordStyle = wordSpan.style;\r\n                            wordStyle.lineHeight = 1;\r\n                            wordSpan.classList.add(`w${weight}`);\r\n                            wordSpan.append(word.text);\r\n                            this.$refs.box.append(wordSpan);\r\n                            const { width, height } = wordSpan.getBoundingClientRect();\r\n                            let left = options.center.x - width / 2.0;\r\n                            let top = options.center.y - height / 2.0;\r\n\r\n                            // 保存样式属性的引用,获得更好的性能\r\n                            wordStyle.position = 'absolute';\r\n                            wordStyle.left = `${left}px`;\r\n                            wordStyle.top = `${top}px`;\r\n\r\n                            while (hitTest(wordSpan, alreadyPlacedWords)) {\r\n                                // 选择形状是矩形的移动这个词在一个矩形螺旋\r\n                                radius += step;\r\n                                angle += (index % 2 === 0 ? 1 : -1) * step;\r\n\r\n                                left = options.center.x - (width / 2.0) + (radius * Math.cos(angle)) * aspectRatio;\r\n                                top = options.center.y + radius * Math.sin(angle) - (height / 2.0);\r\n                                wordStyle.left = `${left}px`;\r\n                                wordStyle.top = `${top}px`;\r\n                            }\r\n\r\n                            // 移除超过容器范围的词\r\n                            if (left < 0\r\n                                || top < 0\r\n                                || Math.ceil(left + width + 5) > options.width\r\n                                || Math.ceil(top + height + 5) > options.height) {\r\n                                this.$refs.box.removeChild(wordSpan);\r\n                                return;\r\n                            }\r\n\r\n                            alreadyPlacedWords.push(wordSpan);\r\n                        };\r\n\r\n                        const drawOneWordDelayed = (index = 0) => {\r\n                            if (index < wordArray.length) {\r\n                                drawOneWord(wordArray[index], index);\r\n                                this.drawTimer = setTimeout(() => {\r\n                                    drawOneWordDelayed(index + 1);\r\n                                }, 20);\r\n                            }\r\n                        };\r\n\r\n                        // 迭代drawOneWord上每一个字。迭代的方式完成取决于绘图模式(delayedMode是真或假的)\r\n                        if (options.delayedMode) {\r\n                            drawOneWordDelayed();\r\n                        } else {\r\n                            wordArray.forEach(drawOneWord);\r\n                        }\r\n                    };\r\n\r\n                    // 延迟执行，降低渲染标签的优先级\r\n                    setTimeout(() => {\r\n                        drawWordCloud();\r\n                    });\r\n                };\r\n                this.$refs.box.innerHTML = '';\r\n                clearTimeout(this.drawTimer);\r\n                start(wordList);\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .tag-dashboard {\r\n        .tag-box {\r\n            position: relative;\r\n            font-size: 10px;\r\n\r\n            span {\r\n                z-index: 1;\r\n                line-height: 1;\r\n                white-space: nowrap;\r\n                cursor: pointer;\r\n                transition: font-weight 0.15s, transform 0.15s;\r\n\r\n                &:hover {\r\n                    font-weight: bold;\r\n                    opacity: 100%;\r\n                    transform: scale(1.2);\r\n                }\r\n\r\n                &.w5 {\r\n                    font-size: 28px;\r\n                    color: #4031a3;\r\n                }\r\n\r\n                &.w4 {\r\n                    font-size: 24px;\r\n                    color: #3d6dcc;\r\n                }\r\n\r\n                &.w3 {\r\n                    font-size: 20px;\r\n                    color: #4da8d6;\r\n                }\r\n\r\n                &.w2 {\r\n                    font-size: 16px;\r\n                    color: #55c29e;\r\n                }\r\n\r\n                &.w1 {\r\n                    font-size: 12px;\r\n                    color: #92c288;\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <div class=\"account-dashboard\" v-bkloading=\"{ isLoading, opacity: 0.8 }\">\r\n        <card-layout :title=\"'Linux 账号数'\">\r\n            <div class=\"item-content\">\r\n                <div class=\"nums\">{{ data.LINUX }}</div>\r\n                <div\r\n                    ref=\"LINUX\"\r\n                    class=\"dashboard\"\r\n                    v-bk-tooltips.right=\"calcPercentage(data.LINUX)\"\r\n                    style=\"width: 24px; height: 24px;\" />\r\n            </div>\r\n            <Icon type=\"linux\" class=\"type-flag\" style=\"font-size: 37px;\" />\r\n        </card-layout>\r\n        <card-layout :title=\"'Windows 账号数'\">\r\n            <div class=\"item-content\">\r\n                <div class=\"nums\">{{ data.WINDOWS | formatNumber }}</div>\r\n                <div\r\n                    ref=\"WINDOWS\"\r\n                    class=\"dashboard\"\r\n                    v-bk-tooltips.right=\"calcPercentage(data.WINDOWS)\"\r\n                    style=\"width: 24px; height: 24px;\" />\r\n            </div>\r\n            <Icon type=\"windows\" class=\"type-flag\" style=\"font-size: 36px;\" />\r\n        </card-layout>\r\n        <card-layout :title=\"'DB 账号数'\">\r\n            <div class=\"item-content\">\r\n                <div class=\"nums\">{{ data.DB | formatNumber }}</div>\r\n                <div\r\n                    ref=\"DB\"\r\n                    class=\"dashboard\"\r\n                    v-bk-tooltips.right=\"calcPercentage(data.DB)\"\r\n                    style=\"width: 24px; height: 24px;\" />\r\n            </div>\r\n            <Icon type=\"db\" class=\"type-flag\" style=\"font-size: 27px;\" />\r\n        </card-layout>\r\n    </div>\r\n</template>\r\n<script>\r\n    import echarts from 'lib/echarts.min.js';\r\n    import StatisticsService from '@service/statistics';\r\n    import {\r\n        formatNumber,\r\n    } from '@utils/assist';\r\n    import CardLayout from '../card-layout';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            CardLayout,\r\n        },\r\n        filters: {\r\n            formatNumber (value) {\r\n                return formatNumber(value);\r\n            },\r\n        },\r\n        props: {\r\n            date: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: true,\r\n                data: {\r\n                    DB: 0,\r\n                    LINUX: 0,\r\n                    WINDOWS: 0,\r\n                },\r\n            };\r\n        },\r\n        watch: {\r\n            date () {\r\n                this.fetchData();\r\n            },\r\n        },\r\n        mounted () {\r\n            this.fetchData();\r\n        },\r\n        methods: {\r\n            fetchData () {\r\n                this.isLoading = true;\r\n                StatisticsService.fetchDistributionMetrics({\r\n                    date: this.date,\r\n                    metric: 'ACCOUNT_TYPE',\r\n                }).then((data) => {\r\n                    this.data = data.labelAmountMap;\r\n                    this.init();\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            init () {\r\n                const typeList = [\r\n                    'LINUX',\r\n                    'WINDOWS',\r\n                    'DB',\r\n                ];\r\n                \r\n                typeList.forEach((typeItem) => {\r\n                    if (!this.$refs.LINUX) {\r\n                        return;\r\n                    }\r\n                    const other = typeList.reduce((result, item) => {\r\n                        if (item === typeItem) {\r\n                            return result;\r\n                        }\r\n                        return result + this.data[item];\r\n                    }, 0);\r\n\r\n                    const myChart = echarts.init(this.$refs[typeItem]);\r\n                    myChart.setOption({\r\n                        series: [\r\n                            {\r\n                                type: 'pie',\r\n                                radius: [\r\n                                    '8',\r\n                                    '12',\r\n                                ],\r\n                                hoverOffset: 0,\r\n                                label: {\r\n                                    show: false,\r\n                                },\r\n                                data: [\r\n                                    {\r\n                                        value: this.data[typeItem],\r\n                                        itemStyle: {\r\n                                            color: '#85CCA8',\r\n                                        },\r\n                                    },\r\n                                    {\r\n                                        value: other,\r\n                                        itemStyle: {\r\n                                            color: '#EBECF0',\r\n                                        },\r\n                                        emphasis: {\r\n                                            itemStyle: {\r\n                                                color: '#F0F1F5',\r\n                                            },\r\n                                        },\r\n                                    },\r\n                                ],\r\n                            },\r\n                        ],\r\n                    });\r\n                });\r\n            },\r\n            calcPercentage (value) {\r\n                const total = parseInt(this.data.DB, 10)\r\n                    + parseInt(this.data.LINUX, 10) + parseInt(this.data.WINDOWS, 10);\r\n                if (!total) {\r\n                    return '0 %';\r\n                }\r\n                return `${Math.round(value / total * 100).toFixed(2)} %`;\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    @import \"@/css/mixins/media\";\r\n\r\n    .account-dashboard {\r\n        .dashboard-card-layout {\r\n            border: none;\r\n\r\n            &:nth-child(n+2) {\r\n                border-top: 1px solid #f0f1f5;\r\n            }\r\n\r\n            @media (--huge-viewports) {\r\n                width: 400px;\r\n            }\r\n\r\n            @media (--large-viewports) {\r\n                width: 300px;\r\n            }\r\n\r\n            @media (--medium-viewports) {\r\n                width: 280px;\r\n            }\r\n\r\n            @media (--small-viewports) {\r\n                width: 260px;\r\n            }\r\n        }\r\n\r\n        .item-content {\r\n            position: relative;\r\n            display: flex;\r\n            align-items: center;\r\n            font-size: 24px;\r\n            font-weight: bold;\r\n            line-height: 32px;\r\n            color: #63656e;\r\n\r\n            .dashboard {\r\n                margin-left: 10px;\r\n            }\r\n        }\r\n\r\n        .type-flag {\r\n            position: absolute;\r\n            right: 24px;\r\n            bottom: 24px;\r\n            color: #e5e6eb;\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <card-layout\r\n        class=\"execute-total-dashboard\"\r\n        :title=\"'累计任务执行次数'\">\r\n        <render-trend\r\n            metric=\"EXECUTED_TASK_COUNT\"\r\n            :date=\"date\" />\r\n        <div slot=\"extend\">\r\n            <Icon\r\n                type=\"line-chart-line\"\r\n                v-bk-tooltips=\"'查看趋势图'\"\r\n                @click=\"handleShowTrend\" />\r\n            <Icon\r\n                type=\"table-line\"\r\n                v-bk-tooltips=\"'查看列表'\"\r\n                @click=\"handleShowList\" />\r\n        </div>\r\n        <trend-dialog\r\n            v-model=\"isShowTrend\"\r\n            metric=\"EXECUTED_TASK_COUNT\"\r\n            :title=\"'累计任务执行次数趋势图'\"\r\n            :name=\"'累计任务执行次数'\"\r\n            :date=\"date\" />\r\n        <lower-component level=\"custom\" :custom=\"isShowList\">\r\n            <jb-dialog\r\n                v-model=\"isShowList\"\r\n                :title=\"'累计任务执行次数列表'\"\r\n                :width=\"520\"\r\n                :show-footer=\"false\"\r\n                header-position=\"left\">\r\n                <div style=\"margin-top: 12px;\" v-bkloading=\"{ isLoading }\">\r\n                    <bk-table :data=\"listData\" :max-height=\"420\">\r\n                        <bk-table-column\r\n                            :label=\"'业务名'\"\r\n                            prop=\"appName\"\r\n                            key=\"appName\"\r\n                            align=\"left\" />\r\n                        <bk-table-column\r\n                            :label=\"'执行数'\"\r\n                            prop=\"value\"\r\n                            key=\"value\"\r\n                            align=\"left\" />\r\n                        <bk-table-column\r\n                            :label=\"'占比'\"\r\n                            prop=\"ratio\"\r\n                            key=\"ratio\"\r\n                            align=\"left\" />\r\n                    </bk-table>\r\n                </div>\r\n            </jb-dialog>\r\n        </lower-component>\r\n    </card-layout>\r\n</template>\r\n<script>\r\n    import StatisticsService from '@service/statistics';\r\n    import CardLayout from '../card-layout';\r\n    import RenderTrend from '../common/render-trend';\r\n    import TrendDialog from '../common/trend-dialog';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            CardLayout,\r\n            RenderTrend,\r\n            TrendDialog,\r\n        },\r\n        props: {\r\n            date: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: true,\r\n                isShowTrend: false,\r\n                isShowList: false,\r\n                listData: [],\r\n            };\r\n        },\r\n        methods: {\r\n            handleShowTrend () {\r\n                this.isShowTrend = true;\r\n            },\r\n            handleShowList () {\r\n                this.isShowList = true;\r\n                this.isLoading = true;\r\n                StatisticsService.fetchListByPerAppMetrics({\r\n                    metric: 'EXECUTED_TASK_COUNT',\r\n                }).then((data) => {\r\n                    this.listData = Object.freeze(data);\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .execute-total-dashboard {\r\n        .wraper {\r\n            display: flex;\r\n            flex-direction: column;\r\n            margin-right: auto;\r\n            font-size: 12px;\r\n            line-height: 16px;\r\n            color: #babcc2;\r\n\r\n            .total {\r\n                height: 32px;\r\n                font-size: 24px;\r\n                font-weight: bold;\r\n                line-height: 32px;\r\n                color: #63656e;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <card-layout class=\"execute-fail-dashboard\" :title=\"'累计执行失败次数'\">\r\n        <render-trend metric=\"FAILED_TASK_COUNT\" :date=\"date\" />\r\n        <div slot=\"extend\">\r\n            <Icon\r\n                type=\"line-chart-line\"\r\n                v-bk-tooltips=\"'查看趋势图'\"\r\n                @click=\"handleShowTrend\" />\r\n            <Icon\r\n                type=\"table-line\"\r\n                v-bk-tooltips=\"'查看列表'\"\r\n                @click=\"handleShowList\" />\r\n        </div>\r\n        <trend-dialog\r\n            v-model=\"isShowTrend\"\r\n            metric=\"FAILED_TASK_COUNT\"\r\n            :title=\"'累计执行失败次数趋势图'\"\r\n            :name=\"'累计执行失败次数'\"\r\n            :date=\"date\" />\r\n        <lower-component level=\"custom\" :custom=\"isShowList\">\r\n            <jb-dialog\r\n                v-model=\"isShowList\"\r\n                :title=\"'累计执行失败次数列表'\"\r\n                :width=\"520\"\r\n                :show-footer=\"false\"\r\n                header-position=\"left\">\r\n                <div style=\"margin-top: 12px;\" v-bkloading=\"{ isLoading, opacity: 0.8 }\">\r\n                    <bk-table :data=\"listData\" :max-height=\"420\">\r\n                        <bk-table-column\r\n                            :label=\"'业务名'\"\r\n                            prop=\"appName\"\r\n                            key=\"appName\"\r\n                            align=\"left\" />\r\n                        <bk-table-column\r\n                            :label=\"'失败次数'\"\r\n                            prop=\"value\"\r\n                            key=\"value\"\r\n                            align=\"left\" />\r\n                        <bk-table-column\r\n                            :label=\"'占比'\"\r\n                            prop=\"ratio\"\r\n                            key=\"ratio\"\r\n                            align=\"left\" />\r\n                    </bk-table>\r\n                </div>\r\n            </jb-dialog>\r\n        </lower-component>\r\n    </card-layout>\r\n</template>\r\n<script>\r\n    import StatisticsService from '@service/statistics';\r\n    import CardLayout from '../card-layout';\r\n    import RenderTrend from '../common/render-trend';\r\n    import TrendDialog from '../common/trend-dialog';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            CardLayout,\r\n            RenderTrend,\r\n            TrendDialog,\r\n        },\r\n        props: {\r\n            date: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: true,\r\n                isShowTrend: false,\r\n                isShowList: false,\r\n                listData: [],\r\n            };\r\n        },\r\n        methods: {\r\n            handleShowTrend () {\r\n                this.isShowTrend = true;\r\n            },\r\n            handleShowList () {\r\n                this.isShowList = true;\r\n                this.isLoading = true;\r\n                StatisticsService.fetchListByPerAppMetrics({\r\n                    metric: 'FAILED_TASK_COUNT',\r\n                }).then((data) => {\r\n                    this.listData = Object.freeze(data);\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .execute-fail-dashboard {\r\n        .wraper {\r\n            display: flex;\r\n            flex-direction: column;\r\n            margin-right: auto;\r\n            font-size: 12px;\r\n            line-height: 16px;\r\n            color: #babcc2;\r\n\r\n            .total {\r\n                height: 32px;\r\n                font-size: 24px;\r\n                font-weight: bold;\r\n                line-height: 32px;\r\n                color: #63656e;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <div class=\"execute-statistics-dashboard\">\r\n        <div class=\"header-action\">\r\n            <div class=\"type-tab\">\r\n                <template v-if=\"!isDrillDown\">\r\n                    <div\r\n                        class=\"tab-item\"\r\n                        :class=\"{\r\n                            active: dimension === 'TASK_STARTUP_MODE',\r\n                        }\"\r\n                        @click=\"handleDimensionChange('TASK_STARTUP_MODE')\">\r\n                        {{ '按渠道统计' }}\r\n                    </div>\r\n                    <div\r\n                        class=\"tab-item\"\r\n                        :class=\"{\r\n                            active: dimension === 'TASK_TYPE',\r\n                        }\"\r\n                        @click=\"handleDimensionChange('TASK_TYPE')\">\r\n                        {{ '按类型统计' }}\r\n                    </div>\r\n                    <div\r\n                        class=\"tab-item\"\r\n                        :class=\"{\r\n                            active: dimension === 'TASK_TIME_CONSUMING',\r\n                        }\"\r\n                        @click=\"handleDimensionChange('TASK_TIME_CONSUMING')\">\r\n                        {{ '按执行耗时统计' }}\r\n                    </div>\r\n                </template>\r\n                <div v-if=\"isDrillDown\" class=\"tab-back\">\r\n                    <span class=\"tab-back-action\" @click=\"handleDimensionBack\">\r\n                        <Icon type=\"back1\" />\r\n                        {{ '返回' }}\r\n                    </span>\r\n                    <span>{{ '类型统计' }}</span>\r\n                </div>\r\n            </div>\r\n            <div class=\"time-tab\">\r\n                <div\r\n                    class=\"tab-item\"\r\n                    :class=\"{ active: days === 7 }\"\r\n                    @click=\"handleDaysChange(7)\">\r\n                    {{ '7 天内' }}\r\n                </div>\r\n                <div\r\n                    class=\"tab-item\"\r\n                    :class=\"{ active: days === 14 }\"\r\n                    @click=\"handleDaysChange(14)\">\r\n                    {{ '14 天内' }}\r\n                </div>\r\n                <div\r\n                    class=\"tab-item\"\r\n                    :class=\"{ active: days === 30 }\"\r\n                    @click=\"handleDaysChange(30)\">\r\n                    {{ '30 天内' }}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div v-bkloading=\"{ isLoading, opacity: 0.8 }\">\r\n            <div ref=\"dashboard\" style=\"width: 100%; height: 325px;\" />\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n/* eslint-disable max-len */\r\n    import _ from 'lodash';\r\n       import StatisticsService from '@service/statistics';\r\n    import echarts from 'lib/echarts.min.js';\r\n    import {\r\n        formatNumber,\r\n        prettyDateFormat,\r\n    } from '@utils/assist';\r\n    import {\r\n        chartsOptionsBase,\r\n    } from '../common/assist';\r\n\r\n    const tooltipFormatter = (params) => {\r\n        const generatorHtml = (data) => {\r\n            const {\r\n                seriesType,\r\n                seriesName,\r\n                color,\r\n                value,\r\n            } = data;\r\n            \r\n            if (seriesType === 'bar') {\r\n                return `\r\n                    <tr>\r\n                        <td style=\"padding-right: 24px; vertical-align: middle;\">\r\n                            <span style=\"display: inline-block; width: 8px; height: 8px; background: ${color}\"></span>\r\n                            <span>${seriesName}</span>\r\n                        </td>\r\n                        <td style=\"text-align: right\">${value}</td>\r\n                    </tr>\r\n                `;\r\n            } else if (seriesType === 'line') {\r\n                return `\r\n                    <tr>\r\n                        <td style=\"padding-right: 24px; vertical-align: middle;\">\r\n                            <span style=\"display: inline-block; width: 8px; height: 8px; border-radius: 50%; background: ${color}\"></span>\r\n                            <span>${seriesName}</span>\r\n                        </td>\r\n                        <td style=\"text-align: right\">${value}</td>\r\n                    </tr>\r\n                `;\r\n            }\r\n        };\r\n        let paramsArr = [];\r\n        if (Object.prototype.toString.call(params) === '[object Object]') {\r\n            paramsArr = [\r\n                params,\r\n            ];\r\n        } else {\r\n            paramsArr = params;\r\n        }\r\n        \r\n        return `<table>${paramsArr.map(generatorHtml).join('')}</table>`;\r\n    };\r\n\r\n    export default {\r\n        name: '',\r\n        props: {\r\n            date: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: false,\r\n                dimension: '',\r\n                days: 7,\r\n                isDrillDown: false,\r\n            };\r\n        },\r\n        watch: {\r\n            date () {\r\n                this.handleDaysChange(this.days);\r\n            },\r\n        },\r\n        mounted () {\r\n            // 下钻的作业类型\r\n            this.drillDowntaskType = '';\r\n\r\n            this.myChart = echarts.init(this.$refs.dashboard);\r\n            this.myChart.on('click', (target) => {\r\n                if ([\r\n                    'EXECUTED_FAST_SCRIPT',\r\n                    'EXECUTED_FAST_FILE',\r\n                ].includes(target.seriesId)) {\r\n                    this.handleTaskTypeChange(target.seriesId);\r\n                }\r\n            });\r\n            \r\n            const resize = _.throttle(() => {\r\n                this.myChart.resize();\r\n            }, 300);\r\n            window.addEventListener('resize', resize);\r\n            this.$once('hook:beforeDestroy', () => {\r\n                window.removeEventListener('resize', resize);\r\n            });\r\n            this.handleDimensionChange('TASK_STARTUP_MODE');\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 按渠道统计\r\n             * @param {Array} data 数据\r\n             */\r\n            initTaskStartupMode (data) {\r\n                const dateList = [];\r\n                const normalList = [];\r\n                const cronList = [];\r\n                const apiList = [];\r\n                const failList = [];\r\n                const totalList = [];\r\n                data.forEach((item) => {\r\n                    const {\r\n                        date,\r\n                        distribution,\r\n                        failCount,\r\n                    } = item;\r\n                    dateList.push(date);\r\n                    const {\r\n                        API,\r\n                        CRON,\r\n                        NORMAL,\r\n                    } = distribution.labelAmountMap;\r\n                    \r\n                    apiList.push(API);\r\n                    cronList.push(CRON);\r\n                    normalList.push(NORMAL);\r\n                    failList.push(failCount);\r\n                    totalList.push(API + CRON + NORMAL);\r\n                });\r\n\r\n                this.myChart.clear();\r\n                this.myChart.setOption({\r\n                    ...chartsOptionsBase,\r\n                    legend: {\r\n                        data: [\r\n                            '页面执行',\r\n                            'API 调用',\r\n                            '定时执行',\r\n                            {\r\n                                name: '执行次数',\r\n                                icon: 'circle',\r\n                            },\r\n                            {\r\n                                name: '执行失败次数',\r\n                                icon: 'circle',\r\n                            },\r\n                        ],\r\n                        bottom: '0',\r\n                        icon: 'rect',\r\n                        itemWidth: 8,\r\n                        itemHeight: 8,\r\n                        itemGap: 40,\r\n                    },\r\n                    tooltip: {\r\n                        trigger: 'axis',\r\n                        axisPointer: {\r\n                            type: 'line',\r\n                            lineStyle: {\r\n                                width: 30,\r\n                                color: '#63656E',\r\n                                opacity: 0.16,\r\n                            },\r\n                        },\r\n                        formatter: tooltipFormatter,\r\n                        backgroundColor: 'rgba(0,0,0,0.8)',\r\n                    },\r\n                    grid: {\r\n                        top: 45,\r\n                        left: 40,\r\n                        right: 0,\r\n                        bottom: 48,\r\n                        containLabel: true,\r\n                    },\r\n                    xAxis: [\r\n                        {\r\n                            type: 'category',\r\n                            axisLine: {\r\n                                lineStyle: {\r\n                                    color: '#DCDEE5',\r\n                                },\r\n                            },\r\n                            axisTick: {\r\n                                show: false,\r\n                            },\r\n                            axisLabel: {\r\n                                color: '#979BA5',\r\n                                margin: 18,\r\n                            },\r\n                            data: dateList,\r\n                        },\r\n                    ],\r\n                    yAxis: {\r\n                        type: 'value',\r\n                        name: '执行数',\r\n                        nameLocation: 'middle',\r\n                        nameTextStyle: {\r\n                            color: '#63656E',\r\n                        },\r\n                        nameGap: 50,\r\n                        axisLine: {\r\n                            show: false,\r\n                        },\r\n                        axisTick: {\r\n                            show: false,\r\n                        },\r\n                        axisLabel: {\r\n                            color: '#979BA5',\r\n                            formatter: value => formatNumber(value, true),\r\n                        },\r\n                        splitLine: {\r\n                            lineStyle: {\r\n                                color: '#F0F1F5',\r\n                            },\r\n                        },\r\n                    },\r\n                    series: [\r\n                        {\r\n                            name: '页面执行',\r\n                            type: 'bar',\r\n                            stack: 'bar',\r\n                            barWidth: 20,\r\n                            data: normalList,\r\n                            itemStyle: {\r\n                                color: '#D4E6C1',\r\n                            },\r\n                        },\r\n                        {\r\n                            name: 'API 调用',\r\n                            type: 'bar',\r\n                            stack: 'bar',\r\n                            barWidth: 20,\r\n                            data: apiList,\r\n                            itemStyle: {\r\n                                color: '#85CCA8',\r\n                            },\r\n                        },\r\n                        {\r\n                            name: '定时执行',\r\n                            type: 'bar',\r\n                            stack: 'bar',\r\n                            barWidth: 20,\r\n                            data: cronList,\r\n                            itemStyle: {\r\n                                color: '#3786AD',\r\n                            },\r\n                        },\r\n                        {\r\n                            name: '执行次数',\r\n                            type: 'line',\r\n                            data: totalList,\r\n                            itemStyle: {\r\n                                color: '#FFD695',\r\n                            },\r\n                        },\r\n                        {\r\n                            name: '执行失败次数',\r\n                            type: 'line',\r\n                            data: failList,\r\n                            itemStyle: {\r\n                                color: '#FF5656',\r\n                            },\r\n                        },\r\n                    ],\r\n                });\r\n            },\r\n            /**\r\n             * @desc 按任务类型统计\r\n             * @param {Array} data 数据\r\n             */\r\n            initTaskType (data) {\r\n                const dateList = [];\r\n                const fastPushFileList = [];\r\n                const fastExecuteScriptList = [];\r\n                const executeTaskList = [];\r\n                const failList = [];\r\n                data.forEach((item) => {\r\n                    const {\r\n                        date,\r\n                        distribution,\r\n                        failCount,\r\n                    } = item;\r\n                    dateList.push(date);\r\n                    const {\r\n                        EXECUTE_TASK,\r\n                        FAST_EXECUTE_SCRIPT,\r\n                        FAST_PUSH_FILE,\r\n                    } = distribution.labelAmountMap;\r\n                    \r\n                    executeTaskList.push(EXECUTE_TASK);\r\n                    fastExecuteScriptList.push(FAST_EXECUTE_SCRIPT);\r\n                    fastPushFileList.push(FAST_PUSH_FILE);\r\n                    failList.push(failCount);\r\n                });\r\n\r\n                this.myChart.clear();\r\n                this.myChart.setOption({\r\n                    ...chartsOptionsBase,\r\n                    legend: {\r\n                        data: [\r\n                            '快速执行脚本',\r\n                            '快速分发文件',\r\n                            '作业执行',\r\n                            {\r\n                                name: '执行失败次数',\r\n                                icon: 'circle',\r\n                            },\r\n                        ],\r\n                        bottom: '0',\r\n                        icon: 'rect',\r\n                        itemWidth: 8,\r\n                        itemHeight: 8,\r\n                        itemGap: 40,\r\n                    },\r\n                    tooltip: {\r\n                        trigger: 'item',\r\n                        backgroundColor: 'rgba(0,0,0,0.8)',\r\n                        formatter: tooltipFormatter,\r\n                    },\r\n                    grid: {\r\n                        top: 45,\r\n                        left: 40,\r\n                        right: 0,\r\n                        bottom: 48,\r\n                        containLabel: true,\r\n                    },\r\n                    xAxis: [\r\n                        {\r\n                            type: 'category',\r\n                            axisLine: {\r\n                                lineStyle: {\r\n                                    color: '#DCDEE5',\r\n                                },\r\n                            },\r\n                            axisTick: {\r\n                                show: false,\r\n                            },\r\n                            axisLabel: {\r\n                                color: '#979BA5',\r\n                                margin: 18,\r\n                            },\r\n                            data: dateList,\r\n                        },\r\n                    ],\r\n                    yAxis: {\r\n                        type: 'value',\r\n                        name: '执行数',\r\n                        nameLocation: 'middle',\r\n                        nameTextStyle: {\r\n                            color: '#63656E',\r\n                        },\r\n                        nameGap: 50,\r\n                        axisLine: {\r\n                            show: false,\r\n                        },\r\n                        axisTick: {\r\n                            show: false,\r\n                        },\r\n                        axisLabel: {\r\n                            color: '#979BA5',\r\n                            formatter: value => formatNumber(value, true),\r\n                        },\r\n                        splitLine: {\r\n                            lineStyle: {\r\n                                color: '#F0F1F5',\r\n                            },\r\n                        },\r\n                    },\r\n                    series: [\r\n                        {\r\n                            id: 'EXECUTED_FAST_SCRIPT',\r\n                            name: '快速执行脚本',\r\n                            type: 'bar',\r\n                            stack: 'bar',\r\n                            barWidth: 20,\r\n                            data: fastExecuteScriptList,\r\n                            itemStyle: {\r\n                                color: '#D4E6C1',\r\n                            },\r\n                        },\r\n                        {\r\n                            id: 'EXECUTED_FAST_FILE',\r\n                            name: '快速分发文件',\r\n                            type: 'bar',\r\n                            stack: 'bar',\r\n                            barWidth: 20,\r\n                            data: fastPushFileList,\r\n                            itemStyle: {\r\n                                color: '#85CCA8',\r\n                            },\r\n                        },\r\n                        {\r\n                            id: 'EXECUTE_TASK',\r\n                            name: '作业执行',\r\n                            type: 'bar',\r\n                            stack: 'bar',\r\n                            barWidth: 20,\r\n                            data: executeTaskList,\r\n                            itemStyle: {\r\n                                color: '#3786AD',\r\n                            },\r\n                        },\r\n                        {\r\n                            name: '执行失败次数',\r\n                            type: 'line',\r\n                            data: failList,\r\n                            itemStyle: {\r\n                                color: '#FF5656',\r\n                            },\r\n                        },\r\n                    ],\r\n                });\r\n            },\r\n            /**\r\n             * @desc 按执行耗时统计\r\n             * @param {Array} data 数据\r\n             */\r\n            initTaskTimeConsuming (data) {\r\n                const dateList = [];\r\n                const overTenMinList = [];\r\n                const oneMinToTenMinList = [];\r\n                const lessThanOneMinList = [];\r\n                const failList = [];\r\n                data.forEach((item) => {\r\n                    const {\r\n                        date,\r\n                        distribution,\r\n                        failCount,\r\n                    } = item;\r\n                    dateList.push(date);\r\n                    const {\r\n                        LESS_THAN_ONE_MIN,\r\n                        ONE_MIN_TO_TEN_MIN,\r\n                        OVER_TEN_MIN,\r\n                    } = distribution.labelAmountMap;\r\n\r\n                    lessThanOneMinList.push(LESS_THAN_ONE_MIN);\r\n                    oneMinToTenMinList.push(ONE_MIN_TO_TEN_MIN);\r\n                    overTenMinList.push(OVER_TEN_MIN);\r\n                    failList.push(failCount);\r\n                });\r\n\r\n                this.myChart.clear();\r\n                this.myChart.setOption({\r\n                    ...chartsOptionsBase,\r\n                    legend: {\r\n                        data: [\r\n                            '≥ 10分钟',\r\n                            '1~10分钟以内（包含10分钟）',\r\n                            '1分钟以内（包含1分钟）',\r\n                            {\r\n                                name: '执行失败次数',\r\n                                icon: 'circle',\r\n                            },\r\n                        ],\r\n                        bottom: '0',\r\n                        icon: 'rect',\r\n                        itemWidth: 8,\r\n                        itemHeight: 8,\r\n                        itemGap: 40,\r\n                    },\r\n                    tooltip: {\r\n                        trigger: 'axis',\r\n                        axisPointer: {\r\n                            type: 'line',\r\n                            lineStyle: {\r\n                                width: 30,\r\n                                color: '#63656E',\r\n                                opacity: 0.16,\r\n                            },\r\n                        },\r\n                        formatter: tooltipFormatter,\r\n                        backgroundColor: 'rgba(0,0,0,0.8)',\r\n                    },\r\n                    grid: {\r\n                        top: 45,\r\n                        left: 40,\r\n                        right: 0,\r\n                        bottom: 48,\r\n                        containLabel: true,\r\n                    },\r\n                    xAxis: [\r\n                        {\r\n                            type: 'category',\r\n                            axisLine: {\r\n                                lineStyle: {\r\n                                    color: '#DCDEE5',\r\n                                },\r\n                            },\r\n                            axisTick: {\r\n                                show: false,\r\n                            },\r\n                            axisLabel: {\r\n                                color: '#979BA5',\r\n                                margin: 18,\r\n                            },\r\n                            data: dateList,\r\n                        },\r\n                    ],\r\n                    yAxis: {\r\n                        type: 'value',\r\n                        name: '执行数',\r\n                        nameLocation: 'middle',\r\n                        nameTextStyle: {\r\n                            color: '#63656E',\r\n                        },\r\n                        nameGap: 50,\r\n                        axisLine: {\r\n                            show: false,\r\n                        },\r\n                        axisTick: {\r\n                            show: false,\r\n                        },\r\n                        axisLabel: {\r\n                            color: '#979BA5',\r\n                            formatter: value => formatNumber(value, true),\r\n                        },\r\n                        splitLine: {\r\n                            lineStyle: {\r\n                                color: '#F0F1F5',\r\n                            },\r\n                        },\r\n                    },\r\n                    series: [\r\n                        {\r\n                            name: '≥ 10分钟',\r\n                            type: 'bar',\r\n                            stack: 'bar',\r\n                            barWidth: 20,\r\n                            data: overTenMinList,\r\n                            itemStyle: {\r\n                                color: '#D4E6C1',\r\n                            },\r\n                        },\r\n                        {\r\n                            name: '1~10分钟以内（包含10分钟）',\r\n                            type: 'bar',\r\n                            stack: 'bar',\r\n                            barWidth: 20,\r\n                            data: oneMinToTenMinList,\r\n                            itemStyle: {\r\n                                color: '#85CCA8',\r\n                            },\r\n                        },\r\n                        {\r\n                            name: '1分钟以内（包含1分钟）',\r\n                            type: 'bar',\r\n                            stack: 'bar',\r\n                            barWidth: 20,\r\n                            data: lessThanOneMinList,\r\n                            itemStyle: {\r\n                                color: '#3786AD',\r\n                            },\r\n                        },\r\n                        {\r\n                            name: '执行失败次数',\r\n                            type: 'line',\r\n                            data: failList,\r\n                            itemStyle: {\r\n                                color: '#FF5656',\r\n                            },\r\n                        },\r\n                    ],\r\n                });\r\n            },\r\n            /**\r\n             * @desc 任务类型快速执行脚本下钻统计\r\n             * @param {Array} data 数据\r\n             *\r\n             */\r\n            initExecutedFastScriptDrillDown (data) {\r\n                const dateList = [];\r\n                const BatList = [];\r\n                const PerlList = [];\r\n                const PowerShellList = [];\r\n                const PythonList = [];\r\n                const ShellList = [];\r\n                const SQLList = [];\r\n                const failList = [];\r\n\r\n                data.forEach((item) => {\r\n                    const {\r\n                        date,\r\n                        distribution,\r\n                        failCount,\r\n                    } = item;\r\n                    dateList.push(date);\r\n                    const {\r\n                        bat,\r\n                        perl,\r\n                        powershell,\r\n                        python,\r\n                        shell,\r\n                        sql,\r\n                    } = distribution.labelAmountMap;\r\n\r\n                    BatList.push(bat);\r\n                    PerlList.push(perl);\r\n                    PowerShellList.push(powershell);\r\n                    PythonList.push(python);\r\n                    ShellList.push(shell);\r\n                    SQLList.push(sql);\r\n                    failList.push(failCount);\r\n                });\r\n\r\n                this.myChart.clear();\r\n                this.myChart.setOption({\r\n                    ...chartsOptionsBase,\r\n                    legend: {\r\n                        data: [\r\n                            'Bat',\r\n                            'Perl',\r\n                            'Python',\r\n                            'Shell',\r\n                            'PowerShell',\r\n                            'SQL',\r\n                            {\r\n                                name: '执行失败次数',\r\n                                icon: 'circle',\r\n                            },\r\n                        ],\r\n                        bottom: '0',\r\n                        icon: 'rect',\r\n                        itemWidth: 8,\r\n                        itemHeight: 8,\r\n                        itemGap: 40,\r\n                    },\r\n                    tooltip: {\r\n                        trigger: 'axis',\r\n                        axisPointer: {\r\n                            type: 'line',\r\n                            lineStyle: {\r\n                                width: 30,\r\n                                color: '#F5F6FA',\r\n                                opacity: 0.5,\r\n                            },\r\n                        },\r\n                        formatter: tooltipFormatter,\r\n                        backgroundColor: 'rgba(0,0,0,0.8)',\r\n                    },\r\n                    grid: {\r\n                        top: 45,\r\n                        left: 40,\r\n                        right: 0,\r\n                        bottom: 48,\r\n                        containLabel: true,\r\n                    },\r\n                    xAxis: [\r\n                        {\r\n                            type: 'category',\r\n                            axisLine: {\r\n                                lineStyle: {\r\n                                    color: '#DCDEE5',\r\n                                },\r\n                            },\r\n                            axisTick: {\r\n                                show: false,\r\n                            },\r\n                            axisLabel: {\r\n                                color: '#979BA5',\r\n                                margin: 18,\r\n                            },\r\n                            data: dateList,\r\n                        },\r\n                    ],\r\n                    yAxis: {\r\n                        type: 'value',\r\n                        name: '执行数',\r\n                        nameLocation: 'middle',\r\n                        nameTextStyle: {\r\n                            color: '#63656E',\r\n                        },\r\n                        nameGap: 50,\r\n                        axisLine: {\r\n                            show: false,\r\n                        },\r\n                        axisTick: {\r\n                            show: false,\r\n                        },\r\n                        axisLabel: {\r\n                            color: '#979BA5',\r\n                            formatter: value => formatNumber(value, true),\r\n                        },\r\n                        splitLine: {\r\n                            lineStyle: {\r\n                                color: '#F0F1F5',\r\n                            },\r\n                        },\r\n                    },\r\n                    series: [\r\n                        {\r\n                            name: 'Bat',\r\n                            type: 'bar',\r\n                            stack: 'bar',\r\n                            barWidth: 20,\r\n                            data: BatList,\r\n                            itemStyle: {\r\n                                color: '#2E2E99',\r\n                            },\r\n                        },\r\n                        {\r\n                            name: 'Perl',\r\n                            type: 'bar',\r\n                            stack: 'bar',\r\n                            barWidth: 20,\r\n                            data: PerlList,\r\n                            itemStyle: {\r\n                                color: '#366FA8',\r\n                            },\r\n                        },\r\n                        {\r\n                            name: 'Python',\r\n                            type: 'bar',\r\n                            stack: 'bar',\r\n                            barWidth: 20,\r\n                            data: PythonList,\r\n                            itemStyle: {\r\n                                color: '#5EADAD',\r\n                            },\r\n                        },\r\n                        {\r\n                            name: 'Shell',\r\n                            type: 'bar',\r\n                            stack: 'bar',\r\n                            barWidth: 20,\r\n                            data: ShellList,\r\n                            itemStyle: {\r\n                                color: '#85CCA8',\r\n                            },\r\n                        },\r\n                        {\r\n                            name: 'PowerShell',\r\n                            type: 'bar',\r\n                            stack: 'bar',\r\n                            barWidth: 20,\r\n                            data: PowerShellList,\r\n                            itemStyle: {\r\n                                color: '#BCEBBC',\r\n                            },\r\n                        },\r\n                        {\r\n                            name: 'SQL',\r\n                            type: 'bar',\r\n                            stack: 'bar',\r\n                            barWidth: 20,\r\n                            data: SQLList,\r\n                            itemStyle: {\r\n                                color: '#E7F5D7',\r\n                            },\r\n                        },\r\n                        {\r\n                            name: '执行失败次数',\r\n                            type: 'line',\r\n                            data: failList,\r\n                            itemStyle: {\r\n                                color: '#FF5656',\r\n                            },\r\n                        },\r\n                    ],\r\n                });\r\n            },\r\n            /**\r\n             * @desc 任务类型快速分发文件下钻统计\r\n             * @param {Array} data 数据\r\n             *\r\n             */\r\n            initExecutedFastFileDrillDown (data) {\r\n                const dateList = [];\r\n                const forceList = [];\r\n                const strictList = [];\r\n                const failList = [];\r\n                data.forEach((item) => {\r\n                    const {\r\n                        date,\r\n                        distribution,\r\n                        failCount,\r\n                    } = item;\r\n                    dateList.push(date);\r\n                    const {\r\n                        FORCE,\r\n                        STRICT,\r\n                    } = distribution.labelAmountMap;\r\n\r\n                    strictList.push(STRICT);\r\n                    forceList.push(FORCE);\r\n                    failList.push(failCount);\r\n                });\r\n\r\n                this.myChart.clear();\r\n                this.myChart.setOption({\r\n                    ...chartsOptionsBase,\r\n                    legend: {\r\n                        data: [\r\n                            '强制模式',\r\n                            '严谨模式',\r\n                            {\r\n                                name: '执行失败次数',\r\n                                icon: 'circle',\r\n                            },\r\n                        ],\r\n                        bottom: '0',\r\n                        icon: 'rect',\r\n                        itemWidth: 8,\r\n                        itemHeight: 8,\r\n                        itemGap: 40,\r\n                    },\r\n                    tooltip: {\r\n                        trigger: 'axis',\r\n                        axisPointer: {\r\n                            type: 'line',\r\n                            lineStyle: {\r\n                                width: 30,\r\n                                color: '#F5F6FA',\r\n                                opacity: 0.5,\r\n                            },\r\n                        },\r\n                        formatter: tooltipFormatter,\r\n                        backgroundColor: 'rgba(0,0,0,0.8)',\r\n                    },\r\n                    grid: {\r\n                        top: 45,\r\n                        left: 40,\r\n                        right: 0,\r\n                        bottom: 48,\r\n                        containLabel: true,\r\n                    },\r\n                    xAxis: [\r\n                        {\r\n                            type: 'category',\r\n                            axisLine: {\r\n                                lineStyle: {\r\n                                    color: '#DCDEE5',\r\n                                },\r\n                            },\r\n                            axisTick: {\r\n                                show: false,\r\n                            },\r\n                            axisLabel: {\r\n                                color: '#979BA5',\r\n                                margin: 18,\r\n                            },\r\n                            data: dateList,\r\n                        },\r\n                    ],\r\n                    yAxis: {\r\n                        type: 'value',\r\n                        name: '执行数',\r\n                        nameLocation: 'middle',\r\n                        nameTextStyle: {\r\n                            color: '#63656E',\r\n                        },\r\n                        nameGap: 50,\r\n                        axisLine: {\r\n                            show: false,\r\n                        },\r\n                        axisTick: {\r\n                            show: false,\r\n                        },\r\n                        axisLabel: {\r\n                            color: '#979BA5',\r\n                            formatter: value => formatNumber(value, true),\r\n                        },\r\n                        splitLine: {\r\n                            lineStyle: {\r\n                                color: '#F0F1F5',\r\n                            },\r\n                        },\r\n                    },\r\n                    series: [\r\n                        {\r\n                            name: '强制模式',\r\n                            type: 'bar',\r\n                            stack: 'bar',\r\n                            barWidth: 20,\r\n                            data: forceList,\r\n                            itemStyle: {\r\n                                color: '#D4E6C1',\r\n                            },\r\n                        },\r\n                        {\r\n                            name: '严谨模式',\r\n                            type: 'bar',\r\n                            stack: 'bar',\r\n                            barWidth: 20,\r\n                            data: strictList,\r\n                            itemStyle: {\r\n                                color: '#85CCA8',\r\n                            },\r\n                        },\r\n                        {\r\n                            name: '执行失败次数',\r\n                            type: 'line',\r\n                            data: failList,\r\n                            itemStyle: {\r\n                                color: '#FF5656',\r\n                            },\r\n                        },\r\n                    ],\r\n                });\r\n            },\r\n            /**\r\n             * @desc 指标纬度\r\n             * @param {String} dimension 统计纬度\r\n             *\r\n             */\r\n            handleDimensionChange (dimension) {\r\n                this.isLoading = true;\r\n                this.dimension = dimension;\r\n                const actionMap = {\r\n                    TASK_STARTUP_MODE: this.initTaskStartupMode,\r\n                    TASK_TYPE: this.initTaskType,\r\n                    TASK_TIME_CONSUMING: this.initTaskTimeConsuming,\r\n                };\r\n                StatisticsService.fetchReourcesDimensions({\r\n                    resource: 'EXECUTED_TASK',\r\n                    dimension: this.dimension,\r\n                    startDate: prettyDateFormat(new Date(this.date) - parseInt(this.days, 10) * 86400000),\r\n                    endDate: this.date,\r\n                }).then((data) => {\r\n                    actionMap[this.dimension](data);\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 时间范围\r\n             * @param {String} days 统计纬度\r\n             *\r\n             */\r\n            handleDaysChange (days) {\r\n                this.days = days;\r\n                if (this.isDrillDown) {\r\n                    this.handleTaskTypeChange(this.drillDowntaskType);\r\n                } else {\r\n                    this.handleDimensionChange(this.dimension);\r\n                }\r\n            },\r\n            /**\r\n             * @desc 按类型统计，指标下钻\r\n             * @param {String} taskType 作业类型\r\n             *\r\n             */\r\n            handleTaskTypeChange (taskType) {\r\n                this.isLoading = true;\r\n                this.isDrillDown = true;\r\n                this.drillDowntaskType = taskType;\r\n                const dateParams = {\r\n                    startDate: prettyDateFormat(new Date(this.date) - parseInt(this.days, 10) * 86400000),\r\n                    endDate: this.date,\r\n                };\r\n                if (taskType === 'EXECUTED_FAST_SCRIPT') {\r\n                    StatisticsService.fetchReourcesDimensions({\r\n                        ...dateParams,\r\n                        dimension: 'SCRIPT_TYPE',\r\n                        resource: 'EXECUTED_FAST_SCRIPT',\r\n                    }).then((data) => {\r\n                        this.initExecutedFastScriptDrillDown(data);\r\n                    })\r\n                        .finally(() => {\r\n                            this.isLoading = false;\r\n                        });\r\n                } else {\r\n                    StatisticsService.fetchReourcesDimensions({\r\n                        ...dateParams,\r\n                        dimension: 'FILE_TRANSFER_MODE',\r\n                        resource: 'EXECUTED_FAST_FILE',\r\n                    }).then((data) => {\r\n                        this.initExecutedFastFileDrillDown(data);\r\n                    })\r\n                        .finally(() => {\r\n                            this.isLoading = false;\r\n                        });\r\n                }\r\n            },\r\n            /**\r\n             * @desc 返回按类型统计\r\n             *\r\n             */\r\n            handleDimensionBack () {\r\n                this.isDrillDown = false;\r\n                this.drillDowntaskType = '';\r\n                this.handleDimensionChange(this.dimension);\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    .execute-statistics-dashboard {\r\n        padding: 20px;\r\n\r\n        .header-action {\r\n            display: flex;\r\n            font-size: 12px;\r\n            color: #63656e;\r\n\r\n            .type-tab,\r\n            .time-tab {\r\n                display: flex;\r\n\r\n                .tab-item {\r\n                    height: 28px;\r\n                    padding: 0 16px;\r\n                    line-height: 28px;\r\n                    cursor: pointer;\r\n                    border-radius: 14px;\r\n                    transition: all 0.15s;\r\n\r\n                    &.active,\r\n                    &:hover {\r\n                        color: #3a84ff;\r\n                    }\r\n\r\n                    &.active {\r\n                        background: #ebf2ff;\r\n                    }\r\n                }\r\n            }\r\n\r\n            .type-tab {\r\n                .tab-item {\r\n                    margin-right: 8px;\r\n                }\r\n            }\r\n\r\n            .time-tab {\r\n                margin-left: auto;\r\n\r\n                .tab-item {\r\n                    margin-left: 8px;\r\n                }\r\n            }\r\n\r\n            .tab-back {\r\n                color: #3a84ff;\r\n\r\n                .tab-back-action {\r\n                    cursor: pointer;\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <div class=\"execute-dashboard\">\r\n        <div class=\"layout-left\">\r\n            <total-count v-bind=\"$attrs\" />\r\n            <fail-count v-bind=\"$attrs\" />\r\n        </div>\r\n        <div class=\"layout-right\">\r\n            <statistics v-bind=\"$attrs\" />\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import TotalCount from './total-count';\r\n    import FailCount from './fail-count';\r\n    import Statistics from './statistics';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            TotalCount,\r\n            FailCount,\r\n            Statistics,\r\n        },\r\n        data () {\r\n            return {};\r\n        },\r\n\r\n        methods: {},\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    @import \"@/css/mixins/media\";\r\n\r\n    .execute-dashboard {\r\n        display: flex;\r\n        flex: 1;\r\n        background: #fff;\r\n\r\n        .layout-left {\r\n            flex: 0 0 260px;\r\n            border-right: 1px solid #f0f1f5;\r\n\r\n            .dashboard-card-layout {\r\n                @media (--huge-viewports) {\r\n                    width: 400px;\r\n                }\r\n\r\n                @media (--large-viewports) {\r\n                    width: 300px;\r\n                }\r\n\r\n                @media (--medium-viewports) {\r\n                    width: 280px;\r\n                }\r\n\r\n                @media (--small-viewports) {\r\n                    width: 260px;\r\n                }\r\n\r\n                &:nth-child(n+2) {\r\n                    border-top: 1px solid #f0f1f5;\r\n                }\r\n            }\r\n        }\r\n\r\n        .layout-right {\r\n            flex: 1;\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <div class=\"dashboard-page\">\r\n        <div class=\"operation-bar\">\r\n            <div class=\"app-select\">\r\n                <bk-button theme=\"primary\" @click=\"handleScreenshot\">{{ '截图' }}</bk-button>\r\n            </div>\r\n            <div class=\"date-setting\">\r\n                <div class=\"date-info\">\r\n                    <p>{{ '数据初始时间' }}：{{ dateInfo.STATISTICS_DATA_START_DATE }}</p>\r\n                    <p>{{ '最近更新时间' }}：{{ dateInfo.STATISTICS_DATA_UPDATE_TIME }}</p>\r\n                </div>\r\n                <bk-date-picker\r\n                    class=\"date-picker\"\r\n                    :value=\"date\"\r\n                    :placeholder=\"'选择日期'\"\r\n                    :clearable=\"false\"\r\n                    @change=\"handleDateChange\" />\r\n            </div>\r\n        </div>\r\n        <scroll-faker\r\n            v-if=\"!isLoading\"\r\n            ref=\"scroll\"\r\n            class=\"dashboard-container\"\r\n            style=\"height: calc(100vh - 161px);\">\r\n            <div ref=\"content\" class=\"dashboard-wraper\">\r\n                <div class=\"section-block\">\r\n                    <div class=\"section-title\">{{ '业务类' }}</div>\r\n                    <div class=\"section-content\">\r\n                        <div class=\"content-left\">\r\n                            <app-dashboard :date=\"date\" />\r\n                        </div>\r\n                        <div class=\"content-right\">\r\n                            <platform-dashboard :date=\"date\" />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <lower-component>\r\n                    <div class=\"section-block\">\r\n                        <div class=\"section-title\">{{ '资源类' }}</div>\r\n                        <div class=\"section-content\">\r\n                            <div class=\"content-left\">\r\n                                <template-dashboard :date=\"date\" />\r\n                            </div>\r\n                            <div class=\"content-right\">\r\n                                <script-dashboard :date=\"date\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </lower-component>\r\n                <lower-component>\r\n                    <div class=\"section-block\">\r\n                        <div class=\"section-content\">\r\n                            <div class=\"content-left\">\r\n                                <crontab-dashboard :date=\"date\" />\r\n                            </div>\r\n                            <div class=\"content-center\">\r\n                                <tag-dashboard :date=\"date\" />\r\n                            </div>\r\n                            <div class=\"content-right\">\r\n                                <account-dashboard :date=\"date\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </lower-component>\r\n                <lower-component>\r\n                    <div class=\"section-block\">\r\n                        <div class=\"section-title\">{{ '执行类' }}</div>\r\n                        <div class=\"section-content\">\r\n                            <execute-dashboard :date=\"date\" />\r\n                        </div>\r\n                    </div>\r\n                </lower-component>\r\n            </div>\r\n        </scroll-faker>\r\n    </div>\r\n</template>\r\n<script>\r\n    import html2canvas from 'html2canvas';\r\n    import StatisticsService from '@service/statistics';\r\n    import { prettyDateFormat } from '@utils/assist';\r\n    import AppDashboard from './components/app';\r\n    import PlatformDashboard from './components/platform';\r\n    import TemplateDashboard from './components/template';\r\n    import ScriptDashboard from './components/script';\r\n    import CrontabDashboard from './components/crontab';\r\n    import TagDashboard from './components/tag';\r\n    import AccountDashboard from './components/account';\r\n    import ExecuteDashboard from './components/execute';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            AppDashboard,\r\n            PlatformDashboard,\r\n            TemplateDashboard,\r\n            ScriptDashboard,\r\n            CrontabDashboard,\r\n            TagDashboard,\r\n            AccountDashboard,\r\n            ExecuteDashboard,\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: true,\r\n                date: prettyDateFormat(Date.now()),\r\n                dateInfo: {},\r\n            };\r\n        },\r\n        computed: {\r\n            isSkeletonLoading () {\r\n                return this.isLoading;\r\n            },\r\n        },\r\n        created () {\r\n            this.fetchDateInfo();\r\n        },\r\n        methods: {\r\n            fetchDateInfo () {\r\n                this.isLoading = true;\r\n                StatisticsService.fetchDateInfo({}, {\r\n                    permission: 'page',\r\n                }).then((data) => {\r\n                    this.dateInfo = data;\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            handleScreenshot () {\r\n                const {\r\n                    top,\r\n                    width,\r\n                    height,\r\n                } = this.$refs.content.getBoundingClientRect();\r\n                const {\r\n                    scrollTop,\r\n                } = this.$refs.scroll.getScroll();\r\n                const scrollY = scrollTop > 0 ? top : 0;\r\n                html2canvas(this.$refs.content, {\r\n                    width,\r\n                    height,\r\n                    windowHeight: height,\r\n                    scrollY,\r\n                    backgroundColor: '#f5f6fa',\r\n                }).then((canvas) => {\r\n                    const a = document.createElement('a');\r\n                    a.href = canvas.toDataURL('image/png');\r\n                    a.download = this.title;\r\n                    a.download = `${document.title}_${this.date}`;\r\n                    a.click();\r\n                });\r\n            },\r\n            handleDateChange (date) {\r\n                this.date = date;\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    .dashboard-page {\r\n        .operation-bar {\r\n            position: relative;\r\n            z-index: 1;\r\n            display: flex;\r\n            align-items: center;\r\n            height: 56px;\r\n            padding: 0 24px;\r\n            background: #fff;\r\n            box-shadow: 0 1px 2px 0 rgb(0 0 0 / 10%);\r\n\r\n            .app-select {\r\n                display: flex;\r\n                align-items: center;\r\n\r\n                .app-list {\r\n                    width: 360px;\r\n                    background: #f0f1f5;\r\n                    border: none;\r\n                }\r\n\r\n                .app-action-btn {\r\n                    display: flex;\r\n                    width: 30px;\r\n                    height: 30px;\r\n                    margin-left: 10px;\r\n                    font-size: 14px;\r\n                    color: #979ba5;\r\n                    cursor: pointer;\r\n                    background: #f0f1f5;\r\n                    border-radius: 2px;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                }\r\n            }\r\n\r\n            .date-setting {\r\n                display: flex;\r\n                align-items: center;\r\n                margin-left: auto;\r\n\r\n                .date-info {\r\n                    font-size: 12px;\r\n                    color: #c4c6cc;\r\n                    transform-origin: right center;\r\n                    transform: scale(0.85);\r\n                }\r\n\r\n                .date-picker {\r\n                    width: 180px;\r\n                    margin-left: 16px;\r\n\r\n                    .bk-date-picker-rel .bk-date-picker-editor {\r\n                        background: #f0f1f5;\r\n                        border-color: transparent;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        .dashboard-container {\r\n            .dashboard-wraper {\r\n                padding: 20px 24px;\r\n            }\r\n        }\r\n\r\n        .section-block {\r\n            display: flex;\r\n            flex-direction: column;\r\n\r\n            &:nth-child(n + 2) {\r\n                padding-top: 30px;\r\n            }\r\n\r\n            .section-title {\r\n                margin-bottom: 16px;\r\n                font-size: 16px;\r\n                line-height: 24px;\r\n                color: #313238;\r\n            }\r\n\r\n            .section-content {\r\n                display: flex;\r\n\r\n                .content-left,\r\n                .content-center,\r\n                .content-right {\r\n                    display: flex;\r\n                    background: #fff;\r\n                    box-shadow: 0 1px 2px 0 rgb(0 0 0 / 10%);\r\n\r\n                    & > * {\r\n                        flex: 1;\r\n                    }\r\n                }\r\n\r\n                .content-left {\r\n                    flex: 0 0 auto;\r\n                }\r\n\r\n                .content-center {\r\n                    flex: 1 0 auto;\r\n                    margin-left: 20px;\r\n\r\n                    & ~ .content-right {\r\n                        flex: 0;\r\n                    }\r\n                }\r\n\r\n                .content-right {\r\n                    flex: 1 1 auto;\r\n                    margin-left: 20px;\r\n                }\r\n            }\r\n        }\r\n    }\r\n</style>\r\n"],"names":[],"sourceRoot":""}