{"version":3,"file":"static/css/7409.5853fc711899c3b175e3.css","mappings":"AAscA,gCACA,eACA,uBACA,CAIA,kCACA,kBAyBA,CAvBA,4CACA,iBACA,CAEA,qDACA,WAiBA,CAfA,0BAHA,qDAIA,WAcA,CAbA,CAEA,0BAPA,qDAQA,WAUA,CATA,CAEA,0BAXA,qDAYA,WAMA,CALA,CAEA,0BAfA,qDAgBA,WAEA,CADA,CAIA,qCAQA,mBACA,8BAFA,cAFA,eACA,iBALA,eAEA,QADA,UAQA,2BACA,oBACA,+DARA,UA8DA,CApDA,4CACA,uBAKA,CAHA,yDACA,wBACA,CAGA,iDAWA,mBAEA,8BADA,+BAEA,2BANA,cAEA,eANA,aAWA,sBATA,YAUA,uBAbA,WAIA,iBANA,kBAQA,kBAPA,MAGA,UAkBA,CALA,8DAEA,cADA,kBAEA,kBACA,CAGA,sDACA,aAGA,sBACA,uBAHA,gBACA,cAGA,CAEA,2CAGA,eADA,kBADA,mBAGA,mBAMA,CAJA,iDAEA,mBADA,UAEA","sources":["webpack://job/./src/views/fast-execution/distro-file/index.vue"],"sourcesContent":["<template>\n    <div class=\"distro-file-page\" v-bkloading=\"{ isLoading }\">\n        <smart-action offset-target=\"bk-form-content\">\n            <jb-form\n                class=\"push-file-form\"\n                ref=\"pushFileForm\"\n                v-test=\"{ type: 'form', value: 'pushFile' }\"\n                :model=\"formData\">\n                <card-layout :title=\"'基本信息'\" class=\"block\">\n                    <item-factory\n                        name=\"stepName\"\n                        field=\"name\"\n                        :label=\"'任务名称'\"\n                        :placeholder=\"'取一个便于记忆的任务名，方便后续在历史记录中快速定位...'\"\n                        :form-data=\"formData\"\n                        @on-change=\"handleChange\" />\n                    <item-factory\n                        name=\"timeout\"\n                        field=\"timeout\"\n                        :form-data=\"formData\"\n                        @on-change=\"handleChange\" />\n                    <item-factory\n                        name=\"speedLimit\"\n                        field=\"uploadSpeedLimit\"\n                        :label=\"'上传限速'\"\n                        :form-data=\"formData\"\n                        @on-change=\"handleChange\" />\n                    <item-factory\n                        name=\"speedLimit\"\n                        field=\"downloadSpeedLimit\"\n                        :label=\"'下载限速'\"\n                        :form-data=\"formData\"\n                        @on-change=\"handleChange\" />\n                </card-layout>\n                <card-layout :title=\"'文件来源'\" class=\"block\">\n                    <item-factory\n                        name=\"sourceFileOfExecution\"\n                        field=\"fileSourceList\"\n                        :form-data=\"formData\"\n                        @on-change=\"handleChange\" />\n                </card-layout>\n                <card-layout :title=\"'传输目标'\" class=\"block\" style=\"margin-bottom: 0;\">\n                    <item-factory\n                        ref=\"targetPath\"\n                        name=\"targetPath\"\n                        field=\"path\"\n                        :tips-placement=\"targetPathTipsPlacement\"\n                        :form-data=\"formData\"\n                        @on-change=\"handleChange\" />\n                    <item-factory\n                        name=\"transferMode\"\n                        field=\"transferMode\"\n                        :form-data=\"formData\"\n                        @on-change=\"handleChange\" />\n                    <item-factory\n                        name=\"executeAccount\"\n                        field=\"account\"\n                        :form-data=\"formData\"\n                        @on-change=\"handleChange\" />\n                    <item-factory\n                        name=\"targetServerOfExecution\"\n                        field=\"server\"\n                        :form-data=\"formData\"\n                        @on-change=\"handleChange\" />\n                </card-layout>\n            </jb-form>\n            <template #action>\n                <bk-button\n                    class=\"w120 mr10\"\n                    theme=\"primary\"\n                    :loading=\"isSubmiting\"\n                    @click=\"handleSubmit\"\n                    v-test=\"{ type: 'button', value: 'fastPushFileSubmit' }\">\n                    {{ '执行' }}\n                </bk-button>\n                <bk-button\n                    @click=\"handleCancel\"\n                    v-test=\"{ type: 'button', value: 'fastPushFileReset' }\">\n                    {{ '重置' }}\n                </bk-button>\n            </template>\n        </smart-action>\n        <div v-if=\"historyList.length > 0\" class=\"execution-history\" :class=\"{ active: isShowHistory }\">\n            <div class=\"toggle-btn\" @click=\"handleShowHistory\">\n                <Icon class=\"toggle-flag\" type=\"angle-double-left\" />\n                <div class=\"recent-result\">{{ '最近结果' }}</div>\n            </div>\n            <div class=\"history-content\">\n                <div\n                    v-for=\"item in historyList\"\n                    class=\"item\"\n                    :key=\"item.id\"\n                    @click=\"handleGoHistoryDetail(item)\">\n                    {{ item.name }}\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n<script>\n    import _ from 'lodash';\n    import {\n        mapState,\n    } from 'vuex';\n       import TaskExecuteService from '@service/task-execute';\n    import TaskStepModel from '@model/task/task-step';\n    import TaskHostNodeModel from '@model/task-host-node';\n    import JbForm from '@components/jb-form';\n    import CardLayout from '@components/task-step/file/card-layout';\n    import ItemFactory from '@components/task-step/file/item-factory';\n    import {\n        genDefaultName,\n        compareHost,\n        detectionSourceFileDupLocation,\n    } from '@utils/assist';\n    import {\n        pushFileHistory,\n    } from '@utils/cache-helper';\n\n    const getDefaultData = () => ({\n        // 快速执行name\n        name: genDefaultName('快速执行分发文件'),\n        // 源文件列表\n        fileSourceList: [{},{},{}],\n        // 超时\n        timeout: 7200,\n        // 上传文件限速\n        uploadSpeedLimit: 0,\n        // 传输模式： 1 - 严谨模式； 2 - 强制模式；3 - 安全模式\n        transferMode: 2,\n        // 下载文件限速\n        downloadSpeedLimit: 0,\n        // 执行账号\n        account: '',\n        // 目标路径\n        path: '',\n        // 目标服务器\n        server: new TaskHostNodeModel({}),\n    });\n\n    export default {\n        name: '',\n        components: {\n            JbForm,\n            CardLayout,\n            ItemFactory,\n        },\n        data () {\n            return {\n                isLoading: false,\n                formData: getDefaultData(),\n                isSubmiting: false,\n                historyList: [{},{},{}],\n                isShowHistory: false,\n                targetPathTipsPlacement: '',\n            };\n        },\n        computed: {\n            ...mapState('distroFile', {\n                isEditNewSourceFile: state => state.isEditNewSourceFile,\n            }),\n        },\n        created () {\n            this.init();\n            this.calcTargetPathTipsPlacement();\n        },\n        mounted () {\n            window.addEventListener('resize', this.calcTargetPathTipsPlacement);\n            this.$once('hook:beforeDestroy', () => {\n                window.removeEventListener('resize', this.calcTargetPathTipsPlacement);\n            });\n            window.IPInputScope = 'FILE_DISTRIBUTION';\n            this.$once('hook:beforeDestroy', () => {\n                window.IPInputScope = '';\n            });\n        },\n        methods: {\n            /**\n             * @desc 执行历史重做\n             *\n             * 通过任务taskInstanceId获取任务的详情\n             */\n            fetchData () {\n                this.$request(TaskExecuteService.fetchTaskInstance({\n                    id: this.taskInstanceId,\n                }), () => {\n                    this.isLoading = true;\n                }).then((data) => {\n                    const { stepInfo } = data;\n                    const {\n                        downloadSpeedLimit,\n                        fileDestination,\n                        fileSourceList,\n                        timeout,\n                        transferMode,\n                        uploadSpeedLimit,\n                    } = stepInfo.fileStepInfo;\n                    const {\n                        account,\n                        path,\n                        server,\n                    } = fileDestination;\n                    this.formData = {\n                        ...this.formData,\n                        name: stepInfo.name,\n                        uploadSpeedLimit,\n                        downloadSpeedLimit,\n                        account,\n                        path,\n                        server,\n                        timeout,\n                        fileSourceList,\n                        transferMode,\n                    };\n                })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            },\n            /**\n             * @desc 初始化逻辑\n             *\n             * 1，读取执行历史缓存\n             * 2，解析url\n             *     -- 路由回退重做\n             *     -- 执行历史指定任务重做\n             */\n            init () {\n                this.taskInstanceId = parseInt(this.$route.params.taskInstanceId, 10);\n                this.timeTravel();\n\n                const { from } = this.$route.query;\n                // 步骤执行详情历史编辑——从历史缓存数据中查找对应数据的formData\n                if (from === 'historyStep') {\n                    let historyRecord = null;\n                    if (this.taskInstanceId) {\n                        // 有指定taskInstanceId\n                        historyRecord = _.find(this.historyList, _ => _.taskInstanceId === this.taskInstanceId);\n                    } else {\n                        // 没有指定taskInstanceId，默认取第一个\n                        historyRecord = _.head(this.historyList);\n                    }\n                    // 历史缓存中有数据使用缓存数据\n                    if (historyRecord) {\n                        this.formData = historyRecord.formData;\n                        return;\n                    }\n                }\n                // 执行历史——通过taskInstanceId重做\n                if (this.taskInstanceId > 0) {\n                    this.fetchData();\n                }\n            },\n            calcTargetPathTipsPlacement: _.throttle(function () {\n                this.targetPathTipsPlacement = window.innerWidth > 1650 ? 'right-start' : 'top';\n            }, 60),\n            /**\n             * @desc 回溯执行历史\n             *\n             */\n            timeTravel () {\n                this.historyList = Object.freeze(pushFileHistory.getItem());\n            },\n            /**\n             * @desc 执行记录缓存\n             * @param {Array} history 执行历史记录\n             *\n             */\n            pushLocalStorage (history) {\n                const historyList = pushFileHistory.getItem();\n                historyList.unshift(history);\n                pushFileHistory.setItem(historyList);\n            },\n            /**\n             * @desc 展开执行历史列表\n             *\n             */\n            handleShowHistory () {\n                this.isShowHistory = !this.isShowHistory;\n            },\n            /**\n             * @desc 查看执行历史记录任务详情\n             *\n             */\n            handleGoHistoryDetail (payload) {\n                this.$router.push({\n                    name: 'historyStep',\n                    params: {\n                        taskInstanceId: payload.taskInstanceId,\n                    },\n                    query: {\n                        stepInstanceId: payload.stepInstanceId,\n                        from: 'fastPushFile',\n                    },\n                });\n            },\n            /**\n             * @desc 表单值更新\n             * @param {String} field 字段名\n             * @param {Any} value  字段最新值\n             *\n             */\n            handleChange (field, value) {\n                this.formData[field] = value;\n            },\n            /**\n             * @desc 执行\n             */\n            handleSubmit () {\n                this.isSubmiting = true;\n                this.$refs.pushFileForm.validate()\n                    // 检测没有保存的源文件\n                    .then(() => new Promise((resolve, reject) => {\n                        if (!this.isEditNewSourceFile) {\n                            return resolve();\n                        }\n                        this.$bkInfo({\n                            title: '您有未保存的源文件',\n                            type: 'warning',\n                            okText: '继续执行',\n                            cancelText: '去保存',\n                            confirmFn: () => {\n                                setTimeout(() => {\n                                    resolve();\n                                }, 300);\n                            },\n                            cancelFn: () => {\n                                setTimeout(() => {\n                                    reject(new Error('save'));\n                                }, 300);\n                            },\n                        });\n                    }))\n                    // 检测服务器源文件的主机和执行目标服务器主机相同\n                    .then(() => new Promise((resolve, reject) => {\n                        let sameHost = false;\n                        // eslint-disable-next-line no-plusplus\n                        for (let i = 0; i < this.formData.fileSourceList.length; i++) {\n                            const currentFileSource = this.formData.fileSourceList[i];\n                            // 服务器源文件\n                            if (currentFileSource.fileType === TaskStepModel.fileStep.TYPE_SERVER) {\n                                if (compareHost(this.formData.server, currentFileSource.host)) {\n                                    sameHost = true;\n                                    break;\n                                }\n                            }\n                        }\n                        if (sameHost) {\n                            this.$bkInfo({\n                                title: '源和目标服务器相同',\n                                subTitle: '检测到文件传输源和目标服务器是同一批，若是单台建议使用本地 cp 方式效率会更高，请问你是否确定参数无误？',\n                                width: 500,\n                                okText: '好的，我调整一下',\n                                cancelText: '是的，确定无误',\n                                confirmFn: () => {\n                                    reject(new Error('execute'));\n                                },\n                                cancelFn: () => {\n                                    resolve();\n                                },\n                            });\n                        } else {\n                            resolve();\n                        }\n                    }))\n                    // 检测源文件的同名文件和目录\n                    .then(() => new Promise((resolve, reject) => {\n                        if (detectionSourceFileDupLocation(this.formData.fileSourceList)) {\n                            // 有重名目录和文件\n                            this.$bkInfo({\n                                title: '源文件可能出现同名',\n                                subTitle: '多文件源传输场景下容易出现同名文件覆盖的问题，你可以在目标路径中使用 [源服务器IP] 的变量来尽可能规避风险。',\n                                okText: '好的，我调整一下',\n                                cancelText: '已知悉，确定执行',\n                                closeIcon: false,\n                                width: 500,\n                                confirmFn: () => {\n                                    // 聚焦到目标路径输入框\n                                    this.$refs.targetPath.$el.scrollIntoView();\n                                    this.$refs.targetPath.$el.querySelector('.bk-form-input').focus();\n                                    reject(new Error('transferMode change'));\n                                },\n                                cancelFn: () => {\n                                    resolve();\n                                },\n                            });\n                        } else {\n                            resolve();\n                        }\n                    }))\n                    .then(() => {\n                        const {\n                            name,\n                            timeout,\n                            uploadSpeedLimit,\n                            downloadSpeedLimit,\n                            transferMode,\n                            fileSourceList,\n                            account,\n                            path,\n                            server,\n                        } = this.formData;\n                        \n                        return TaskExecuteService.pushFile({\n                            name,\n                            uploadSpeedLimit: parseInt(uploadSpeedLimit, 10),\n                            downloadSpeedLimit: parseInt(downloadSpeedLimit, 10),\n                            timeout: parseInt(timeout, 10),\n                            fileSourceList,\n                            transferMode,\n                            fileDestination: {\n                                account,\n                                path,\n                                server,\n                            },\n                        }).then((data) => {\n                            window.changeAlert = false;\n                            this.$router.push({\n                                name: 'historyStep',\n                                params: {\n                                    taskInstanceId: data.taskInstanceId,\n                                },\n                                query: {\n                                    stepInstanceId: data.stepInstanceId,\n                                    from: 'fastPushFile',\n                                },\n                            });\n                            this.pushLocalStorage({\n                                id: Date.now(),\n                                name,\n                                taskInstanceId: data.taskInstanceId,\n                                stepInstanceId: data.stepInstanceId,\n                                formData: this.formData,\n                            });\n                        });\n                    })\n                    .catch(() => {\n                        this.isSubmiting = false;\n                    });\n            },\n            /**\n             * @desc 重置\n             */\n            handleCancel () {\n                this.$refs.pushFileForm.clearError();\n                this.formData = getDefaultData();\n            },\n        },\n    };\n</script>\n<style lang='postcss'>\n    @import \"@/css/mixins/media\";\n\n    html[lang=\"en-US\"] {\n        .recent-result {\n            margin-top: 6px;\n            transform: rotate(90deg);\n        }\n    }\n\n    .distro-file-page {\n        .push-file-form {\n            margin-bottom: 24px;\n\n            .card-box {\n                margin-bottom: 6px;\n            }\n\n            .form-item-content {\n                width: 500px;\n\n                @media (--small-viewports) {\n                    width: 500px;\n                }\n\n                @media (--medium-viewports) {\n                    width: 560px;\n                }\n\n                @media (--large-viewports) {\n                    width: 620px;\n                }\n\n                @media (--huge-viewports) {\n                    width: 680px;\n                }\n            }\n        }\n\n        .execution-history {\n            position: fixed;\n            top: 127px;\n            right: 0;\n            z-index: 99;\n            font-size: 12px;\n            line-height: 30px;\n            color: #c4c6cc;\n            background: #63656e;\n            border-bottom-left-radius: 2px;\n            transform: translateX(100%);\n            transition: all 0.35s;\n            user-select: none;\n\n            &.active {\n                transform: translateX(0);\n\n                .toggle-flag {\n                    transform: rotateZ(180deg);\n                }\n            }\n\n            .toggle-btn {\n                position: absolute;\n                top: 0;\n                left: -22px;\n                display: flex;\n                width: 22px;\n                height: 88px;\n                line-height: 13px;\n                color: #dcdee5;\n                text-align: center;\n                cursor: pointer;\n                background: #63656e;\n                border-right: 1px solid #757783;\n                border-bottom-left-radius: 8px;\n                border-top-left-radius: 8px;\n                flex-direction: column;\n                justify-content: center;\n\n                .toggle-flag {\n                    margin-bottom: 5px;\n                    color: #979ba5;\n                    transition: all 0.2s;\n                }\n            }\n\n            .history-content {\n                display: flex;\n                min-height: 90px;\n                padding: 12px 0;\n                flex-direction: column;\n                justify-content: center;\n            }\n\n            .item {\n                padding-right: 16px;\n                padding-left: 16px;\n                cursor: pointer;\n                transition: all 0.15s;\n\n                &:hover {\n                    color: #fff;\n                    background: #4f515a;\n                }\n            }\n        }\n    }\n</style>\n"],"names":[],"sourceRoot":""}