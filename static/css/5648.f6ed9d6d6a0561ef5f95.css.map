{"version":3,"file":"static/css/5648.f6ed9d6d6a0561ef5f95.css","mappings":"AAkBA,WAIA,mBADA,gBADA,kBADA,iBA4BA,CAvBA,qBAQA,gCACA,kCAFA,mCADA,SAHA,UAFA,kBACA,SAGA,QADA,SAkBA,CAXA,0BAQA,gCACA,kCAFA,mCAHA,cAEA,SAHA,UAFA,kBACA,QAGA,OAKA,CCiHA,0DACA,UACA,CAGA,oBACA,aACA,qBA6CA,CA3CA,yBACA,aACA,kBAYA,CAVA,oCACA,eACA,CAEA,gCAEA,cAEA,cAHA,eAEA,eAEA,CAGA,iCAEA,gBADA,UAEA,CAEA,2CAEA,uBADA,aAEA,gBACA,kBAMA,CAJA,wDACA,aACA,cACA,CAGA,sCACA,aACA,cAEA,kBADA,cAEA,CAEA,iCACA,eACA,CC3JA,eAEA,mBCSA,0BDRA,CEsJA,UACA,kBAmHA,CA/GA,sCACA,oBACA,CAKA,mKAKA,uBACA,CAEA,wKAKA,aACA,CAEA,yBACA,aACA,sBACA,CAEA,qBAIA,cACA,eAHA,eACA,iBAFA,eAKA,kBASA,CAPA,4BACA,aACA,CAEA,iCACA,aACA,CAIA,6BASA,yBACA,kBAHA,cAHA,eAFA,YAGA,iBAMA,aARA,eAKA,kBAPA,WAKA,iBAWA,CAJA,wCAEA,uBADA,aAEA,CAIA,sBAIA,cADA,iBADA,eADA,eAIA,iBACA,CAEA,qBASA,qBAHA,cALA,aAGA,eAFA,YAQA,uBALA,iBAFA,gBAIA,kBACA,4BA4BA,CAxBA,4BACA,WASA,CAPA,mCACA,oBAKA,CAHA,iDACA,yBACA,CAIA,4BACA,eACA,CAEA,4BAMA,eALA,aAIA,eAFA,mBACA,iBAFA,eAKA,CC2UA,8CACA,0BACA,CAEA,+DACA,kBACA,SACA,CAEA,mDACA,qBACA,UAKA,CAHA,6DACA,uBACA,CAGA,iDAGA,cAEA,eAJA,qBACA,eAEA,kBAEA,CAEA,2DACA,aACA,CC3fA,yDAEA,mBADA,aAEA,WAiBA,CAfA,+DASA,mBAFA,mBACA,kBAFA,cALA,aAIA,eAHA,YAEA,kBADA,aAOA,CAEA,wEACA,gBACA,CAGA,qDACA,eACA,CAEA,6DACA,aACA,CC7FA,6DAIA,mBACA,gCAJA,aAEA,wBADA,mBA0DA,CArDA,uEAgBA,mBANA,mBAEA,4CAEA,2BADA,4BALA,cACA,eARA,aAKA,eAJA,YAKA,iBAFA,mBADA,kBADA,eAYA,mBAiBA,CAdA,8EAEA,gBACA,qBAFA,cAYA,CARA,wFAEA,mBADA,aAEA,CAEA,4FACA,UACA,CAIA,uEACA,gBACA,CAEA,uEAMA,mBACA,kBAFA,cAFA,eAFA,YAGA,iBAFA,cAMA,mBACA,CAEA,2EAEA,gDADA,aAEA,CCodA,8BACA,GACA,mBACA,CAEA,GACA,uBACA,CACA,CAGA,6BAEA,cADA,cAEA,CAEA,mCACA,gBAKA,CAHA,mDACA,cACA,CAGA,iCAKA,cAIA,eARA,qBACA,YACA,eACA,gBAEA,uBAEA,sBADA,kBAGA,CAIA,qDACA,kBACA,CAIA,kDACA,kBACA,CAIA,qDACA,kBACA,CAGA,6CAKA,kBACA,WALA,qBAEA,WACA,kBAFA,SAKA,CAGA,6BACA,WACA,CAEA,qCAKA,gDAHA,aAEA,YAHA,kBAEA,UAGA,CAEA,iCACA,qBACA,YACA,eACA,gBACA,uBAEA,sBADA,kBAEA","sources":["webpack://job/./src/views/cron-job/list/components/render-strategy.vue","webpack://job/./src/views/cron-job/list/components/operation/execute-notify.vue","webpack://job/./src/views/cron-job/list/components/operation/form-item-strategy/execute-before-notify.vue","webpack://job/./src/views/cron-job/list/components/operation/form-item-strategy/finish-before-notify.vue","webpack://job/./src/views/cron-job/list/components/operation/cron-job.vue","webpack://job/./src/views/cron-job/list/components/operation/index.vue","webpack://job/./src/views/cron-job/list/components/detail.vue","webpack://job/./src/views/cron-job/list/components/history-record/index.vue","webpack://job/./src/views/cron-job/list/index.vue"],"sourcesContent":["\r\n\r\n<template>\r\n    <div class=\"cron-item\">\r\n        <div class=\"triangle\" :style=\"{ left: `${left}px` }\" />\r\n        <div>\r\n            <slot />\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    export default {\r\n        props: {\r\n            left: String,\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .cron-item {\r\n        position: relative;\r\n        padding: 16px 20px;\r\n        margin-top: 10px;\r\n        background: #f0f1f5;\r\n\r\n        .triangle {\r\n            position: absolute;\r\n            top: -7px;\r\n            left: 84px;\r\n            z-index: 1;\r\n            width: 0;\r\n            height: 0;\r\n            border-right: 7px solid transparent;\r\n            border-bottom: 7px solid #f0f1f5;\r\n            border-left: 7px solid transparent;\r\n\r\n            span {\r\n                position: absolute;\r\n                top: 2px;\r\n                left: -9px;\r\n                display: block;\r\n                width: 0;\r\n                height: 0;\r\n                border-right: 6px solid transparent;\r\n                border-bottom: 6px solid #fafbfd;\r\n                border-left: 6px solid transparent;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <div class=\"execute-notify-box\" v-bkloading=\"{ isLoading }\">\r\n        <jb-form-item :label=\"notifyOffsetLabel\" layout=\"inline\" :rules=\"rules.notifyOffset\">\r\n            <bk-select :value=\"formData.notifyOffset\" class=\"time-select\" @change=\"handleNotifyOffsetChange\">\r\n                <bk-option :id=\"10\" :name=\"`10 ${$t('cron.分钟')}`\">10 {{ $t('cron.分钟') }}</bk-option>\r\n                <bk-option :id=\"30\" :name=\"`30 ${$t('cron.分钟')}`\">30 {{ $t('cron.分钟') }}</bk-option>\r\n                <bk-option :id=\"45\" :name=\"`45 ${$t('cron.分钟')}`\">45 {{ $t('cron.分钟') }}</bk-option>\r\n                <bk-option :id=\"60\" :name=\"`1 ${$t('cron.小时')}`\">1 {{ $t('cron.小时') }}</bk-option>\r\n            </bk-select>\r\n        </jb-form-item>\r\n        <jb-form-item :label=\"$t('cron.通知对象')\" layout=\"inline\">\r\n            <jb-user-selector\r\n                :placeholder=\"$t('cron.输入通知对象')\"\r\n                class=\"input\"\r\n                :user=\"formData.notifyUser.userList\"\r\n                :role=\"formData.notifyUser.roleList\"\r\n                :filter-list=\"['JOB_EXTRA_OBSERVER']\"\r\n                @on-change=\"handleApprovalUserChange\" />\r\n        </jb-form-item>\r\n        <jb-form-item :label=\"$t('cron.通知方式')\" style=\"margin-bottom: 0;\" layout=\"inline\">\r\n            <div class=\"notify-channel-wraper\">\r\n                <bk-checkbox\r\n                    @click.native=\"handleToggleAllChannel\"\r\n                    :checked=\"isChannelAll\"\r\n                    :indeterminate=\"isChannelIndeterminate\">\r\n                    {{ $t('cron.全部') }}\r\n                </bk-checkbox>\r\n                <bk-checkbox-group\r\n                    :value=\"formData.notifyChannel\"\r\n                    class=\"all-channel\"\r\n                    @change=\"handleNotifyChannelChange\">\r\n                    <bk-checkbox\r\n                        v-for=\"channel in channleList\"\r\n                        :key=\"channel.code\"\r\n                        :value=\"channel.code\">\r\n                        {{ channel.name }}\r\n                    </bk-checkbox>\r\n                </bk-checkbox-group>\r\n            </div>\r\n        </jb-form-item>\r\n    </div>\r\n</template>\r\n<script>\r\n    import I18n from '@/i18n';\r\n    import QueryGlobalSettingService from '@service/query-global-setting';\r\n    import JbUserSelector from '@components/jb-user-selector';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            JbUserSelector,\r\n        },\r\n        props: {\r\n            notifyOffsetLabel: {\r\n                type: String,\r\n                required: true,\r\n            },\r\n            formData: {\r\n                type: Object,\r\n                required: true,\r\n            },\r\n            mode: {\r\n                type: String,\r\n                default: 'finish-before', // execute-beofre / finish-before\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: false,\r\n                channleList: [{},{},{}],\r\n            };\r\n        },\r\n        computed: {\r\n            isChannelAll () {\r\n                if (this.channleList.length < 1) {\r\n                    return false;\r\n                }\r\n                return this.formData.notifyChannel.length === this.channleList.length;\r\n            },\r\n            isChannelIndeterminate () {\r\n                if (this.formData.notifyChannel.length < 1) {\r\n                    return false;\r\n                }\r\n                return this.formData.notifyChannel.length !== this.channleList.length;\r\n            },\r\n        },\r\n        created () {\r\n            this.fetchAllChannel();\r\n            this.$emit('on-change', {\r\n                notifyOffset: 10,\r\n            });\r\n            this.rules = {\r\n                notifyOffset: [],\r\n            };\r\n            if (this.mode === 'execute-beofre') {\r\n                this.rules.notifyOffset = [\r\n                    {\r\n                        // 执行时间 - 执行前通知的时间 > 当前时间\r\n                        validator: () => new Date(this.formData.executeTime).getTime()\r\n                            - parseInt(this.formData.notifyOffset, 10) * 6000 > Date.now(),\r\n                        message: I18n.t('cron.设置的提醒时间已过期'),\r\n                        trigger: 'change',\r\n                    },\r\n                ];\r\n            }\r\n        },\r\n        beforeDestroy () {\r\n            this.$emit('on-change', {\r\n                notifyOffset: 0,\r\n                notifyUser: {\r\n                    userList: [{},{},{}],\r\n                    roleList: [{},{},{}],\r\n                },\r\n                notifyChannel: [],\r\n            });\r\n        },\r\n        methods: {\r\n            fetchAllChannel () {\r\n                QueryGlobalSettingService.fetchActiveNotifyChannel()\r\n                    .then((data) => {\r\n                        this.channleList = data;\r\n                    })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            handleToggleAllChannel () {\r\n                if (this.isChannelAll) {\r\n                    this.handleNotifyChannelChange([]);\r\n                } else {\r\n                    this.handleNotifyChannelChange(this.channleList.map(_ => _.code));\r\n                }\r\n            },\r\n            handleNotifyOffsetChange (value) {\r\n                this.$emit('on-change', {\r\n                    notifyOffset: value,\r\n                });\r\n            },\r\n            handleApprovalUserChange (userList, roleList) {\r\n                this.$emit('on-change', {\r\n                    notifyUser: {\r\n                        userList,\r\n                        roleList,\r\n                    },\r\n                });\r\n            },\r\n            handleNotifyChannelChange (value) {\r\n                this.$emit('on-change', {\r\n                    notifyChannel: value,\r\n                });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    html[lang=\"en-US\"] .notify-channel-wraper {\r\n        .bk-form-checkbox {\r\n            width: 64px;\r\n        }\r\n    }\r\n\r\n    .execute-notify-box {\r\n        display: flex;\r\n        flex-direction: column;\r\n\r\n        .row {\r\n            display: flex;\r\n            margin-bottom: 20px;\r\n\r\n            &:last-child {\r\n                margin-bottom: 0;\r\n            }\r\n\r\n            .label {\r\n                font-size: 14px;\r\n                color: #63656e;\r\n                text-align: left;\r\n                flex: 0 0 80px;\r\n            }\r\n        }\r\n\r\n        .time-select {\r\n            width: 100%;\r\n            background: #fff;\r\n        }\r\n\r\n        .notify-channel-wraper {\r\n            display: flex;\r\n            align-items: flex-start;\r\n            min-height: 32px;\r\n            white-space: nowrap;\r\n\r\n            .all-channel {\r\n                display: flex;\r\n                flex-wrap: wrap;\r\n            }\r\n        }\r\n\r\n        .bk-form-checkbox {\r\n            display: flex;\r\n            flex: 0 0 auto;\r\n            margin-top: 6px;\r\n            margin-right: 40px;\r\n        }\r\n\r\n        .bk-checkbox {\r\n            background: #fff;\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <div>\r\n        <jb-form-item>\r\n            <bk-checkbox v-model=\"executeBeforeNotify\">{{ $t('cron.执行前通知') }}</bk-checkbox>\r\n        </jb-form-item>\r\n        <render-strategy v-if=\"executeBeforeNotify\" left=\"55\" class=\"notify-wraper\">\r\n            <execute-notify\r\n                v-on=\"$listeners\"\r\n                v-bind=\"$attrs\"\r\n                mode=\"execute-beofre\"\r\n                :form-data=\"formData\"\r\n                :notify-offset-label=\"$t('cron.执行前')\" />\r\n        </render-strategy>\r\n    </div>\r\n</template>\r\n<script>\r\n    import RenderStrategy from '../../render-strategy';\r\n    import ExecuteNotify from '../execute-notify';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            RenderStrategy,\r\n            ExecuteNotify,\r\n        },\r\n        props: {\r\n            formData: {\r\n                type: Object,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                executeBeforeNotify: false,\r\n            };\r\n        },\r\n        watch: {\r\n            formData: {\r\n                handler (formData) {\r\n                    if (this.formData.notifyOffset\r\n                        || this.formData.notifyChannel.length > 0\r\n                        || this.formData.notifyUser.roleList.length > 0\r\n                        || this.formData.notifyUser.userList.length > 0) {\r\n                        this.executeBeforeNotify = true;\r\n                    }\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .notify-wraper {\r\n        margin-top: -20px !important;\r\n        margin-bottom: 20px;\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <div v-if=\"isShowNotify\">\r\n        <jb-form-item>\r\n            <bk-checkbox v-model=\"isFinishBeforeNotify\">{{ $t('cron.结束前通知') }}</bk-checkbox>\r\n        </jb-form-item>\r\n        <render-strategy v-if=\"isFinishBeforeNotify\" left=\"55\" class=\"notify-wraper\">\r\n            <execute-notify\r\n                v-on=\"$listeners\"\r\n                v-bind=\"$attrs\"\r\n                :form-data=\"formData\"\r\n                :notify-offset-label=\"$t('cron.结束前')\" />\r\n        </render-strategy>\r\n    </div>\r\n</template>\r\n<script>\r\n    import RenderStrategy from '../../render-strategy';\r\n    import ExecuteNotify from '../execute-notify';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            RenderStrategy,\r\n            ExecuteNotify,\r\n        },\r\n        props: {\r\n            formData: {\r\n                type: Object,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isFinishBeforeNotify: false,\r\n            };\r\n        },\r\n        computed: {\r\n            isShowNotify () {\r\n                if (!this.formData.endTime) {\r\n                    return false;\r\n                }\r\n                if (this.isFinishBeforeNotify) {\r\n                    return true;\r\n                }\r\n                return true;\r\n            },\r\n        },\r\n        watch: {\r\n            formData: {\r\n                handler (formData) {\r\n                    if (this.formData.notifyOffset\r\n                        || this.formData.notifyChannel.length > 0\r\n                        || this.formData.notifyUser.roleList.length > 0\r\n                        || this.formData.notifyUser.userList.length > 0) {\r\n                        this.isFinishBeforeNotify = true;\r\n                    }\r\n                },\r\n                immediate: true,\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .notify-wraper {\r\n        margin-top: -20px !important;\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <div class=\"cron-job\"\r\n        :class=\"[\r\n            { 'is-error': isError },\r\n            `error-${errorField}`,\r\n            `select-${selectIndex}`,\r\n        ]\">\r\n        <div class=\"time-describe\">\r\n            <span class=\"time-text minute\" @click=\"handleTimeTextChange('minute')\">{{ $t('cron.分') }}</span>\r\n            <span class=\"time-text hour\" @click=\"handleTimeTextChange('hour')\">{{ $t('cron.时') }}</span>\r\n            <span class=\"time-text dayOfMonth\" @click=\"handleTimeTextChange('dayOfMonth')\">{{ $t('cron.日') }}</span>\r\n            <span class=\"time-text month\" @click=\"handleTimeTextChange('month')\">{{ $t('cron.月') }}</span>\r\n            <span class=\"time-text dayOfWeek\" @click=\"handleTimeTextChange('dayOfWeek')\">{{ $t('cron.周') }}</span>\r\n        </div>\r\n        <div class=\"time-input\">\r\n            <input\r\n                ref=\"input\"\r\n                class=\"input\"\r\n                type=\"text\"\r\n                :value=\"nativeValue\"\r\n                @input=\"handleInput\"\r\n                @blur=\"handleBlur\"\r\n                @keyup.left=\"handleSelectText\"\r\n                @keyup.right=\"handleSelectText\"\r\n                @mousedown=\"handleSelectText\">\r\n        </div>\r\n        <div class=\"time-parse\" v-if=\"parseValue.length > 1\">\r\n            <template v-if=\"parseValue[0]\">\r\n                <span class=\"month\">{{ parseValue[0] }}</span>\r\n            </template>\r\n            <template v-if=\"parseValue[1]\">\r\n                <span class=\"dayOfMonth\">{{ parseValue[1] }}</span>\r\n                <span v-if=\"parseValue[2]\">以及当月</span>\r\n            </template>\r\n            <template v-if=\"parseValue[2]\">\r\n                <span class=\"dayOfWeek\">{{ parseValue[2] }}</span>\r\n            </template>\r\n            <template v-if=\"parseValue[3]\">\r\n                <span class=\"hour\">{{ parseValue[3] }}</span>\r\n            </template>\r\n            <span class=\"minute\">{{ parseValue[4] }}</span>\r\n        </div>\r\n        <div v-if=\"nextTime.length > 0\" class=\"time-next\" :class=\"{ active: isTimeMore }\">\r\n            <div class=\"label\">{{ $t('cron.下次：') }}</div>\r\n            <div class=\"value\">\r\n                <div v-for=\"(time, index) in nextTime\" :key=\"`${time}_${index}`\">{{ time }}</div>\r\n            </div>\r\n            <div class=\"arrow\" @click=\"handleShowMore\">\r\n                <Icon type=\"angle-double-down\" class=\"arrow-button\" />\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n    import CronExpression from 'cron-parser-custom';\r\n    import Translate from '@utils/cron/translate';\r\n    import { prettyDateTimeFormat } from '@utils/assist';\r\n\r\n    const labelIndexMap = {\r\n        minute: 0,\r\n        hour: 1,\r\n        dayOfMonth: 2,\r\n        month: 3,\r\n        dayOfWeek: 4,\r\n        0: 'minute',\r\n        1: 'hour',\r\n        2: 'dayOfMonth',\r\n        3: 'month',\r\n        4: 'dayOfWeek',\r\n    };\r\n\r\n    export default {\r\n        name: '',\r\n        props: {\r\n            value: {\r\n                type: String,\r\n                default: '',\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                selectIndex: '',\r\n                nativeValue: this.value,\r\n                nextTime: [],\r\n                parseValue: [],\r\n                errorField: '',\r\n                isError: false,\r\n                isTimeMore: false,\r\n            };\r\n        },\r\n        mounted () {\r\n            if (!this.nativeValue) {\r\n                return;\r\n            }\r\n            this.checkAndTranslate(this.nativeValue);\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 检测crontab格式和翻译\r\n             */\r\n            checkAndTranslate (value) {\r\n                const interval = CronExpression.parse(`0 ${value.trim()}`, {\r\n                    currentDate: new Date(),\r\n                });\r\n\r\n                let i = 5;\r\n                this.nextTime = [];\r\n                while (i > 0) {\r\n                    this.nextTime.push(prettyDateTimeFormat(interval.next().toString()));\r\n                    i -= 1;\r\n                }\r\n\r\n                this.errorField = '';\r\n                this.isError = false;\r\n                this.parseValue = Translate(value);\r\n            },\r\n            /**\r\n             * @desc 选中crontab字段\r\n             * @param {String} lable 选中的字段名\r\n             */\r\n            handleTimeTextChange (label) {\r\n                if (!this.nativeValue) {\r\n                    return;\r\n                }\r\n                const timeItem = this.nativeValue.split(' ');\r\n                const index = labelIndexMap[label];\r\n                if (timeItem.length < index) {\r\n                    return;\r\n                }\r\n                const preStrLength = timeItem.slice(0, index).join('').length + index;\r\n                const endPosition = preStrLength + timeItem[index].length;\r\n                setTimeout(() => {\r\n                    this.selectIndex = label;\r\n                    this.$refs.input.focus();\r\n                    this.$refs.input.selectionStart = preStrLength;\r\n                    this.$refs.input.selectionEnd = endPosition;\r\n                });\r\n            },\r\n            /**\r\n             * @desc 输入框失去焦点\r\n             */\r\n            handleBlur () {\r\n                this.selectIndex = '';\r\n            },\r\n            /**\r\n             * @desc 选中输入框文本\r\n             * @param {Object} event 文本选择事件\r\n             */\r\n            handleSelectText (event) {\r\n                const $target = event.target;\r\n                const value = _.trim($target.value);\r\n                this.nativeValue = value;\r\n                if (!value) return;\r\n                setTimeout(() => {\r\n                    const cursorStart = $target.selectionStart;\r\n                    const cursorStr = value.slice(0, cursorStart);\r\n                    const checkBackspce = cursorStr.match(/ /g);\r\n                    if (checkBackspce) {\r\n                        this.selectIndex = labelIndexMap[checkBackspce.length];\r\n                    } else {\r\n                        this.selectIndex = labelIndexMap['0'];\r\n                    }\r\n                });\r\n            },\r\n            /**\r\n             * @desc 输入框输入\r\n             * @param {Object} event 输入框input事件\r\n             */\r\n            handleInput: _.debounce(function (event) {\r\n                const { value } = event.target;\r\n                this.nativeValue = value;\r\n\r\n                try {\r\n                    this.checkAndTranslate(value);\r\n                    this.$emit('change', value);\r\n                    this.$emit('input', value);\r\n                } catch (error) {\r\n                    this.parseValue = [];\r\n                    this.nextTime = [];\r\n                    const all = [\r\n                        'minute',\r\n                        'hour',\r\n                        'dayOfMonth',\r\n                        'month',\r\n                        'dayOfWeek',\r\n                    ];\r\n                    if (all.includes(error.message)) {\r\n                        this.errorField = error.message;\r\n                    }\r\n                    this.isError = true;\r\n                    this.$emit('change', '');\r\n                    this.$emit('input', '');\r\n                }\r\n            }, 200),\r\n            /**\r\n             * @desc 展示下次执行时间列表\r\n             */\r\n            handleShowMore () {\r\n                this.isTimeMore = !this.isTimeMore;\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss'>\r\n    .cron-job {\r\n        background: #f0f1f5;\r\n\r\n        &.is-error {\r\n            .time-input {\r\n                .input {\r\n                    border-color: #ff5656;\r\n                }\r\n            }\r\n        }\r\n\r\n        /* stylelint-disable selector-class-pattern */\r\n        &.error-month .month,\r\n        &.error-dayOfMonth .dayOfMonth,\r\n        &.error-dayOfWeek .dayOfWeek,\r\n        &.error-hour .hour,\r\n        &.error-minute .minute {\r\n            color: #ff5656 !important;\r\n        }\r\n\r\n        &.select-month .month,\r\n        &.select-dayOfMonth .dayOfMonth,\r\n        &.select-dayOfWeek .dayOfWeek,\r\n        &.select-hour .hour,\r\n        &.select-minute .minute {\r\n            color: #3a84ff;\r\n        }\r\n\r\n        .time-describe {\r\n            display: flex;\r\n            justify-content: center;\r\n        }\r\n\r\n        .time-text {\r\n            padding: 0 19px;\r\n            font-size: 12px;\r\n            line-height: 22px;\r\n            color: #c4c6cc;\r\n            cursor: pointer;\r\n            transition: all 0.1s;\r\n\r\n            &.active {\r\n                color: #3a84ff;\r\n            }\r\n\r\n            &.field-error {\r\n                color: #ff5656;\r\n            }\r\n        }\r\n\r\n        .time-input {\r\n            .input {\r\n                width: 100%;\r\n                height: 48px;\r\n                padding: 0 30px;\r\n                font-size: 24px;\r\n                line-height: 48px;\r\n                word-spacing: 30px;\r\n                color: #63656e;\r\n                text-align: center;\r\n                border: 1px solid #3a84ff;\r\n                border-radius: 2px;\r\n                outline: none;\r\n\r\n                &::selection {\r\n                    color: #3a84ff;\r\n                    background: transparent;\r\n                }\r\n            }\r\n        }\r\n\r\n        .time-parse {\r\n            padding: 10px 0;\r\n            margin-top: 8px;\r\n            line-height: 18px;\r\n            color: #63656e;\r\n            text-align: center;\r\n        }\r\n\r\n        .time-next {\r\n            display: flex;\r\n            height: 18px;\r\n            overflow: hidden;\r\n            font-size: 12px;\r\n            line-height: 18px;\r\n            color: #979ba5;\r\n            text-align: center;\r\n            transition: height 0.2s linear;\r\n            align-content: center;\r\n            justify-content: center;\r\n\r\n            &.active {\r\n                height: 90px;\r\n\r\n                .arrow {\r\n                    align-items: flex-end;\r\n\r\n                    .arrow-button {\r\n                        transform: rotateZ(-180deg);\r\n                    }\r\n                }\r\n            }\r\n\r\n            .value {\r\n                text-align: left;\r\n            }\r\n\r\n            .arrow {\r\n                display: flex;\r\n                padding-top: 2px;\r\n                padding-bottom: 2px;\r\n                padding-left: 2px;\r\n                font-size: 12px;\r\n                cursor: pointer;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <div\r\n        class=\"time-task-operation\"\r\n        :class=\"{ loading: isLoading }\"\r\n        v-bkloading=\"{ isLoading }\">\r\n        <jb-form\r\n            v-if=\"!isLoading\"\r\n            :model=\"formData\"\r\n            :rules=\"rules\"\r\n            form-type=\"vertical\"\r\n            ref=\"timeTaskForm\">\r\n            <jb-form-item\r\n                :label=\"$t('cron.任务名称.label')\"\r\n                required\r\n                property=\"name\">\r\n                <jb-input\r\n                    :placeholder=\"$t('cron.推荐按照该定时执行的实际场景来取名...')\"\r\n                    v-model=\"formData.name\"\r\n                    :maxlength=\"60\" />\r\n            </jb-form-item>\r\n            <jb-form-item\r\n                :label=\"$t('cron.执行策略.label')\"\r\n                required\r\n                :property=\"strategyField\">\r\n                <bk-radio-group\r\n                    :value=\"strategy\"\r\n                    @change=\"handleStrategyChange\">\r\n                    <bk-radio-button value=\"once\">\r\n                        {{ $t('cron.单次执行') }}\r\n                    </bk-radio-button>\r\n                    <bk-radio-button value=\"period\">\r\n                        {{ $t('cron.周期执行') }}\r\n                    </bk-radio-button>\r\n                </bk-radio-group>\r\n                <div class=\"strategy-wraper\">\r\n                    <render-strategy\r\n                        v-if=\"strategy === 'once'\"\r\n                        left=\"40\">\r\n                        <bk-date-picker\r\n                            style=\"width: 100%;\"\r\n                            v-model=\"formData.executeTime\"\r\n                            :transfer=\"true\"\r\n                            :clearable=\"false\"\r\n                            :options=\"dateOptions\"\r\n                            type=\"datetime\"\r\n                            :placeholder=\"$t('cron.选择日期时间')\" />\r\n                    </render-strategy>\r\n                    <render-strategy\r\n                        v-else\r\n                        left=\"135\">\r\n                        <cron-job\r\n                            v-model=\"formData.cronExpression\"\r\n                            class=\"cron-task\" />\r\n                    </render-strategy>\r\n                </div>\r\n            </jb-form-item>\r\n            <form-item-factory\r\n                v-for=\"item in strategyFormItemList\"\r\n                :name=\"item\"\r\n                :key=\"item\"\r\n                :form-data=\"formData\"\r\n                @on-change=\"handleFormItemChange\" />\r\n            <jb-form-item\r\n                :label=\"$t('cron.作业模板')\"\r\n                required\r\n                property=\"taskTemplateId\">\r\n                <bk-select\r\n                    v-model=\"formData.taskTemplateId\"\r\n                    :placeholder=\"$t('cron.选择作业模板')\"\r\n                    :clearable=\"false\"\r\n                    searchable\r\n                    :loading=\"isTemplateLoading\"\r\n                    @selected=\"handleTemplateChange\">\r\n                    <auth-option\r\n                        v-for=\"option in templateList\"\r\n                        :key=\"option.id\"\r\n                        :id=\"option.id\"\r\n                        :name=\"option.name\"\r\n                        :permission=\"option.canView\"\r\n                        :resource-id=\"option.id\"\r\n                        auth=\"job_template/view\" />\r\n                </bk-select>\r\n            </jb-form-item>\r\n            <jb-form-item\r\n                :label=\"$t('cron.执行方案')\"\r\n                required\r\n                property=\"taskPlanId\">\r\n                <div\r\n                    class=\"plan-select\"\r\n                    :class=\"hasPlan ? 'new-width' : ''\">\r\n                    <bk-select\r\n                        v-model=\"formData.taskPlanId\"\r\n                        :placeholder=\"$t('cron.选择执行方案')\"\r\n                        :clearable=\"false\"\r\n                        \r\n                        :loading=\"isPlanLoading\"\r\n                        searchable\r\n                        @selected=\"handlePlanChange\">\r\n                        <auth-option\r\n                            v-for=\"option in planList\"\r\n                            :key=\"option.id\"\r\n                            :id=\"option.id\"\r\n                            :name=\"option.name\"\r\n                            :permission=\"option.canView\"\r\n                            :resource-id=\"option.id\"\r\n                            auth=\"job_plan/view\" />\r\n                    </bk-select>\r\n                </div>\r\n                <div class=\"plan-icon\" v-if=\"hasPlan\">\r\n                    <Icon\r\n                        type=\"audit\"\r\n                        v-bk-tooltips=\"$t('cron.查看执行方案')\"\r\n                        @click=\"handleGoPlan\" />\r\n                </div>\r\n            </jb-form-item>\r\n            <div\r\n                v-if=\"hasPlan\"\r\n                class=\"global-variable-content\"\r\n                v-bkloading=\"{ isLoading: isVariableLoading }\">\r\n                <render-strategy left=\"70\">\r\n                    <span\r\n                        v-if=\"isVariabelEmpty\"\r\n                        class=\"plan-variable-empty\">\r\n                        {{ $t('cron.该执行方案无全局变量') }}\r\n                    </span>\r\n                    <global-variable-layout v-else type=\"vertical\">\r\n                        <global-variable\r\n                            ref=\"usedVariable\"\r\n                            v-for=\"variable in usedList\"\r\n                            value-width=\"100%\"\r\n                            :type=\"variable.type\"\r\n                            :key=\"`${currentRenderPlanId}_${variable.id}_${variable.name}`\"\r\n                            :data=\"variable\" />\r\n                        <toggle-display\r\n                            v-if=\"unusedList.length > 0\"\r\n                            :count=\"unusedList.length\"\r\n                            style=\"max-width: 960px; margin-top: 20px;\">\r\n                            <div style=\"margin-top: 20px;\">\r\n                                <global-variable\r\n                                    ref=\"unusedVariable\"\r\n                                    v-for=\"variable in unusedList\"\r\n                                    value-width=\"100%\"\r\n                                    :type=\"variable.type\"\r\n                                    :key=\"`${currentRenderPlanId}_${variable.id}_${variable.name}`\"\r\n                                    :data=\"variable\" />\r\n                            </div>\r\n                        </toggle-display>\r\n                    </global-variable-layout>\r\n                </render-strategy>\r\n            </div>\r\n        </jb-form>\r\n    </div>\r\n</template>\r\n<script>\r\n    import I18n from '@/i18n';\r\n    import TaskService from '@service/task-manage';\r\n    import TaskPlanService from '@service/task-plan';\r\n    import TimeTaskService from '@service/time-task';\r\n    import {\r\n        generatorDefaultCronTime,\r\n        findUsedVariable,\r\n    } from '@utils/assist';\r\n    import { timeTaskNameRule } from '@utils/validator';\r\n    import GlobalVariableLayout from '@components/global-variable/layout';\r\n    import GlobalVariable from '@components/global-variable/edit';\r\n    import ToggleDisplay from '@components/global-variable/toggle-display';\r\n    import JbInput from '@components/jb-input';\r\n    import RenderStrategy from '../render-strategy';\r\n    import FormItemFactory from './form-item-strategy';\r\n    import CronJob from './cron-job';\r\n\r\n    const onceItemList = [\r\n        'executeBeforeNotify',\r\n    ];\r\n    const periodItemList = [\r\n        'endTime',\r\n        'finishBeforeNotify',\r\n    ];\r\n\r\n    const getDefaultData = () => ({\r\n        id: 0,\r\n        executeBeforeNotify: false,\r\n        cronExpression: '* * * * *', // 循环执行的定时表达式\r\n        enable: false, // 是否启用\r\n        endTime: '', // 周期执行的结束时间\r\n        executeTime: generatorDefaultCronTime(), // 单次执行的指定执行时间\r\n        isEnable: false,\r\n        name: '', // 任务名称\r\n        notifyChannel: [], // 通知渠道\r\n        notifyOffset: 0, // 通知提前时间\r\n        notifyUser: { // 用户角色列表\r\n            roleList: [{},{},{}],\r\n            userList: [{},{},{}],\r\n        },\r\n        taskPlanId: 0, // 关联的执行方案 ID\r\n        taskTemplateId: 0,\r\n        variableValue: [], // 变量信息\r\n    });\r\n \r\n    export default {\r\n        name: '',\r\n        components: {\r\n            GlobalVariableLayout,\r\n            GlobalVariable,\r\n            ToggleDisplay,\r\n            RenderStrategy,\r\n            JbInput,\r\n            FormItemFactory,\r\n            CronJob,\r\n        },\r\n        props: {\r\n            data: {\r\n                type: Object,\r\n                default: () => ({}),\r\n            },\r\n            id: {\r\n                type: [\r\n                    String,\r\n                    Number,\r\n                ],\r\n                default: '',\r\n            },\r\n        },\r\n        data () {\r\n            this.rules = {};\r\n            return {\r\n                isLoading: false,\r\n                isTemplateLoading: false,\r\n                isPlanLoading: false,\r\n                strategy: 'period',\r\n                formData: getDefaultData(),\r\n                templateList: [{},{},{}],\r\n                planList: [{},{},{}],\r\n                planStepList: [{},{},{}],\r\n                isVariableLoading: false,\r\n                currentPlanVariableList: [{},{},{}],\r\n                currentRenderPlanId: 0, // 切换执行方案后更新全局变量（不同执行方案里面的变量id和name是相同的当value不同时页面不会更新）\r\n                usedList: [{},{},{}],\r\n                unusedList: [{},{},{}],\r\n                isRepeat: false,\r\n                dateOptions: {\r\n                    disabledDate (date) {\r\n                        return date.valueOf() < Date.now() - 86400000;\r\n                    },\r\n                },\r\n            };\r\n        },\r\n        computed: {\r\n            strategyFormItemList () {\r\n                if (this.strategy === 'once') {\r\n                    return onceItemList;\r\n                }\r\n                return periodItemList;\r\n            },\r\n            strategyField () {\r\n                return this.strategy === 'once' ? 'executeTime' : 'cronExpression';\r\n            },\r\n            hasTemplate () {\r\n                return !!this.formData.taskTemplateId;\r\n            },\r\n            hasPlan () {\r\n                return !!this.formData.taskPlanId;\r\n            },\r\n            hasVariabel () {\r\n                return this.currentPlanVariableList.length < 1;\r\n            },\r\n            isVariabelEmpty () {\r\n                return this.currentPlanVariableList.length < 1;\r\n            },\r\n        },\r\n        watch: {\r\n            strategy: {\r\n                handler (value) {\r\n                    if (value === 'once') {\r\n                        delete this.rules.cronExpression;\r\n                        this.rules.executeTime = [\r\n                            { required: true, message: I18n.t('cron.单次执行时间必填'), trigger: 'blur' },\r\n                            {\r\n                                validator: value => new Date(value).getTime() > Date.now(),\r\n                                message: I18n.t('cron.执行时间无效（早于当前时间）'),\r\n                                trigger: 'blur',\r\n                            },\r\n                        ];\r\n                    } else {\r\n                        delete this.rules.executeTime;\r\n                        this.rules.cronExpression = [\r\n                            { required: true, message: I18n.t('cron.请输入正确时间表达式'), trigger: 'blur' },\r\n                        ];\r\n                    }\r\n                },\r\n                immediate: true,\r\n            },\r\n            /**\r\n             * @desc 检测选中的执行方案的全局变量，判断出被使用和未被使用的变量\r\n             * @param { Array } variableList\r\n             */\r\n            currentPlanVariableList (variableList) {\r\n                // 执行方案使用的步骤中引用变量的状态\r\n                const planStepList = this.planStepList.filter(step => step.enable === 1);\r\n                const usedVariableNameMap = findUsedVariable(planStepList).reduce((result, item) => {\r\n                    result[item] = true;\r\n                    return result;\r\n                }, {});\r\n                // 执行方案中的步骤使用了得变量\r\n                const usedList = [];\r\n                // 未被使用的变量\r\n                const unusedList = [];\r\n                variableList.forEach((variable) => {\r\n                    if (usedVariableNameMap[variable.name]) {\r\n                        usedList.push(variable);\r\n                    } else {\r\n                        unusedList.push(variable);\r\n                    }\r\n                });\r\n                this.usedList = Object.freeze(usedList);\r\n                this.unusedList = Object.freeze(unusedList);\r\n            },\r\n        },\r\n        created () {\r\n            // 作业模板列表\r\n            this.fetchTemplateList();\r\n\r\n            if (this.data.id) {\r\n                // 编辑状态\r\n\r\n                this.formData.id = this.data.id;\r\n                this.formData.name = this.data.name;\r\n                this.formData.taskTemplateId = this.data.taskTemplateId;\r\n                this.formData.taskPlanId = this.data.taskPlanId;\r\n                this.fetchData();\r\n                this.fetchTemplatePlanList();\r\n            } else {\r\n                // 新建(指定指定执行方案)\r\n\r\n                // 通过url指定作业模板和执行方案的定时任务任务\r\n                // 执行方案id 必须是 templateId 同时存在时才有效\r\n                const { templateId, planId } = this.$route.query;\r\n                if (parseInt(templateId, 10) > 0) {\r\n                    this.formData.taskTemplateId = parseInt(templateId, 10);\r\n                    this.fetchTemplatePlanList();\r\n                    if (parseInt(planId, 10) > 0) {\r\n                        this.formData.taskPlanId = parseInt(planId, 10);\r\n                        this.fetchPlanDetailInfo();\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.rules = Object.assign({}, this.rules, {\r\n                name: [\r\n                    {\r\n                        required: true,\r\n                        message: I18n.t('cron.任务名称必填'),\r\n                        trigger: 'blur',\r\n                    },\r\n                    {\r\n                        validator: timeTaskNameRule.validator,\r\n                        message: timeTaskNameRule.message,\r\n                        trigger: 'blur',\r\n                    },\r\n                    {\r\n                        validator: this.checkName,\r\n                        message: I18n.t('cron.任务名称已存在，请重新输入'),\r\n                        trigger: 'blur',\r\n                    },\r\n                ],\r\n                taskTemplateId: [\r\n                    {\r\n                        required: true,\r\n                        message: I18n.t('cron.作业模板必填'),\r\n                        trigger: 'blur',\r\n                    },\r\n                ],\r\n                taskPlanId: [\r\n                    {\r\n                        required: true,\r\n                        message: I18n.t('cron.执行方案必填'),\r\n                        trigger: 'blur',\r\n                    },\r\n                ],\r\n            });\r\n        },\r\n        \r\n        methods: {\r\n            /**\r\n             * @desc 定时任务详情\r\n             */\r\n            fetchData () {\r\n                this.isLoading = true;\r\n                Promise.all([\r\n                    TimeTaskService.getDetail({\r\n                        id: this.formData.id,\r\n                    }),\r\n                    TaskPlanService.fetchPlanDetailInfo({\r\n                        templateId: this.formData.taskTemplateId,\r\n                        id: this.formData.taskPlanId,\r\n                    }),\r\n                ]).then(([\r\n                    cronJob,\r\n                    planInfo,\r\n                ]) => {\r\n                    const {\r\n                        cronExpression,\r\n                        enable,\r\n                        endTime,\r\n                        executeTime,\r\n                        name,\r\n                        notifyChannel,\r\n                        notifyOffset,\r\n                        notifyUser,\r\n                        scriptId,\r\n                        scriptVersionId,\r\n                        taskPlanId,\r\n                        taskTemplateId,\r\n                    } = cronJob;\r\n\r\n                    if (executeTime) {\r\n                        this.strategy = 'once';\r\n                    }\r\n                    this.formData = {\r\n                        ...this.formData,\r\n                        cronExpression,\r\n                        enable,\r\n                        endTime,\r\n                        executeTime,\r\n                        name,\r\n                        notifyChannel,\r\n                        notifyOffset,\r\n                        notifyUser,\r\n                        scriptId,\r\n                        scriptVersionId,\r\n                        taskPlanId,\r\n                        taskTemplateId,\r\n                        variableValue: [],\r\n                    };\r\n\r\n                    // 使用执行方案的变量\r\n                    // 如果定时任务任务中存有变量变量值——拷贝过来\r\n                    // 获取执行方案的接口是一个批量接口，取数组第一个\r\n                    if (planInfo) {\r\n                        this.planStepList = Object.freeze(planInfo.stepList);\r\n                        const cronJobVariableList = [\r\n                            ...cronJob.variableValue,\r\n                        ];\r\n                        // 当前定时任务变量\r\n                        const cronJobVariableMap = cronJobVariableList.reduce((result, variableItem) => {\r\n                            result[variableItem.id] = variableItem;\r\n                            return result;\r\n                        }, {});\r\n                        const currentPlanVariableList = planInfo.variableList;\r\n                        // 拷贝定时任务中的变量值到执行方案的相同变量中\r\n                        // 定时任务中的变量是执行的赋值逻辑，分别使用的是value、server字段来存储\r\n                        // 执行方案中的变量表示的是默认值，分别使用defaultValue、defaultTargetValue字段来存储\r\n                        currentPlanVariableList.forEach((validVariableFromPlan) => {\r\n                            if (cronJobVariableMap[validVariableFromPlan.id]) {\r\n                                const { value, targetValue } = cronJobVariableMap[validVariableFromPlan.id];\r\n                                validVariableFromPlan.defaultValue = value;\r\n                                validVariableFromPlan.defaultTargetValue = targetValue;\r\n                            }\r\n                        });\r\n                        this.currentPlanVariableList = Object.freeze(currentPlanVariableList);\r\n                    }\r\n                })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    })\r\n                    .catch((error) => {\r\n                        if (error.code === 1238001) {\r\n                            this.formData.taskTemplateId = '';\r\n                            this.formData.taskPlanId = '';\r\n                        }\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 所有的作业模板列表\r\n             */\r\n            fetchTemplateList () {\r\n                this.isTemplateLoading = true;\r\n                TaskService.taskList({\r\n                    pageSize: -1,\r\n                    start: -1,\r\n                }).then(({ data }) => {\r\n                    this.templateList = Object.freeze(data);\r\n                })\r\n                    .finally(() => {\r\n                        this.isTemplateLoading = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 指定作业模板关联的执行方案列白哦\r\n             */\r\n            fetchTemplatePlanList () {\r\n                this.isPlanLoading = true;\r\n                TaskPlanService.fetchTaskPlan({\r\n                    id: this.formData.taskTemplateId,\r\n                }).then((data) => {\r\n                    this.planList = Object.freeze(data);\r\n                })\r\n                    .finally(() => {\r\n                        this.isPlanLoading = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 执行方案详情\r\n             */\r\n            fetchPlanDetailInfo () {\r\n                this.isVariableLoading = true;\r\n                TaskPlanService.fetchPlanDetailInfo({\r\n                    templateId: this.formData.taskTemplateId,\r\n                    id: this.formData.taskPlanId,\r\n                }).then((planInfo) => {\r\n                    this.currentPlanVariableList = Object.freeze(planInfo.variableList);\r\n                    this.currentRenderPlanId = this.formData.taskPlanId;\r\n                    this.planStepList = Object.freeze(planInfo.stepList);\r\n                })\r\n                    .finally(() => {\r\n                        this.isVariableLoading = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 检测定时任务是否重名\r\n             * @param {String} name 定时任务名\r\n             */\r\n            checkName (name) {\r\n                return TimeTaskService.timeTaskCheckName({\r\n                    id: this.formData.id,\r\n                    name,\r\n                });\r\n            },\r\n            /**\r\n             * @desc 切换执行策略\r\n             * @param {String} strategy 执行策略\r\n             */\r\n            handleStrategyChange (strategy) {\r\n                this.strategy = strategy;\r\n                if (strategy === 'once') {\r\n                    this.$refs.timeTaskForm.clearError('cronExpression');\r\n                    this.formData.executeTime = generatorDefaultCronTime();\r\n                } else {\r\n                    this.formData.cronExpression = '* * * * *';\r\n                }\r\n                this.formData.endTime = '';\r\n                this.formData.notifyChannel = [];\r\n                this.formData.notifyOffset = 0; // 通知提前时间\r\n                this.formData.notifyUser = { // 用户角色列表\r\n                    roleList: [{},{},{}],\r\n                    userList: [{},{},{}],\r\n                };\r\n            },\r\n            /**\r\n             * @desc 执行通知相关的字段值更新\r\n             * @param {Object} payload 字段名和值\r\n             */\r\n            handleFormItemChange (payload) {\r\n                this.formData = {\r\n                    ...this.formData,\r\n                    ...payload,\r\n                };\r\n            },\r\n            /**\r\n             * @desc 作业模板更新\r\n             * @param {Id} templateId 作业模板id\r\n             *\r\n             * 作业模板改变时重新获取执行方案列表\r\n             */\r\n            handleTemplateChange (templateId) {\r\n                this.formData.taskPlanId = '';\r\n                if (templateId) {\r\n                    this.fetchTemplatePlanList();\r\n                }\r\n            },\r\n            /**\r\n             * @desc 执行方案更新\r\n             * @param {Id} planId 执行方案id\r\n             *\r\n             * 执行方案该表重新获取执行方案详情\r\n             */\r\n            handlePlanChange (planId) {\r\n                if (planId) {\r\n                    this.fetchPlanDetailInfo();\r\n                }\r\n            },\r\n            /**\r\n             * @desc 打开执行方案详情页\r\n             */\r\n            handleGoPlan () {\r\n                const routerUrl = this.$router.resolve({\r\n                    name: 'viewPlan',\r\n                    params: {\r\n                        templateId: this.formData.taskTemplateId,\r\n                    },\r\n                    query: {\r\n                        from: 'cronJob',\r\n                        viewPlanId: this.formData.taskPlanId,\r\n                    },\r\n                });\r\n                window.open(routerUrl.href, '_blank');\r\n            },\r\n            /**\r\n             * @desc 保存定时任务\r\n             */\r\n            submit () {\r\n                return this.$refs.timeTaskForm.validate().then(() => {\r\n                    if (this.currentPlanVariableList.length < 1) {\r\n                        return Promise.resolve([]);\r\n                    }\r\n                    const validateQueue = [];\r\n                    if (this.$refs.usedVariable) {\r\n                        this.$refs.usedVariable.forEach((item) => {\r\n                            validateQueue.push(item.validate());\r\n                        });\r\n                    }\r\n                    if (this.$refs.unusedVariable) {\r\n                        this.$refs.unusedVariable.forEach((item) => {\r\n                            validateQueue.push(item.validate());\r\n                        });\r\n                    }\r\n                    return Promise.all(validateQueue);\r\n                })\r\n                    .then((variableValue) => {\r\n                        const params = { ...this.formData };\r\n                        if (this.strategy === 'period') {\r\n                            params.executeTime = '';\r\n                        } else {\r\n                            params.cronExpression = '';\r\n                            params.executeTime = new Date(params.executeTime).getTime() / 1000;\r\n                        }\r\n                        if (params.endTime) {\r\n                            params.endTime = new Date(params.endTime).getTime() / 1000;\r\n                        }\r\n                        return TimeTaskService.timeTaskUpdate({\r\n                            ...params,\r\n                            variableValue,\r\n                        }).then(() => {\r\n                            if (params.id) {\r\n                                // 编辑\r\n                                this.messageSuccess(I18n.t('cron.定时任务编辑成功'));\r\n                            } else {\r\n                                // 新建\r\n                                this.messageSuccess(I18n.t('cron.定时任务创建成功(默认关闭，请手动开启)'));\r\n                            }\r\n                            \r\n                            this.$emit('on-change');\r\n                        });\r\n                    });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    .time-task-operation {\r\n        &.loading {\r\n            height: calc(100vh - 100px);\r\n        }\r\n\r\n        .global-variable-content {\r\n            position: relative;\r\n            top: -10px;\r\n        }\r\n\r\n        .plan-select {\r\n            display: inline-block;\r\n            width: 100%;\r\n\r\n            &.new-width {\r\n                width: calc(100% - 22px);\r\n            }\r\n        }\r\n\r\n        .plan-icon {\r\n            display: inline-block;\r\n            font-size: 16px;\r\n            color: #979ba5;\r\n            vertical-align: top;\r\n            cursor: pointer;\r\n        }\r\n\r\n        .plan-variable-empty {\r\n            color: #b2b5bd;\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <detail-layout\r\n        mode=\"see\"\r\n        class=\"detail-layout-wrapper\"\r\n        v-bkloading=\"{ isLoading }\">\r\n        <detail-item :label=\"$t('cron.任务名称：')\">\r\n            {{ data.name }}\r\n        </detail-item>\r\n        <detail-item :label=\"$t('cron.执行策略：')\">\r\n            {{ data.executeStrategyText }}\r\n        </detail-item>\r\n        <detail-item :label=\"$t('cron.执行时间：')\">\r\n            <span\r\n                class=\"tips\"\r\n                v-bk-tooltips.right=\"data.executeTimeTips\">\r\n                {{ data.policeText }}\r\n            </span>\r\n        </detail-item>\r\n        <detail-item v-if=\"data.endTime\" :label=\"$t('cron.结束时间：')\">\r\n            {{ data.endTime }}\r\n        </detail-item>\r\n        <detail-item\r\n            v-if=\"data.notifyOffset\"\r\n            :label=\"data.executeStrategy === 'once' ? $t('cron.执行前通知：') : $t('cron.结束前通知：')\">\r\n            {{ data.notifyOffset }}{{ $t('cron.分钟') }}\r\n        </detail-item>\r\n        <detail-item\r\n            v-if=\"renderRoleList.length > 0 || data.notifyUser.userList.length > 0\"\r\n            :label=\"$t('cron.通知对象：')\">\r\n            <div class=\"approval-wraper\">\r\n                <div v-for=\"role in renderRoleList\" :key=\"role\" class=\"item\">\r\n                    <Icon type=\"user-group-gray\" class=\"approval-flag\" />\r\n                    {{ role }}\r\n                </div>\r\n                <div v-for=\"user in data.notifyUser.userList\" :key=\"user\" class=\"item\">\r\n                    <Icon type=\"user\" class=\"approval-flag\" />\r\n                    {{ user }}\r\n                </div>\r\n            </div>\r\n        </detail-item>\r\n        <detail-item v-if=\"renderChannel\" :label=\"$t('cron.通知方式：')\">\r\n            {{ renderChannel }}\r\n        </detail-item>\r\n        <detail-item :label=\"$t('cron.执行方案：')\">\r\n            {{ data.taskPlanName }}\r\n        </detail-item>\r\n        <render-strategy left=\"20\" v-bkloading=\"{ isVarLoading }\">\r\n            <template v-if=\"!isVarLoading\">\r\n                <span\r\n                    v-if=\"currentPlanVariableList.length < 1\"\r\n                    class=\"plan-variable-empty\">\r\n                    {{ $t('cron.该执行方案无全局变量') }}\r\n                </span>\r\n                <global-variable-layout v-else>\r\n                    <global-variable\r\n                        v-for=\"variable in currentPlanVariableList\"\r\n                        value-width=\"100%\"\r\n                        :type=\"variable.type\"\r\n                        :layout=\"variable.type === 3 ? 'vertical' : ''\"\r\n                        :key=\"variable.id + variable.name\"\r\n                        :data=\"variable\" />\r\n                </global-variable-layout>\r\n            </template>\r\n        </render-strategy>\r\n    </detail-layout>\r\n</template>\r\n<script>\r\n    import QueryGlobalSettingService from '@service/query-global-setting';\r\n    import NotifyService from '@service/notify';\r\n    import TaskPlanService from '@service/task-plan';\r\n    import DetailLayout from '@components/detail-layout';\r\n    import DetailItem from '@components/detail-layout/item';\r\n    import GlobalVariableLayout from '@components/global-variable/layout';\r\n    import GlobalVariable from '@components/global-variable/view';\r\n    import RenderStrategy from './render-strategy';\r\n\r\n    export default {\r\n        name: 'TimeTaskDetail',\r\n        components: {\r\n            DetailLayout,\r\n            DetailItem,\r\n            RenderStrategy,\r\n            GlobalVariableLayout,\r\n            GlobalVariable,\r\n        },\r\n        props: {\r\n            data: {\r\n                type: Object,\r\n                default: () => ({}),\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: true,\r\n                isVarLoading: false,\r\n                renderRoleList: [{},{},{}],\r\n                renderChannel: '',\r\n                currentPlanVariableList: [{},{},{}],\r\n            };\r\n        },\r\n        \r\n        created () {\r\n            Promise.all([\r\n                this.fetchData(),\r\n                this.fetchRoleList(),\r\n                this.fetchAllChannel(),\r\n            ]).finally(() => {\r\n                this.isLoading = false;\r\n            });\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 获取定时人详情\r\n             */\r\n            fetchData () {\r\n                TaskPlanService.fetchPlanDetailInfo({\r\n                    templateId: this.data.taskTemplateId,\r\n                    id: this.data.taskPlanId,\r\n                }).then((planInfo) => {\r\n                    // 使用执行方案的变量\r\n                    // 如果定时任务任务中存有变量变量值——拷贝过来\r\n                    const currentPlanVariableList = planInfo.variableList;\r\n                    // 当前定时任务变量\r\n                    const cronJobVariableMap = this.data.variableValue.reduce((result, variableItem) => {\r\n                        result[variableItem.id] = variableItem;\r\n                        return result;\r\n                    }, {});\r\n                    // 拷贝定时任务中的变量值到执行方案的相同变量中\r\n                    // 定时任务中的变量是执行的赋值逻辑，分别使用的是value、server字段来存储\r\n                    // 执行方案中的变量表示的是默认值，分别使用defaultValue、defaultTargetValue字段来存储\r\n                    currentPlanVariableList.forEach((validVariableFromPlan) => {\r\n                        if (cronJobVariableMap[validVariableFromPlan.id]) {\r\n                            const { value, targetValue } = cronJobVariableMap[validVariableFromPlan.id];\r\n                            validVariableFromPlan.defaultValue = value;\r\n                            validVariableFromPlan.defaultTargetValue = targetValue;\r\n                        }\r\n                    });\r\n                    this.currentPlanVariableList = Object.freeze(currentPlanVariableList);\r\n                });\r\n            },\r\n            /**\r\n             * @desc 通知人列表\r\n             */\r\n            fetchRoleList () {\r\n                NotifyService.fetchRoleList()\r\n                    .then((data) => {\r\n                        const roleMap = {};\r\n                        data.forEach((role) => {\r\n                            roleMap[role.code] = role.name;\r\n                        });\r\n                        this.renderRoleList = this.data.notifyUser.roleList.map(_ => roleMap[_]);\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 通知渠道\r\n             */\r\n            fetchAllChannel () {\r\n                QueryGlobalSettingService.fetchActiveNotifyChannel()\r\n                    .then((data) => {\r\n                        const channelMap = {};\r\n                        data.forEach((channel) => {\r\n                            channelMap[channel.code] = channel.name;\r\n                        });\r\n                        this.renderChannel = this.data.notifyChannel.map(_ => channelMap[_]).join('，');\r\n                    });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\" scoped>\r\n    .detail-layout-wrapper {\r\n        .approval-wraper {\r\n            display: flex;\r\n            align-items: center;\r\n            height: 34px;\r\n\r\n            .item {\r\n                display: flex;\r\n                height: 20px;\r\n                padding: 0 6px;\r\n                margin-right: 10px;\r\n                font-size: 12px;\r\n                color: #63656e;\r\n                background: #f0f1f5;\r\n                border-radius: 2px;\r\n                align-items: center;\r\n            }\r\n\r\n            .approval-flag {\r\n                margin-right: 4px;\r\n            }\r\n        }\r\n\r\n        .detail-item {\r\n            margin-bottom: 0;\r\n        }\r\n\r\n        .plan-variable-empty {\r\n            color: #b2b5bd;\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <div class=\"cron-job-history-record\">\r\n        <div class=\"record-tab-wraper\">\r\n            <div\r\n                class=\"tab-item\"\r\n                :class=\"{ active: listTab === 'launch' }\"\r\n                @click=\"handleTabChange('launch')\">\r\n                <div class=\"tab-name\">{{ $t('cron.任务正常启动') }}</div>\r\n                <Icon\r\n                    v-if=\"isLaunchLoading\"\r\n                    type=\"sync-pending\"\r\n                    svg\r\n                    class=\"loading-flag\" />\r\n                <div v-else class=\"tab-nums\">{{ launchNums }}</div>\r\n            </div>\r\n            <div\r\n                class=\"tab-item\"\r\n                :class=\"{ active: listTab === 'unlaunch' }\"\r\n                @click=\"handleTabChange('unlaunch')\">\r\n                <div class=\"tab-name\">{{ $t('cron.任务未能启动') }}</div>\r\n                <Icon\r\n                    v-if=\"isUnlaunchLoading\"\r\n                    type=\"sync-pending\"\r\n                    svg\r\n                    class=\"loading-flag\" />\r\n                <div v-else class=\"tab-nums\">{{ unLaunchNums }}</div>\r\n            </div>\r\n        </div>\r\n        <component\r\n            :is=\"listCom\"\r\n            :data=\"data\"\r\n            v-bind=\"$attrs\"\r\n            v-on=\"$listeners\" />\r\n    </div>\r\n</template>\r\n<script>\r\n    import TaskExecuteService from '@service/task-execute';\r\n    import TimeTaskService from '@service/time-task';\r\n    import LaunchList from './launch-list';\r\n    import UnlaunchList from './unlaunch-list';\r\n\r\n    const listComMap = {\r\n        launch: LaunchList,\r\n        unlaunch: UnlaunchList,\r\n    };\r\n\r\n    export default {\r\n        name: '',\r\n        props: {\r\n            data: {\r\n                type: Object,\r\n                required: true,\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                listTab: 'launch',\r\n                isLaunchLoading: true,\r\n                isUnlaunchLoading: true,\r\n                launchNums: 0,\r\n                unLaunchNums: 0,\r\n            };\r\n        },\r\n        computed: {\r\n            listCom () {\r\n                return listComMap[this.listTab];\r\n            },\r\n        },\r\n        created () {\r\n            this.fetchData();\r\n        },\r\n        methods: {\r\n            handleTabChange (value) {\r\n                this.listTab = value;\r\n            },\r\n            fetchData () {\r\n                TaskExecuteService.fetchExecutionHistoryList({\r\n                    cronTaskId: this.data.id,\r\n                    startTime: '',\r\n                    endTime: '',\r\n                    start: 0,\r\n                    pageSize: 1,\r\n                    timeRange: 30,\r\n                }).then((data) => {\r\n                    this.launchNums = data.total;\r\n                })\r\n                    .finally(() => {\r\n                        this.isLaunchLoading = false;\r\n                    });\r\n                TimeTaskService.fetchUnlaunchHistory({\r\n                    cronTaskId: this.data.id,\r\n                    start: 0,\r\n                    pageSize: 1,\r\n                    timeRange: 30,\r\n                }).then((data) => {\r\n                    this.unLaunchNums = data.total;\r\n                })\r\n                    .finally(() => {\r\n                        this.isUnlaunchLoading = false;\r\n                    });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang='postcss' scoped>\r\n    .cron-job-history-record {\r\n        .record-tab-wraper {\r\n            display: flex;\r\n            padding: 20px 30px 0;\r\n            margin: -20px -30px 20px;\r\n            background: #f5f6fa;\r\n            border-bottom: 1px solid #dcdee5;\r\n\r\n            .tab-item {\r\n                display: flex;\r\n                height: 32px;\r\n                padding: 0 12px;\r\n                margin-right: 20px;\r\n                margin-bottom: -1px;\r\n                font-size: 13px;\r\n                line-height: 32px;\r\n                color: #63656e;\r\n                cursor: pointer;\r\n                background: #e1e3eb;\r\n                border: 1px solid #e1e3eb;\r\n                border-bottom: none;\r\n                border-top-right-radius: 4px;\r\n                border-top-left-radius: 4px;\r\n                transition: all 0.15s;\r\n                align-items: center;\r\n\r\n                &.active {\r\n                    color: ##313238;\r\n                    background: #fff;\r\n                    border-color: #dcdee5;\r\n\r\n                    .tab-nums {\r\n                        color: #63656e;\r\n                        background: #ebecf0;\r\n                    }\r\n\r\n                    .loading-flag {\r\n                        color: #fff;\r\n                    }\r\n                }\r\n            }\r\n\r\n            .tab-name {\r\n                margin-right: 4px;\r\n            }\r\n\r\n            .tab-nums {\r\n                height: 16px;\r\n                padding: 0 4px;\r\n                font-size: 12px;\r\n                line-height: 16px;\r\n                color: #63656e;\r\n                background: #ebecf0;\r\n                border-radius: 8px;\r\n                transition: all 0.15s;\r\n            }\r\n\r\n            .loading-flag {\r\n                color: #3a84ff;\r\n                animation: sync-fetch-loading 1s linear infinite;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n","\r\n\r\n<template>\r\n    <div class=\"cron-job-manage\">\r\n        <list-action-layout>\r\n            <auth-button\r\n                ref=\"create\"\r\n                theme=\"primary\"\r\n                auth=\"cron/create\"\r\n                @click=\"handleCreate\"\r\n                class=\"w120\"\r\n                v-test=\"{ type: 'button', value: 'createCrontab' }\">\r\n                {{ $t('cron.新建') }}\r\n            </auth-button>\r\n            <template #right>\r\n                <jb-search-select\r\n                    ref=\"search\"\r\n                    @on-change=\"handleSearch\"\r\n                    :data=\"searchSelect\"\r\n                    :placeholder=\"$t('cron.搜索任务ID，任务名称，更新人...')\"\r\n                    style=\"width: 480px;\" />\r\n            </template>\r\n        </list-action-layout>\r\n        <render-list\r\n            ref=\"list\"\r\n            :data-source=\"getCronJobList\"\r\n            :size=\"tableSize\"\r\n            :search-control=\"() => $refs.search\"\r\n            v-test=\"{ type: 'list', value: 'crontab' }\">\r\n            <bk-table-column\r\n                v-if=\"allRenderColumnMap.id\"\r\n                label=\"ID\"\r\n                prop=\"id\"\r\n                key=\"id\"\r\n                width=\"100\"\r\n                align=\"left\" />\r\n            <bk-table-column\r\n                v-if=\"allRenderColumnMap.name\"\r\n                :label=\"$t('cron.任务名称.colHead')\"\r\n                sortable\r\n                prop=\"name\"\r\n                key=\"name\"\r\n                align=\"left\"\r\n                min-width=\"200\"\r\n                show-overflow-tooltip>\r\n                <template slot-scope=\"{ row }\">\r\n                    <auth-component\r\n                        :permission=\"row.canManage\"\r\n                        :resource-id=\"row.id\"\r\n                        auth=\"cron/view\">\r\n                        <span class=\"time-task-name\" @click=\"handleViewDetail(row)\">\r\n                            {{ row.name }}\r\n                        </span>\r\n                        <span slot=\"forbid\">{{ row.name }}</span>\r\n                    </auth-component>\r\n                </template>\r\n            </bk-table-column>\r\n            <bk-table-column\r\n                v-if=\"allRenderColumnMap.planName\"\r\n                :label=\"$t('cron.执行方案名称')\"\r\n                key=\"planName\"\r\n                min-width=\"200\"\r\n                align=\"left\"\r\n                show-overflow-tooltip>\r\n                <template slot-scope=\"{ row }\">\r\n                    <div v-if=\"row.isPlanLoading\" class=\"sync-fetch\">\r\n                        <div class=\"sync-fetch-loading\">\r\n                            <Icon type=\"sync-pending\" svg style=\"color: #3a84ff;\" />\r\n                        </div>\r\n                    </div>\r\n                    <router-link\r\n                        v-else\r\n                        class=\"task-plan-text\"\r\n                        :to=\"{\r\n                            name: 'viewPlan',\r\n                            params: {\r\n                                templateid: 4 || row.taskTemplateId,\r\n                            },\r\n                            query: {\r\n                                from: 'cronJob',\r\n                                viewPlanid: 4 || row.taskPlanId,\r\n                            },\r\n                        }\">\r\n                        {{ row.taskPlanName }}\r\n                    </router-link>\r\n                </template>\r\n            </bk-table-column>\r\n            <bk-table-column\r\n                v-if=\"allRenderColumnMap.policeText\"\r\n                :label=\"$t('cron.执行策略.colHead')\"\r\n                prop=\"policeText\"\r\n                key=\"policeText\"\r\n                width=\"180\"\r\n                align=\"left\">\r\n                <template slot-scope=\"{ row }\">\r\n                    <span\r\n                        class=\"tips\"\r\n                        v-bk-tooltips.right=\"row.executeTimeTips\">\r\n                        {{ row.policeText }}\r\n                    </span>\r\n                </template>\r\n            </bk-table-column>\r\n            <bk-table-column\r\n                v-if=\"allRenderColumnMap.creator\"\r\n                :label=\"$t('cron.创建人')\"\r\n                prop=\"creator\"\r\n                key=\"creator\"\r\n                width=\"120\"\r\n                align=\"left\" />\r\n            <bk-table-column\r\n                v-if=\"allRenderColumnMap.createTime\"\r\n                :label=\"$t('cron.创建时间')\"\r\n                prop=\"createTime\"\r\n                key=\"createTime\"\r\n                width=\"180\"\r\n                align=\"left\" />\r\n            <bk-table-column\r\n                v-if=\"allRenderColumnMap.lastModifyUser\"\r\n                :label=\"$t('cron.更新人.colHead')\"\r\n                sortable\r\n                prop=\"lastModifyUser\"\r\n                key=\"lastModifyUser\"\r\n                width=\"140\"\r\n                align=\"left\" />\r\n            <bk-table-column\r\n                v-if=\"allRenderColumnMap.lastModifyTime\"\r\n                :label=\"$t('cron.更新时间')\"\r\n                prop=\"lastModifyTime\"\r\n                key=\"lastModifyTime\"\r\n                width=\"180\"\r\n                align=\"left\" />\r\n            <bk-table-column\r\n                v-if=\"allRenderColumnMap.lastExecuteStatus\"\r\n                :label=\"$t('cron.最新执行结果')\"\r\n                sortable\r\n                prop=\"lastExecuteStatus\"\r\n                key=\"lastExecuteStatus\"\r\n                width=\"150\"\r\n                align=\"left\">\r\n                <template slot-scope=\"{ row }\">\r\n                    <Icon\r\n                        svg\r\n                        :type=\"row.statusIconType\"\r\n                        style=\"font-size: 16px; vertical-align: middle;\" />\r\n                    <span style=\"vertical-align: middle;\">{{ row.statusText }}</span>\r\n                </template>\r\n            </bk-table-column>\r\n            <bk-table-column\r\n                v-if=\"allRenderColumnMap.successRateText\"\r\n                :label=\"$t('cron.周期成功率')\"\r\n                :render-header=\"renderHeader\"\r\n                key=\"successRateText\"\r\n                width=\"150\"\r\n                align=\"left\">\r\n                <template slot-scope=\"{ row }\">\r\n                    <div v-if=\"row.isStatictisLoading\" class=\"sync-fetch\">\r\n                        <div class=\"sync-fetch-loading\">\r\n                            <Icon type=\"sync-pending\" svg style=\"color: #3a84ff;\" />\r\n                        </div>\r\n                    </div>\r\n                    <template v-else>\r\n                        <template v-if=\"row.isRateEmpty\">\r\n                            <p v-html=\"row.successRateText\" />\r\n                        </template>\r\n                        <template v-else>\r\n                            <bk-popover placement=\"right\" theme=\"light\">\r\n                                <p style=\"padding-right: 10px;\" v-html=\"row.successRateText\" />\r\n                                <div slot=\"content\" style=\"color: #63656e;\">\r\n                                    <div v-html=\"row.successRateTips\" />\r\n                                    <div v-if=\"row.showMoreFailAcion\" class=\"more-fail-action\">\r\n                                        <bk-button\r\n                                            text\r\n                                            @click=\"handleHistoryRecord(row, true)\">\r\n                                            {{ $t('cron.更多失败记录') }}\r\n                                        </bk-button>\r\n                                    </div>\r\n                                </div>\r\n                            </bk-popover>\r\n                        </template>\r\n                    </template>\r\n                </template>\r\n            </bk-table-column>\r\n            <bk-table-column\r\n                :label=\"$t('cron.操作')\"\r\n                :resizable=\"false\"\r\n                width=\"200\"\r\n                key=\"action\"\r\n                fixed=\"right\"\r\n                align=\"left\">\r\n                <template slot-scope=\"{ row }\">\r\n                    <bk-switcher\r\n                        :value=\"row.enable\"\r\n                        size=\"small\"\r\n                        theme=\"primary\"\r\n                        class=\"mr10\"\r\n                        @change=\"value => handleStatusChange(value, row)\"\r\n                        v-test=\"{ type: 'button', value: 'toggleCrontabStatus' }\" />\r\n                    <auth-button\r\n                        auth=\"cron/edit\"\r\n                        :resource-id=\"row.id\"\r\n                        :permission=\"row.canManage\"\r\n                        class=\"time-task-edit mr10\"\r\n                        text\r\n                        @click=\"handleEdit(row)\"\r\n                        v-test=\"{ type: 'button', value: 'editCrontab' }\">\r\n                        {{ $t('cron.编辑') }}\r\n                    </auth-button>\r\n                    <jb-popover-confirm\r\n                        :title=\"$t('cron.确定删除该定时任务？')\"\r\n                        :content=\"$t('cron.删除后不可恢复，请谨慎操作！')\"\r\n                        :confirm-handler=\"instance => handleDelete(row)\">\r\n                        <auth-button\r\n                            auth=\"cron/delete\"\r\n                            :resource-id=\"row.id\"\r\n                            :permission=\"row.canManage\"\r\n                            text\r\n                            v-test=\"{ type: 'button', value: 'deleteCrontab' }\">\r\n                            {{ $t('cron.删除') }}\r\n                        </auth-button>\r\n                    </jb-popover-confirm>\r\n                    <bk-button\r\n                        text\r\n                        @click=\"handleHistoryRecord(row)\"\r\n                        v-test=\"{ type: 'button', value: 'crontabExecRecord' }\">\r\n                        {{ $t('cron.执行记录') }}\r\n                    </bk-button>\r\n                </template>\r\n            </bk-table-column>\r\n            <bk-table-column type=\"setting\">\r\n                <bk-table-setting-content\r\n                    :fields=\"tableColumn\"\r\n                    :selected=\"selectedTableColumn\"\r\n                    :size=\"tableSize\"\r\n                    @setting-change=\"handleSettingChange\" />\r\n            </bk-table-column>\r\n        </render-list>\r\n        <jb-sideslider\r\n            :is-show.sync=\"showOperation\"\r\n            v-bind=\"operationSidesliderInfo\"\r\n            :width=\"960\">\r\n            <task-operation\r\n                v-if=\"showOperation\"\r\n                :id=\"editTaskId\"\r\n                :data=\"cronJobDetailInfo\"\r\n                @on-change=\"handleCronChange\" />\r\n        </jb-sideslider>\r\n        <jb-sideslider\r\n            :is-show.sync=\"showDetail\"\r\n            :title=\"$t('cron.定时任务详情')\"\r\n            :width=\"960\">\r\n            <task-detail :data=\"cronJobDetailInfo\" />\r\n            <template #footer>\r\n                <bk-button\r\n                    theme=\"primary\"\r\n                    @click=\"handleToggelEdit\"\r\n                    v-test=\"{ type: 'button', value: 'showCrontabDetail' }\">\r\n                    {{ $t('cron.编辑') }}\r\n                </bk-button>\r\n            </template>\r\n        </jb-sideslider>\r\n        <jb-sideslider\r\n            :is-show.sync=\"showHistoryRecord\"\r\n            :show-footer=\"false\"\r\n            quick-close\r\n            transfer\r\n            :width=\"960\">\r\n            <div slot=\"header\">\r\n                <span>{{ $t('cron.定时执行记录') }}</span>\r\n                <span style=\"font-size: 12px; color: #313238;\">（{{ cronJobDetailInfo.name }}）</span>\r\n            </div>\r\n            <history-record\r\n                v-if=\"showHistoryRecord\"\r\n                :show-faild=\"showHistoryFailedRecord\"\r\n                :data=\"cronJobDetailInfo\"\r\n                @on-change=\"handleCronChange\" />\r\n        </jb-sideslider>\r\n    </div>\r\n</template>\r\n<script>\r\n    import I18n from '@/i18n';\r\n    import TimeTaskService from '@service/time-task';\r\n    import NotifyService from '@service/notify';\r\n    import { listColumnsCache } from '@utils/cache-helper';\r\n    import ListActionLayout from '@components/list-action-layout';\r\n    import RenderList from '@components/render-list';\r\n    import JbSearchSelect from '@components/jb-search-select';\r\n    import JbSideslider from '@components/jb-sideslider';\r\n    import JbPopoverConfirm from '@components/jb-popover-confirm';\r\n    import TaskOperation from './components/operation';\r\n    import TaskDetail from './components/detail';\r\n    import HistoryRecord from './components/history-record';\r\n\r\n    const TABLE_COLUMN_CACHE = 'cron_list_columns';\r\n\r\n    export default {\r\n        name: '',\r\n        components: {\r\n            ListActionLayout,\r\n            RenderList,\r\n            JbSearchSelect,\r\n            JbSideslider,\r\n            JbPopoverConfirm,\r\n            TaskOperation,\r\n            TaskDetail,\r\n            HistoryRecord,\r\n        },\r\n        data () {\r\n            return {\r\n                showOperation: false,\r\n                showDetail: false,\r\n                showHistoryRecord: false,\r\n                showHistoryFailedRecord: false,\r\n                searchParams: [],\r\n                cronData: {},\r\n                loading: false,\r\n                editTaskId: '',\r\n                cronJobDetailInfo: {},\r\n                currentOperate: 'create',\r\n                historyRecordDialogTitle: '',\r\n                selectedTableColumn: [],\r\n                tableSize: 'small',\r\n            };\r\n        },\r\n        computed: {\r\n            isSkeletonLoading () {\r\n                return this.$refs.list.isLoading;\r\n            },\r\n            allRenderColumnMap () {\r\n                return this.selectedTableColumn.reduce((result, item) => {\r\n                    result[item.id] = true;\r\n                    return result;\r\n                }, {});\r\n            },\r\n            operationSidesliderInfo () {\r\n                if (this.cronJobDetailInfo.id) {\r\n                    return {\r\n                        title: I18n.t('cron.编辑定时任务'),\r\n                        okText: I18n.t('cron.保存'),\r\n                    };\r\n                }\r\n                return {\r\n                    title: I18n.t('cron.新建定时任务'),\r\n                    okText: I18n.t('cron.提交'),\r\n                };\r\n            },\r\n        },\r\n        watch: {\r\n            '$route' () {\r\n                this.initParseURL();\r\n            },\r\n        },\r\n        created () {\r\n            this.getCronJobList = TimeTaskService.timeTaskList;\r\n            this.searchSelect = [\r\n                {\r\n                    name: 'ID',\r\n                    id: 'cronJobId',\r\n                    description: I18n.t('cron.将覆盖其它条件'),\r\n                    validate (values, item) {\r\n                        const validate = (values || []).every(_ => /^(\\d*)$/.test(_.name));\r\n                        return !validate ? I18n.t('cron.ID只支持数字') : true;\r\n                    },\r\n                },\r\n                {\r\n                    name: I18n.t('cron.任务名称.colHead'),\r\n                    id: 'name',\r\n                    default: true,\r\n                },\r\n                {\r\n                    name: I18n.t('cron.执行方案ID'),\r\n                    id: 'planId',\r\n                    default: true,\r\n                },\r\n                {\r\n                    name: I18n.t('cron.创建人'),\r\n                    id: 'creator',\r\n                    remoteMethod: NotifyService.fetchUsersOfSearch,\r\n                    inputInclude: true,\r\n                },\r\n                {\r\n                    name: I18n.t('cron.更新人.colHead'),\r\n                    id: 'lastModifyUser',\r\n                    remoteMethod: NotifyService.fetchUsersOfSearch,\r\n                    inputInclude: true,\r\n                },\r\n            ];\r\n            this.tableColumn = [\r\n                {\r\n                    id: 'id',\r\n                    label: 'ID',\r\n                },\r\n                {\r\n                    id: 'name',\r\n                    label: I18n.t('cron.任务名称.colHead'),\r\n                    disabled: true,\r\n                },\r\n                {\r\n                    id: 'planName',\r\n                    label: I18n.t('cron.执行方案名称'),\r\n                },\r\n                {\r\n                    id: 'policeText',\r\n                    label: I18n.t('cron.执行策略.colHead'),\r\n                    disabled: true,\r\n                },\r\n                {\r\n                    id: 'creator',\r\n                    label: I18n.t('cron.创建人'),\r\n                },\r\n                {\r\n                    id: 'createTime',\r\n                    label: I18n.t('cron.创建时间'),\r\n                },\r\n                {\r\n                    id: 'lastModifyUser',\r\n                    label: I18n.t('cron.更新人.colHead'),\r\n                },\r\n                {\r\n                    id: 'lastModifyTime',\r\n                    label: I18n.t('cron.更新时间'),\r\n                },\r\n                {\r\n                    id: 'lastExecuteStatus',\r\n                    label: I18n.t('cron.最新执行结果'),\r\n                    disabled: true,\r\n                },\r\n                {\r\n                    id: 'successRateText',\r\n                    label: I18n.t('cron.周期成功率'),\r\n                    disabled: true,\r\n                },\r\n            ];\r\n            const columnsCache = listColumnsCache.getItem(TABLE_COLUMN_CACHE);\r\n            if (columnsCache) {\r\n                this.selectedTableColumn = Object.freeze(columnsCache.columns);\r\n                this.tableSize = columnsCache.size;\r\n            } else {\r\n                this.selectedTableColumn = Object.freeze([\r\n                    { id: 'name' },\r\n                    { id: 'planName' },\r\n                    { id: 'policeText' },\r\n                    { id: 'lastModifyUser' },\r\n                    { id: 'lastModifyTime' },\r\n                    { id: 'lastExecuteStatus' },\r\n                    { id: 'successRateText' },\r\n                ]);\r\n            }\r\n        },\r\n        mounted () {\r\n            this.initParseURL();\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 获取列表数据\r\n             */\r\n            fetchData () {\r\n                this.$refs.list.$emit('onFetch', this.searchParams);\r\n            },\r\n            /**\r\n             * @desc 解析 URL 参数\r\n             */\r\n            initParseURL () {\r\n                // 在列表通过url指定查看定时任务详情\r\n                const {\r\n                    name,\r\n                    cronJobId,\r\n                    // mode 表示 url 访问的场景，\r\n                    // create: 展示新建定时任务弹框\r\n                    // detail: 展示定时任务详情弹框\r\n                    // edit: 展示编辑定时任务弹框\r\n                    mode,\r\n                } = this.$route.query;\r\n                if (mode === 'create') {\r\n                    this.handleCreate();\r\n                    return;\r\n                }\r\n            \r\n                if (!name && !cronJobId) {\r\n                    return;\r\n                }\r\n            \r\n                const unWatch = this.$watch(() => this.$refs.list.isLoading, (isLoading) => {\r\n                    if (!isLoading) {\r\n                        if (mode === 'detail') {\r\n                            setTimeout(() => {\r\n                                // 通过url默认打开定时任务详情\r\n                                const $firstTimeTaskName = this.$refs.list.$el.querySelector('.time-task-name');\r\n                                if ($firstTimeTaskName) {\r\n                                    $firstTimeTaskName.click();\r\n                                }\r\n                            });\r\n                        } else if (mode === 'edit') {\r\n                            setTimeout(() => {\r\n                                // // 通过url默认打开定时任务编辑\r\n                                const $firstTimeTask = this.$refs.list.$el.querySelector('.time-task-edit');\r\n                                if ($firstTimeTask) {\r\n                                    $firstTimeTask.click();\r\n                                }\r\n                            });\r\n                        }\r\n                    \r\n                        unWatch();\r\n                    }\r\n                });\r\n            },\r\n            /**\r\n             * @desc 表格表头渲染\r\n             * @param { Function } h\r\n             * @param { Object } data 表格配置信息\r\n             * @returns { vNode }\r\n             */\r\n            renderHeader (h, data) {\r\n                return (\r\n                <span>\r\n                    <span>{ data.column.label }</span>\r\n                    <bk-popover>\r\n                        <icon\r\n                            type=\"circle-italics-info\"\r\n                            style=\"margin-left: 8px; font-size: 12px;\" />\r\n                        <div slot=\"content\">\r\n                            <div style=\"font-weight: bold\">{ I18n.t('cron.「周期成功率」采样规则和计算公式') }</div>\r\n                            <div style=\"margin-top: 8px; font-weight: bold\">{ I18n.t('cron.采样规则：') }</div>\r\n                            <div>{ I18n.t('cron.近 24小时执行次数 ＞10，则 “分母” 为近 24 小时执行总数') }</div>\r\n                            <div>{ I18n.t('cron.近 24小时执行次数 ≤ 10，则 “分母” 为近 10 次执行任务') }</div>\r\n                            <div style=\"margin-top: 6px; font-weight: bold\">{ I18n.t('cron.计算公式：') }</div>\r\n                            <div>{ I18n.t('cron.成功次数(分子) / 分母 * 100 = 周期成功率（%）') }</div>\r\n                        </div>\r\n                    </bk-popover>\r\n                </span>\r\n                );\r\n            },\r\n            /**\r\n             * @desc 表格列自定义\r\n             * @param { Object } 列信息\r\n             */\r\n            handleSettingChange ({ fields, size }) {\r\n                this.selectedTableColumn = Object.freeze(fields);\r\n                this.tableSize = size;\r\n                listColumnsCache.setItem(TABLE_COLUMN_CACHE, {\r\n                    columns: fields,\r\n                    size,\r\n                });\r\n            },\r\n            /**\r\n             * @desc 搜索\r\n             * @param { Object } searchParams\r\n             */\r\n            handleSearch (searchParams) {\r\n                this.searchParams = searchParams;\r\n                this.fetchData();\r\n            },\r\n            /**\r\n             * @desc 查看执行记录\r\n             * @param { Object } crontabData 定时任务信息\r\n             * @param { Boolean } showFailed 显示失败记录\r\n             */\r\n            handleHistoryRecord (crontabData, showFailed = false) {\r\n                this.cronJobDetailInfo = crontabData;\r\n                this.showHistoryFailedRecord = showFailed;\r\n                this.historyRecordDialogTitle = `定时执行记录${crontabData.name}`;\r\n                this.showHistoryRecord = true;\r\n            },\r\n            /**\r\n             * @desc 定时任务详情\r\n             * @param { Object } crontabData 定时任务信息\r\n             */\r\n            handleViewDetail (crontabData) {\r\n                this.cronJobDetailInfo = crontabData;\r\n                this.showDetail = true;\r\n            },\r\n            /**\r\n             * @desc 新建定时任务\r\n             */\r\n            handleCreate () {\r\n                this.cronJobDetailInfo = {};\r\n                this.showOperation = true;\r\n            },\r\n            /**\r\n             * @desc 编辑定时任务\r\n             * @param { Object } crontabData 定时任务信息\r\n             */\r\n            handleEdit (crontabData) {\r\n                this.cronJobDetailInfo = crontabData;\r\n                this.showOperation = true;\r\n            },\r\n            /**\r\n             * @desc 从详情切换为编辑状态\r\n             */\r\n            handleToggelEdit () {\r\n                this.showDetail = false;\r\n                this.showOperation = true;\r\n            },\r\n            /**\r\n             * @desc 定时任务有更新刷新列表数据\r\n             */\r\n            handleCronChange () {\r\n                this.fetchData();\r\n            },\r\n            /**\r\n             * @desc 切换定时任务状态\r\n             * @param { Boolean } enable 开启状态\r\n             * @param { Object } crontabData 定时任务信息\r\n             */\r\n            handleStatusChange (enable, crontabData) {\r\n                const enableMemo = crontabData.enable;\r\n                crontabData.enable = enable;\r\n                TimeTaskService.timeTaskStatusUpdate({\r\n                    id: crontabData.id,\r\n                    enable,\r\n                }).then(() => {\r\n                    this.messageSuccess(enable ? I18n.t('cron.开启成功') : I18n.t('cron.关闭成功'));\r\n                })\r\n                    .catch(() => {\r\n                        crontabData.enable = enableMemo;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 删除定时任务\r\n             * @param { Object } crontabData 定时任务信息\r\n             *\r\n             * 删除成功后刷新列表数据\r\n             */\r\n            handleDelete (crontabData) {\r\n                return TimeTaskService.timeTaskDelete({\r\n                    id: crontabData.id,\r\n                }).then(() => {\r\n                    this.messageSuccess(I18n.t('cron.删除定时任务成功'));\r\n                    this.fetchData();\r\n                    return true;\r\n                });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    @keyframes sync-fetch-loading {\r\n        0% {\r\n            transform: rotateZ(0);\r\n        }\r\n\r\n        100% {\r\n            transform: rotateZ(360deg);\r\n        }\r\n    }\r\n\r\n    .cron-job-manage {\r\n        .expression {\r\n            font-size: 14px;\r\n            color: #c4c6cc;\r\n        }\r\n\r\n        .more-fail-action {\r\n            text-align: right;\r\n\r\n            .bk-button-text {\r\n                font-size: 12px;\r\n            }\r\n        }\r\n\r\n        .time-task-name {\r\n            display: inline-block;\r\n            height: 18px;\r\n            max-width: 100%;\r\n            overflow: hidden;\r\n            color: #3a84ff;\r\n            text-overflow: ellipsis;\r\n            white-space: nowrap;\r\n            vertical-align: bottom;\r\n            cursor: pointer;\r\n        }\r\n\r\n        .execute-result-text {\r\n            &.success {\r\n                &::before {\r\n                    background: #2dcb56;\r\n                }\r\n            }\r\n\r\n            &.fail {\r\n                &::before {\r\n                    background: #ea3636;\r\n                }\r\n            }\r\n\r\n            &.waiting {\r\n                &::before {\r\n                    background: #dcdee5;\r\n                }\r\n            }\r\n\r\n            &::before {\r\n                display: inline-block;\r\n                width: 8px;\r\n                height: 8px;\r\n                margin-right: 10px;\r\n                border-radius: 50%;\r\n                content: \"\";\r\n            }\r\n        }\r\n\r\n        .sync-fetch {\r\n            height: 13px;\r\n        }\r\n\r\n        .sync-fetch-loading {\r\n            position: absolute;\r\n            display: flex;\r\n            width: 13px;\r\n            height: 13px;\r\n            animation: sync-fetch-loading 1s linear infinite;\r\n        }\r\n\r\n        .task-plan-text {\r\n            display: inline-block;\r\n            height: 18px;\r\n            max-width: 100%;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n            white-space: nowrap;\r\n            vertical-align: bottom;\r\n        }\r\n    }\r\n\r\n</style>\r\n"],"names":[],"sourceRoot":""}