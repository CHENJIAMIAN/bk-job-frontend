{"version":3,"file":"static/css/149.c17f60bf0386da612672.css","mappings":"AA6FA,gBAEA,YADA,iBAqBA,CAlBA,4BAYA,mBATA,SAOA,cACA,kBALA,aAGA,eALA,OAIA,iBAPA,kBACA,MAKA,UAFA,SAYA,CAHA,kCACA,eACA,CCvCA,iCAIA,mBAHA,YACA,kBACA,kBAmCA,CAhCA,uDAGA,eADA,gBADA,UA8BA,CA1BA,6DACA,kBACA,CAEA,0DACA,YACA,cACA,CAGA,gEACA,+BACA,CAGA,sEAKA,eAJA,YAGA,iBADA,kBADA,iBAQA,CAHA,4EACA,kBACA,CCkDA,kCAIA,mBADA,YAFA,kBACA,SAgDA,CA5CA,mDACA,wBASA,CAJA,wIACA,kBACA,CAIA,kDAEA,qBAIA,cALA,aAGA,eACA,iBAFA,iBA4BA,CAvBA,gEAIA,eAHA,aAEA,eADA,eAoBA,CAhBA,qEAGA,eADA,iBADA,iBAcA,CAVA,2EAMA,mBACA,kBACA,WAHA,WAJA,kBAEA,WADA,QAEA,SAKA,CCwBA,kCAMA,mBAFA,mBACA,wCAJA,aACA,YACA,iBA6BA,CAxBA,8CAQA,mBACA,yBACA,kBALA,cAEA,eAJA,eADA,YAEA,iBAEA,kBAKA,oBAVA,UAsBA,CAVA,oDAEA,qBADA,aAEA,CAEA,qDAEA,mBACA,6BAFA,aAGA,CAIA,kCACA,mCACA,CAIA,sCACA,kBAOA,CAKA,mJACA,kBACA,CAIA,2BAMA,2BADA,cAFA,eADA,YAEA,iBAHA,iBAyBA,CAlBA,wCAWA,mBADA,kBAFA,cACA,eALA,aAGA,eADA,YAMA,uBAXA,kBAEA,QADA,MAGA,UAYA,CAHA,8CACA,wBACA","sources":["webpack://job/./src/views/script-template/index/components/resizeable-box.vue","webpack://job/./src/views/script-template/index/components/render-variable.vue","webpack://job/./src/views/script-template/index/components/preview-template.vue","webpack://job/./src/views/script-template/index/index.vue"],"sourcesContent":["<template>\n    <div ref=\"handle\" class=\"resizeable-box\" :style=\"styles\">\n        <slot />\n        <!-- 拖拽分割条-动态设置父元素宽度 -->\n        <div\n            class=\"mouse-flag\"\n            @mousedown=\"handleMousedown\">\n            <Icon type=\"many-dot\" />\n        </div>\n    </div>\n</template>\n<script>\n    import _ from 'lodash';\n\n    export default {\n        props: {\n            /**\n             * @desc 父容器的宽度\n             */\n            parentWidth: {\n                type: Number,\n                default: window.innerWidth,\n            },\n            /**\n             * @desc 可变容器的默认宽度\n             */\n            width: {\n                type: Number,\n                default: 400,\n            },\n        },\n        data () {\n            return {\n                styles: {\n                    width: `${this.width}px`,\n                },\n            };\n        },\n        created () {\n            this.moveStartWidth = this.width;\n            this.isResizeable = false;\n            this.handleMousemove = _.throttle(this.eventMousemove, 30);\n        },\n        mounted () {\n            document.body.addEventListener('mousemove', this.handleMousemove);\n            document.body.addEventListener('mouseup', this.handleMouseup);\n            this.$once('hook:beforeDestroy', () => {\n                document.body.removeEventListener('mousemove', this.handleMousemove);\n                document.body.removeEventListener('mouseup', this.handleMouseup);\n            });\n        },\n        methods: {\n            /**\n             * @desc mousedown 事件，记录鼠标按下时容器的宽度\n             * @param {Object} event\n             */\n            handleMousedown (event) {\n                this.isResizeable = true;\n                this.screenX = event.screenX;\n                this.moveStartWidth = this.$refs.handle.getBoundingClientRect().width;\n                document.body.style.userSelect = 'none';\n            },\n            /**\n             * @desc mouseup 事件，取消可拖动特性\n             */\n            handleMouseup () {\n                this.isResizeable = false;\n                document.body.style.userSelect = '';\n            },\n            /**\n             * @desc mousemove 事件，动态更新容器宽度\n             * @param {Object} event\n             */\n            eventMousemove (event) {\n                if (!this.isResizeable) {\n                    return;\n                }\n                const MAX_WIDTH = Math.max(0.8 * this.parentWidth, this.parentWidth - 200);\n                const MIN_WIDTH = Math.min(0.1 * this.parentWidth, 200);\n                const { screenX } = event;\n                const newWidth = this.screenX - screenX + this.moveStartWidth;\n                if (newWidth > MAX_WIDTH || newWidth < MIN_WIDTH) {\n                    return;\n                }\n                this.styles = {\n                    width: `${newWidth}px`,\n                };\n                this.$emit('on-resize');\n            },\n        },\n    };\n</script>\n<style lang='postcss'>\n    .resizeable-box {\n        position: relative;\n        height: 100%;\n\n        .mouse-flag {\n            position: absolute;\n            top: 0;\n            bottom: 0;\n            left: 0;\n            z-index: 1;\n            display: flex;\n            width: 3px;\n            padding-left: 3px;\n            font-size: 23px;\n            color: #63656e;\n            cursor: col-resize;\n            align-items: center;\n\n            &:hover {\n                background: gray;\n            }\n        }\n    }\n</style>\n","<template>\n    <resizeable-box>\n        <div class=\"script-template-render-variable\" v-bkloading=\"{ isLoading }\">\n            <scroll-faker theme=\"dark\">\n                <div class=\"title\">{{ '变量列表' }}</div>\n                <table class=\"script-variable-list\">\n                    <thead>\n                        <tr>\n                            <td>{{ '变量名称' }}</td>\n                            <td>{{ '含义' }}</td>\n                            <td>{{ '示例' }}</td>\n                        </tr>\n                    </thead>\n                    <tbody v-for=\"item in variableList\" :key=\"item.name\">\n                        <tr>\n                            <td>\n                                <div\n                                    class=\"variable-name\"\n                                    @click=\"handleCopyScriptVariable(`{{${item.name}}}`)\">\n                                    {{ item.name }}\n                                </div>\n                            </td>\n                            <td>{{ item.description }}</td>\n                            <td>{{ item.demo }}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </scroll-faker>\n        </div>\n    </resizeable-box>\n</template>\n<script>\n       import ScriptTemplateService from '@service/script-template';\n    import { execCopy } from '@utils/assist';\n    import ResizeableBox from './resizeable-box';\n\n    export default {\n        components: {\n            ResizeableBox,\n        },\n        inheritAttrs: false,\n        data () {\n            return {\n                isLoading: false,\n                variableList: [{},{},{}],\n            };\n        },\n        created () {\n            this.fetchVariableList();\n        },\n        methods: {\n            /**\n             * @desc 获取变量列表\n             */\n            fetchVariableList () {\n                this.isLoading = true;\n                ScriptTemplateService.fetchVaribaleList()\n                    .then((data) => {\n                        this.variableList = Object.freeze(data);\n                    })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            },\n            /**\n             * @desc 复制变量（变量名被 {{}} 包裹）\n             */\n            handleCopyScriptVariable (variableName) {\n                execCopy(variableName, `${'复制成功'} ${variableName}`);\n            },\n        },\n    };\n</script>\n<style lang='postcss'>\n    .script-template-render-variable {\n        height: 100%;\n        padding: 16px 20px;\n        white-space: nowrap;\n        background: #292929;\n\n        .script-variable-list {\n            width: 100%;\n            margin-top: 16px;\n            font-size: 12px;\n\n            thead {\n                background: #3a3b3d;\n            }\n\n            td {\n                height: 32px;\n                padding: 0 16px;\n            }\n\n            tbody {\n                td {\n                    border-bottom: 1px solid #4a4a4a;\n                }\n            }\n\n            .variable-name {\n                height: 24px;\n                padding-left: 10px;\n                margin-left: -10px;\n                line-height: 24px;\n                cursor: pointer;\n\n                &:hover {\n                    background: #3b3c3d;\n                }\n            }\n        }\n    }\n</style>\n","<template>\n    <!-- resizeable-box动态调整 -->\n    <resizeable-box :parent-width=\"parentWidth\" :width=\"parentWidth / 2\">\n        <div\n            class=\"script-template-preview-template\"\n            v-bkloading=\"{ isLoading }\">\n            <div class=\"preview-result\">\n                <span>{{ '渲染结果' }}</span>\n                <div\n                    v-if=\"needRefresh\"\n                    class=\"refresh-flag\"\n                    @click=\"handleRefresh\">\n                    <span class=\"dot\">\n                        <Icon type=\"refresh-2\" />\n                    </span>\n                    <span style=\"color: #d74242;\">{{ '有更新' }}</span>\n                </div>\n            </div>\n            <div :id=\"editorId\" class=\"preview-content\" />\n        </div>\n    </resizeable-box>\n</template>\n<script>\n    import _ from 'lodash';\n    import { Base64 } from 'js-base64';\n    import ScriptTemplateService from '@service/script-template';\n    import {\n        formatScriptTypeValue,\n    } from '@utils/assist';\n    import ace from 'ace/ace';\n    import ResizeableBox from './resizeable-box';\n\n    const LANG_MAP = {\n        Shell: 'sh',\n        Bat: 'batchfile',\n        Perl: 'perl',\n        Python: 'python',\n        Powershell: 'powershell',\n        SQL: 'sql',\n    };\n\n    export default {\n        name: '',\n        components: {\n            ResizeableBox,\n        },\n        props: {\n            parentWidth: {\n                type: Number,\n                default: window.innerWidth,\n            },\n            scriptContent: {\n                type: String,\n                default: '',\n            },\n            // 当前的脚本语言\n            scriptLanguage: {\n                type: String,\n                required: true,\n            },\n        },\n        data () {\n            return {\n                isLoading: false,\n                needRefresh: false,\n            };\n        },\n        computed: {\n            mode () {\n                return `ace/mode/${LANG_MAP[this.scriptLanguage]}`;\n            },\n        },\n        watch: {\n            scriptContent: {\n                handler () {\n                    if (this.hasRendered) {\n                        this.needRefresh = true;\n                        return;\n                    }\n                    this.fetchRenderScript();\n                },\n                immediate: true,\n            },\n            scriptLanguage () {\n                setTimeout(() => {\n                    this.editor.getSession().setMode(this.mode);\n                });\n            },\n        },\n        created () {\n            this.hasRendered = false;\n            this.editorId = `scriptTemplatePrevice${_.random(1, 1000)}_${Date.now()}`;\n        },\n        mounted () {\n            this.initEditor();\n        },\n        methods: {\n            /**\n             * 初始化脚本编辑器\n             */\n            initEditor () {\n                const editor = ace.edit(this.editorId);\n                editor.getSession().setMode(this.mode);\n                editor.setOptions({\n                    fontSize: 13,\n                    enableBasicAutocompletion: true,\n                    enableLiveAutocompletion: true,\n                    enableSnippets: true,\n                    wrapBehavioursEnabled: true,\n                    autoScrollEditorIntoView: true,\n                    copyWithEmptySelection: true,\n                    useElasticTabstops: true,\n                    printMarginColumn: true,\n                    printMargin: 80,\n                    scrollPastEnd: 0.2,\n                });\n                editor.setTheme('ace/theme/monokai');\n                editor.setShowPrintMargin(false);\n                editor.$blockScrolling = Infinity;\n                editor.setReadOnly(true);\n                \n                // 先保存 editor 在设置 value\n                editor.scrollToLine(Infinity);\n                editor.setValue('');\n                editor.clearSelection();\n                this.editor = editor;\n                this.$once('hook:beforeDestroy', () => {\n                    editor.destroy();\n                    editor.container.remove();\n                });\n            },\n            /**\n             * @desc 预览脚本模板\n             */\n            fetchRenderScript () {\n                this.isLoading = true;\n                ScriptTemplateService.fetchRenderScript({\n                    scriptContent: this.scriptContent,\n                    scriptLanguage: formatScriptTypeValue(this.scriptLanguage),\n                }).then((data) => {\n                    this.editor.setValue(Base64.decode(data.scriptContent));\n                    this.editor.clearSelection();\n                })\n                    .finally(() => {\n                        this.isLoading = false;\n                        this.hasRendered = true;\n                        this.needRefresh = false;\n                    });\n            },\n            /**\n             * @desc 有更新，重新预览脚本模板\n             */\n            handleRefresh () {\n                this.fetchRenderScript();\n            },\n        },\n    };\n</script>\n<style lang='postcss'>\n    .script-template-preview-template {\n        position: relative;\n        z-index: 0;\n        height: 100%;\n        background: #292929;\n\n        .preview-content {\n            height: calc(100% - 51px);\n            /* stylelint-disable selector-class-pattern */\n            &.ace_editor {\n                background: #292929;\n\n                .ace_gutter {\n                    background: #292929;\n                }\n            }\n        }\n\n        .preview-result {\n            display: flex;\n            align-items: flex-end;\n            padding: 16px 20px;\n            font-size: 14px;\n            line-height: 19px;\n            color: #c4c6cc;\n\n            .refresh-flag {\n                display: flex;\n                margin-left: 9px;\n                font-size: 12px;\n                cursor: pointer;\n\n                .dot {\n                    position: relative;\n                    margin-right: 8px;\n                    font-size: 14px;\n\n                    &::after {\n                        position: absolute;\n                        top: 6px;\n                        right: -3px;\n                        width: 4px;\n                        height: 4px;\n                        background: #d74242;\n                        border-radius: 50%;\n                        content: \"\";\n                    }\n                }\n            }\n        }\n    }\n</style>\n","<template>\n    <div\n        ref=\"container\"\n        class=\"script-template-page\"\n        v-bkloading=\"{ isLoading }\">\n        <ace-editor\n            ref=\"editor\"\n            class=\"script-template-editor\"\n            :lang=\"scriptLanguage\"\n            :height=\"editorHeight\"\n            :custom-enable=\"false\"\n            :before-lang-change=\"beforeLangChange\"\n            @change=\"handleContentChange\"\n            @on-mode-change=\"handleLangChange\">\n            <template slot=\"action\">\n                <Icon\n                    type=\"variable\"\n                    v-bk-tooltips=\"'内置变量'\"\n                    @click=\"handleSidePanelShow('renderVariable')\" />\n            </template>\n            <div\n                v-if=\"sidePanelComponentName\"\n                slot=\"side\"\n                class=\"script-editor-right-panel\">\n                <component\n                    :is=\"renderSideComponent\"\n                    :parent-width=\"editorWidth\"\n                    @on-resize=\"handleSidePanelResize\"\n                    :script-language=\"scriptLanguage\"\n                    :script-content=\"scriptContent\" />\n                <div\n                    class=\"panel-close\"\n                    @click=\"handleSidePanelHide\">\n                    <Icon type=\"close\" />\n                </div>\n            </div>\n        </ace-editor>\n        <div class=\"action-box\">\n            <bk-button\n                theme=\"primary\"\n                class=\"mr10\"\n                style=\"width: 86px;\"\n                :loading=\"isSubmiting\"\n                @click=\"handleSave\">\n                {{ '保存' }}\n            </bk-button>\n            <div class=\"action-btn mr10\" @click=\"handleEditReset\">{{ '重置' }}</div>\n            <div class=\"action-btn\" @click=\"handleUseDefault\">{{ '还原默认' }}</div>\n            <div\n                class=\"action-btn\"\n                :class=\"{\n                    active: sidePanelComponentName === 'previewTemplate',\n                }\"\n                style=\"margin-left: 60px;\"\n                @click=\"handleSidePanelShow('previewTemplate')\">\n                {{ '渲染预览' }}\n            </div>\n        </div>\n    </div>\n</template>\n<script>\n    import _ from 'lodash';\n       import ScriptTemplateService from '@service/script-template';\n    import {\n        getOffset,\n        leaveConfirm,\n        formatScriptTypeValue,\n    } from '@utils/assist';\n    import AceEditor, { builtInScript } from '@components/ace-editor';\n    import RenderVariable from './components/render-variable';\n    import PreviewTemplate from './components/preview-template';\n\n    export default {\n        name: '',\n        components: {\n            AceEditor,\n            RenderVariable,\n            PreviewTemplate,\n        },\n        data () {\n            return {\n                isLoading: false,\n                isSubmiting: false,\n                editorHeight: 0,\n                editorWidth: 0,\n                isShowVariable: false,\n                scriptLanguage: 'Shell',\n                scriptContent: '',\n                sidePanelComponentName: '',\n            };\n        },\n        computed: {\n            renderSideComponent () {\n                const com = {\n                    previewTemplate: PreviewTemplate,\n                    renderVariable: RenderVariable,\n                };\n                return com[this.sidePanelComponentName];\n            },\n        },\n        created () {\n            // 已经存储的脚本模板\n            this.templateMap = Object.assign({}, builtInScript);\n            this.fetchOriginalTemplate();\n        },\n        mounted () {\n            this.calcEditorSize();\n            window.addEventListener('resize', this.calcEditorSize);\n            this.$once('hook:beforeDestroy', () => {\n                window.removeEventListener('resize', this.calcEditorSize);\n            });\n        },\n        methods: {\n            /**\n             * @desc 获取用户自定义模板\n             */\n            fetchOriginalTemplate () {\n                this.isLoading = true;\n                ScriptTemplateService.fetchOriginalTemplate()\n                    .then((data) => {\n                        data.forEach((item) => {\n                            this.templateMap[formatScriptTypeValue(item.scriptLanguage)] = item.scriptContent;\n                        });\n                        // 如果有自定义脚本模板，通过编辑器 setValue 方法设置值\n                        if (_.has(this.templateMap, this.scriptLanguage)) {\n                            this.$refs.editor.setValue(this.templateMap[this.scriptLanguage]);\n                        }\n                    })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            },\n            /**\n             * @desc 计算编辑器的尺寸\n             */\n            calcEditorSize () {\n                const {\n                    top: offsetTop,\n                } = getOffset(this.$refs.container);\n                const windowHeight = window.innerHeight;\n                this.editorHeight = windowHeight - offsetTop - 72;\n                this.editorWidth = this.$refs.container.getBoundingClientRect().width;\n            },\n            /**\n             * @desc 脚本预览类型切换编辑状态检测\n             * @return {Object} 切换二次确认\n             */\n            beforeLangChange () {\n                window.changeAlert = this.scriptContent !== this.templateMap[this.scriptLanguage];\n                return leaveConfirm();\n            },\n            /**\n             * @desc 切换脚本模板语言\n             * @param {String} scriptLanguage 脚本语言\n             */\n            handleLangChange (scriptLanguage) {\n                this.scriptLanguage = scriptLanguage;\n                setTimeout(() => {\n                    if (_.has(this.templateMap, this.scriptLanguage)) {\n                        this.$refs.editor.setValue(this.templateMap[this.scriptLanguage]);\n                    }\n                });\n            },\n            /**\n             * @desc 编辑脚本模板内容\n             * @param {String} content 脚本语言\n             */\n            handleContentChange (content) {\n                this.scriptContent = content;\n            },\n            /**\n             * @desc 显示编辑器右侧面板\n             * @param {String} componentName 脚本语言\n             */\n            handleSidePanelShow (componentName) {\n                if (this.sidePanelComponentName === componentName) {\n                    this.sidePanelComponentName = '';\n                } else {\n                    this.sidePanelComponentName = componentName;\n                }\n            },\n            /**\n             * @desc 关闭编辑器右侧面板\n             */\n            handleSidePanelHide () {\n                this.sidePanelComponentName = '';\n            },\n            /**\n             * @desc 脚本编辑器 resize\n             */\n            handleSidePanelResize () {\n                this.$refs.editor.resize();\n            },\n            /**\n             * @desc 保存用户自定义模板\n             */\n            handleSave () {\n                this.isSubmiting = true;\n                ScriptTemplateService.updateOriginalTemplate({\n                    scriptLanguage: formatScriptTypeValue(this.scriptLanguage),\n                    scriptContent: this.scriptContent,\n                }).then(() => {\n                    window.changeAlert = false;\n                    this.templateMap[this.scriptLanguage] = this.scriptLanguage;\n                    this.messageSuccess('保存成功');\n                })\n                    .finally(() => {\n                        this.isSubmiting = false;\n                    });\n            },\n            /**\n             * @desc 重置用户编辑状态\n             */\n            handleEditReset () {\n                this.$refs.editor.setValue(this.templateMap[this.scriptLanguage]);\n                this.messageSuccess('重置成功');\n            },\n            /**\n             * @desc 还原脚本模板为默认脚本\n             */\n            handleUseDefault () {\n                this.$refs.editor.resetValue();\n                this.messageSuccess('还原默认成功');\n            },\n        },\n    };\n</script>\n<style lang='postcss'>\n    .script-template-page {\n        .action-box {\n            display: flex;\n            height: 52px;\n            padding-left: 16px;\n            background: #2e2e2e;\n            box-shadow: 0 -2px 4px 0 rgb(0 0 0 / 16%);\n            align-items: center;\n\n            .action-btn {\n                width: 86px;\n                height: 32px;\n                font-size: 14px;\n                line-height: 32px;\n                color: #979ba5;\n                text-align: center;\n                cursor: pointer;\n                background: #242424;\n                border: 1px solid #5c5e66;\n                border-radius: 2px;\n                transition: all 0.15s;\n\n                &:hover {\n                    color: #b1b6c2;\n                    border-color: #878b94;\n                }\n\n                &.active {\n                    color: #699df4;\n                    background: #242424;\n                    border: 1px solid transparent;\n                }\n            }\n        }\n\n        .bk-loading {\n            background: rgb(0 0 0 / 80%) !important;\n        }\n    }\n\n    .script-template-editor {\n        .jb-ace-title {\n            background: #2e2e2e;\n\n            .jb-ace-mode-item {\n                &.active {\n                    background: #1a1a1a;\n                }\n            }\n        }\n        /* stylelint-disable selector-class-pattern */\n        .ace_editor {\n            background: #1a1a1a;\n\n            .ace_gutter {\n                background: #1a1a1a;\n            }\n        }\n    }\n\n    .script-editor-right-panel {\n        position: relative;\n        height: 100%;\n        font-size: 14px;\n        line-height: 19px;\n        color: #c4c6cc;\n        border-left: 1px solid #333;\n\n        .panel-close {\n            position: absolute;\n            top: 0;\n            right: 0;\n            display: flex;\n            width: 26px;\n            height: 26px;\n            font-size: 18px;\n            color: #63656e;\n            cursor: pointer;\n            border-radius: 50%;\n            align-items: center;\n            justify-content: center;\n\n            &:hover {\n                background-color: #313238;\n            }\n        }\n    }\n</style>\n"],"names":[],"sourceRoot":""}