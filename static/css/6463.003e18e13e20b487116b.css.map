{"version":3,"file":"static/css/6463.003e18e13e20b487116b.css","mappings":"AA4OA,4CAEA,gBADA,WAEA,CAGA,mCAIA,cAFA,eACA,iBAFA,kBAqBA,CAhBA,wCAGA,kBADA,mBADA,iBAcA,CAVA,+CAMA,wBACA,kBACA,WAHA,WAFA,OAFA,kBACA,QAEA,SAKA","sources":["webpack://job/./src/views/script-manage/create/index.vue"],"sourcesContent":["<template>\n    <smart-action class=\"create-script-page\" offset-target=\"bk-form-content\">\n        <jb-form\n            :model=\"formData\"\n            :rules=\"rules\"\n            v-test=\"{ type: 'form', value: 'create_script' }\"\n            ref=\"form\">\n            <jb-form-item :label=\"'脚本名称'\" required property=\"name\">\n                <div class=\"script-name input\">\n                    <jb-input\n                        v-model=\"formData.name\"\n                        :placeholder=\"'推荐按照该脚本逻辑提供的使用场景来取名...'\"\n                        :maxlength=\"60\" />\n                </div>\n            </jb-form-item>\n            <jb-form-item :label=\"'场景标签'\" property=\"tags\">\n                <jb-tag-select\n                    :placeholder=\"'标签对资源的分类管理有很大帮助'\"\n                    class=\"input\"\n                    v-model=\"formData.tags\" />\n            </jb-form-item>\n            <jb-form-item :label=\"'描述'\">\n                <bk-input\n                    class=\"input\"\n                    v-model=\"formData.description\"\n                    :placeholder=\"'在此处标注该脚本的备注和使用说明'\"\n                    type=\"textarea\"\n                    :maxlength=\"200\" />\n            </jb-form-item>\n            <jb-form-item :label=\"'版本号'\" required property=\"version\">\n                <jb-input\n                    class=\"input\"\n                    v-model=\"formData.version\"\n                    :placeholder=\"'输入版本号'\"\n                    :maxlength=\"30\" />\n            </jb-form-item>\n            <jb-form-item :label=\"'脚本内容'\" required property=\"content\">\n                <div ref=\"content\">\n                    <ace-editor\n                        v-model=\"formData.content\"\n                        :lang=\"scriptType\"\n                        :height=\"contentHeight\"\n                        @on-mode-change=\"handleTypeChange\"\n                        v-bkloading=\"{ isLoading: isContentLoading, opacity: .2 }\" />\n                </div>\n            </jb-form-item>\n        </jb-form>\n        <template #action>\n            <bk-button\n                class=\"w120 mr10\"\n                :loading=\"isSbumiting\"\n                theme=\"primary\"\n                @click=\"handleSubmit\">\n                {{ '提交' }}\n            </bk-button>\n            <bk-button\n                theme=\"default\"\n                @click=\"handleCancel\">\n                {{ '取消' }}\n            </bk-button>\n        </template>\n    </smart-action>\n</template>\n<script>\n       import ScriptService from '@service/script-manage';\n    import PublicScriptService from '@service/public-script-manage';\n    import {\n        formatScriptTypeValue,\n        checkPublicScript,\n        getOffset,\n        scriptErrorAlert,\n    } from '@utils/assist';\n    import {\n        scriptNameRule,\n        scriptVersionRule,\n    } from '@utils/validator';\n    import JbInput from '@components/jb-input';\n    import AceEditor from '@components/ace-editor';\n    import JbTagSelect from '@components/jb-tag-select';\n\n    export default {\n        name: '',\n        components: {\n            AceEditor,\n            JbTagSelect,\n            JbInput,\n        },\n        data () {\n            return {\n                isContentLoading: false,\n                isSbumiting: false,\n                scriptType: 'Shell',\n                contentHeight: 480,\n                formData: {\n                    name: '',\n                    tags: [],\n                    description: '',\n                    version: '',\n                    type: 1,\n                    content: '',\n                },\n            };\n        },\n        created () {\n            this.publicScript = checkPublicScript(this.$route);\n            this.serviceHandler = this.publicScript ? PublicScriptService : ScriptService;\n\n            this.rules = {\n                name: [\n                    {\n                        required: true,\n                        message: '脚本名称必填',\n                        trigger: 'blur',\n                    },\n                    {\n                        validator: scriptNameRule.validator,\n                        message: scriptNameRule.message,\n                        trigger: 'blur',\n                    },\n                ],\n                version: [\n                    {\n                        required: true,\n                        message: '脚本版本必填',\n                        trigger: 'blur',\n                    },\n                    {\n                        validator: scriptVersionRule.validator,\n                        message: scriptVersionRule.message,\n                        trigger: 'blur',\n                    },\n                ],\n                desc: [\n                    {\n                        max: 200,\n                        message: '最多仅可 200个字符',\n                        trigger: 'blur',\n                    },\n                ],\n                content: [\n                    {\n                        required: true,\n                        message: '脚本内容不能为空',\n                        trigger: 'change',\n                    },\n                    {\n                        validator: value => ScriptService.getScriptValidation({\n                            content: value,\n                            scriptType: this.formData.type,\n                        }).then((data) => {\n                            // 高危语句报错状态需要全局保存\n                            this.$store.commit('setScriptCheckError', data.some(_ => _.isDangerous));\n                            return true;\n                        }),\n                        message: '脚本内容检测失败',\n                        trigger: 'blur',\n                    },\n                ],\n            };\n        },\n        mounted () {\n            this.init();\n        },\n        methods: {\n            /**\n             * @desc 计算内容区的高度\n             */\n            init () {\n                const contentOffsetTop = getOffset(this.$refs.content).top;\n                const contentHeight = window.innerHeight - contentOffsetTop + 20;\n                this.contentHeight = contentHeight > 480 ? contentHeight : 480;\n            },\n            /**\n             * @desc 脚本语言类型切换\n             * @param {String} scriptType 脚本语言\n             */\n            handleTypeChange (scriptType) {\n                this.scriptType = scriptType;\n                this.formData.type = formatScriptTypeValue(scriptType);\n            },\n            /**\n             * @desc 保存脚本\n             */\n            handleSubmit () {\n                this.isSbumiting = true;\n                this.$refs.form.validate()\n                    .then(() => {\n                        if (this.$store.state.scriptCheckError) {\n                            scriptErrorAlert();\n                            return;\n                        }\n                        return this.serviceHandler.scriptUpdate(this.formData)\n                            .then((data) => {\n                                window.changeAlert = false;\n                                this.messageSuccess('操作成功', () => {\n                                    this.$router.push({\n                                        name: this.publicScript ? 'publicScriptVersion' : 'scriptVersion',\n                                        params: {\n                                            id: data.id,\n                                        },\n                                        query: {\n                                            scriptVersionId: data.scriptVersionId,\n                                        },\n                                    });\n                                });\n                            });\n                    })\n                    .finally(() => {\n                        this.isSbumiting = false;\n                    });\n            },\n            /**\n             * @desc 取消新建\n             */\n            handleCancel () {\n                this.routerBack();\n            },\n            /**\n             * @desc 路由回退\n             */\n            routerBack () {\n                if (this.publicScript) {\n                    this.$router.push({\n                        name: 'publicScriptList',\n                    });\n                    return;\n                }\n                this.$router.push({\n                    name: 'scriptList',\n                });\n            },\n        },\n    };\n</script>\n<style lang='postcss' scoped>\n    .create-script-page {\n        .input {\n            width: 510px;\n            background: #fff;\n        }\n    }\n\n    .script-name-tips {\n        padding-right: 12px;\n        font-size: 12px;\n        line-height: 16px;\n        color: #63656e;\n\n        .row {\n            position: relative;\n            padding-right: 12px;\n            padding-left: 12px;\n\n            &::before {\n                position: absolute;\n                top: 6px;\n                left: 0;\n                width: 4px;\n                height: 4px;\n                background: currentColor;\n                border-radius: 50%;\n                content: \"\";\n            }\n        }\n    }\n</style>\n"],"names":[],"sourceRoot":""}