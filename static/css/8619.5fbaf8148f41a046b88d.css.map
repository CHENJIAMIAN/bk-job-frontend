{"version":3,"file":"static/css/8619.5fbaf8148f41a046b88d.css","mappings":"AAkNA,oDACA,MACA,CAEA,0DACA,UACA","sources":["webpack://job/./src/views/file-manage/file-list/index.vue"],"sourcesContent":["\r\n\r\n<template>\r\n    <div class=\"file-node-list-page\">\r\n        <list-action-layout>\r\n            <jb-breadcrumb\r\n                class=\"list-breadcrumb\"\r\n                @on-last=\"handleBackLast\"\r\n                :key=\"`${fileSourceInfo.alias}_${path}`\">\r\n                <jb-breadcrumb-item>\r\n                    <Icon type=\"folder-open\" style=\"font-size: 20px;\" />\r\n                    <span @click=\"handleGoFileSource\">{{ '文件源列表' }}</span>\r\n                </jb-breadcrumb-item>\r\n                <jb-breadcrumb-item>\r\n                    <span @click=\"handlePathLocation('')\">{{ fileSourceInfo.alias }}</span>\r\n                </jb-breadcrumb-item>\r\n                <jb-breadcrumb-item\r\n                    v-for=\"(item) in pathStack\"\r\n                    role=\"path\"\r\n                    :key=\"item.path\">\r\n                    <span @click=\"handlePathLocation(item.path)\">{{ item.name }}</span>\r\n                </jb-breadcrumb-item>\r\n            </jb-breadcrumb>\r\n            <template #right>\r\n                <jb-input\r\n                    :placeholder=\"'搜索关键字'\"\r\n                    :value=\"name\"\r\n                    enter-trigger\r\n                    style=\"width: 480px;\"\r\n                    @submit=\"handleSearch\" />\r\n            </template>\r\n        </list-action-layout>\r\n        <render-list\r\n            ref=\"list\"\r\n            :data-source=\"getBucketList\"\r\n            @on-refresh=\"handleListRefresh\">\r\n            <template v-for=\"(column, index) in renderColumns\">\r\n                <render-file-list-column\r\n                    :column=\"column\"\r\n                    :key=\"`${path}_${index}`\"\r\n                    :file-source-id=\"fileSourceId\"\r\n                    :link-handler=\"handleLink\"\r\n                    :action-handler=\"handleAction\"\r\n                    @on-link=\"handleLink\"\r\n                    @on-action=\"handleAction\" />\r\n            </template>\r\n        </render-list>\r\n    </div>\r\n</template>\r\n<script>\r\n    import _ from 'lodash';\r\n       import FileService from '@service/file';\r\n    import ListActionLayout from '@components/list-action-layout';\r\n    import RenderList from '@components/render-list';\r\n    import RenderFileListColumn from '@components/render-file-list-column';\r\n\r\n    export default {\r\n        name: 'FileList',\r\n        components: {\r\n            ListActionLayout,\r\n            RenderList,\r\n            RenderFileListColumn,\r\n        },\r\n        data () {\r\n            return {\r\n                renderColumns: [],\r\n                path: 'a/b/c/d',\r\n                fileSourceInfo: { alias: 'alias' },\r\n            };\r\n        },\r\n        computed: {\r\n            isSkeletonLoading () {\r\n                return this.$refs.list.isLoading;\r\n            },\r\n            /**\r\n             * @desc 面包屑路径\r\n             * @return {Array}\r\n             */\r\n            pathStack () {\r\n                return this.path.split('/').reduce((result, item) => {\r\n                    if (item) {\r\n                        const last = result.length > 0 ? result[result.length - 1].path : '';\r\n                         \r\n                        result.push({\r\n                            path: `${last}${item}/`,\r\n                            name: item,\r\n                        });\r\n                    }\r\n                    return result;\r\n                }, []);\r\n            },\r\n        },\r\n        created () {\r\n            this.parseUrl();\r\n            this.getBucketList = FileService.fetchgetListFileNode;\r\n        },\r\n        mounted () {\r\n            this.fetchData();\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 获取bucket储存桶数据\r\n             */\r\n            fetchData () {\r\n                this.$refs.list.$emit('onFetch', {\r\n                    fileSourceId: this.fileSourceId,\r\n                    path: this.path,\r\n                    name: this.name,\r\n                });\r\n            },\r\n            /**\r\n             * @desc 解析url参数\r\n             */\r\n            parseUrl () {\r\n                const {\r\n                    fileSourceId = '',\r\n                    path = '',\r\n                    name = '',\r\n                } = this.$route.query;\r\n\r\n                this.fileSourceId = fileSourceId;\r\n                this.path = path;\r\n                this.name = name;\r\n            },\r\n            /**\r\n             * @desc 文件路径返回上一级\r\n             */\r\n            handleBackLast () {\r\n                const lastPath = this.pathStack[this.pathStack.length - 2];\r\n                this.handlePathLocation(lastPath.path);\r\n            },\r\n            /**\r\n             * @desc 表格数据刷新回调\r\n             * @param {Object} data 用户输入的过滤数据\r\n             *\r\n             * 重新拉取数据\r\n             */\r\n            handleListRefresh (data) {\r\n                // 过滤掉 checkbox 列\r\n                this.renderColumns = Object.freeze(data.metaData.properties.filter(_ => _.type !== 'checkbox'));\r\n                this.fileSourceInfo = Object.freeze(data.fileSourceInfo);\r\n            },\r\n            /**\r\n             * @desc 搜索\r\n             * @param {String} name 搜索文件名\r\n             *\r\n             * 重新拉取数据\r\n             */\r\n            handleSearch (name) {\r\n                this.name = name;\r\n                this.fetchData();\r\n            },\r\n            /**\r\n             * @desc 跳转到文件源列表\r\n             */\r\n            handleGoFileSource () {\r\n                this.$router.push({\r\n                    name: 'sourceFileList',\r\n                });\r\n            },\r\n            /**\r\n             * @desc 面包屑切换列表\r\n             * @param {String} path 文件路径\r\n             */\r\n            handlePathLocation (path) {\r\n                if (_.trim(path, '/') === _.trim(this.path, '/')) {\r\n                    return;\r\n                }\r\n                this.name = '';\r\n                this.path = path;\r\n                this.fetchData();\r\n            },\r\n            /**\r\n             * @desc 行数据跳转链接\r\n             * @param {String} path 文件路径\r\n             */\r\n            handleLink (path) {\r\n                this.name = '';\r\n                this.path = path;\r\n                this.fetchData();\r\n            },\r\n            /**\r\n             * @desc 行数据执行操作\r\n             * @param {String} actionCode 操作类型code\r\n             * @param {Object} params 操作所需参数\r\n             */\r\n            handleAction (actionCode, params) {\r\n                return FileService.executeAction({\r\n                    fileSourceId: this.fileSourceId,\r\n                    actionCode,\r\n                    params,\r\n                }).then(() => {\r\n                    this.messageSuccess('操作成功');\r\n                    this.fetchData();\r\n                });\r\n            },\r\n            /**\r\n             * @desc 跳转到文件源列表页面\r\n             */\r\n            routerBack () {\r\n                this.$router.push({\r\n                    name: 'sourceFileList',\r\n                });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .file-node-list-page {\r\n        .list-action-layout {\r\n            .right-box {\r\n                flex: 1;\r\n            }\r\n\r\n            .list-breadcrumb {\r\n                width: 100%;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n"],"names":[],"sourceRoot":""}