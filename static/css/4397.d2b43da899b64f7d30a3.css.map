{"version":3,"file":"static/css/4397.d2b43da899b64f7d30a3.css","mappings":"AA+XA,mBACA,mBAcA,CAZA,8CACA,kBACA,SACA,CAEA,uCACA,WAKA,CAHA,6DACA,UACA","sources":["webpack://job/./src/views/account-manage/index/components/operation.vue"],"sourcesContent":["<template>\r\n    <div class=\"operation-account\" v-bkloading=\"{ isLoading }\">\r\n        <jb-form\r\n            ref=\"operateAccountForm\"\r\n            :model=\"formData\"\r\n            :rules=\"rules\"\r\n            :key=\"`${formData.category}_${formData.type}`\"\r\n            form-type=\"vertical\"\r\n            v-test=\"{ type: 'form', value: 'createAccount' }\">\r\n            <jb-form-item :label=\"'用途'\" required style=\"margin-bottom: 20px;\">\r\n                <div class=\"radio-button-group-wraper\">\r\n                    <bk-radio-group\r\n                        :value=\"formData.category\"\r\n                        @change=\"handleCategoryChange\">\r\n                        <bk-radio-button\r\n                            v-for=\"item in categoryList\"\r\n                            :key=\"item.value\"\r\n                            :value=\"item.value\"\r\n                            \r\n                            class=\"account-type-radio\">\r\n                            {{ item.name }}\r\n                        </bk-radio-button>\r\n                    </bk-radio-group>\r\n                </div>\r\n            </jb-form-item>\r\n            <component\r\n                :is=\"accountCom\"\r\n                :key=\"formData.category\"\r\n                :form-data=\"formData\"\r\n                :is-edit=\"isEdit\"\r\n                :name-placeholder=\"namePlaceholder\"\r\n                :change=\"handleFieldChange\" />\r\n        </jb-form>\r\n    </div>\r\n</template>\r\n<script>\r\n    import QueryGlobalSettingService from '@service/query-global-setting';\r\n    import AccountManageService from '@service/account-manage';\r\n    import AccountModel from '@model/account';\r\n    import { accountAliasNameRule } from '@utils/validator';\r\n    import JbInput from '@components/jb-input';\r\n    import AccountSelect from '@components/account-select';\r\n    import AccountDatabase from './account-strategy/database-account';\r\n    import AccountOS from './account-strategy/os-account';\r\n\r\n    const generatorDefault = () => ({\r\n        id: '',\r\n        account: '',\r\n        alias: '',\r\n        category: AccountModel.OS,\r\n        dbPassword: '',\r\n        dbPort: '',\r\n        dbSystemAccountId: '',\r\n        grantees: [],\r\n        os: '',\r\n        password: '',\r\n        remark: '',\r\n        type: AccountModel.TYPE_LINUX,\r\n        rePassword: '',\r\n    });\r\n\r\n    export default {\r\n        name: 'OperationAccount',\r\n        components: {\r\n            JbInput,\r\n            AccountSelect,\r\n        },\r\n        props: {\r\n            data: {\r\n                type: Object,\r\n                default: () => ({}),\r\n            },\r\n        },\r\n        data () {\r\n            return {\r\n                isLoading: true,\r\n                isEdit: false,\r\n                isRulesLoadingError: false,\r\n                formData: generatorDefault(),\r\n                currentRules: Object.freeze({\r\n                    linux: {\r\n                        expression: '.',\r\n                    },\r\n                    windows: {\r\n                        expression: '.',\r\n                    },\r\n                    db: {\r\n                        expression: '.',\r\n                    },\r\n                }),\r\n            };\r\n        },\r\n        computed: {\r\n            /**\r\n             * @desc 账号分类对应的表单\r\n             * @returns { Object }\r\n             */\r\n            accountCom () {\r\n                const comMap = {\r\n                    [AccountModel.OS]: AccountOS,\r\n                    [AccountModel.DB]: AccountDatabase,\r\n                };\r\n                return comMap[this.formData.category];\r\n            },\r\n            /**\r\n             * @desc 账号名称 Input 输入框的placeholder, 读账号名称规则的配置\r\n             * @returns { Boolean }\r\n             */\r\n            namePlaceholder () {\r\n                if (this.isLoading) {\r\n                    return '';\r\n                }\r\n                // DB 账号的命名规则\r\n                if (this.formData.category === AccountModel.DB) {\r\n                    return this.currentRules.db.description;\r\n                }\r\n                // linux 账号的命名规则\r\n                if (this.formData.type === AccountModel.TYPE_LINUX) {\r\n                    return this.currentRules.linux.description;\r\n                }\r\n                // windows 账号的命名规则\r\n                return this.currentRules.windows.description;\r\n            },\r\n            rules () {\r\n                if (this.isLoading) {\r\n                    return {};\r\n                }\r\n                const baseRule = {\r\n                    account: [\r\n                        {\r\n                            required: true,\r\n                            message: '名称必填',\r\n                            trigger: 'blur',\r\n                        },\r\n                        \r\n                    ],\r\n                    alias: [\r\n                        {\r\n                            required: true,\r\n                            message: '别名必填',\r\n                            trigger: 'blur',\r\n                        },\r\n                        {\r\n                            validator: accountAliasNameRule.validator,\r\n                            message: accountAliasNameRule.message,\r\n                            trigger: 'blur',\r\n                        },\r\n                    ],\r\n                };\r\n                // db账号\r\n                if (this.formData.category === AccountModel.DB) {\r\n                    // DB 账号管理员配置规则\r\n                    baseRule.account.push({\r\n                        validator: (value) => {\r\n                            const regx = new RegExp(this.currentRules.db.expression);\r\n                            return regx.test(value);\r\n                        },\r\n                        message: this.currentRules.db.description,\r\n                        trigger: 'blur',\r\n                    });\r\n                    return {\r\n                        ...baseRule,\r\n                        dbPassword: [\r\n                            {\r\n                                validator: value => !/[\\u4e00-\\u9fa5]/.test(value),\r\n                                message: '密码不支持中文',\r\n                                trigger: 'blur',\r\n                            },\r\n                        ],\r\n                        rePassword: [\r\n                            {\r\n                                validator: value => this.formData.rePassword === this.formData.dbPassword,\r\n                                message: '密码不一致',\r\n                                trigger: 'blur',\r\n                            },\r\n                        ],\r\n                        dbPort: [\r\n                            {\r\n                                required: true,\r\n                                message: '端口必填',\r\n                                trigger: 'blur',\r\n                            },\r\n                        ],\r\n                        dbSystemAccountId: [\r\n                            {\r\n                                required: true,\r\n                                message: '依赖系统账号必填',\r\n                                trigger: 'blur',\r\n                            },\r\n                        ],\r\n                    };\r\n                }\r\n                // Linux系统账号不需要密码\r\n                if (this.formData.type === AccountModel.TYPE_LINUX) {\r\n                    // linux 管理源配置账号规则\r\n                    baseRule.account.push({\r\n                        validator: (value) => {\r\n                            const regx = new RegExp(this.currentRules.linux.expression);\r\n                            return regx.test(value);\r\n                        },\r\n                        message: this.currentRules.linux.description,\r\n                        trigger: 'blur',\r\n                    });\r\n                    return baseRule;\r\n                }\r\n\r\n                // windows 系统管理员配置规则\r\n                baseRule.account.push({\r\n                    validator: (value) => {\r\n                        const regx = new RegExp(this.currentRules.windows.expression);\r\n                        return regx.test(value);\r\n                    },\r\n                    message: this.currentRules.windows.description,\r\n                    trigger: 'blur',\r\n                });\r\n                return {\r\n                    ...baseRule,\r\n                    password: [\r\n                        {\r\n                            required: true,\r\n                            message: '密码必填',\r\n                            trigger: 'blur',\r\n                        },\r\n                        {\r\n                            validator: value => !/[\\u4e00-\\u9fa5]/.test(value),\r\n                            message: '密码不支持中文',\r\n                            trigger: 'blur',\r\n                        },\r\n                    ],\r\n                    rePassword: [\r\n                        {\r\n                            validator: value => value === this.formData.password,\r\n                            message: '密码不一致',\r\n                            trigger: 'blur',\r\n                        },\r\n                    ],\r\n                };\r\n            },\r\n        },\r\n        created () {\r\n            this.fetchRules();\r\n            \r\n            this.categoryList = [\r\n                {\r\n                    value: AccountModel.OS,\r\n                    name: '系统账号',\r\n                },\r\n                {\r\n                    value: AccountModel.DB,\r\n                    name: '数据库账号',\r\n                },\r\n            ];\r\n\r\n            if (this.data.id) {\r\n                this.isEdit = true;\r\n                const {\r\n                    id,\r\n                    account,\r\n                    alias,\r\n                    category,\r\n                    dbPassword,\r\n                    dbPort,\r\n                    dbSystemAccountId,\r\n                    grantees,\r\n                    os,\r\n                    password,\r\n                    remark,\r\n                    type,\r\n                } = this.data;\r\n                // 确认密码字段，优先判断 password 字段优先级高，然后是 dbPassword\r\n                let rePassword = dbPassword;\r\n                if (password) {\r\n                    rePassword = password;\r\n                }\r\n                this.formData = {\r\n                    id,\r\n                    account,\r\n                    alias,\r\n                    category,\r\n                    dbPassword,\r\n                    dbPort,\r\n                    dbSystemAccountId,\r\n                    grantees,\r\n                    os,\r\n                    password,\r\n                    remark,\r\n                    type,\r\n                    rePassword,\r\n                };\r\n            }\r\n        },\r\n        methods: {\r\n            /**\r\n             * @desc 获取管理员配置的账号命名规则\r\n             */\r\n            fetchRules () {\r\n                if (this.data.id) {\r\n                    this.isLoading = false;\r\n                    return Promise.resolve();\r\n                }\r\n                return QueryGlobalSettingService.fetchAllNameRule()\r\n                    .then((data) => {\r\n                        const { currentRules } = data;\r\n                        this.currentRules = Object.freeze(currentRules.reduce((result, item) => {\r\n                            result[item.osTypeKey] = item;\r\n                            return result;\r\n                        }, {}));\r\n                    })\r\n                    .catch(() => {\r\n                        this.isRulesLoadingError = false;\r\n                    })\r\n                    .finally(() => {\r\n                        this.isLoading = false;\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 提交新建账号\r\n             */\r\n            createAccount () {\r\n                const params = { ...this.formData };\r\n                delete params.rePassword;\r\n                return AccountManageService.createAccount(params)\r\n                    .then(() => {\r\n                        this.messageSuccess('新建账号成功');\r\n                        this.$emit('on-change');\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 提交编辑账号\r\n             */\r\n            updateAccount () {\r\n                const params = { ...this.formData };\r\n                delete params.rePassword;\r\n                return AccountManageService.updateAccount(params)\r\n                    .then(() => {\r\n                        this.messageSuccess('编辑账号成功');\r\n                        this.$emit('on-change');\r\n                    });\r\n            },\r\n            /**\r\n             * @desc 账号分类切换\r\n             * @param { Number } category\r\n             *\r\n             * 切换账号分类重置表单验证\r\n             */\r\n            handleCategoryChange (category) {\r\n                this.formData = generatorDefault();\r\n                this.formData.category = category;\r\n                const defaultType = {\r\n                    [AccountModel.OS]: AccountModel.TYPE_LINUX,\r\n                    [AccountModel.DB]: AccountModel.TYPE_MYSQL,\r\n                };\r\n                this.formData.type = defaultType[category];\r\n                this.$refs.operateAccountForm.clearError();\r\n            },\r\n            /**\r\n             * @desc 表单字段更新\r\n             * @param { String } key\r\n             * @param { Any } value\r\n             */\r\n            handleFieldChange (key, value) {\r\n                this.formData[key] = value;\r\n            },\r\n            /**\r\n             * @desc 表单提交\r\n             */\r\n            submit () {\r\n                if (this.isRulesLoadingError) {\r\n                    this.messageWarn('命名规则请求失败无法执行当前操作，请刷新页面');\r\n                    return Promise.reject(Error('rule error'));\r\n                }\r\n                return this.$refs.operateAccountForm.validate()\r\n                    .then(() => {\r\n                        if (this.formData.id) {\r\n                            return this.updateAccount();\r\n                        }\r\n                        return this.createAccount();\r\n                    });\r\n            },\r\n        },\r\n    };\r\n</script>\r\n<style lang=\"postcss\">\r\n    .operation-account {\r\n        margin-bottom: -20px;\r\n\r\n        .radio-button-group-wraper {\r\n            position: relative;\r\n            z-index: 1;\r\n        }\r\n\r\n        .account-type-radio {\r\n            width: 120px;\r\n\r\n            .bk-radio-button-text {\r\n                width: 100%;\r\n            }\r\n        }\r\n    }\r\n</style>\r\n"],"names":[],"sourceRoot":""}