{"version":3,"file":"static/css/3065.56bcd1597a1cce6b0a3a.css","mappings":"AAoCA,+CAIA,gCADA,cAFA,eACA,eAGA,CAEA,kEACA,gBACA,qBACA,CCiDA,0CAEA,mBADA,YAWA,CARA,qDACA,cACA,iBACA,CAEA,sDACA,aACA,CCiCA,4DACA,gBACA,CAEA,+BACA,WACA,CAEA,0CACA,gBACA,wBAqBA,CAnBA,0FAMA,8BAFA,eAFA,YACA,kBAEA,eAEA,CAEA,6CAGA,mBADA,cADA,eAGA,CAEA,6CAEA,6BADA,aAEA,CChBA,sCACA,kBAKA,CAHA,mDACA,kBACA","sources":["webpack://job/./src/views/notify-manage/index/components/notify-collapse-item.vue","webpack://job/./src/views/notify-manage/index/components/trigger-setting/components/render-notify-way.vue","webpack://job/./src/views/notify-manage/index/components/trigger-setting/index.vue","webpack://job/./src/views/notify-manage/index/index.vue"],"sourcesContent":["<template>\n    <div class=\"notify-collapse-item\">\n        <bk-collapse-item ref=\"collapseItem\" v-bind=\"$attrs\" v-on=\"$listeners\" hide-arrow>\n            <template #default>\n                <Icon :type=\"iconType\" style=\"color: #979ba5;\" />\n                <span style=\"display: none;\">{{ iconType }}</span>\n                <slot />\n            </template>\n            <template #content>\n                <slot name=\"content\" />\n            </template>\n        </bk-collapse-item>\n    </div>\n</template>\n<script>\n    export default {\n        inject: ['collapse'],\n        data () {\n            return {\n                iconType: 'arrow-full-right',\n            };\n        },\n        mounted () {\n            const unwatch = this.$watch(() => this.$refs.collapseItem.isActive, (newValue) => {\n                this.iconType = newValue ? 'arrow-full-down' : 'arrow-full-right';\n            }, {\n                immediate: true,\n            });\n            this.$once('hook:beforeDestroy', () => {\n                unwatch();\n            });\n        },\n    };\n</script>\n<style lang='postcss'>\n    .notify-collapse-item {\n        .bk-collapse-item-header {\n            font-size: 14px;\n            font-weight: 600;\n            color: #313238;\n            border-bottom: 1px solid #dcdee5;\n        }\n\n        .bk-collapse-item .bk-collapse-item-content {\n            min-height: 42px;\n            padding: 40px 0 0 84px;\n        }\n    }\n</style>\n","<template>\n    <div class=\"render-notify-way-check\">\n        <bk-checkbox\n            class=\"check-all\"\n            v-bind=\"allCheckStatus\"\n            @click.native=\"handleCheckToggle\">\n            {{ '全选' }}\n        </bk-checkbox>\n        <bk-checkbox-group\n            class=\"check-item\"\n            :value=\"localValue\"\n            @change=\"handleChange\">\n            <bk-checkbox\n                v-for=\"(channelItem) in channelList\"\n                :key=\"channelItem.code\"\n                :value=\"channelItem.code\">\n                {{ channelItem.name }}\n            </bk-checkbox>\n        </bk-checkbox-group>\n    </div>\n</template>\n<script>\n    export default {\n        name: '',\n        props: {\n            channelList: {\n                type: Array,\n                default: () => [],\n            },\n            value: {\n                type: Array,\n                default: () => [],\n            },\n        },\n        data () {\n            return {\n                localValue: [],\n            };\n        },\n        computed: {\n            /**\n             * @desc 全选状态\n             * @returns { Object }\n             */\n            allCheckStatus () {\n                if (this.localValue.length < 1) {\n                    return {\n                        checked: false,\n                        indeterminate: false,\n                    };\n                }\n                const allChannelList = this.channelList.map(({ code }) => code);\n                let checked = true;\n                let indeterminate = false;\n                allChannelList.forEach((item) => {\n                    if (!this.localValue.includes(item)) {\n                        checked = false;\n                    }\n                });\n                indeterminate = !checked;\n                if (allChannelList.length < 1) {\n                    checked = false;\n                    indeterminate = false;\n                }\n                return {\n                    checked,\n                    indeterminate,\n                };\n            },\n        },\n        watch: {\n            value: {\n                handler (value) {\n                    this.localValue = value;\n                },\n                immediate: true,\n            },\n        },\n        methods: {\n            handleCheckToggle () {\n                if (this.allCheckStatus.checked) {\n                    this.handleChange([]);\n                } else {\n                    const allChannelCode = this.channelList.map(({ code }) => code);\n                    this.handleChange(allChannelCode);\n                }\n            },\n            handleChange (value) {\n                this.localValue = value;\n                this.$emit('on-change', this.localValue);\n            },\n        },\n    };\n</script>\n<style lang=\"postcss\" scoped>\n    .render-notify-way-check {\n        display: flex;\n        align-items: center;\n\n        .check-all {\n            flex: 0 0 auto;\n            margin-right: 25px;\n        }\n\n        .check-item {\n            flex: 0 0 auto;\n        }\n    }\n</style>\n","\n<template>\n    <jb-form class=\"notify-trigger-setting\">\n        <jb-form-item :label=\"'操作类型'\">\n            <bk-checkbox-group\n                class=\"input\"\n                :value=\"localValue.resourceTypeList\"\n                @change=\"handleResourceTypeChange\">\n                <bk-checkbox\n                    v-for=\"(item) in [{},{},{}]\"\n                    :key=\"item.code\"\n                    :value=\"item.code\">\n                    {{ item.name }}\n                </bk-checkbox>\n            </bk-checkbox-group>\n        </jb-form-item>\n        <jb-form-item :label=\"'通知对象'\">\n            <jb-user-selector\n                class=\"input\"\n                :placeholder=\"'请输入'\"\n                :user=\"localValue.extraObserverList\"\n                :role=\"localValue.roleList\"\n                :filter-list=\"['JOB_EXTRA_OBSERVER']\"\n                @on-change=\"handleUserChange\" />\n        </jb-form-item>\n        <jb-form-item :label=\"'通知方式'\">\n            <table class=\"notify-way-table input\">\n                <thead>\n                    <th style=\"width: 95px;\">{{ '状态' }}</th>\n                    <th>{{ '通知方式' }}</th>\n                </thead>\n                <tbody>\n                    <tr v-for=\"(executeStatus, index) in [{},{},{}]\" :key=\"index\">\n                        <td>{{ executeStatus.name }}</td>\n                        <td>\n                            <render-notify-way\n                                :channel-list=\"templateData.availableNotifyChannelList\"\n                                :value=\"[]\"\n                                @on-change=\"value => handleNotifyWayChange(executeStatus.code, value)\" />\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </jb-form-item>\n    </jb-form>\n</template>\n<script>\n    import _ from 'lodash';\n    import JbUserSelector from '@components/jb-user-selector';\n    import RenderNotifyWay from './components/render-notify-way';\n\n    export default {\n        components: {\n            JbUserSelector,\n            RenderNotifyWay,\n        },\n        props: {\n            type: {\n                type: String,\n                require: true,\n            },\n            data: {\n                type: Object,\n                default: () => ({}),\n            },\n            templateData: {\n                type: Object,\n                default: () => ({}),\n            },\n        },\n        data () {\n            return {\n                localValue: _.cloneDeep(this.data),\n            };\n        },\n        methods: {\n            /**\n             * @desc 外部调用——重置用户输入\n             */\n            reset () {\n                this.localValue = _.cloneDeep(this.data);\n            },\n            /**\n             * @desc 外部调用——获取用户输入\n             * @returns {Object} 通知策略配置\n             */\n            getValue () {\n                const {\n                    resourceTypeList,\n                    extraObserverList,\n                    roleList,\n                    resourceStatusChannelMap,\n                } = this.localValue;\n                return {\n                    triggerType: this.type,\n                    resourceTypeList,\n                    roleList,\n                    extraObserverList,\n                    resourceStatusChannelList: Object.keys(resourceStatusChannelMap).reduce((result, executeStatus) => {\n                        result.push({\n                            executeStatus,\n                            channelList: resourceStatusChannelMap[executeStatus],\n                        });\n                        return result;\n                    }, []),\n                };\n            },\n            /**\n             * @desc 设置操作类型\n             * @param { Array } resourceTypeList\n             */\n            handleResourceTypeChange (resourceTypeList) {\n                this.localValue.resourceTypeList = resourceTypeList;\n            },\n            /**\n             * @desc 设置通知对象\n             * @param { Array } usextraObserverLister 额外通知人\n             * @param { Array } role 通知角色\n             */\n            handleUserChange (extraObserverList, roleList) {\n                if (extraObserverList.length > 0) {\n                    roleList.push('JOB_EXTRA_OBSERVER');\n                }\n                this.localValue.extraObserverList = extraObserverList;\n                this.localValue.roleList = roleList;\n            },\n            /**\n             * @desc 设置通知方式\n             * @param { String } executeStatus 执行状态\n             * @param { Array } channelList 通知渠道\n             */\n            handleNotifyWayChange (executeStatus, channelList) {\n                this.localValue.resourceStatusChannelMap[executeStatus] = channelList;\n            },\n        },\n    };\n</script>\n<style lang=\"postcss\">\n    .notify-trigger-setting {\n        .bk-form-checkbox ~ .bk-form-checkbox {\n            margin-left: 25px;\n        }\n\n        .input {\n            width: 716px;\n        }\n\n        .notify-way-table {\n            background: #fff;\n            border: 1px solid #dcdee5;\n\n            th,\n            td {\n                height: 42px;\n                padding-left: 16px;\n                font-size: 12px;\n                text-align: left;\n                border-left: 1px solid #dcdee5;\n            }\n\n            th {\n                font-weight: normal;\n                color: #313238;\n                background: #fafbfd;\n            }\n\n            td {\n                color: #63656e;\n                border-top: 1px solid #dcdee5;\n            }\n        }\n    }\n</style>\n","\n<template>\n    <smart-action offset-target=\"bk-form-content\">\n        <div class=\"notify-message-page\">\n            <bk-collapse v-if=\"!isLoading\" :value=\"'1'\">\n                <notify-collapse-item\n                    v-for=\"item in triggerTypeList\"\n                    :key=\"item.code\"\n                    :name=\"item.code\"\n                    :active=\"'1'\"\n                >\n                    trigger-title\n                    <span class=\"trigger-title\">{{ item.name }}</span>\n                    <trigger-setting\n                        slot=\"content\"\n                        ref=\"setting\"\n                        :type=\"item.code\"\n                        :data=\"formData[item.code]\"\n                        :template-data=\"templateData\" />\n                </notify-collapse-item>\n            </bk-collapse>\n        </div>\n        <template #action>\n            <div class=\"action-wrapper\">\n                <bk-button\n                    class=\"w120 mr10\"\n                    theme=\"primary\"\n                    \n                    :loading=\"isSubmiting\"\n                    @click=\"handleSave\">\n                    {{ '保存' }}\n                </bk-button>\n                <bk-button\n                    \n                    @click=\"handleCancel\">\n                    {{ '重置' }}\n                </bk-button>\n            </div>\n        </template>\n    </smart-action>\n</template>\n<script>\n       import NotifyService from '@service/notify';\n    import NotifyCollapseItem from './components/notify-collapse-item';\n    import TriggerSetting from './components/trigger-setting';\n\n    export default {\n        components: {\n            NotifyCollapseItem,\n            TriggerSetting,\n        },\n        data () {\n            return {\n                isLoading: true,\n                isSubmiting: false,\n                activeResult: [],\n                templateData: {},\n                formData: {},\n            };\n        },\n        computed: {\n            /**\n             * @desc 页面输入骨架片 loading\n             * @returns { Boolean }\n             */\n            isSkeletonLoading () {\n                return this.isLoading;\n            },\n        },\n        created () {\n            this.isLoading = true;\n            Promise.all([\n                this.fetchPageTemplate(),\n                this.fetchPoliciesList(),\n            ]).finally(() => {\n                this.isLoading = false;\n            });\n        },\n        methods: {\n            /**\n             * @desc 获取页面数据\n             */\n            fetchPageTemplate () {\n                // return NotifyService.fetchPageTemplate()\n                //     .then((data) => {\n                const {\n                    triggerTypeList = [{}, {}, {}],\n                    availableNotifyChannelList = [{}, {}, {}],\n                    executeStatusList = [{}, {}, {}],\n                    resourceTypeList = [{}, {}, {}],\n                    roleList = [{}, {}, {}],\n                } = {};\n                this.triggerTypeList = Object.freeze(triggerTypeList);\n                this.templateData = Object.freeze({\n                    availableNotifyChannelList,\n                    executeStatusList,\n                    resourceTypeList,\n                    roleList,\n                });\n                this.activeResult = triggerTypeList.map(({ code }) => code);\n                // });\n            },\n            /**\n             * @desc 获取消息通知配置的值\n             */\n            fetchPoliciesList () {\n                // return NotifyService.fetchPoliciesList()\n                //     .then((data) => {\n                const triggerPoliciesData = [].reduce((result, item) => {\n                    const {\n                        extraObserverList = [],\n                        resourceStatusChannelMap = [],\n                        resourceTypeList = [],\n                        roleList = [],\n                        triggerType = [],\n                    } = item;\n                    result[triggerType] = {\n                        extraObserverList,\n                        resourceStatusChannelMap,\n                        resourceTypeList,\n                        roleList,\n                    };\n                    return result;\n                }, {});\n                this.formData = Object.freeze(triggerPoliciesData);\n                // });\n            },\n            /**\n             * @desc 保存\n             */\n            handleSave () {\n                this.isSubmiting = true;\n                const triggerPoliciesList = this.$refs.setting.map(settingItem => settingItem.getValue());\n                NotifyService.defaultPoliciesUpdate({\n                    triggerPoliciesList,\n                }).then(() => {\n                    this.messageSuccess('保存成功');\n                    return this.fetchPoliciesList();\n                })\n                    .finally(() => {\n                        this.isSubmiting = false;\n                    });\n            },\n            /**\n             * @desc 重置\n             */\n            handleCancel () {\n                this.$refs.setting.forEach(item => item.reset());\n            },\n        },\n    };\n</script>\n<style lang=\"postcss\" scoped>\n    .notify-message-page {\n        margin-bottom: 24px;\n\n        .bk-collapse {\n            border-bottom: none;\n        }\n    }\n</style>\n"],"names":[],"sourceRoot":""}