{"version":3,"file":"static/css/373.a0b9ac8de1f38008122a.css","mappings":"AA6CA,wCAKA,gBAHA,aACA,sBACA,uBAHA,iBAoDA,CA9CA,oDAIA,cAFA,eACA,iBAFA,kBAIA,CAEA,yDACA,iBAeA,CAbA,oEACA,cAWA,CATA,0EAMA,iCAJA,SAKA,WAJA,OAEA,mBAJA,kBAGA,UAIA,CAIA,qDAKA,cADA,aAHA,kBAEA,WADA,QAkBA,CAbA,sDACA,cACA,CAGA,qEACA,aACA,CAEA,yEACA,gBACA,CCkGA,mCAEA,qBADA,YA6CA,CA1CA,gDAKA,cAJA,aAOA,sBACA,iBANA,eACA,iBAFA,kBAIA,kBA6BA,CAxBA,uDAIA,cAHA,eACA,gBACA,gBAEA,CAEA,0DAEA,mBADA,YAUA,CAPA,6DACA,aACA,CAEA,+DACA,aACA,CAGA,uDAEA,cADA,gBAEA,CAGA,+CACA,OAEA,gBADA,iBAEA,CC2FA,0CACA,aACA,yBAEA,iBADA,kBAEA,CAEA,sDACA,SACA,CC7TA,eACA,YA0BA,CAxBA,sCAEA,YADA,WAsBA,CAnBA,0BAJA,sCAKA,WAkBA,CAjBA,CAEA,0BARA,sCASA,WAcA,CAbA,CAEA,0BAZA,sCAaA,WAUA,CATA,CAEA,0BAhBA,sCAiBA,WAMA,CALA,CAEA,qDACA,6BACA,CCkJA,oBAGA,cAFA,aACA,WAqCA,CAlCA,2CAGA,YADA,OADA,iBAWA,CAPA,0DACA,6BACA,CAEA,uDACA,aACA,CAGA,+BAEA,mBADA,YAMA,CAHA,0CACA,gBACA,CAGA,0BAGA,cAFA,eACA,eAEA,CAEA,mCAEA,YACA,UAFA,iBAGA,CCiBA,qCACA,WA0GA,CAxGA,6CAGA,mBAFA,aACA,sBAEA,sBACA,CAEA,gDAKA,cAJA,aACA,sBACA,eACA,iBAEA,kBA0FA,CAxFA,qDAEA,uBADA,aAEA,cACA,CAEA,4DAEA,mBAEA,eAHA,aAEA,kBAEA,CAEA,8DAEA,kBADA,iBAYA,CATA,qEAMA,mBACA,WAFA,WAFA,WAFA,kBACA,QAEA,UAIA,CAGA,8DAGA,mBACA,eAFA,aADA,iBA4BA,CAvBA,6EACA,cAWA,CATA,mFAMA,mBACA,WAFA,YAFA,WAFA,kBACA,UAEA,SAIA,CAGA,qEAMA,mBACA,WAFA,WAFA,WAFA,kBACA,QAEA,UAIA,CAGA,qQAOA,kBAFA,WACA,iBAFA,SAIA,CAEA,gEACA,8BACA,wBACA,CAEA,iEACA,+BACA,wBACA,CAEA,kEACA,gCACA,wBACA,CAEA,kEACA,gCACA,wBACA,CC/TA,qCACA,YAiCA,CA/BA,kDAGA,+BAFA,aACA,qBAQA,CAJA,wFACA,4BACA,CAIA,4DACA,WAiBA,CAfA,0BAHA,4DAIA,WAcA,CAbA,CAEA,0BAPA,4DAQA,WAUA,CATA,CAEA,0BAXA,4DAYA,WAMA,CALA,CAEA,0BAfA,4DAgBA,WAEA,CADA,CCTA,gDACA,eACA,gBACA,gBACA,CCyHA,+BAGA,mBAFA,aACA,qBAsBA,CAnBA,0CAMA,cALA,aAMA,eAHA,eAIA,6BAHA,iBAFA,gBADA,WAgBA,CARA,gDAMA,mBAFA,eAHA,aAIA,aAFA,sBAIA,CCnJA,gDACA,eACA,gBACA,gBACA,CCuIA,kCAGA,mBAFA,aACA,qBAsBA,CAnBA,6CAMA,cALA,aAMA,eAHA,eAIA,6BAHA,iBAFA,gBADA,WAgBA,CARA,mDAMA,mBAFA,eAHA,aAIA,aAFA,sBAIA,CChLA,mCACA,YAuCA,CArCA,gDAIA,+BAFA,aADA,OAEA,qBAwBA,CApBA,0BADA,uEAEA,WAkBA,CAjBA,CAEA,0BALA,uEAMA,WAcA,CAbA,CAEA,0BATA,uEAUA,WAUA,CATA,CAEA,0BAbA,uEAcA,WAMA,CALA,CAEA,sFACA,4BACA,CAIA,kDACA,MACA,CAEA,iDAEA,8BADA,MAEA,CCkGA,mDAEA,mBADA,aAEA,qBAwBA,CAtBA,8DAQA,mBAFA,cALA,aAMA,sBAHA,eACA,iBAFA,gBADA,WAmBA,CAXA,oEAKA,mBAFA,eAFA,aAGA,aAFA,iBAQA,CAHA,mFACA,eACA,CC3BA,iDAEA,mBADA,aAEA,qBAuBA,CArBA,4DAQA,mBAFA,cALA,aAMA,sBAHA,eACA,iBAFA,gBADA,WAkBA,CAVA,kEAIA,mBAFA,eADA,aAEA,YAMA,CAHA,iFACA,eACA,CC5KA,mBACA,YAyBA,CAvBA,0CACA,WAqBA,CAnBA,0BAHA,0CAIA,WAkBA,CAjBA,CAEA,0BAPA,0CAQA,WAcA,CAbA,CAEA,0BAXA,0CAYA,WAUA,CATA,CAEA,0BAfA,0CAgBA,WAMA,CALA,CAEA,yDACA,6BACA,CCoMA,wBAEA,eADA,iBAyCA,CAtCA,6BAIA,eAFA,cAGA,2CAFA,mBAFA,SAoCA,CA9BA,mCACA,gBACA,UACA,oBACA,CAEA,gCAEA,cADA,cAEA,CAEA,gCAEA,cADA,cAEA,CAEA,gCAEA,cADA,cAEA,CAEA,gCAEA,cADA,cAEA,CAEA,gCAEA,cADA,cAEA,CC3HA,0CACA,WAqBA,CAnBA,yDACA,4BACA,CAEA,0BAPA,0CAQA,WAcA,CAbA,CAEA,0BAXA,0CAYA,WAUA,CATA,CAEA,0BAfA,0CAgBA,WAMA,CALA,CAEA,0BAnBA,0CAoBA,WAEA,CADA,CAGA,iCAGA,mBAIA,cALA,aAEA,eACA,gBACA,iBALA,iBAWA,CAHA,4CACA,gBACA,CAGA,8BAGA,YACA,cAHA,kBACA,UAGA,CCzGA,iCAMA,cALA,aACA,sBAEA,eACA,iBAFA,iBAYA,CAPA,wCAKA,cAHA,eACA,gBAFA,YAGA,gBAEA,CClBA,gCAMA,cALA,aACA,sBAEA,eACA,iBAFA,iBAYA,CAPA,uCAKA,cAHA,eACA,gBAFA,YAGA,gBAEA,CC86BA,+CACA,YAoDA,CAlDA,8DAGA,cAFA,aACA,cA+CA,CA5CA,gJAEA,YAmBA,CAjBA,oKAKA,mBADA,eAHA,YAEA,iBADA,eAIA,mBAUA,CARA,kWAEA,aACA,CAEA,kLACA,kBACA,CAKA,kFACA,gBACA,CAGA,wEACA,gBAKA,CAHA,kFACA,eACA,CAGA,wEACA,aAKA,CAHA,yFACA,cACA,CC9iCA,mBAGA,gBAFA,aACA,MAiCA,CA9BA,gCAEA,+BADA,cAwBA,CApBA,0BADA,uDAEA,WAkBA,CAjBA,CAEA,0BALA,uDAMA,WAcA,CAbA,CAEA,0BATA,uDAUA,WAUA,CATA,CAEA,0BAbA,uDAcA,WAMA,CALA,CAEA,sEACA,4BACA,CAIA,iCACA,MACA,CC6FA,gDAIA,mBAGA,gBACA,sCALA,aAEA,YACA,eALA,kBACA,SAuDA,CA/CA,4DAEA,mBADA,YAsBA,CAnBA,sEAEA,mBACA,YAFA,WAGA,CAEA,4EAUA,mBAFA,mBACA,kBAHA,cACA,eANA,aAIA,eAFA,YAQA,uBAPA,iBAFA,UAUA,CAGA,8DAEA,mBADA,aAEA,gBAkBA,CAhBA,yEAEA,cADA,eAGA,qBADA,6BAEA,CAEA,2EAEA,iBADA,WAOA,CAJA,sHACA,mBACA,wBACA,CAMA,wEACA,iBACA,CAGA,gDACA,aACA,qBA8CA,CA5CA,+DACA,gBACA,CAEA,+DAIA,cAFA,eACA,iBAFA,kBAIA,CAEA,iEACA,YA+BA,CA7BA,gPAIA,gBACA,sCAFA,YAOA,CAHA,mPACA,MACA,CAGA,+EACA,aACA,CAEA,iFACA,cACA,gBAKA,CAHA,gGACA,MACA,CAGA,gFACA,cACA,gBACA","sources":["webpack://job/./src/views/dashboard/index/components/card-layout.vue","webpack://job/./src/views/dashboard/index/components/common/render-trend.vue","webpack://job/./src/views/dashboard/index/components/common/trend-dialog.vue","webpack://job/./src/views/dashboard/index/components/app/index.vue","webpack://job/./src/views/dashboard/index/components/platform/index.vue","webpack://job/./src/views/dashboard/index/components/template/template-step.vue","webpack://job/./src/views/dashboard/index/components/template/index.vue","webpack://job/./src/views/dashboard/index/components/script/releate.vue","webpack://job/./src/views/dashboard/index/components/script/type.vue","webpack://job/./src/views/dashboard/index/components/script/version-use.vue","webpack://job/./src/views/dashboard/index/components/script/version-status.vue","webpack://job/./src/views/dashboard/index/components/script/index.vue","webpack://job/./src/views/dashboard/index/components/crontab/status.vue","webpack://job/./src/views/dashboard/index/components/crontab/type.vue","webpack://job/./src/views/dashboard/index/components/crontab/index.vue","webpack://job/./src/views/dashboard/index/components/tag/index.vue","webpack://job/./src/views/dashboard/index/components/account/index.vue","webpack://job/./src/views/dashboard/index/components/execute/total-count.vue","webpack://job/./src/views/dashboard/index/components/execute/fail-count.vue","webpack://job/./src/views/dashboard/index/components/execute/statistics.vue","webpack://job/./src/views/dashboard/index/components/execute/index.vue","webpack://job/./src/views/dashboard/index/index.vue"],"sourcesContent":["<template>\n    <div class=\"dashboard-card-layout\">\n        <div class=\"card-title\">\n            <span\n                :tippy-tips=\"titleTips\"\n                class=\"card-title-text\"\n                :class=\"{\n                    'hover-tips': needRenderTips,\n                }\">\n                {{ title }}\n            </span>\n        </div>\n        <div class=\"card-content\">\n            <slot />\n        </div>\n        <div class=\"card-extend\">\n            <slot name=\"extend\" />\n        </div>\n    </div>\n</template>\n<script>\n   \n    export default {\n        name: '',\n        props: {\n            title: {\n                type: String,\n                default: '接入业务量',\n            },\n            titleTips: {\n                type: String,\n            },\n        },\n        data () {\n            return {};\n        },\n        computed: {\n            needRenderTips () {\n                return !!this.titleTips;\n            },\n        },\n        methods: {},\n    };\n</script>\n<style lang='postcss' scoped>\n    .dashboard-card-layout {\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        padding: 16px 20px 20px;\n        background: #fff;\n\n        .card-title {\n            margin-bottom: 16px;\n            font-size: 13px;\n            line-height: 18px;\n            color: #63656e;\n        }\n\n        .card-title-text {\n            position: relative;\n\n            &.hover-tips {\n                cursor: pointer;\n\n                &::after {\n                    position: absolute;\n                    bottom: 0;\n                    left: 0;\n                    width: 100%;\n                    margin-bottom: -3px;\n                    border-bottom: 1px dashed #dcdee5;\n                    content: \"\";\n                }\n            }\n        }\n\n        .card-extend {\n            position: absolute;\n            top: 18px;\n            right: 20px;\n            display: flex;\n            color: #c4c6cc;\n\n            & > * {\n                cursor: pointer;\n            }\n\n            .job-icon {\n                &:hover {\n                    color: #3a84ff;\n                }\n\n                & ~ .job-icon {\n                    margin-left: 10px;\n                }\n            }\n        }\n    }\n</style>\n","<template>\n    <div class=\"render-trend-box\" v-bkloading=\"{ isLoading, opacity: 0.8 }\">\n        <div class=\"data-wraper\">\n            <div class=\"total\">{{ data.count }}</div>\n            <div\n                class=\"data-row\"\n                :class=\"{\n                    'down': data.yoyTrend < 0,\n                    'up': data.yoyTrend > 0,\n                    'equal': data.yoyTrend === 0,\n                }\"\n                style=\"margin-top: 12px;\">\n                <span class=\"label\">{{ '同比' }}</span>\n                <span>\n                    <Icon v-if=\"data.yoyTrend < 0\" type=\"decrease-line\" />\n                    <Icon v-if=\"data.yoyTrend === 0\" type=\"equally\" />\n                    <Icon v-if=\"data.yoyTrend > 0\" type=\"increase-line\" />\n                </span>\n                <span>{{ data.yoyValue }}</span>\n            </div>\n            <div\n                class=\"data-row\"\n                :class=\"{\n                    'down': data.momTrend < 0,\n                    'up': data.momTrend > 0,\n                    'equal': data.momTrend === 0,\n                }\"\n                style=\"margin-top: 10px;\">\n                <span class=\"label\">{{ '环比' }}</span>\n                <span>\n                    <Icon v-if=\"data.momTrend < 0\" type=\"decrease-line\" />\n                    <Icon v-if=\"data.momTrend === 0\" type=\"equally\" />\n                    <Icon v-if=\"data.momTrend > 0\" type=\"increase-line\" />\n                </span>\n                <span>{{ data.momValue }}</span>\n            </div>\n        </div>\n        <div class=\"data-chart\">\n            <div ref=\"trend\" style=\"width: 100%; height: 60px;\" />\n        </div>\n    </div>\n</template>\n<script>\n    import _ from 'lodash';\n    import echarts from 'lib/echarts.min.js';\n    import StatisticsService from '@service/statistics';\n    import { prettyDateFormat } from '@utils/assist';\n    \n    const styleMap = {\n        up: {\n            itemStyle: {\n                color: '#4BC7AD',\n            },\n            areaStyle: {\n                color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                    {\n                        offset: 0,\n                        color: 'rgba(75, 199, 173, 0.32)',\n                    },\n                    {\n                        offset: 1,\n                        color: 'rgba(75, 199, 173, 0)',\n                    },\n                ]),\n            },\n        },\n        down: {\n            itemStyle: {\n                color: '#FF5656',\n            },\n            areaStyle: {\n                color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                    {\n                        offset: 0,\n                        color: 'rgba(255, 86, 86, 0.28)',\n                    },\n                    {\n                        offset: 1,\n                        color: 'rgba(255, 86, 86, 0)',\n                    },\n                ]),\n            },\n        },\n    };\n\n    export default {\n        name: '',\n        props: {\n            metric: {\n                type: String,\n                required: true,\n            },\n            date: {\n                type: String,\n                required: true,\n            },\n        },\n        data () {\n            return {\n                isLoading: true,\n                data: {\n                    count: 0,\n                    momRate: 0,\n                    yoyRate: 0,\n                },\n            };\n        },\n        watch: {\n            date () {\n                this.fetchData();\n            },\n        },\n        mounted () {\n            this.trendData = [];\n            this.fetchData();\n            const resize = _.throttle(() => {\n                this.myChart && this.myChart.resize();\n            }, 300);\n            window.addEventListener('resize', resize);\n            this.$once('hook:beforeDestroy', () => {\n                window.removeEventListener('resize', resize);\n            });\n        },\n        methods: {\n            fetchData () {\n                this.isLoading = true;\n                Promise.all([\n                    StatisticsService.fetchTotalMetrics({\n                        date: this.date,\n                        metric: this.metric,\n                    }).then((data) => {\n                        this.data = data || {};\n                    }),\n                    StatisticsService.fetchTrendsMetrics({\n                        endDate: this.date,\n                        startDate: prettyDateFormat(new Date(this.date) - 6 * 86400000),\n                        metric: this.metric,\n                    }).then((data) => {\n                        this.initTrend(data);\n                    }),\n                ]).finally(() => {\n                    this.isLoading = false;\n                });\n            },\n            initTrend (data) {\n                this.myChart = echarts.init(this.$refs.trend);\n                const dateList = [];\n                const valueList = [];\n                data.forEach(({ date, value }) => {\n                    dateList.push(date);\n                    valueList.push(value);\n                });\n\n                const styles = _.head(valueList) <= _.last(valueList) ? 'up' : 'down';\n\n                this.myChart.setOption({\n                    grid: {\n                        top: 5,\n                        right: 5,\n                        bottom: 5,\n                        left: 5,\n                    },\n                    xAxis: {\n                        boundaryGap: false,\n                        data: dateList,\n                        show: false,\n                    },\n                    yAxis: {\n                        type: 'value',\n                        min: 'dataMin',\n                        max: 'dataMax',\n                        boundaryGap: [\n                            0,\n                            '100%',\n                        ],\n                        show: false,\n                    },\n                    series: [\n                        {\n                            name: 'trend',\n                            type: 'line',\n                            symbol: 'none',\n                            sampling: 'average',\n                            ...styleMap[styles],\n                            data: valueList,\n                        },\n                    ],\n                });\n            },\n        },\n    };\n</script>\n<style lang='postcss' scoped>\n    .render-trend-box {\n        display: flex;\n        align-items: flex-end;\n\n        .data-wraper {\n            display: flex;\n            margin-right: auto;\n            font-size: 12px;\n            line-height: 16px;\n            color: #babcc2;\n            white-space: nowrap;\n            /* stylelint-disable declaration-block-no-redundant-longhand-properties */\n            flex-direction: column;\n            flex-wrap: nowrap;\n\n            .total {\n                font-size: 24px;\n                font-weight: 500;\n                line-height: 32px;\n                color: #63656e;\n            }\n\n            .data-row {\n                display: flex;\n                align-items: center;\n\n                &.up {\n                    color: #4bc7ad;\n                }\n\n                &.down {\n                    color: #ff5656;\n                }\n            }\n\n            .label {\n                margin-right: 6px;\n                color: #babcc2;\n            }\n        }\n\n        .data-chart {\n            flex: 1;\n            padding-left: 30px;\n            overflow: hidden;\n        }\n    }\n</style>\n","<template>\n    <lower-component level=\"custom\" :custom=\"value\">\n        <jb-dialog\n            v-bind=\"$attrs\"\n            :value=\"value\"\n            class=\"data-trend-dialog\"\n            :width=\"1000\"\n            :show-footer=\"false\"\n            mask-close\n            @input=\"handleInput\">\n            <div v-bkloading=\"{ isLoading }\">\n                <div class=\"trend-daterang-picker\">\n                    <bk-date-picker\n                        ref=\"datePicker\"\n                        :placeholder=\"'选择日期'\"\n                        :shortcuts=\"shortcuts\"\n                        :value=\"defaultDateRang\"\n                        type=\"daterange\"\n                        :shortcut-close=\"true\"\n                        :use-shortcut-text=\"true\"\n                        :clearable=\"false\"\n                        :options=\"datePickerOptions\"\n                        placement=\"bottom-end\"\n                        @change=\"handleDateChange\" />\n                </div>\n                <div ref=\"trend\" style=\"width: 100%; height: 384px;\" />\n            </div>\n        </jb-dialog>\n    </lower-component>\n</template>\n<script>\n    import echarts from 'lib/echarts.min.js';\n    import _ from 'lodash';\n       import StatisticsService from '@service/statistics';\n    import {\n        formatNumber,\n        prettyDateFormat,\n    } from '@utils/assist';\n\n    const styleMap = {\n        up: {\n            itemStyle: {\n                color: '#4BC7AD',\n            },\n            areaStyle: {\n                color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                    {\n                        offset: 0,\n                        color: 'rgba(75, 199, 173, 0.32)',\n                    },\n                    {\n                        offset: 1,\n                        color: 'rgba(75, 199, 173, 0)',\n                    },\n                ]),\n            },\n        },\n        down: {\n            itemStyle: {\n                color: '#FF5656',\n            },\n            areaStyle: {\n                color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                    {\n                        offset: 0,\n                        color: 'rgba(255, 86, 86, 0.28)',\n                    },\n                    {\n                        offset: 1,\n                        color: 'rgba(255, 86, 86, 0)',\n                    },\n                ]),\n            },\n        },\n    };\n\n    export default {\n        name: '',\n        inheritAttrs: false,\n        props: {\n            value: {\n                type: Boolean,\n                default: false,\n            },\n            metric: {\n                type: String,\n                required: true,\n            },\n            date: {\n                type: String,\n                required: true,\n            },\n            name: {\n                type: String,\n                required: true,\n            },\n        },\n        data () {\n            return {\n                isLoading: true,\n            };\n        },\n        watch: {\n            date: {\n                handler (date) {\n                    this.endDate = date;\n                    this.startDate = prettyDateFormat(new Date(date) - 6 * 86400000);\n                    this.defaultDateRang = [\n                        this.startDate,\n                        this.endDate,\n                    ];\n                    this.shortcuts = [\n                        {\n                            text: '今天',\n                            value () {\n                                const start = new Date(date);\n                                return [\n                                    start,\n                                    start,\n                                ];\n                            },\n                        },\n                        {\n                            text: '昨天',\n                            value () {\n                                const end = new Date(date);\n                                const start = new Date();\n                                start.setTime(end - 86400000);\n                                return [\n                                    start,\n                                    end,\n                                ];\n                            },\n                        },\n                        {\n                            text: '最近3天',\n                            value () {\n                                const end = new Date(date);\n                                const start = new Date();\n                                start.setTime(end - 2 * 86400000);\n                                return [\n                                    start,\n                                    end,\n                                ];\n                            },\n                        },\n                        {\n                            text: '最近7天',\n                            value () {\n                                const end = new Date(date);\n                                const start = new Date();\n                                start.setTime(end - 6 * 86400000);\n                                return [\n                                    start,\n                                    end,\n                                ];\n                            },\n                        },\n                        {\n                            text: '最近30天',\n                            value () {\n                                const end = new Date(date);\n                                const start = new Date();\n                                start.setTime(end - 30 * 86400000);\n                                return [\n                                    start,\n                                    end,\n                                ];\n                            },\n                        },\n                    ];\n                },\n                immediate: true,\n            },\n            value (value) {\n                if (value) {\n                    this.fetchData();\n                }\n            },\n        },\n        created () {\n            this.datePickerOptions = {\n                disabledDate: date => date.getTime() > Date.now(),\n            };\n        },\n        methods: {\n            fetchData () {\n                this.isLoading = true;\n                StatisticsService.fetchTrendsMetrics({\n                    endDate: this.endDate,\n                    startDate: this.startDate,\n                    metric: this.metric,\n                }).then((data) => {\n                    this.initTrend(data || []);\n                })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            },\n            initTrend (data) {\n                if (!this.myChart) {\n                    this.myChart = echarts.init(this.$refs.trend);\n                }\n                const dateList = [];\n                const valueList = [];\n                data.forEach(({ date, value }) => {\n                    dateList.push(date);\n                    valueList.push(value);\n                });\n\n                const styles = _.head(valueList) <= _.last(valueList) ? 'up' : 'down';\n                this.myChart.clear();\n\n                const options = {\n                    grid: {\n                        top: 20,\n                        right: 72,\n                        bottom: 110,\n                        left: 120,\n                    },\n                    tooltip: {\n                        trigger: 'axis',\n                        axisPointer: {\n                            type: 'line',\n                            lineStyle: {\n                                width: 30,\n                                color: '#63656E',\n                                opacity: 0.16,\n                            },\n                        },\n                        backgroundColor: 'rgba(0,0,0,0.8)',\n                    },\n                    xAxis: {\n                        type: 'category',\n                        name: '',\n                        axisLine: {\n                            onZero: false,\n                            lineStyle: {\n                                color: '#DCDEE5',\n                            },\n                        },\n                        axisTick: {\n                            show: false,\n                        },\n                        axisLabel: {\n                            color: '#979BA5',\n                            margin: 2,\n                            rotate: 45,\n                        },\n                        boundaryGap: false,\n                        splitLine: {\n                            show: true,\n                            lineStyle: {\n                                color: '#DCDEE5',\n                            },\n                        },\n                        data: dateList,\n                    },\n                    yAxis: {\n                        type: 'value',\n                        min: 'dataMin',\n                        name: this.name,\n                        nameLocation: 'middle',\n                        nameTextStyle: {\n                            color: '#63656E',\n                        },\n                        nameGap: 50,\n                        axisLine: {\n                            onZero: true,\n                            color: '#F0F1F5',\n                            lineStyle: {\n                                color: '#F0F1F5',\n                            },\n                        },\n                        axisTick: {\n                            show: false,\n                        },\n                        axisLabel: {\n                            color: '#C4C6CC',\n                            formatter: value => formatNumber(value, true),\n                        },\n                        splitLine: {\n                            lineStyle: {\n                                color: '#DCDEE5',\n                            },\n                        },\n                    },\n                    series: [\n                        {\n                            name: this.name,\n                            type: 'line',\n                            sampling: 'average',\n                            ...styleMap[styles],\n                            data: valueList,\n                        },\n                    ],\n                };\n                if (valueList.length > 28) {\n                    const rate = 27 / valueList.length * 100;\n                    const start = Math.floor((100 - rate) / 2);\n                    options.dataZoom = [\n                        {\n                            show: true,\n                            realtime: true,\n                            start,\n                            end: start + rate,\n                        },\n                    ];\n                }\n                this.myChart.setOption(options);\n            },\n            handleDateChange (value) {\n                const [\n                    startDate,\n                    endDate,\n                ] = value;\n                this.startDate = startDate;\n                this.endDate = endDate;\n                this.fetchData();\n            },\n            handleInput (value) {\n                this.$emit('input', value);\n                this.$emit('change', value);\n            },\n        },\n    };\n</script>\n<style lang='postcss'>\n    .data-trend-dialog {\n        .trend-daterang-picker {\n            display: flex;\n            justify-content: flex-end;\n            padding-right: 72px;\n            margin-top: -28px;\n        }\n\n        .bk-dialog-wrapper .bk-dialog-body {\n            padding: 0;\n        }\n    }\n</style>\n","<template>\n    <div class=\"app-dashboard\">\n        <all-app ref=\"all\" v-bind=\"$attrs\" />\n        <active-app ref=\"active\" v-bind=\"$attrs\" />\n    </div>\n</template>\n<script>\n    import AllApp from './all-app';\n    import ActiveApp from './active-app';\n\n    export default {\n        name: '',\n        components: {\n            AllApp,\n            ActiveApp,\n        },\n    };\n</script>\n<style lang='postcss'>\n    @import \"@/css/mixins/media\";\n\n    .app-dashboard {\n        display: flex;\n\n        .dashboard-card-layout {\n            width: 260px;\n            border: none;\n\n            @media (--huge-viewports) {\n                width: 400px;\n            }\n\n            @media (--large-viewports) {\n                width: 300px;\n            }\n\n            @media (--medium-viewports) {\n                width: 280px;\n            }\n\n            @media (--small-viewports) {\n                width: 260px;\n            }\n\n            &:nth-child(n+2) {\n                border-left: 1px solid #f0f1f5;\n            }\n        }\n    }\n</style>\n","<template>\n    <div\n        class=\"platform-dashboard\"\n        v-bkloading=\"{ isLoading: isLoading, opacity: 0.8 }\">\n        <card-layout title=\"Linux OS\">\n            <div class=\"container\">\n                <div class=\"nums\">{{ data.LINUX | formatNumber }}</div>\n                <div\n                    ref=\"LINUX\"\n                    class=\"dashboard\"\n                    v-bk-tooltips.right=\"calcPercentage(data.LINUX)\"\n                    style=\"width: 24px; height: 24px;\" />\n            </div>\n            <Icon\n                type=\"linux\"\n                class=\"platform-flag\"\n                style=\"font-size: 38px;\" />\n        </card-layout>\n        <card-layout title=\"Windows OS\">\n            <div class=\"container\">\n                <div class=\"nums\">{{ data.WINDOWS | formatNumber }}</div>\n                <div\n                    ref=\"WINDOWS\"\n                    class=\"dashboard\"\n                    v-bk-tooltips.right=\"calcPercentage(data.WINDOWS)\"\n                    style=\"width: 24px; height: 24px;\" />\n            </div>\n            <Icon\n                type=\"windows\"\n                class=\"platform-flag\"\n                style=\"font-size: 28px;\" />\n        </card-layout>\n        <card-layout title=\"AIX OS\">\n            <div class=\"container\">\n                <div class=\"nums\">{{ data.AIX | formatNumber }}</div>\n                <div\n                    ref=\"AIX\"\n                    class=\"dashboard\"\n                    v-bk-tooltips.right=\"calcPercentage(data.AIX)\"\n                    style=\"width: 24px; height: 24px;\" />\n            </div>\n            <Icon\n                type=\"aix\"\n                class=\"platform-flag\"\n                style=\"font-size: 24px;\" />\n        </card-layout>\n        <card-layout :title=\"'未知 OS'\">\n            <div class=\"container\">\n                <div class=\"nums\">{{ data.OTHERS | formatNumber }}</div>\n                <div\n                    ref=\"OTHERS\"\n                    class=\"dashboard\"\n                    v-bk-tooltips.right=\"calcPercentage(data.OTHERS)\"\n                    style=\"width: 24px; height: 24px;\" />\n            </div>\n            <Icon\n                type=\"others\"\n                class=\"platform-flag\"\n                style=\"font-size: 28px;\" />\n        </card-layout>\n    </div>\n</template>\n<script>\n    import echarts from 'lib/echarts.min.js';\n    import StatisticsService from '@service/statistics';\n    import {\n        formatNumber,\n    } from '@utils/assist';\n\n    import CardLayout from '../card-layout';\n\n    export default {\n        name: '',\n        components: {\n            CardLayout,\n        },\n        filters: {\n            formatNumber (value) {\n                return formatNumber(value);\n            },\n        },\n        props: {\n            date: {\n                type: String,\n                required: true,\n            },\n        },\n        data () {\n            return {\n                isLoading: true,\n                data: {\n                    AIX: 0,\n                    LINUX: 0,\n                    OTHERS: 0,\n                    WINDOWS: 0,\n                },\n            };\n        },\n        watch: {\n            date () {\n                this.fetchData();\n            },\n        },\n        mounted () {\n            this.fetchData();\n        },\n        methods: {\n            fetchData () {\n                this.isLoading = true;\n                StatisticsService.fetchDistributionMetrics({\n                    date: this.date,\n                    metric: 'HOST_SYSTEM_TYPE',\n                }).then((data) => {\n                    this.data = data.labelAmountMap;\n                    this.init();\n                })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            },\n            init () {\n                const typeList = [\n                    'LINUX',\n                    'WINDOWS',\n                    'AIX',\n                    'OTHERS',\n                ];\n                \n                typeList.forEach((typeItem) => {\n                    if (!this.$refs.LINUX) {\n                        return;\n                    }\n                    const other = typeList.reduce((result, item) => {\n                        if (item === typeItem) {\n                            return result;\n                        }\n                        return result + this.data[item];\n                    }, 0);\n                    const myChart = echarts.init(this.$refs[typeItem]);\n                    myChart.setOption({\n                        series: [\n                            {\n                                type: 'pie',\n                                radius: [\n                                    '8',\n                                    '12',\n                                ],\n                                hoverOffset: 0,\n                                label: {\n                                    show: false,\n                                },\n                                data: [\n                                    {\n                                        value: this.data[typeItem],\n                                        itemStyle: {\n                                            color: '#85CCA8',\n                                        },\n                                    },\n                                    {\n                                        value: other,\n                                        itemStyle: {\n                                            color: '#EBECF0',\n                                        },\n                                        emphasis: {\n                                            itemStyle: {\n                                                color: '#F0F1F5',\n                                            },\n                                        },\n                                    },\n                                ],\n                            },\n                        ],\n                    });\n                });\n            },\n            calcPercentage (value) {\n                const {\n                    AIX,\n                    LINUX,\n                    OTHERS,\n                    WINDOWS,\n                } = this.data;\n                const total = parseInt(AIX, 10) + parseInt(LINUX, 10) + parseInt(OTHERS, 10) + parseInt(WINDOWS, 10);\n                if (!total) {\n                    return '0 %';\n                }\n                return `${Math.round(value / total * 100).toFixed(2)} %`;\n            },\n        },\n    };\n</script>\n<style lang='postcss'>\n    .platform-dashboard {\n        display: flex;\n        height: 100%;\n        color: #e5e6eb;\n\n        .dashboard-card-layout {\n            position: relative;\n            flex: 1;\n            border: none;\n\n            &:nth-child(n+2) {\n                border-left: 1px solid #f0f1f5;\n            }\n\n            .card-title {\n                color: #979ba5;\n            }\n        }\n\n        .container {\n            display: flex;\n            align-items: center;\n\n            .dashboard {\n                margin-left: 10px;\n            }\n        }\n\n        .nums {\n            font-size: 24px;\n            font-weight: bold;\n            color: #63656e;\n        }\n\n        .platform-flag {\n            position: absolute;\n            bottom: 24px;\n            left: 20px;\n        }\n    }\n</style>\n","<template>\n    <card-layout\n        class=\"template-step-card\"\n        :title=\"'作业步骤类型使用占比'\"\n        v-bkloading=\"{ isLoading, opacity: 0.8 }\">\n        <div class=\"wraper\">\n            <div ref=\"dashboard\" style=\"width: 180px; height: 180px;\" />\n            <div class=\"data-info\">\n                <div class=\"row\">\n                    <div class=\"data-label\" @mouseover=\"handleMouseover('文件分发')\">\n                        <div :style=\"calcItemCircleStyles('fileStep')\" />\n                        <div>{{ '文件分发' }}</div>\n                    </div>\n                    <div class=\"data-content\">\n                        <div class=\"content-item\" @mouseover=\"handleMouseover('本地文件源')\">\n                            <div class=\"local-file-dot\" />\n                            <div>{{ '本地文件源' }}</div>\n                        </div>\n                        <div class=\"content-item\" @mouseover=\"handleMouseover('服务器文件源')\">\n                            <div class=\"server-file-dot\" />\n                            <div>{{ '服务器文件源' }}</div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"data-label\" @mouseover=\"handleMouseover('脚本执行')\">\n                        <div :style=\"calcItemCircleStyles('scriptStep')\" />\n                        <div>{{ '脚本执行' }}</div>\n                    </div>\n                    <div class=\"data-content\">\n                        <div class=\"content-item\" @mouseover=\"handleMouseover('手工录入')\">\n                            <div class=\"local-script-dot\" />\n                            <div>{{ '手工录入' }}</div>\n                        </div>\n                        <div class=\"content-item\" @mouseover=\"handleMouseover('脚本引用')\">\n                            <div class=\"refer-script-dot\" />\n                            <div>{{ '脚本引用' }}</div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"data-label\" @mouseover=\"handleMouseover('人工确认')\">\n                        <div :style=\"calcItemCircleStyles('confirmStep')\" />\n                        <div>{{ '人工确认' }}</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </card-layout>\n</template>\n<script>\n    import _ from 'lodash';\n    import echarts from 'lib/echarts.min.js';\n       import StatisticsService from '@service/statistics';\n    import CardLayout from '../card-layout';\n    import {\n        chartsOptionsBase,\n    } from '../common/assist';\n\n    const colorMap = {\n        fileStep: '#3157A3',\n        scriptStep: '#85CCA8',\n        confirmStep: '#D4E6C1',\n    };\n\n    export default {\n        name: '',\n        components: {\n            CardLayout,\n        },\n        props: {\n            date: {\n                type: String,\n                required: true,\n            },\n        },\n        data () {\n            return {\n                isLoading: true,\n                data: {\n                    CONFIRM: 32,\n                    FILE_LOCAL: 68,\n                    FILE_SERVER: 32,\n                    SCRIPT_MANUAL: 32,\n                    SCRIPT_REF: 32,\n                },\n            };\n        },\n        watch: {\n            date () {\n                this.fetchData();\n            },\n        },\n        created () {\n            this.list = [\n                '文件分发',\n                '本地文件源',\n                '服务器文件源',\n                '脚本执行',\n                '手工录入',\n                '脚本引用',\n                '人工确认',\n            ];\n            this.fetchData();\n        },\n        methods: {\n            fetchData () {\n                this.isLoading = true;\n                StatisticsService.fetchDistributionMetrics({\n                    date: this.date,\n                    metric: 'STEP_TYPE',\n                }).then((data) => {\n                    this.data = data.labelAmountMap;\n                    this.init();\n                })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            },\n            init () {\n                this.myChart = echarts.init(this.$refs.dashboard);\n                const option = {\n                    ...chartsOptionsBase,\n                    series: [\n                        {\n                            name: '作业步骤',\n                            type: 'pie',\n                            label: {\n                                show: false,\n                            },\n                            selectedMode: 'single',\n                            radius: [\n                                0,\n                                '50px',\n                            ],\n                            hoverOffset: 6,\n                            avoidLabelOverlap: false,\n                            data: [\n                                {\n                                    value: this.data.FILE_LOCAL + this.data.FILE_SERVER,\n                                    name: '文件分发',\n                                    itemStyle: {\n                                        color: colorMap.fileStep,\n                                    },\n                                },\n                                {\n                                    value: this.data.SCRIPT_MANUAL + this.data.SCRIPT_REF,\n                                    name: '脚本执行',\n                                    itemStyle: {\n                                        color: colorMap.scriptStep,\n                                    },\n                                },\n                                {\n                                    value: this.data.CONFIRM,\n                                    name: '人工确认',\n                                    itemStyle: {\n                                        color: colorMap.confirmStep,\n                                    },\n                                },\n                            ],\n                        },\n                        {\n                            name: '作业步骤',\n                            type: 'pie',\n                            label: {\n                                show: false,\n                            },\n                            radius: [\n                                '60px',\n                                '80px',\n                            ],\n                            hoverOffset: 8,\n                            avoidLabelOverlap: false,\n                            data: [\n                                {\n                                    value: this.data.FILE_LOCAL,\n                                    name: '本地文件源',\n                                    itemStyle: {\n                                        color: '#2E2E99',\n                                    },\n                                },\n                                {\n                                    value: this.data.FILE_SERVER,\n                                    name: '服务器文件源',\n                                    itemStyle: {\n                                        color: '#3786AD',\n                                    },\n                                },\n                                {\n                                    value: this.data.SCRIPT_MANUAL,\n                                    name: '手工录入',\n                                    itemStyle: {\n                                        color: '#74C2C2',\n                                    },\n                                },\n                                {\n                                    value: this.data.SCRIPT_REF,\n                                    name: '脚本引用',\n                                    itemStyle: {\n                                        color: '#9AD69A',\n                                    },\n                                },\n                                {\n                                    value: this.data.CONFIRM,\n                                    name: '人工确认',\n                                    itemStyle: {\n                                        color: '#D4E6C1',\n                                    },\n                                },\n                            ],\n                        },\n                    ],\n                };\n                this.myChart.setOption(option);\n                let maxValueItem = {\n                    value: -1,\n                };\n                option.series.forEach((series) => {\n                    series.data.forEach((item) => {\n                        if (maxValueItem.value < item.value) {\n                            maxValueItem = item;\n                        }\n                    });\n                });\n                this.myChart.dispatchAction({ type: 'highlight', name: maxValueItem.name });\n                this.myChart.on('mouseover', (params) => {\n                    this.handleMouseover(params.data.name);\n                });\n            },\n            calcItemCircleStyles (type) {\n                return {\n                    width: '8px',\n                    height: '8px',\n                    marginRight: '6px',\n                    borderRadius: '50%',\n                    backgroundColor: colorMap[type],\n                };\n            },\n            handleMouseover (label) {\n                const others = _.filter(this.list, _ => _ !== label);\n                this.myChart.dispatchAction({ type: 'highlight', name: label });\n                this.myChart.dispatchAction({ type: 'downplay', name: others });\n            },\n        },\n    };\n</script>\n<style lang='postcss' scoped>\n    .template-step-card {\n        width: 260px;\n\n        .wraper {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n        }\n\n        .data-info {\n            display: flex;\n            flex-direction: column;\n            font-size: 12px;\n            line-height: 18px;\n            color: #979ba5;\n            white-space: nowrap;\n\n            .row {\n                display: flex;\n                align-items: flex-start;\n                margin-top: 6px;\n            }\n\n            .data-label {\n                display: flex;\n                align-items: center;\n                padding-right: 14px;\n                cursor: pointer;\n            }\n\n            .data-content {\n                position: relative;\n                padding-left: 14px;\n\n                &::before {\n                    position: absolute;\n                    top: 9px;\n                    left: -14px;\n                    width: 14px;\n                    height: 1px;\n                    background: #f0f1f5;\n                    content: \"\";\n                }\n            }\n\n            .content-item {\n                position: relative;\n                display: flex;\n                align-items: center;\n                cursor: pointer;\n\n                &:nth-child(n+2) {\n                    margin-top: 4px;\n\n                    &::after {\n                        position: absolute;\n                        top: -13px;\n                        left: -14px;\n                        width: 1px;\n                        height: 22px;\n                        background: #f0f1f5;\n                        content: \"\";\n                    }\n                }\n\n                &::before {\n                    position: absolute;\n                    top: 9px;\n                    left: -14px;\n                    width: 14px;\n                    height: 1px;\n                    background: #f0f1f5;\n                    content: \"\";\n                }\n            }\n\n            .local-file-dot,\n            .server-file-dot,\n            .local-script-dot,\n            .refer-script-dot {\n                width: 8px;\n                height: 8px;\n                margin-right: 6px;\n                border-radius: 50%;\n            }\n\n            .local-file-dot {\n                background: rgb(35 35 148 / 40%);\n                border: 2px solid #232394;\n            }\n\n            .server-file-dot {\n                background: rgb(55 134 173 / 40%);\n                border: 2px solid #3786ad;\n            }\n\n            .local-script-dot {\n                background: rgb(116 194 194 / 40%);\n                border: 2px solid #74c2c2;\n            }\n\n            .refer-script-dot {\n                background: rgb(154 214 154 / 40%);\n                border: 2px solid #9ad69a;\n            }\n        }\n    }\n</style>\n","<template>\n    <div class=\"template-dashboard\">\n        <div class=\"layout-left\">\n            <template-count v-bind=\"$attrs\" />\n            <plan-count v-bind=\"$attrs\" />\n        </div>\n        <div class=\"layout-right\">\n            <template-step v-bind=\"$attrs\" />\n        </div>\n    </div>\n</template>\n<script>\n    import TemplateCount from './template-count';\n    import PlanCount from './plan-count';\n    import TemplateStep from './template-step';\n\n    export default {\n        name: '',\n        components: {\n            TemplateCount,\n            PlanCount,\n            TemplateStep,\n        },\n        data () {\n            return {};\n        },\n\n        methods: {},\n    };\n</script>\n<style lang='postcss' scoped>\n    @import \"@/css/mixins/media\";\n\n    .template-dashboard {\n        display: flex;\n\n        .layout-left {\n            display: flex;\n            flex-direction: column;\n            border-right: 1px solid #f0f1f5;\n\n            .dashboard-card-layout {\n                &:nth-child(n+2) {\n                    border-top: 1px solid #f0f1f5;\n                }\n            }\n        }\n\n        .dashboard-card-layout {\n            width: 260px;\n\n            @media (--huge-viewports) {\n                width: 400px;\n            }\n\n            @media (--large-viewports) {\n                width: 300px;\n            }\n\n            @media (--medium-viewports) {\n                width: 280px;\n            }\n\n            @media (--small-viewports) {\n                width: 260px;\n            }\n        }\n    }\n</style>\n","<template>\n    <card-layout\n        class=\"script-ralate-dashboard\"\n        v-bkloading=\"{ isLoading, opacity: 0.8 }\"\n        :title=\"'使用率'\"\n        :title-tips=\"'被作业模板引用的脚本总数（去重）/ 脚本总数，比率越高代表脚本在作业的使用率越高'\">\n        <div class=\"nums\">{{ rate }}</div>\n    </card-layout>\n</template>\n<script>\n    import StatisticsService from '@service/statistics';\n    import CardLayout from '../card-layout';\n\n    export default {\n        name: '',\n        components: {\n            CardLayout,\n        },\n        data () {\n            return {\n                isLoading: true,\n                rate: '0 %',\n            };\n        },\n        watch: {\n            date () {\n                this.fetchData();\n            },\n        },\n        created () {\n            this.fetchData();\n        },\n        methods: {\n            fetchData () {\n                this.isLoading = true;\n                StatisticsService.fetchScriptCiteInfo()\n                    .then((data) => {\n                        const {\n                            citedScriptCount,\n                            scriptCount,\n                        } = data;\n                        if (scriptCount < 1) {\n                            this.rate = '0 %';\n                        } else {\n                            this.rate = `${Math.round(citedScriptCount / scriptCount * 100).toFixed(2)} %`;\n                        }\n                    })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            },\n        },\n    };\n</script>\n<style lang='postcss' scoped>\n    .script-ralate-dashboard {\n        .nums {\n            font-size: 24px;\n            font-weight: bold;\n            line-height: 32px;\n        }\n    }\n</style>\n","<template>\n    <card-layout\n        class=\"script-type-dashboard\"\n        :title=\"'脚本类型分布'\"\n        v-bkloading=\"{ isLoading, opacity: 0.8 }\">\n        <div class=\"wraper\">\n            <div ref=\"dashboard\" style=\"width: 180px; height: 180px;\" />\n            <div class=\"item-list\">\n                <div\n                    v-for=\"item in typeList\"\n                    :key=\"item\"\n                    class=\"item\"\n                    @mouseover=\"handleMouseover(item)\">\n                    <div :style=\"calcItemCircleStyles(item)\" />\n                    <div>{{ item }}</div>\n                </div>\n            </div>\n        </div>\n    </card-layout>\n</template>\n<script>\n    import echarts from 'lib/echarts.min.js';\n    import _ from 'lodash';\n    import StatisticsService from '@service/statistics';\n    import CardLayout from '../card-layout';\n    import {\n        chartsOptionsBase,\n    } from '../common/assist';\n\n    const colorMap = {\n        Bat: '#3157A3',\n        Shell: '#85CCA8',\n        Perl: '#3786AD',\n        Powershell: '#BCEBBC',\n        Python: '#74C2C2',\n        SQL: '#D4E6C1',\n    };\n\n    export default {\n        name: '',\n        components: {\n            CardLayout,\n        },\n        props: {\n            date: {\n                type: String,\n                required: true,\n            },\n        },\n        data () {\n            return {\n                isLoading: true,\n                data: {\n                    bat: 0,\n                    perl: 0,\n                    powershell: 0,\n                    python: 0,\n                    sql: 0,\n                    shell: 0,\n                },\n            };\n        },\n        watch: {\n            date () {\n                this.fetchData();\n            },\n        },\n        created () {\n            this.typeList = [\n                'Bat',\n                'Shell',\n                'Perl',\n                'Powershell',\n                'Python',\n                'SQL',\n            ];\n        },\n        mounted () {\n            this.fetchData();\n        },\n        methods: {\n            fetchData () {\n                this.isLoading = true;\n\n                StatisticsService.fetchDistributionMetrics({\n                    date: this.date,\n                    metric: 'SCRIPT_TYPE',\n                }).then((data) => {\n                    this.data = data.labelAmountMap;\n                    this.init();\n                })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            },\n            init () {\n                this.myChart = echarts.init(this.$refs.dashboard);\n                const data = [];\n                let maxType = this.typeList[0];// eslint-disable-line prefer-destructuring\n                this.typeList.forEach((type) => {\n                    const currentValue = this.data[type.toLowerCase()];\n                    if (this.data[maxType.toLowerCase()] < currentValue) {\n                        maxType = type;\n                    }\n                    data.push({\n                        value: currentValue,\n                        key: type,\n                        name: type,\n                        itemStyle: {\n                            color: colorMap[type],\n                        },\n                    });\n                });\n                const options = {\n                    ...chartsOptionsBase,\n                    series: [\n                        {\n                            type: 'pie',\n                            radius: [\n                                '60',\n                                '80',\n                            ],\n                            selectedMode: 'single',\n                            hoverOffset: 8,\n                            selectedOffset: 0,\n                            avoidLabelOverlap: false,\n                            label: {\n                                normal: {\n                                    show: false,\n                                    position: 'center',\n                                },\n                                emphasis: {\n                                    show: true,\n                                    formatter: [\n                                        '{value|{d}%}',\n                                        '{b}',\n                                    ].join('\\n'),\n                                    rich: {\n                                        name: {\n                                            fontSize: 12,\n                                            lineHieght: 16,\n                                            color: '#63656E',\n                                        },\n                                        value: {\n                                            fontSize: 26,\n                                            fontWeight: 600,\n                                            lineHeight: 42,\n                                            color: '#63656E',\n                                        },\n                                    },\n                                },\n                            },\n                            data,\n                        },\n                    ],\n                };\n                this.myChart.setOption(options);\n                this.myChart.dispatchAction({ type: 'highlight', name: maxType });\n                this.myChart.on('mouseover', (params) => {\n                    this.handleMouseover(params.data.name);\n                });\n            },\n            calcItemCircleStyles (type) {\n                return {\n                    width: '8px',\n                    height: '8px',\n                    marginRight: '6px',\n                    borderRadius: '50%',\n                    backgroundColor: colorMap[type],\n                };\n            },\n            handleMouseover (type) {\n                const others = _.filter(this.typeList, _ => _ !== type);\n                this.myChart.dispatchAction({ type: 'highlight', name: type });\n                this.myChart.dispatchAction({ type: 'downplay', name: others });\n            },\n        },\n    };\n</script>\n<style lang='postcss'>\n    .script-type-dashboard {\n        .wraper {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n\n            .item-list {\n                display: flex;\n                width: 180px;\n                margin-top: 30px;\n                font-size: 12px;\n                line-height: 18px;\n                color: #979ba5;\n                flex-wrap: wrap;\n                justify-content: space-around;\n\n                .item {\n                    display: flex;\n                    padding: 5px 0;\n                    padding-left: 10px;\n                    cursor: pointer;\n                    flex: 1 1 50%;\n                    align-items: center;\n                }\n            }\n        }\n    }\n</style>\n","<template>\n    <card-layout\n        class=\"script-ralate-dashboard\"\n        :title=\"'复用率'\"\n        :title-tips=\"'引用脚本的步骤总数 / 被引用的脚本总数（去重），比率越高代表脚本在作业中被重复利用的价值越大'\"\n        v-bkloading=\"{ isLoading, opacity: 0.8 }\">\n        <div class=\"nums\">{{ rate }}</div>\n    </card-layout>\n</template>\n<script>\n    import StatisticsService from '@service/statistics';\n    import CardLayout from '../card-layout';\n\n    export default {\n        name: '',\n        components: {\n            CardLayout,\n        },\n        data () {\n            return {\n                isLoading: true,\n                rate: '0 %',\n            };\n        },\n        watch: {\n            date () {\n                this.fetchData();\n            },\n        },\n        created () {\n            this.fetchData();\n        },\n        methods: {\n            fetchData () {\n                this.isLoading = true;\n                StatisticsService.fetchScriptCiteInfo()\n                    .then((data) => {\n                        const {\n                            citedScriptStepCount,\n                            citedScriptCount,\n                        } = data;\n                        if (citedScriptCount < 1) {\n                            this.rate = '0 %';\n                        } else {\n                            this.rate = `${Math.round(citedScriptStepCount / citedScriptCount * 100).toFixed(2)} %`;\n                        }\n                    })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            },\n        },\n    };\n</script>\n<style lang='postcss' scoped>\n    .script-ralate-dashboard {\n        .nums {\n            font-size: 24px;\n            font-weight: bold;\n            line-height: 32px;\n        }\n    }\n</style>\n","<template>\n    <card-layout\n        class=\"script-version-dashboard\"\n        :title=\"'脚本版本状态分布'\"\n        v-bkloading=\"{ isLoading, opacity: 0.8 }\">\n        <div class=\"wraper\">\n            <div ref=\"dashboard\" style=\"width: 180px; height: 180px;\" />\n            <div class=\"item-list\">\n                <div\n                    v-for=\"item in list\"\n                    :key=\"item.key\"\n                    class=\"item\"\n                    @mouseover=\"handleMouseover(item.label)\">\n                    <div :style=\"calcItemCircleStyles(item.key)\" />\n                    <div>{{ item.label }}</div>\n                </div>\n            </div>\n        </div>\n    </card-layout>\n</template>\n<script>\n    import _ from 'lodash';\n    import echarts from 'lib/echarts.min.js';\n       import StatisticsService from '@service/statistics';\n    import CardLayout from '../card-layout';\n    import {\n        chartsOptionsBase,\n    } from '../common/assist';\n\n    const colorMap = {\n        ONLINE: '#85CCA8',\n        DISABLED: '#FFDDDD',\n        OFFLINE: '#D4E6C1',\n        DRAFT: '#DCDEE6',\n    };\n\n    export default {\n        name: '',\n        components: {\n            CardLayout,\n        },\n        props: {\n            date: {\n                type: String,\n                required: true,\n            },\n        },\n        data () {\n            return {\n                isLoading: true,\n                data: {\n                    DISABLED: '',\n                    OFFLINE: '',\n                    ONLINE: '',\n                    DRAFT: '',\n                },\n            };\n        },\n        watch: {\n            date () {\n                this.fetchData();\n            },\n        },\n        created () {\n            this.list = [\n                {\n                    label: '已上线',\n                    key: 'ONLINE',\n                },\n                {\n                    label: '禁用',\n                    key: 'DISABLED',\n                },\n                {\n                    label: '已下线',\n                    key: 'OFFLINE',\n                },\n                {\n                    label: '未上线',\n                    key: 'DRAFT',\n                    emphasis: {\n                        itemStyle: {\n                            color: '#E6E8F0',\n                        },\n                    },\n                },\n            ];\n        },\n        mounted () {\n            this.fetchData();\n        },\n        methods: {\n            fetchData () {\n                this.isLoading = true;\n                StatisticsService.fetchDistributionMetrics({\n                    date: this.date,\n                    metric: 'SCRIPT_VERSION_STATUS',\n                }).then((data) => {\n                    this.data = data.labelAmountMap;\n                    this.init();\n                })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            },\n            init () {\n                this.myChart = echarts.init(this.$refs.dashboard);\n                const data = [];\n                let maxItem = this.list[0];// eslint-disable-line prefer-destructuring\n                this.list.forEach((item) => {\n                    const currentValue = this.data[item.key];\n                    if (this.data[maxItem.key] < currentValue) {\n                        maxItem = item;\n                    }\n                    data.push({\n                        value: currentValue,\n                        key: item.key,\n                        name: item.label,\n                        itemStyle: {\n                            color: colorMap[item.key],\n                        },\n                        emphasis: item.emphasis || {},\n                    });\n                });\n                const options = {\n                    ...chartsOptionsBase,\n                    series: [\n                        {\n                            type: 'pie',\n                            radius: [\n                                '60',\n                                '80',\n                            ],\n                            selectedMode: 'single',\n                            hoverOffset: 8,\n                            selectedOffset: 0,\n                            avoidLabelOverlap: false,\n                            label: {\n                                normal: {\n                                    show: false,\n                                    position: 'center',\n                                },\n                                emphasis: {\n                                    show: true,\n                                    formatter: [\n                                        '{value|{d}%}',\n                                        '{b}',\n                                    ].join('\\n'),\n\n                                    rich: {\n                                        name: {\n                                            fontSize: 12,\n                                            lineHieght: 16,\n                                            color: '#63656E',\n                                        },\n                                        value: {\n                                            fontSize: 26,\n                                            fontWeight: 600,\n                                            lineHeight: 42,\n                                            color: '#63656E',\n                                        },\n                                    },\n                                },\n                            },\n                            \n                            data,\n                        },\n                    ],\n                };\n                \n                this.myChart.setOption(options);\n                this.myChart.dispatchAction({ type: 'highlight', name: maxItem.label });\n                this.myChart.on('mouseover', (params) => {\n                    this.handleMouseover(params.data.name);\n                });\n            },\n            calcItemCircleStyles (value) {\n                return {\n                    width: '8px',\n                    height: '8px',\n                    marginRight: '6px',\n                    borderRadius: '50%',\n                    backgroundColor: colorMap[value],\n                };\n            },\n            handleMouseover (label) {\n                const others = _.filter(this.list, _ => _.label !== label).map(_ => _.label);\n                this.myChart.dispatchAction({ type: 'highlight', name: label });\n                this.myChart.dispatchAction({ type: 'downplay', name: others });\n            },\n        },\n    };\n</script>\n<style lang='postcss'>\n    .script-version-dashboard {\n        .wraper {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n\n            .item-list {\n                display: flex;\n                width: 160px;\n                margin-top: 30px;\n                font-size: 12px;\n                line-height: 18px;\n                color: #979ba5;\n                flex-wrap: wrap;\n                justify-content: space-around;\n\n                .item {\n                    display: flex;\n                    padding: 5px 0;\n                    padding-left: 10px;\n                    cursor: pointer;\n                    flex: 1 1 50%;\n                    align-items: center;\n                }\n            }\n        }\n    }\n</style>\n","<template>\n    <div class=\"script-dashboard\">\n        <div class=\"layout-left\">\n            <script-count v-bind=\"$attrs\" />\n            <script-relate v-bind=\"$attrs\" />\n            <script-version-use v-bind=\"$attrs\" />\n        </div>\n        <div class=\"layout-center\">\n            <script-type v-bind=\"$attrs\" />\n        </div>\n        <div class=\"layout-right\">\n            <script-version-status v-bind=\"$attrs\" />\n        </div>\n    </div>\n</template>\n<script>\n    import ScriptCount from './count';\n    import ScriptRelate from './releate';\n    import ScriptType from './type';\n    import ScriptVersionUse from './version-use';\n    import ScriptVersionStatus from './version-status';\n\n    export default {\n        name: '',\n        components: {\n            ScriptCount,\n            ScriptRelate,\n            ScriptType,\n            ScriptVersionUse,\n            ScriptVersionStatus,\n        },\n        data () {\n            return {};\n        },\n\n        methods: {},\n    };\n</script>\n<style lang='postcss' scoped>\n    @import \"@/css/mixins/media\";\n\n    .script-dashboard {\n        display: flex;\n\n        .layout-left {\n            flex: 1;\n            display: flex;\n            flex-direction: column;\n            border-right: 1px solid #f0f1f5;\n\n            .dashboard-card-layout {\n                @media (--huge-viewports) {\n                    width: 400px;\n                }\n\n                @media (--large-viewports) {\n                    width: 300px;\n                }\n\n                @media (--medium-viewports) {\n                    width: 280px;\n                }\n\n                @media (--small-viewports) {\n                    width: 260px;\n                }\n\n                &:nth-child(n+2) {\n                    border-top: 1px solid #f0f1f5;\n                }\n            }\n        }\n\n        .layout-center {\n            flex: 2;\n        }\n\n        .layout-right {\n            flex: 2;\n            border-left: 1px solid #f0f1f5;\n        }\n    }\n</style>\n","<template>\n    <card-layout\n        class=\"crontab-status-dashboard\"\n        :title=\"'定时任务开关分布'\"\n        v-bkloading=\"{ isLoading, opacity: 0.8 }\">\n        <div class=\"wraper\">\n            <div ref=\"dashboard\" style=\"width: 176px; height: 176px;\" />\n            <div class=\"item-list\">\n                <div\n                    v-for=\"item in list\"\n                    class=\"item\"\n                    :key=\"item.key\"\n                    @mouseover=\"handleMouseover(item.label)\">\n                    <div :style=\"calcItemCircleStyles(item.key)\" />\n                    <div>{{ item.label }}</div>\n                </div>\n            </div>\n        </div>\n    </card-layout>\n</template>\n<script>\n    import _ from 'lodash';\n    import echarts from 'lib/echarts.min.js';\n    import StatisticsService from '@service/statistics';\n       import CardLayout from '../card-layout';\n    import {\n        chartsOptionsBase,\n    } from '../common/assist';\n\n    const colorMap = {\n        OPEN: '#85CCA8',\n        CLOSED: '#F5BABA',\n    };\n\n    export default {\n        name: '',\n        components: {\n            CardLayout,\n        },\n        props: {\n            date: {\n                type: String,\n                required: true,\n            },\n        },\n        data () {\n            return {\n                isLoading: true,\n                data: {\n                    CLOSED: 0,\n                    OPEN: 0,\n                },\n            };\n        },\n        watch: {\n            date () {\n                this.fetchData();\n            },\n        },\n        created () {\n            this.list = [\n                {\n                    label: '开启',\n                    key: 'OPEN',\n                },\n                {\n                    label: '关闭',\n                    key: 'CLOSED',\n                },\n            ];\n        },\n        mounted () {\n            this.fetchData();\n        },\n        methods: {\n            fetchData () {\n                this.isLoading = true;\n                StatisticsService.fetchDistributionMetrics({\n                    date: this.date,\n                    metric: 'CRON_STATUS',\n                }).then((data) => {\n                    this.data = data.labelAmountMap;\n                    this.init();\n                })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            },\n            init () {\n                this.myChart = echarts.init(this.$refs.dashboard);\n                const data = [];\n                let maxItem = this.list[0];// eslint-disable-line prefer-destructuring\n                this.list.forEach((item) => {\n                    const currentValue = this.data[item.key];\n                    if (this.data[maxItem.key] < currentValue) {\n                        maxItem = item;\n                    }\n                    data.push({\n                        value: currentValue,\n                        key: item.key,\n                        name: item.label,\n                        itemStyle: {\n                            color: colorMap[item.key],\n                        },\n                    });\n                });\n                setTimeout(() => {\n                    this.myChart.dispatchAction({ type: 'highlight', name: maxItem.label });\n                });\n                const options = {\n                    ...chartsOptionsBase,\n                    series: [\n                        {\n                            type: 'pie',\n                            radius: [\n                                '60',\n                                '80',\n                            ],\n                            selectedMode: 'single',\n                            hoverOffset: 8,\n                            selectedOffset: 0,\n                            avoidLabelOverlap: false,\n                            label: {\n                                normal: {\n                                    show: false,\n                                    position: 'center',\n                                },\n                                emphasis: {\n                                    show: true,\n                                    formatter: [\n                                        '{value|{d}%}',\n                                        '{b}',\n                                    ].join('\\n'),\n\n                                    rich: {\n                                        name: {\n                                            fontSize: 12,\n                                            lineHieght: 16,\n                                            color: '#63656E',\n                                        },\n                                        value: {\n                                            fontSize: 26,\n                                            fontWeight: 600,\n                                            lineHeight: 42,\n                                            color: '#63656E',\n                                        },\n                                    },\n                                },\n                            },\n                            data,\n                        },\n                    ],\n                };\n                this.myChart.setOption(options);\n                this.myChart.dispatchAction({ type: 'highlight', name: maxItem.label });\n                this.myChart.on('mouseover', (params) => {\n                    this.handleMouseover(params.data.name);\n                });\n            },\n            calcItemCircleStyles (key) {\n                return {\n                    width: '8px',\n                    height: '8px',\n                    marginRight: '6px',\n                    borderRadius: '50%',\n                    backgroundColor: colorMap[key],\n                };\n            },\n            handleMouseover (label) {\n                const others = _.filter(this.list, _ => _.label !== label).map(_ => _.label);\n                this.myChart.dispatchAction({ type: 'highlight', name: label });\n                this.myChart.dispatchAction({ type: 'downplay', name: others });\n            },\n        },\n    };\n</script>\n<style lang='postcss' scoped>\n    .crontab-status-dashboard {\n        .wraper {\n            display: flex;\n            align-items: center;\n            flex-direction: column;\n\n            .item-list {\n                display: flex;\n                width: 180px;\n                margin-top: 20px;\n                font-size: 12px;\n                line-height: 18px;\n                color: #979ba5;\n                flex-direction: column;\n                align-items: center;\n\n                .item {\n                    display: flex;\n                    padding-left: 10px;\n                    cursor: pointer;\n                    flex: 1 1 50%;\n                    align-items: center;\n\n                    &:nth-child(n + 1) {\n                        margin-top: 10px;\n                    }\n                }\n            }\n        }\n    }\n</style>\n","<template>\n    <card-layout\n        class=\"crontab-type-dashboard\"\n        :title=\"'定时任务类型分布'\"\n        v-bkloading=\"{ isLoading, opacity: 0.8 }\">\n        <div class=\"wraper\">\n            <div ref=\"dashboard\" style=\"width: 176px; height: 176px;\" />\n            <div class=\"item-list\">\n                <div\n                    v-for=\"item in list\"\n                    :key=\"item.key\"\n                    class=\"item\"\n                    @mouseover=\"handleMouseover(item.label)\">\n                    <div :style=\"calcItemCircleStyles(item.key)\" />\n                    <div>{{ item.label }}</div>\n                </div>\n            </div>\n        </div>\n    </card-layout>\n</template>\n<script>\n    import _ from 'lodash';\n    import echarts from 'lib/echarts.min.js';\n       import StatisticsService from '@service/statistics';\n    import CardLayout from '../card-layout';\n    import {\n        chartsOptionsBase,\n    } from '../common/assist';\n\n    const colorMap = {\n        SIMPLE: '#3786AD',\n        CRON: '#74C2C2',\n    };\n\n    export default {\n        name: '',\n        components: {\n            CardLayout,\n        },\n        props: {\n            date: {\n                type: String,\n                required: true,\n            },\n        },\n        data () {\n            return {\n                isLoading: true,\n                data: {\n                    CRON: 0,\n                    SIMPLE: 0,\n                },\n            };\n        },\n        watch: {\n            date () {\n                this.fetchData();\n            },\n        },\n        created () {\n            this.list = [\n                {\n                    label: '单次执行',\n                    key: 'SIMPLE',\n                },\n                {\n                    label: '周期执行',\n                    key: 'CRON',\n                },\n            ];\n        },\n        mounted () {\n            this.fetchData();\n        },\n        methods: {\n            fetchData () {\n                this.isLoading = true;\n                StatisticsService.fetchDistributionMetrics({\n                    date: this.date,\n                    metric: 'CRON_TYPE',\n                }).then((data) => {\n                    this.data = data.labelAmountMap;\n                    this.init();\n                })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            },\n            init () {\n                this.myChart = echarts.init(this.$refs.dashboard);\n                const data = [];\n                let maxItem = this.list[0];// eslint-disable-line prefer-destructuring\n                this.list.forEach((item) => {\n                    const currentValue = this.data[item.key];\n                    if (this.data[maxItem.key] < currentValue) {\n                        maxItem = item;\n                    }\n                    data.push({\n                        value: currentValue,\n                        key: item.key,\n                        name: item.label,\n                        itemStyle: {\n                            color: colorMap[item.key],\n                        },\n                    });\n                });\n                const options = {\n                    ...chartsOptionsBase,\n                    series: [\n                        {\n                            type: 'pie',\n                            radius: [\n                                '60',\n                                '80',\n                            ],\n                            selectedMode: 'single',\n                            hoverOffset: 8,\n                            selectedOffset: 0,\n                            avoidLabelOverlap: false,\n                            label: {\n                                normal: {\n                                    show: false,\n                                    position: 'center',\n                                },\n                                emphasis: {\n                                    show: true,\n                                    formatter: [\n                                        '{value|{d}%}',\n                                        '{b}',\n                                    ].join('\\n'),\n\n                                    rich: {\n                                        name: {\n                                            fontSize: 12,\n                                            lineHieght: 16,\n                                            color: '#63656E',\n                                        },\n                                        value: {\n                                            fontSize: 26,\n                                            fontWeight: 600,\n                                            lineHeight: 42,\n                                            color: '#63656E',\n                                        },\n                                    },\n                                },\n                            },\n                            data,\n                        },\n                    ],\n                };\n                this.myChart.setOption(options);\n                this.myChart.dispatchAction({ type: 'highlight', name: maxItem.label });\n                this.myChart.on('mouseover', (params) => {\n                    this.handleMouseover(params.data.name);\n                });\n            },\n            calcItemCircleStyles (key) {\n                return {\n                    width: '8px',\n                    height: '8px',\n                    marginRight: '6px',\n                    borderRadius: '50%',\n                    backgroundColor: colorMap[key],\n                };\n            },\n            handleMouseover (label) {\n                const others = _.filter(this.list, _ => _.label !== label).map(_ => _.label);\n                this.myChart.dispatchAction({ type: 'highlight', name: label });\n                this.myChart.dispatchAction({ type: 'downplay', name: others });\n            },\n        },\n    };\n</script>\n<style lang='postcss' scoped>\n    .crontab-type-dashboard {\n        .wraper {\n            display: flex;\n            align-items: center;\n            flex-direction: column;\n\n            .item-list {\n                display: flex;\n                width: 180px;\n                margin-top: 20px;\n                font-size: 12px;\n                line-height: 18px;\n                color: #979ba5;\n                flex-direction: column;\n                align-items: center;\n\n                .item {\n                    display: flex;\n                    cursor: pointer;\n                    flex: 1 1 50%;\n                    align-items: center;\n\n                    &:nth-child(n + 1) {\n                        margin-top: 10px;\n                    }\n                }\n            }\n        }\n    }\n</style>\n","<template>\n    <div class=\"crontab-dashboard\">\n        <crontab-status v-bind=\"$attrs\" />\n        <crontab-type v-bind=\"$attrs\" />\n    </div>\n</template>\n<script>\n    import CrontabStatus from './status';\n    import CrontabType from './type';\n\n    export default {\n        name: '',\n        components: {\n            CrontabStatus,\n            CrontabType,\n        },\n        data () {\n            return {};\n        },\n\n        methods: {},\n    };\n</script>\n<style lang='postcss'>\n    @import \"@/css/mixins/media\";\n\n    .crontab-dashboard {\n        display: flex;\n\n        .dashboard-card-layout {\n            width: 260px;\n\n            @media (--huge-viewports) {\n                width: 400px;\n            }\n\n            @media (--large-viewports) {\n                width: 300px;\n            }\n\n            @media (--medium-viewports) {\n                width: 280px;\n            }\n\n            @media (--small-viewports) {\n                width: 260px;\n            }\n\n            &:nth-child(n + 2) {\n                border-left: 1px solid #f0f1f5;\n            }\n        }\n    }\n</style>\n","<template>\n    <card-layout\n        class=\"tag-dashboard\"\n        :title=\"'标签'\"\n        v-bkloading=\"{ isLoading, opacity: 0.8 }\">\n        <div\n            ref=\"box\"\n            class=\"tag-box\"\n            style=\"position: releative; width: 100%; height: 240px;\" />\n    </card-layout>\n</template>\n<script>\n    import _ from 'lodash';\n    import StatisticsService from '@service/statistics';\n    import CardLayout from '../card-layout';\n\n    export default {\n        name: '',\n        components: {\n            CardLayout,\n        },\n        data () {\n            return {\n                isLoading: true,\n            };\n        },\n        watch: {\n            date () {\n                this.fetchData();\n            },\n        },\n\n        created () {\n            this.textList = [];\n        },\n        mounted () {\n            this.fetchData();\n            const resize = _.throttle(() => {\n                this.init(this.textList);\n            }, 300);\n            window.addEventListener('resize', resize);\n            this.$once('hook:beforeDestroy', () => {\n                window.removeEventListener('resize', resize);\n            });\n        },\n        methods: {\n            fetchData () {\n                this.isLoading = true;\n                StatisticsService.fetchDistributionMetrics({\n                    date: this.date,\n                    metric: 'TAG',\n                }).then((data) => {\n                    this.data = data.labelAmountMap;\n                    const tagNumList = Object.values(this.data).sort((a, b) => a - b);\n                    const [tagNumMin] = tagNumList;\n                    const tagNumMax = tagNumList[tagNumList.length - 1];\n\n                    const weightQueue = [];\n                    let weightMax = 1;\n                    while (weightMax <= 5) {\n                        weightQueue.push(weightMax);\n                        weightMax = weightMax + 1;\n                    }\n\n                    // 判断每个值得显示权重\n                    const weigthMap = {};\n                    const checkWeight = (max, secondMax, min) => {\n                        const maxWeight = weightQueue[weightQueue.length - 1] || 1;\n                        weigthMap[max] = maxWeight;\n\n                        let nextMin = min;\n                        if (secondMax < min) {\n                            weigthMap[max] = maxWeight;\n                            weightQueue.pop();\n                            nextMin = secondMax - Math.max((secondMax - tagNumMin) / weightQueue.length, 1);\n                            // 最大权重间隔维持在两个级别\n                            if (nextMin < min) {\n                                weightQueue.pop();\n                            }\n                        }\n                        if (tagNumList.length > 0) {\n                            checkWeight(secondMax, tagNumList.pop(), nextMin);\n                        }\n                    };\n                    \n                    checkWeight(\n                        tagNumList.pop(),\n                        tagNumList.pop(),\n                        tagNumMax - Math.max((tagNumMax - tagNumMin) / weightQueue.length, 1),\n                    );\n\n                    const textList = Object.keys(this.data).reduce((result, key) => {\n                        const count = this.data[key];\n                        result.push({\n                            text: key,\n                            weight: weigthMap[count],\n                            count,\n                        });\n                        return result;\n                    }, []);\n                    this.textList = textList;\n                    this.init(textList);\n                })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            },\n            init (wordList) {\n                const start = (wordArray) => {\n                    // 容器元素的引用\n                    const boxClientRect = this.$refs.box.getBoundingClientRect();\n                    // 默认选项值\n                    const options = {\n                        width: boxClientRect.width,\n                        height: boxClientRect.height,\n                        center: {\n                            x: boxClientRect.width / 2.0,\n                            y: boxClientRect.height / 2.0,\n                        },\n                        delayedMode: wordArray.length > 50,\n                        shape: false, // 默认为椭圆形状\n                    };\n                    // Helper函数来测试如果一个元素重叠\n                    const hitTest = function (elem, otherElems) {\n                        // 两两重叠检测\n                        const overlapping = function (a, b) {\n                            return !((a.offsetLeft + a.offsetWidth) < b.offsetLeft - 3\n                                || (b.offsetLeft + b.offsetWidth) < a.offsetLeft - 3\n                                || a.offsetTop + a.offsetHeight < b.offsetTop - 5\n                                || b.offsetTop + b.offsetHeight < a.offsetTop - 5);\n                        };\n                        let i = 0;\n                        // 检查元素重叠一个接一个,停止并返回false一旦发现重叠\n                        // eslint-disable-next-line no-plusplus\n                        for (i = 0; i < otherElems.length; i++) {\n                            if (overlapping(elem, otherElems[i])) {\n                                return true;\n                            }\n                        }\n                        return false;\n                    };\n\n                    const drawWordCloud = () => {\n                        // 确保每一个重量之前是一个数字排序\n                        wordArray.forEach((item, index) => {\n                            wordArray[index].weight = parseFloat(wordArray[index].weight, 10);\n                        });\n\n                        // 排序wordArray从最高的词体重最低的一个\n                        wordArray.sort((a, b) => {\n                            if (a.weight < b.weight) {\n                                return 1;\n                            } else if (a.weight > b.weight) {\n                                return -1;\n                            }\n                            return 0;\n                        });\n\n                        const step = 3.0;\n                        const alreadyPlacedWords = [];\n                        const aspectRatio = options.width / options.height;\n\n                        // 函数画一词,在螺旋通过移动它,直到找到一个合适的空地方。这将是迭代每个单词。\n                        const drawOneWord = (word, index) => {\n                            let angle = 6.28 * Math.random();\n                            let radius = 0.0;\n                            let weight = 5;\n\n                            const wordSpan = document.createElement('span');\n                            wordSpan.setAttribute('tippy-tips', `${word.text} ${word.count}`);\n                            wordSpan.setAttribute('placement', 'right');\n\n                            // 检查是否min(重量)> max(重量)否则使用默认\n                            if (wordArray[0].weight > wordArray[wordArray.length - 1].weight) {\n                                // 线性映射原体重一个离散的规模从1到6\n                                weight = Math.round((word.weight - wordArray[wordArray.length - 1].weight)\n                                    / (wordArray[0].weight - wordArray[wordArray.length - 1].weight) * 4.0) + 1;\n                            }\n                            const wordStyle = wordSpan.style;\n                            wordStyle.lineHeight = 1;\n                            wordSpan.classList.add(`w${weight}`);\n                            wordSpan.append(word.text);\n                            this.$refs.box.append(wordSpan);\n                            const { width, height } = wordSpan.getBoundingClientRect();\n                            let left = options.center.x - width / 2.0;\n                            let top = options.center.y - height / 2.0;\n\n                            // 保存样式属性的引用,获得更好的性能\n                            wordStyle.position = 'absolute';\n                            wordStyle.left = `${left}px`;\n                            wordStyle.top = `${top}px`;\n\n                            while (hitTest(wordSpan, alreadyPlacedWords)) {\n                                // 选择形状是矩形的移动这个词在一个矩形螺旋\n                                radius += step;\n                                angle += (index % 2 === 0 ? 1 : -1) * step;\n\n                                left = options.center.x - (width / 2.0) + (radius * Math.cos(angle)) * aspectRatio;\n                                top = options.center.y + radius * Math.sin(angle) - (height / 2.0);\n                                wordStyle.left = `${left}px`;\n                                wordStyle.top = `${top}px`;\n                            }\n\n                            // 移除超过容器范围的词\n                            if (left < 0\n                                || top < 0\n                                || Math.ceil(left + width + 5) > options.width\n                                || Math.ceil(top + height + 5) > options.height) {\n                                this.$refs.box.removeChild(wordSpan);\n                                return;\n                            }\n\n                            alreadyPlacedWords.push(wordSpan);\n                        };\n\n                        const drawOneWordDelayed = (index = 0) => {\n                            if (index < wordArray.length) {\n                                drawOneWord(wordArray[index], index);\n                                this.drawTimer = setTimeout(() => {\n                                    drawOneWordDelayed(index + 1);\n                                }, 20);\n                            }\n                        };\n\n                        // 迭代drawOneWord上每一个字。迭代的方式完成取决于绘图模式(delayedMode是真或假的)\n                        if (options.delayedMode) {\n                            drawOneWordDelayed();\n                        } else {\n                            wordArray.forEach(drawOneWord);\n                        }\n                    };\n\n                    // 延迟执行，降低渲染标签的优先级\n                    setTimeout(() => {\n                        drawWordCloud();\n                    });\n                };\n                this.$refs.box.innerHTML = '';\n                clearTimeout(this.drawTimer);\n                start(wordList);\n            },\n        },\n    };\n</script>\n<style lang='postcss'>\n    .tag-dashboard {\n        .tag-box {\n            position: relative;\n            font-size: 10px;\n\n            span {\n                z-index: 1;\n                line-height: 1;\n                white-space: nowrap;\n                cursor: pointer;\n                transition: font-weight 0.15s, transform 0.15s;\n\n                &:hover {\n                    font-weight: bold;\n                    opacity: 100%;\n                    transform: scale(1.2);\n                }\n\n                &.w5 {\n                    font-size: 28px;\n                    color: #4031a3;\n                }\n\n                &.w4 {\n                    font-size: 24px;\n                    color: #3d6dcc;\n                }\n\n                &.w3 {\n                    font-size: 20px;\n                    color: #4da8d6;\n                }\n\n                &.w2 {\n                    font-size: 16px;\n                    color: #55c29e;\n                }\n\n                &.w1 {\n                    font-size: 12px;\n                    color: #92c288;\n                }\n            }\n        }\n    }\n</style>\n","<template>\n    <div class=\"account-dashboard\" v-bkloading=\"{ isLoading, opacity: 0.8 }\">\n        <card-layout :title=\"'Linux 账号数'\">\n            <div class=\"item-content\">\n                <div class=\"nums\">{{ data.LINUX }}</div>\n                <div\n                    ref=\"LINUX\"\n                    class=\"dashboard\"\n                    v-bk-tooltips.right=\"calcPercentage(data.LINUX)\"\n                    style=\"width: 24px; height: 24px;\" />\n            </div>\n            <Icon type=\"linux\" class=\"type-flag\" style=\"font-size: 37px;\" />\n        </card-layout>\n        <card-layout :title=\"'Windows 账号数'\">\n            <div class=\"item-content\">\n                <div class=\"nums\">{{ data.WINDOWS | formatNumber }}</div>\n                <div\n                    ref=\"WINDOWS\"\n                    class=\"dashboard\"\n                    v-bk-tooltips.right=\"calcPercentage(data.WINDOWS)\"\n                    style=\"width: 24px; height: 24px;\" />\n            </div>\n            <Icon type=\"windows\" class=\"type-flag\" style=\"font-size: 36px;\" />\n        </card-layout>\n        <card-layout :title=\"'DB 账号数'\">\n            <div class=\"item-content\">\n                <div class=\"nums\">{{ data.DB | formatNumber }}</div>\n                <div\n                    ref=\"DB\"\n                    class=\"dashboard\"\n                    v-bk-tooltips.right=\"calcPercentage(data.DB)\"\n                    style=\"width: 24px; height: 24px;\" />\n            </div>\n            <Icon type=\"db\" class=\"type-flag\" style=\"font-size: 27px;\" />\n        </card-layout>\n    </div>\n</template>\n<script>\n    import echarts from 'lib/echarts.min.js';\n    import StatisticsService from '@service/statistics';\n    import {\n        formatNumber,\n    } from '@utils/assist';\n    import CardLayout from '../card-layout';\n\n    export default {\n        name: '',\n        components: {\n            CardLayout,\n        },\n        filters: {\n            formatNumber (value) {\n                return formatNumber(value);\n            },\n        },\n        props: {\n            date: {\n                type: String,\n                required: true,\n            },\n        },\n        data () {\n            return {\n                isLoading: true,\n                data: {\n                    DB: 0,\n                    LINUX: 0,\n                    WINDOWS: 0,\n                },\n            };\n        },\n        watch: {\n            date () {\n                this.fetchData();\n            },\n        },\n        mounted () {\n            this.fetchData();\n        },\n        methods: {\n            fetchData () {\n                this.isLoading = true;\n                StatisticsService.fetchDistributionMetrics({\n                    date: this.date,\n                    metric: 'ACCOUNT_TYPE',\n                }).then((data) => {\n                    this.data = data.labelAmountMap;\n                    this.init();\n                })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            },\n            init () {\n                const typeList = [\n                    'LINUX',\n                    'WINDOWS',\n                    'DB',\n                ];\n                \n                typeList.forEach((typeItem) => {\n                    if (!this.$refs.LINUX) {\n                        return;\n                    }\n                    const other = typeList.reduce((result, item) => {\n                        if (item === typeItem) {\n                            return result;\n                        }\n                        return result + this.data[item];\n                    }, 0);\n\n                    const myChart = echarts.init(this.$refs[typeItem]);\n                    myChart.setOption({\n                        series: [\n                            {\n                                type: 'pie',\n                                radius: [\n                                    '8',\n                                    '12',\n                                ],\n                                hoverOffset: 0,\n                                label: {\n                                    show: false,\n                                },\n                                data: [\n                                    {\n                                        value: this.data[typeItem],\n                                        itemStyle: {\n                                            color: '#85CCA8',\n                                        },\n                                    },\n                                    {\n                                        value: other,\n                                        itemStyle: {\n                                            color: '#EBECF0',\n                                        },\n                                        emphasis: {\n                                            itemStyle: {\n                                                color: '#F0F1F5',\n                                            },\n                                        },\n                                    },\n                                ],\n                            },\n                        ],\n                    });\n                });\n            },\n            calcPercentage (value) {\n                const total = parseInt(this.data.DB, 10)\n                    + parseInt(this.data.LINUX, 10) + parseInt(this.data.WINDOWS, 10);\n                if (!total) {\n                    return '0 %';\n                }\n                return `${Math.round(value / total * 100).toFixed(2)} %`;\n            },\n        },\n    };\n</script>\n<style lang='postcss'>\n    @import \"@/css/mixins/media\";\n\n    .account-dashboard {\n        .dashboard-card-layout {\n            border: none;\n\n            &:nth-child(n+2) {\n                border-top: 1px solid #f0f1f5;\n            }\n\n            @media (--huge-viewports) {\n                width: 400px;\n            }\n\n            @media (--large-viewports) {\n                width: 300px;\n            }\n\n            @media (--medium-viewports) {\n                width: 280px;\n            }\n\n            @media (--small-viewports) {\n                width: 260px;\n            }\n        }\n\n        .item-content {\n            position: relative;\n            display: flex;\n            align-items: center;\n            font-size: 24px;\n            font-weight: bold;\n            line-height: 32px;\n            color: #63656e;\n\n            .dashboard {\n                margin-left: 10px;\n            }\n        }\n\n        .type-flag {\n            position: absolute;\n            right: 24px;\n            bottom: 24px;\n            color: #e5e6eb;\n        }\n    }\n</style>\n","<template>\n    <card-layout\n        class=\"execute-total-dashboard\"\n        :title=\"'累计任务执行次数'\">\n        <render-trend\n            metric=\"EXECUTED_TASK_COUNT\"\n            :date=\"date\" />\n        <div slot=\"extend\">\n            <Icon\n                type=\"line-chart-line\"\n                v-bk-tooltips=\"'查看趋势图'\"\n                @click=\"handleShowTrend\" />\n            <Icon\n                type=\"table-line\"\n                v-bk-tooltips=\"'查看列表'\"\n                @click=\"handleShowList\" />\n        </div>\n        <trend-dialog\n            v-model=\"isShowTrend\"\n            metric=\"EXECUTED_TASK_COUNT\"\n            :title=\"'累计任务执行次数趋势图'\"\n            :name=\"'累计任务执行次数'\"\n            :date=\"date\" />\n        <lower-component level=\"custom\" :custom=\"isShowList\">\n            <jb-dialog\n                v-model=\"isShowList\"\n                :title=\"'累计任务执行次数列表'\"\n                :width=\"520\"\n                :show-footer=\"false\"\n                header-position=\"left\">\n                <div style=\"margin-top: 12px;\" v-bkloading=\"{ isLoading }\">\n                    <bk-table :data=\"listData\" :max-height=\"420\">\n                        <bk-table-column\n                            :label=\"'业务名'\"\n                            prop=\"appName\"\n                            key=\"appName\"\n                            align=\"left\" />\n                        <bk-table-column\n                            :label=\"'执行数'\"\n                            prop=\"value\"\n                            key=\"value\"\n                            align=\"left\" />\n                        <bk-table-column\n                            :label=\"'占比'\"\n                            prop=\"ratio\"\n                            key=\"ratio\"\n                            align=\"left\" />\n                    </bk-table>\n                </div>\n            </jb-dialog>\n        </lower-component>\n    </card-layout>\n</template>\n<script>\n    import StatisticsService from '@service/statistics';\n    import CardLayout from '../card-layout';\n    import RenderTrend from '../common/render-trend';\n    import TrendDialog from '../common/trend-dialog';\n\n    export default {\n        name: '',\n        components: {\n            CardLayout,\n            RenderTrend,\n            TrendDialog,\n        },\n        props: {\n            date: {\n                type: String,\n                required: true,\n            },\n        },\n        data () {\n            return {\n                isLoading: true,\n                isShowTrend: false,\n                isShowList: false,\n                listData: [],\n            };\n        },\n        methods: {\n            handleShowTrend () {\n                this.isShowTrend = true;\n            },\n            handleShowList () {\n                this.isShowList = true;\n                this.isLoading = true;\n                StatisticsService.fetchListByPerAppMetrics({\n                    metric: 'EXECUTED_TASK_COUNT',\n                }).then((data) => {\n                    this.listData = Object.freeze(data);\n                })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            },\n        },\n    };\n</script>\n<style lang='postcss'>\n    .execute-total-dashboard {\n        .wraper {\n            display: flex;\n            flex-direction: column;\n            margin-right: auto;\n            font-size: 12px;\n            line-height: 16px;\n            color: #babcc2;\n\n            .total {\n                height: 32px;\n                font-size: 24px;\n                font-weight: bold;\n                line-height: 32px;\n                color: #63656e;\n            }\n        }\n    }\n</style>\n","<template>\n    <card-layout class=\"execute-fail-dashboard\" :title=\"'累计执行失败次数'\">\n        <render-trend metric=\"FAILED_TASK_COUNT\" :date=\"date\" />\n        <div slot=\"extend\">\n            <Icon\n                type=\"line-chart-line\"\n                v-bk-tooltips=\"'查看趋势图'\"\n                @click=\"handleShowTrend\" />\n            <Icon\n                type=\"table-line\"\n                v-bk-tooltips=\"'查看列表'\"\n                @click=\"handleShowList\" />\n        </div>\n        <trend-dialog\n            v-model=\"isShowTrend\"\n            metric=\"FAILED_TASK_COUNT\"\n            :title=\"'累计执行失败次数趋势图'\"\n            :name=\"'累计执行失败次数'\"\n            :date=\"date\" />\n        <lower-component level=\"custom\" :custom=\"isShowList\">\n            <jb-dialog\n                v-model=\"isShowList\"\n                :title=\"'累计执行失败次数列表'\"\n                :width=\"520\"\n                :show-footer=\"false\"\n                header-position=\"left\">\n                <div style=\"margin-top: 12px;\" v-bkloading=\"{ isLoading, opacity: 0.8 }\">\n                    <bk-table :data=\"listData\" :max-height=\"420\">\n                        <bk-table-column\n                            :label=\"'业务名'\"\n                            prop=\"appName\"\n                            key=\"appName\"\n                            align=\"left\" />\n                        <bk-table-column\n                            :label=\"'失败次数'\"\n                            prop=\"value\"\n                            key=\"value\"\n                            align=\"left\" />\n                        <bk-table-column\n                            :label=\"'占比'\"\n                            prop=\"ratio\"\n                            key=\"ratio\"\n                            align=\"left\" />\n                    </bk-table>\n                </div>\n            </jb-dialog>\n        </lower-component>\n    </card-layout>\n</template>\n<script>\n    import StatisticsService from '@service/statistics';\n    import CardLayout from '../card-layout';\n    import RenderTrend from '../common/render-trend';\n    import TrendDialog from '../common/trend-dialog';\n\n    export default {\n        name: '',\n        components: {\n            CardLayout,\n            RenderTrend,\n            TrendDialog,\n        },\n        props: {\n            date: {\n                type: String,\n                required: true,\n            },\n        },\n        data () {\n            return {\n                isLoading: true,\n                isShowTrend: false,\n                isShowList: false,\n                listData: [],\n            };\n        },\n        methods: {\n            handleShowTrend () {\n                this.isShowTrend = true;\n            },\n            handleShowList () {\n                this.isShowList = true;\n                this.isLoading = true;\n                StatisticsService.fetchListByPerAppMetrics({\n                    metric: 'FAILED_TASK_COUNT',\n                }).then((data) => {\n                    this.listData = Object.freeze(data);\n                })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            },\n        },\n    };\n</script>\n<style lang='postcss'>\n    .execute-fail-dashboard {\n        .wraper {\n            display: flex;\n            flex-direction: column;\n            margin-right: auto;\n            font-size: 12px;\n            line-height: 16px;\n            color: #babcc2;\n\n            .total {\n                height: 32px;\n                font-size: 24px;\n                font-weight: bold;\n                line-height: 32px;\n                color: #63656e;\n            }\n        }\n    }\n</style>\n","<template>\n    <div class=\"execute-statistics-dashboard\">\n        <div class=\"header-action\">\n            <div class=\"type-tab\">\n                <template v-if=\"!isDrillDown\">\n                    <div\n                        class=\"tab-item\"\n                        :class=\"{\n                            active: dimension === 'TASK_STARTUP_MODE',\n                        }\"\n                        @click=\"handleDimensionChange('TASK_STARTUP_MODE')\">\n                        {{ '按渠道统计' }}\n                    </div>\n                    <div\n                        class=\"tab-item\"\n                        :class=\"{\n                            active: dimension === 'TASK_TYPE',\n                        }\"\n                        @click=\"handleDimensionChange('TASK_TYPE')\">\n                        {{ '按类型统计' }}\n                    </div>\n                    <div\n                        class=\"tab-item\"\n                        :class=\"{\n                            active: dimension === 'TASK_TIME_CONSUMING',\n                        }\"\n                        @click=\"handleDimensionChange('TASK_TIME_CONSUMING')\">\n                        {{ '按执行耗时统计' }}\n                    </div>\n                </template>\n                <div v-if=\"isDrillDown\" class=\"tab-back\">\n                    <span class=\"tab-back-action\" @click=\"handleDimensionBack\">\n                        <Icon type=\"back1\" />\n                        {{ '返回' }}\n                    </span>\n                    <span>{{ '类型统计' }}</span>\n                </div>\n            </div>\n            <div class=\"time-tab\">\n                <div\n                    class=\"tab-item\"\n                    :class=\"{ active: days === 7 }\"\n                    @click=\"handleDaysChange(7)\">\n                    {{ '7 天内' }}\n                </div>\n                <div\n                    class=\"tab-item\"\n                    :class=\"{ active: days === 14 }\"\n                    @click=\"handleDaysChange(14)\">\n                    {{ '14 天内' }}\n                </div>\n                <div\n                    class=\"tab-item\"\n                    :class=\"{ active: days === 30 }\"\n                    @click=\"handleDaysChange(30)\">\n                    {{ '30 天内' }}\n                </div>\n            </div>\n        </div>\n        <div v-bkloading=\"{ isLoading, opacity: 0.8 }\">\n            <div ref=\"dashboard\" style=\"width: 100%; height: 325px;\" />\n        </div>\n    </div>\n</template>\n<script>\n/* eslint-disable max-len */\n    import _ from 'lodash';\n       import StatisticsService from '@service/statistics';\n    import echarts from 'lib/echarts.min.js';\n    import {\n        formatNumber,\n        prettyDateFormat,\n    } from '@utils/assist';\n    import {\n        chartsOptionsBase,\n    } from '../common/assist';\n\n    const tooltipFormatter = (params) => {\n        const generatorHtml = (data) => {\n            const {\n                seriesType,\n                seriesName,\n                color,\n                value,\n            } = data;\n            \n            if (seriesType === 'bar') {\n                return `\n                    <tr>\n                        <td style=\"padding-right: 24px; vertical-align: middle;\">\n                            <span style=\"display: inline-block; width: 8px; height: 8px; background: ${color}\"></span>\n                            <span>${seriesName}</span>\n                        </td>\n                        <td style=\"text-align: right\">${value}</td>\n                    </tr>\n                `;\n            } else if (seriesType === 'line') {\n                return `\n                    <tr>\n                        <td style=\"padding-right: 24px; vertical-align: middle;\">\n                            <span style=\"display: inline-block; width: 8px; height: 8px; border-radius: 50%; background: ${color}\"></span>\n                            <span>${seriesName}</span>\n                        </td>\n                        <td style=\"text-align: right\">${value}</td>\n                    </tr>\n                `;\n            }\n        };\n        let paramsArr = [];\n        if (Object.prototype.toString.call(params) === '[object Object]') {\n            paramsArr = [\n                params,\n            ];\n        } else {\n            paramsArr = params;\n        }\n        \n        return `<table>${paramsArr.map(generatorHtml).join('')}</table>`;\n    };\n\n    export default {\n        name: '',\n        props: {\n            date: {\n                type: String,\n                required: true,\n            },\n        },\n        data () {\n            return {\n                isLoading: false,\n                dimension: '',\n                days: 7,\n                isDrillDown: false,\n            };\n        },\n        watch: {\n            date () {\n                this.handleDaysChange(this.days);\n            },\n        },\n        mounted () {\n            // 下钻的作业类型\n            this.drillDowntaskType = '';\n\n            this.myChart = echarts.init(this.$refs.dashboard);\n            this.myChart.on('click', (target) => {\n                if ([\n                    'EXECUTED_FAST_SCRIPT',\n                    'EXECUTED_FAST_FILE',\n                ].includes(target.seriesId)) {\n                    this.handleTaskTypeChange(target.seriesId);\n                }\n            });\n            \n            const resize = _.throttle(() => {\n                this.myChart.resize();\n            }, 300);\n            window.addEventListener('resize', resize);\n            this.$once('hook:beforeDestroy', () => {\n                window.removeEventListener('resize', resize);\n            });\n            this.handleDimensionChange('TASK_STARTUP_MODE');\n        },\n        methods: {\n            /**\n             * @desc 按渠道统计\n             * @param {Array} data 数据\n             */\n            initTaskStartupMode (data) {\n                const dateList = [];\n                const normalList = [];\n                const cronList = [];\n                const apiList = [];\n                const failList = [];\n                const totalList = [];\n                data.forEach((item) => {\n                    const {\n                        date,\n                        distribution,\n                        failCount,\n                    } = item;\n                    dateList.push(date);\n                    const {\n                        API,\n                        CRON,\n                        NORMAL,\n                    } = distribution.labelAmountMap;\n                    \n                    apiList.push(API);\n                    cronList.push(CRON);\n                    normalList.push(NORMAL);\n                    failList.push(failCount);\n                    totalList.push(API + CRON + NORMAL);\n                });\n\n                this.myChart.clear();\n                this.myChart.setOption({\n                    ...chartsOptionsBase,\n                    legend: {\n                        data: [\n                            '页面执行',\n                            'API 调用',\n                            '定时执行',\n                            {\n                                name: '执行次数',\n                                icon: 'circle',\n                            },\n                            {\n                                name: '执行失败次数',\n                                icon: 'circle',\n                            },\n                        ],\n                        bottom: '0',\n                        icon: 'rect',\n                        itemWidth: 8,\n                        itemHeight: 8,\n                        itemGap: 40,\n                    },\n                    tooltip: {\n                        trigger: 'axis',\n                        axisPointer: {\n                            type: 'line',\n                            lineStyle: {\n                                width: 30,\n                                color: '#63656E',\n                                opacity: 0.16,\n                            },\n                        },\n                        formatter: tooltipFormatter,\n                        backgroundColor: 'rgba(0,0,0,0.8)',\n                    },\n                    grid: {\n                        top: 45,\n                        left: 40,\n                        right: 0,\n                        bottom: 48,\n                        containLabel: true,\n                    },\n                    xAxis: [\n                        {\n                            type: 'category',\n                            axisLine: {\n                                lineStyle: {\n                                    color: '#DCDEE5',\n                                },\n                            },\n                            axisTick: {\n                                show: false,\n                            },\n                            axisLabel: {\n                                color: '#979BA5',\n                                margin: 18,\n                            },\n                            data: dateList,\n                        },\n                    ],\n                    yAxis: {\n                        type: 'value',\n                        name: '执行数',\n                        nameLocation: 'middle',\n                        nameTextStyle: {\n                            color: '#63656E',\n                        },\n                        nameGap: 50,\n                        axisLine: {\n                            show: false,\n                        },\n                        axisTick: {\n                            show: false,\n                        },\n                        axisLabel: {\n                            color: '#979BA5',\n                            formatter: value => formatNumber(value, true),\n                        },\n                        splitLine: {\n                            lineStyle: {\n                                color: '#F0F1F5',\n                            },\n                        },\n                    },\n                    series: [\n                        {\n                            name: '页面执行',\n                            type: 'bar',\n                            stack: 'bar',\n                            barWidth: 20,\n                            data: normalList,\n                            itemStyle: {\n                                color: '#D4E6C1',\n                            },\n                        },\n                        {\n                            name: 'API 调用',\n                            type: 'bar',\n                            stack: 'bar',\n                            barWidth: 20,\n                            data: apiList,\n                            itemStyle: {\n                                color: '#85CCA8',\n                            },\n                        },\n                        {\n                            name: '定时执行',\n                            type: 'bar',\n                            stack: 'bar',\n                            barWidth: 20,\n                            data: cronList,\n                            itemStyle: {\n                                color: '#3786AD',\n                            },\n                        },\n                        {\n                            name: '执行次数',\n                            type: 'line',\n                            data: totalList,\n                            itemStyle: {\n                                color: '#FFD695',\n                            },\n                        },\n                        {\n                            name: '执行失败次数',\n                            type: 'line',\n                            data: failList,\n                            itemStyle: {\n                                color: '#FF5656',\n                            },\n                        },\n                    ],\n                });\n            },\n            /**\n             * @desc 按任务类型统计\n             * @param {Array} data 数据\n             */\n            initTaskType (data) {\n                const dateList = [];\n                const fastPushFileList = [];\n                const fastExecuteScriptList = [];\n                const executeTaskList = [];\n                const failList = [];\n                data.forEach((item) => {\n                    const {\n                        date,\n                        distribution,\n                        failCount,\n                    } = item;\n                    dateList.push(date);\n                    const {\n                        EXECUTE_TASK,\n                        FAST_EXECUTE_SCRIPT,\n                        FAST_PUSH_FILE,\n                    } = distribution.labelAmountMap;\n                    \n                    executeTaskList.push(EXECUTE_TASK);\n                    fastExecuteScriptList.push(FAST_EXECUTE_SCRIPT);\n                    fastPushFileList.push(FAST_PUSH_FILE);\n                    failList.push(failCount);\n                });\n\n                this.myChart.clear();\n                this.myChart.setOption({\n                    ...chartsOptionsBase,\n                    legend: {\n                        data: [\n                            '快速执行脚本',\n                            '快速分发文件',\n                            '作业执行',\n                            {\n                                name: '执行失败次数',\n                                icon: 'circle',\n                            },\n                        ],\n                        bottom: '0',\n                        icon: 'rect',\n                        itemWidth: 8,\n                        itemHeight: 8,\n                        itemGap: 40,\n                    },\n                    tooltip: {\n                        trigger: 'item',\n                        backgroundColor: 'rgba(0,0,0,0.8)',\n                        formatter: tooltipFormatter,\n                    },\n                    grid: {\n                        top: 45,\n                        left: 40,\n                        right: 0,\n                        bottom: 48,\n                        containLabel: true,\n                    },\n                    xAxis: [\n                        {\n                            type: 'category',\n                            axisLine: {\n                                lineStyle: {\n                                    color: '#DCDEE5',\n                                },\n                            },\n                            axisTick: {\n                                show: false,\n                            },\n                            axisLabel: {\n                                color: '#979BA5',\n                                margin: 18,\n                            },\n                            data: dateList,\n                        },\n                    ],\n                    yAxis: {\n                        type: 'value',\n                        name: '执行数',\n                        nameLocation: 'middle',\n                        nameTextStyle: {\n                            color: '#63656E',\n                        },\n                        nameGap: 50,\n                        axisLine: {\n                            show: false,\n                        },\n                        axisTick: {\n                            show: false,\n                        },\n                        axisLabel: {\n                            color: '#979BA5',\n                            formatter: value => formatNumber(value, true),\n                        },\n                        splitLine: {\n                            lineStyle: {\n                                color: '#F0F1F5',\n                            },\n                        },\n                    },\n                    series: [\n                        {\n                            id: 'EXECUTED_FAST_SCRIPT',\n                            name: '快速执行脚本',\n                            type: 'bar',\n                            stack: 'bar',\n                            barWidth: 20,\n                            data: fastExecuteScriptList,\n                            itemStyle: {\n                                color: '#D4E6C1',\n                            },\n                        },\n                        {\n                            id: 'EXECUTED_FAST_FILE',\n                            name: '快速分发文件',\n                            type: 'bar',\n                            stack: 'bar',\n                            barWidth: 20,\n                            data: fastPushFileList,\n                            itemStyle: {\n                                color: '#85CCA8',\n                            },\n                        },\n                        {\n                            id: 'EXECUTE_TASK',\n                            name: '作业执行',\n                            type: 'bar',\n                            stack: 'bar',\n                            barWidth: 20,\n                            data: executeTaskList,\n                            itemStyle: {\n                                color: '#3786AD',\n                            },\n                        },\n                        {\n                            name: '执行失败次数',\n                            type: 'line',\n                            data: failList,\n                            itemStyle: {\n                                color: '#FF5656',\n                            },\n                        },\n                    ],\n                });\n            },\n            /**\n             * @desc 按执行耗时统计\n             * @param {Array} data 数据\n             */\n            initTaskTimeConsuming (data) {\n                const dateList = [];\n                const overTenMinList = [];\n                const oneMinToTenMinList = [];\n                const lessThanOneMinList = [];\n                const failList = [];\n                data.forEach((item) => {\n                    const {\n                        date,\n                        distribution,\n                        failCount,\n                    } = item;\n                    dateList.push(date);\n                    const {\n                        LESS_THAN_ONE_MIN,\n                        ONE_MIN_TO_TEN_MIN,\n                        OVER_TEN_MIN,\n                    } = distribution.labelAmountMap;\n\n                    lessThanOneMinList.push(LESS_THAN_ONE_MIN);\n                    oneMinToTenMinList.push(ONE_MIN_TO_TEN_MIN);\n                    overTenMinList.push(OVER_TEN_MIN);\n                    failList.push(failCount);\n                });\n\n                this.myChart.clear();\n                this.myChart.setOption({\n                    ...chartsOptionsBase,\n                    legend: {\n                        data: [\n                            '≥ 10分钟',\n                            '1~10分钟以内（包含10分钟）',\n                            '1分钟以内（包含1分钟）',\n                            {\n                                name: '执行失败次数',\n                                icon: 'circle',\n                            },\n                        ],\n                        bottom: '0',\n                        icon: 'rect',\n                        itemWidth: 8,\n                        itemHeight: 8,\n                        itemGap: 40,\n                    },\n                    tooltip: {\n                        trigger: 'axis',\n                        axisPointer: {\n                            type: 'line',\n                            lineStyle: {\n                                width: 30,\n                                color: '#63656E',\n                                opacity: 0.16,\n                            },\n                        },\n                        formatter: tooltipFormatter,\n                        backgroundColor: 'rgba(0,0,0,0.8)',\n                    },\n                    grid: {\n                        top: 45,\n                        left: 40,\n                        right: 0,\n                        bottom: 48,\n                        containLabel: true,\n                    },\n                    xAxis: [\n                        {\n                            type: 'category',\n                            axisLine: {\n                                lineStyle: {\n                                    color: '#DCDEE5',\n                                },\n                            },\n                            axisTick: {\n                                show: false,\n                            },\n                            axisLabel: {\n                                color: '#979BA5',\n                                margin: 18,\n                            },\n                            data: dateList,\n                        },\n                    ],\n                    yAxis: {\n                        type: 'value',\n                        name: '执行数',\n                        nameLocation: 'middle',\n                        nameTextStyle: {\n                            color: '#63656E',\n                        },\n                        nameGap: 50,\n                        axisLine: {\n                            show: false,\n                        },\n                        axisTick: {\n                            show: false,\n                        },\n                        axisLabel: {\n                            color: '#979BA5',\n                            formatter: value => formatNumber(value, true),\n                        },\n                        splitLine: {\n                            lineStyle: {\n                                color: '#F0F1F5',\n                            },\n                        },\n                    },\n                    series: [\n                        {\n                            name: '≥ 10分钟',\n                            type: 'bar',\n                            stack: 'bar',\n                            barWidth: 20,\n                            data: overTenMinList,\n                            itemStyle: {\n                                color: '#D4E6C1',\n                            },\n                        },\n                        {\n                            name: '1~10分钟以内（包含10分钟）',\n                            type: 'bar',\n                            stack: 'bar',\n                            barWidth: 20,\n                            data: oneMinToTenMinList,\n                            itemStyle: {\n                                color: '#85CCA8',\n                            },\n                        },\n                        {\n                            name: '1分钟以内（包含1分钟）',\n                            type: 'bar',\n                            stack: 'bar',\n                            barWidth: 20,\n                            data: lessThanOneMinList,\n                            itemStyle: {\n                                color: '#3786AD',\n                            },\n                        },\n                        {\n                            name: '执行失败次数',\n                            type: 'line',\n                            data: failList,\n                            itemStyle: {\n                                color: '#FF5656',\n                            },\n                        },\n                    ],\n                });\n            },\n            /**\n             * @desc 任务类型快速执行脚本下钻统计\n             * @param {Array} data 数据\n             *\n             */\n            initExecutedFastScriptDrillDown (data) {\n                const dateList = [];\n                const BatList = [];\n                const PerlList = [];\n                const PowerShellList = [];\n                const PythonList = [];\n                const ShellList = [];\n                const SQLList = [];\n                const failList = [];\n\n                data.forEach((item) => {\n                    const {\n                        date,\n                        distribution,\n                        failCount,\n                    } = item;\n                    dateList.push(date);\n                    const {\n                        bat,\n                        perl,\n                        powershell,\n                        python,\n                        shell,\n                        sql,\n                    } = distribution.labelAmountMap;\n\n                    BatList.push(bat);\n                    PerlList.push(perl);\n                    PowerShellList.push(powershell);\n                    PythonList.push(python);\n                    ShellList.push(shell);\n                    SQLList.push(sql);\n                    failList.push(failCount);\n                });\n\n                this.myChart.clear();\n                this.myChart.setOption({\n                    ...chartsOptionsBase,\n                    legend: {\n                        data: [\n                            'Bat',\n                            'Perl',\n                            'Python',\n                            'Shell',\n                            'PowerShell',\n                            'SQL',\n                            {\n                                name: '执行失败次数',\n                                icon: 'circle',\n                            },\n                        ],\n                        bottom: '0',\n                        icon: 'rect',\n                        itemWidth: 8,\n                        itemHeight: 8,\n                        itemGap: 40,\n                    },\n                    tooltip: {\n                        trigger: 'axis',\n                        axisPointer: {\n                            type: 'line',\n                            lineStyle: {\n                                width: 30,\n                                color: '#F5F6FA',\n                                opacity: 0.5,\n                            },\n                        },\n                        formatter: tooltipFormatter,\n                        backgroundColor: 'rgba(0,0,0,0.8)',\n                    },\n                    grid: {\n                        top: 45,\n                        left: 40,\n                        right: 0,\n                        bottom: 48,\n                        containLabel: true,\n                    },\n                    xAxis: [\n                        {\n                            type: 'category',\n                            axisLine: {\n                                lineStyle: {\n                                    color: '#DCDEE5',\n                                },\n                            },\n                            axisTick: {\n                                show: false,\n                            },\n                            axisLabel: {\n                                color: '#979BA5',\n                                margin: 18,\n                            },\n                            data: dateList,\n                        },\n                    ],\n                    yAxis: {\n                        type: 'value',\n                        name: '执行数',\n                        nameLocation: 'middle',\n                        nameTextStyle: {\n                            color: '#63656E',\n                        },\n                        nameGap: 50,\n                        axisLine: {\n                            show: false,\n                        },\n                        axisTick: {\n                            show: false,\n                        },\n                        axisLabel: {\n                            color: '#979BA5',\n                            formatter: value => formatNumber(value, true),\n                        },\n                        splitLine: {\n                            lineStyle: {\n                                color: '#F0F1F5',\n                            },\n                        },\n                    },\n                    series: [\n                        {\n                            name: 'Bat',\n                            type: 'bar',\n                            stack: 'bar',\n                            barWidth: 20,\n                            data: BatList,\n                            itemStyle: {\n                                color: '#2E2E99',\n                            },\n                        },\n                        {\n                            name: 'Perl',\n                            type: 'bar',\n                            stack: 'bar',\n                            barWidth: 20,\n                            data: PerlList,\n                            itemStyle: {\n                                color: '#366FA8',\n                            },\n                        },\n                        {\n                            name: 'Python',\n                            type: 'bar',\n                            stack: 'bar',\n                            barWidth: 20,\n                            data: PythonList,\n                            itemStyle: {\n                                color: '#5EADAD',\n                            },\n                        },\n                        {\n                            name: 'Shell',\n                            type: 'bar',\n                            stack: 'bar',\n                            barWidth: 20,\n                            data: ShellList,\n                            itemStyle: {\n                                color: '#85CCA8',\n                            },\n                        },\n                        {\n                            name: 'PowerShell',\n                            type: 'bar',\n                            stack: 'bar',\n                            barWidth: 20,\n                            data: PowerShellList,\n                            itemStyle: {\n                                color: '#BCEBBC',\n                            },\n                        },\n                        {\n                            name: 'SQL',\n                            type: 'bar',\n                            stack: 'bar',\n                            barWidth: 20,\n                            data: SQLList,\n                            itemStyle: {\n                                color: '#E7F5D7',\n                            },\n                        },\n                        {\n                            name: '执行失败次数',\n                            type: 'line',\n                            data: failList,\n                            itemStyle: {\n                                color: '#FF5656',\n                            },\n                        },\n                    ],\n                });\n            },\n            /**\n             * @desc 任务类型快速分发文件下钻统计\n             * @param {Array} data 数据\n             *\n             */\n            initExecutedFastFileDrillDown (data) {\n                const dateList = [];\n                const forceList = [];\n                const strictList = [];\n                const failList = [];\n                data.forEach((item) => {\n                    const {\n                        date,\n                        distribution,\n                        failCount,\n                    } = item;\n                    dateList.push(date);\n                    const {\n                        FORCE,\n                        STRICT,\n                    } = distribution.labelAmountMap;\n\n                    strictList.push(STRICT);\n                    forceList.push(FORCE);\n                    failList.push(failCount);\n                });\n\n                this.myChart.clear();\n                this.myChart.setOption({\n                    ...chartsOptionsBase,\n                    legend: {\n                        data: [\n                            '强制模式',\n                            '严谨模式',\n                            {\n                                name: '执行失败次数',\n                                icon: 'circle',\n                            },\n                        ],\n                        bottom: '0',\n                        icon: 'rect',\n                        itemWidth: 8,\n                        itemHeight: 8,\n                        itemGap: 40,\n                    },\n                    tooltip: {\n                        trigger: 'axis',\n                        axisPointer: {\n                            type: 'line',\n                            lineStyle: {\n                                width: 30,\n                                color: '#F5F6FA',\n                                opacity: 0.5,\n                            },\n                        },\n                        formatter: tooltipFormatter,\n                        backgroundColor: 'rgba(0,0,0,0.8)',\n                    },\n                    grid: {\n                        top: 45,\n                        left: 40,\n                        right: 0,\n                        bottom: 48,\n                        containLabel: true,\n                    },\n                    xAxis: [\n                        {\n                            type: 'category',\n                            axisLine: {\n                                lineStyle: {\n                                    color: '#DCDEE5',\n                                },\n                            },\n                            axisTick: {\n                                show: false,\n                            },\n                            axisLabel: {\n                                color: '#979BA5',\n                                margin: 18,\n                            },\n                            data: dateList,\n                        },\n                    ],\n                    yAxis: {\n                        type: 'value',\n                        name: '执行数',\n                        nameLocation: 'middle',\n                        nameTextStyle: {\n                            color: '#63656E',\n                        },\n                        nameGap: 50,\n                        axisLine: {\n                            show: false,\n                        },\n                        axisTick: {\n                            show: false,\n                        },\n                        axisLabel: {\n                            color: '#979BA5',\n                            formatter: value => formatNumber(value, true),\n                        },\n                        splitLine: {\n                            lineStyle: {\n                                color: '#F0F1F5',\n                            },\n                        },\n                    },\n                    series: [\n                        {\n                            name: '强制模式',\n                            type: 'bar',\n                            stack: 'bar',\n                            barWidth: 20,\n                            data: forceList,\n                            itemStyle: {\n                                color: '#D4E6C1',\n                            },\n                        },\n                        {\n                            name: '严谨模式',\n                            type: 'bar',\n                            stack: 'bar',\n                            barWidth: 20,\n                            data: strictList,\n                            itemStyle: {\n                                color: '#85CCA8',\n                            },\n                        },\n                        {\n                            name: '执行失败次数',\n                            type: 'line',\n                            data: failList,\n                            itemStyle: {\n                                color: '#FF5656',\n                            },\n                        },\n                    ],\n                });\n            },\n            /**\n             * @desc 指标纬度\n             * @param {String} dimension 统计纬度\n             *\n             */\n            handleDimensionChange (dimension) {\n                this.isLoading = true;\n                this.dimension = dimension;\n                const actionMap = {\n                    TASK_STARTUP_MODE: this.initTaskStartupMode,\n                    TASK_TYPE: this.initTaskType,\n                    TASK_TIME_CONSUMING: this.initTaskTimeConsuming,\n                };\n                StatisticsService.fetchReourcesDimensions({\n                    resource: 'EXECUTED_TASK',\n                    dimension: this.dimension,\n                    startDate: prettyDateFormat(new Date(this.date) - parseInt(this.days, 10) * 86400000),\n                    endDate: this.date,\n                }).then((data) => {\n                    actionMap[this.dimension](data);\n                })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            },\n            /**\n             * @desc 时间范围\n             * @param {String} days 统计纬度\n             *\n             */\n            handleDaysChange (days) {\n                this.days = days;\n                if (this.isDrillDown) {\n                    this.handleTaskTypeChange(this.drillDowntaskType);\n                } else {\n                    this.handleDimensionChange(this.dimension);\n                }\n            },\n            /**\n             * @desc 按类型统计，指标下钻\n             * @param {String} taskType 作业类型\n             *\n             */\n            handleTaskTypeChange (taskType) {\n                this.isLoading = true;\n                this.isDrillDown = true;\n                this.drillDowntaskType = taskType;\n                const dateParams = {\n                    startDate: prettyDateFormat(new Date(this.date) - parseInt(this.days, 10) * 86400000),\n                    endDate: this.date,\n                };\n                if (taskType === 'EXECUTED_FAST_SCRIPT') {\n                    StatisticsService.fetchReourcesDimensions({\n                        ...dateParams,\n                        dimension: 'SCRIPT_TYPE',\n                        resource: 'EXECUTED_FAST_SCRIPT',\n                    }).then((data) => {\n                        this.initExecutedFastScriptDrillDown(data);\n                    })\n                        .finally(() => {\n                            this.isLoading = false;\n                        });\n                } else {\n                    StatisticsService.fetchReourcesDimensions({\n                        ...dateParams,\n                        dimension: 'FILE_TRANSFER_MODE',\n                        resource: 'EXECUTED_FAST_FILE',\n                    }).then((data) => {\n                        this.initExecutedFastFileDrillDown(data);\n                    })\n                        .finally(() => {\n                            this.isLoading = false;\n                        });\n                }\n            },\n            /**\n             * @desc 返回按类型统计\n             *\n             */\n            handleDimensionBack () {\n                this.isDrillDown = false;\n                this.drillDowntaskType = '';\n                this.handleDimensionChange(this.dimension);\n            },\n        },\n    };\n</script>\n<style lang='postcss' scoped>\n    .execute-statistics-dashboard {\n        padding: 20px;\n\n        .header-action {\n            display: flex;\n            font-size: 12px;\n            color: #63656e;\n\n            .type-tab,\n            .time-tab {\n                display: flex;\n\n                .tab-item {\n                    height: 28px;\n                    padding: 0 16px;\n                    line-height: 28px;\n                    cursor: pointer;\n                    border-radius: 14px;\n                    transition: all 0.15s;\n\n                    &.active,\n                    &:hover {\n                        color: #3a84ff;\n                    }\n\n                    &.active {\n                        background: #ebf2ff;\n                    }\n                }\n            }\n\n            .type-tab {\n                .tab-item {\n                    margin-right: 8px;\n                }\n            }\n\n            .time-tab {\n                margin-left: auto;\n\n                .tab-item {\n                    margin-left: 8px;\n                }\n            }\n\n            .tab-back {\n                color: #3a84ff;\n\n                .tab-back-action {\n                    cursor: pointer;\n                }\n            }\n        }\n    }\n</style>\n","<template>\n    <div class=\"execute-dashboard\">\n        <div class=\"layout-left\">\n            <total-count v-bind=\"$attrs\" />\n            <fail-count v-bind=\"$attrs\" />\n        </div>\n        <div class=\"layout-right\">\n            <statistics v-bind=\"$attrs\" />\n        </div>\n    </div>\n</template>\n<script>\n    import TotalCount from './total-count';\n    import FailCount from './fail-count';\n    import Statistics from './statistics';\n\n    export default {\n        name: '',\n        components: {\n            TotalCount,\n            FailCount,\n            Statistics,\n        },\n        data () {\n            return {};\n        },\n\n        methods: {},\n    };\n</script>\n<style lang='postcss'>\n    @import \"@/css/mixins/media\";\n\n    .execute-dashboard {\n        display: flex;\n        flex: 1;\n        background: #fff;\n\n        .layout-left {\n            flex: 0 0 260px;\n            border-right: 1px solid #f0f1f5;\n\n            .dashboard-card-layout {\n                @media (--huge-viewports) {\n                    width: 400px;\n                }\n\n                @media (--large-viewports) {\n                    width: 300px;\n                }\n\n                @media (--medium-viewports) {\n                    width: 280px;\n                }\n\n                @media (--small-viewports) {\n                    width: 260px;\n                }\n\n                &:nth-child(n+2) {\n                    border-top: 1px solid #f0f1f5;\n                }\n            }\n        }\n\n        .layout-right {\n            flex: 1;\n        }\n    }\n</style>\n","<template>\n    <div class=\"dashboard-page\">\n        <div class=\"operation-bar\">\n            <div class=\"app-select\">\n                <bk-button theme=\"primary\" @click=\"handleScreenshot\">{{ '截图' }}</bk-button>\n            </div>\n            <div class=\"date-setting\">\n                <div class=\"date-info\">\n                    <p>{{ '数据初始时间' }}：{{ dateInfo.STATISTICS_DATA_START_DATE }}</p>\n                    <p>{{ '最近更新时间' }}：{{ dateInfo.STATISTICS_DATA_UPDATE_TIME }}</p>\n                </div>\n                <bk-date-picker\n                    class=\"date-picker\"\n                    :value=\"date\"\n                    :placeholder=\"'选择日期'\"\n                    :clearable=\"false\"\n                    @change=\"handleDateChange\" />\n            </div>\n        </div>\n        <scroll-faker\n            v-if=\"!isLoading\"\n            ref=\"scroll\"\n            class=\"dashboard-container\"\n            style=\"height: calc(100vh - 161px);\">\n            <div ref=\"content\" class=\"dashboard-wraper\">\n                <div class=\"section-block\">\n                    <div class=\"section-title\">{{ '业务类' }}</div>\n                    <div class=\"section-content\">\n                        <div class=\"content-left\">\n                            <app-dashboard :date=\"date\" />\n                        </div>\n                        <div class=\"content-right\">\n                            <platform-dashboard :date=\"date\" />\n                        </div>\n                    </div>\n                </div>\n                <lower-component>\n                    <div class=\"section-block\">\n                        <div class=\"section-title\">{{ '资源类' }}</div>\n                        <div class=\"section-content\">\n                            <div class=\"content-left\">\n                                <template-dashboard :date=\"date\" />\n                            </div>\n                            <div class=\"content-right\">\n                                <script-dashboard :date=\"date\" />\n                            </div>\n                        </div>\n                    </div>\n                </lower-component>\n                <lower-component>\n                    <div class=\"section-block\">\n                        <div class=\"section-content\">\n                            <div class=\"content-left\">\n                                <crontab-dashboard :date=\"date\" />\n                            </div>\n                            <div class=\"content-center\">\n                                <tag-dashboard :date=\"date\" />\n                            </div>\n                            <div class=\"content-right\">\n                                <account-dashboard :date=\"date\" />\n                            </div>\n                        </div>\n                    </div>\n                </lower-component>\n                <lower-component>\n                    <div class=\"section-block\">\n                        <div class=\"section-title\">{{ '执行类' }}</div>\n                        <div class=\"section-content\">\n                            <execute-dashboard :date=\"date\" />\n                        </div>\n                    </div>\n                </lower-component>\n            </div>\n        </scroll-faker>\n    </div>\n</template>\n<script>\n    import html2canvas from 'html2canvas';\n    import StatisticsService from '@service/statistics';\n    import { prettyDateFormat } from '@utils/assist';\n    import AppDashboard from './components/app';\n    import PlatformDashboard from './components/platform';\n    import TemplateDashboard from './components/template';\n    import ScriptDashboard from './components/script';\n    import CrontabDashboard from './components/crontab';\n    import TagDashboard from './components/tag';\n    import AccountDashboard from './components/account';\n    import ExecuteDashboard from './components/execute';\n\n    export default {\n        name: '',\n        components: {\n            AppDashboard,\n            PlatformDashboard,\n            TemplateDashboard,\n            ScriptDashboard,\n            CrontabDashboard,\n            TagDashboard,\n            AccountDashboard,\n            ExecuteDashboard,\n        },\n        data () {\n            return {\n                isLoading: true,\n                date: prettyDateFormat(Date.now()),\n                dateInfo: {},\n            };\n        },\n        computed: {\n            isSkeletonLoading () {\n                return this.isLoading;\n            },\n        },\n        created () {\n            this.fetchDateInfo();\n        },\n        methods: {\n            fetchDateInfo () {\n                this.isLoading = true;\n                StatisticsService.fetchDateInfo({}, {\n                    permission: 'page',\n                }).then((data) => {\n                    this.dateInfo = data;\n                })\n                    .finally(() => {\n                        this.isLoading = false;\n                    });\n            },\n            handleScreenshot () {\n                const {\n                    top,\n                    width,\n                    height,\n                } = this.$refs.content.getBoundingClientRect();\n                const {\n                    scrollTop,\n                } = this.$refs.scroll.getScroll();\n                const scrollY = scrollTop > 0 ? top : 0;\n                html2canvas(this.$refs.content, {\n                    width,\n                    height,\n                    windowHeight: height,\n                    scrollY,\n                    backgroundColor: '#f5f6fa',\n                }).then((canvas) => {\n                    const a = document.createElement('a');\n                    a.href = canvas.toDataURL('image/png');\n                    a.download = this.title;\n                    a.download = `${document.title}_${this.date}`;\n                    a.click();\n                });\n            },\n            handleDateChange (date) {\n                this.date = date;\n            },\n        },\n    };\n</script>\n<style lang='postcss' scoped>\n    .dashboard-page {\n        .operation-bar {\n            position: relative;\n            z-index: 1;\n            display: flex;\n            align-items: center;\n            height: 56px;\n            padding: 0 24px;\n            background: #fff;\n            box-shadow: 0 1px 2px 0 rgb(0 0 0 / 10%);\n\n            .app-select {\n                display: flex;\n                align-items: center;\n\n                .app-list {\n                    width: 360px;\n                    background: #f0f1f5;\n                    border: none;\n                }\n\n                .app-action-btn {\n                    display: flex;\n                    width: 30px;\n                    height: 30px;\n                    margin-left: 10px;\n                    font-size: 14px;\n                    color: #979ba5;\n                    cursor: pointer;\n                    background: #f0f1f5;\n                    border-radius: 2px;\n                    align-items: center;\n                    justify-content: center;\n                }\n            }\n\n            .date-setting {\n                display: flex;\n                align-items: center;\n                margin-left: auto;\n\n                .date-info {\n                    font-size: 12px;\n                    color: #c4c6cc;\n                    transform-origin: right center;\n                    transform: scale(0.85);\n                }\n\n                .date-picker {\n                    width: 180px;\n                    margin-left: 16px;\n\n                    .bk-date-picker-rel .bk-date-picker-editor {\n                        background: #f0f1f5;\n                        border-color: transparent;\n                    }\n                }\n            }\n        }\n\n        .dashboard-container {\n            .dashboard-wraper {\n                padding: 20px 24px;\n            }\n        }\n\n        .section-block {\n            display: flex;\n            flex-direction: column;\n\n            &:nth-child(n + 2) {\n                padding-top: 30px;\n            }\n\n            .section-title {\n                margin-bottom: 16px;\n                font-size: 16px;\n                line-height: 24px;\n                color: #313238;\n            }\n\n            .section-content {\n                display: flex;\n\n                .content-left,\n                .content-center,\n                .content-right {\n                    display: flex;\n                    background: #fff;\n                    box-shadow: 0 1px 2px 0 rgb(0 0 0 / 10%);\n\n                    & > * {\n                        flex: 1;\n                    }\n                }\n\n                .content-left {\n                    flex: 0 0 auto;\n                }\n\n                .content-center {\n                    flex: 1 0 auto;\n                    margin-left: 20px;\n\n                    & ~ .content-right {\n                        flex: 0;\n                    }\n                }\n\n                .content-right {\n                    flex: 1 1 auto;\n                    margin-left: 20px;\n                }\n            }\n        }\n    }\n</style>\n"],"names":[],"sourceRoot":""}